<ProjectMap>
  <File path="CMakeLists.txt">
    <Description>Main CMake build configuration file for the C++ project, setting up compilation and linking with SDL2, OpenGL, pugixml, and Windows-specific libraries for the flight simulation with asset management system.</Description>
    <Constructors />
    <Methods />
  </File>
  <File path="README.md">
    <Description>Project README file containing build instructions, toolchain setup, and project overview.</Description>
    <Constructors />
    <Methods />
  </File>
  <File path="toolchain-arm64.cmake">
    <Description>CMake toolchain file for cross-compilation to ARM64 Linux platform.</Description>
    <Constructors />
    <Methods />
  </File>
  <File path=".gitignore">
    <Description>Git ignore file for excluding build artifacts, temporary files, and IDE-specific files from version control.</Description>
    <Constructors />
    <Methods />
  </File>
  <File path="build.ps1">
    <Description>PowerShell script to build the project in debug or release mode based on -r flag.</Description>
    <Constructors />
    <Methods />
  </File>
  <File path="build.sh">
    <Description>Bash script to build the project in debug or release mode based on -r flag.</Description>
    <Constructors />
    <Methods />
  </File>
  <File path="run.ps1">
    <Description>PowerShell script to run the built executable in debug or release mode based on -r flag.</Description>
    <Constructors />
    <Methods />
  </File>
  <File path="run.sh">
    <Description>Bash script to run the built executable in debug or release mode based on -r flag.</Description>
    <Constructors />
    <Methods />
  </File>
  <Folder name="docs">
    <File path="docs/1.0-structure.md">
      <Description>Documentation outlining the proposed C++ project structure for vehicle simulation.</Description>
      <Constructors />
      <Methods />
    </File>
    <File path="docs/1.1-toolchain.md">
      <Description>Documentation on the minimal toolchain for C++ development and cross-compilation.</Description>
      <Constructors />
      <Methods />
    </File>
    <File path="docs/1.2-IoC.md">
      <Description>Documentation on Inversion of Control implementation in the project.</Description>
      <Constructors />
      <Methods />
    </File>
    <File path="docs/2.0-assets-and-packages.md">
      <Description>Documentation on assets, packages, and configuration for the C++ vehicle simulation.</Description>
      <Constructors />
      <Methods />
    </File>
    <File path="docs/2.1-assets-logic.md">
      <Description>Documentation on asset and package logic, including principles, structure, and integration.</Description>
      <Constructors />
      <Methods />
    </File>
    <File path="docs/prompt.md">
      <Description>Prompt file for generating the project code map.</Description>
      <Constructors />
      <Methods />
    </File>
  </Folder>
  <Folder name="src">
    <File path="src/main.cpp">
      <Description>Main application entry point. Initializes World, SimClock, EventBus, asset systems (AssetRegistry, AssetPackLoader), and registers all Systems including BootstrapSystem, WorldGenSystem, ConsoleSystem, VisualizationSystem, and AssetHotReloadSystem. Creates proper Windows window for visualization. Contains the main simulation loop with fixed timestep coordination and Windows message handling.</Description>
      <Constructors />
      <Methods>
        <Method name="main" returnType="int" params="" />
        <Method name="CreateSimulationWindow" returnType="HWND" params="" />
        <Method name="WindowProc" returnType="LRESULT" params="HWND hwnd, UINT uMsg, WPARAM wParam, LPARAM lParam" />
      </Methods>
    </File>
    <Folder name="core">
      <File path="src/core/IEvent.h">
        <Description>Base interface for all system events (e.g., BatteryLowEvent, CollisionEvent).</Description>
        <Constructors />
        <Methods>
          <Method name="getType" returnType="EventType" params="" />
        </Methods>
      </File>
      <File path="src/core/EventBus.h">
        <Description>Event-based communication (Observer pattern).</Description>
        <Constructors>
          <Constructor name="EventBus" params="" />
        </Constructors>
        <Methods>
          <Method name="subscribe" returnType="void" params="EventType type, std::function&lt;void(const IEvent&amp;)&gt; handler" />
          <Method name="publish" returnType="void" params="const IEvent&amp; event" />
        </Methods>
      </File>
      <File path="src/core/EventBus.cpp">
        <Description>Implementation of EventBus class.</Description>
        <Constructors />
        <Methods />
      </File>
      <File path="src/core/IComponent.h">
        <Description>Base interface for ECS components. Pure data structures.</Description>
        <Constructors />
        <Methods />
      </File>
      <File path="src/core/Entity.h">
        <Description>Represents a simulation object (drone, building, etc.).</Description>
        <Constructors>
          <Constructor name="Entity" params="unsigned int id" />
        </Constructors>
        <Methods>
          <Method name="addComponent" returnType="" params="" />
          <Method name="getComponent" returnType="" params="" />
        </Methods>
      </File>
      <File path="src/core/Entity.cpp">
        <Description>Implementation of Entity class.</Description>
        <Constructors />
        <Methods />
      </File>
      <File path="src/core/ISystem.h">
        <Description>Base interface for ECS systems.</Description>
        <Constructors />
        <Methods>
          <Method name="update" returnType="void" params="World&amp; world, float dt" />
        </Methods>
      </File>
      <File path="src/core/World.h">
        <Description>Manages all entities and systems. Orchestrates simulation loop.</Description>
        <Constructors>
          <Constructor name="World" params="EventBus&amp; eventBus" />
        </Constructors>
        <Methods>
          <Method name="addEntity" returnType="void" params="std::unique_ptr&lt;Entity&gt; entity" />
          <Method name="addSystem" returnType="void" params="std::unique_ptr&lt;ISystem&gt; system" />
          <Method name="update" returnType="void" params="float dt" />
        </Methods>
      </File>
      <File path="src/core/World.cpp">
        <Description>Implementation of World class.</Description>
        <Constructors />
        <Methods />
      </File>
      <File path="src/core/SimClock.h">
        <Description>Handles simulation time and fixed timestep logic.</Description>
        <Constructors>
          <Constructor name="SimClock" params="float fixedTimestep" />
        </Constructors>
        <Methods>
          <Method name="tick" returnType="void" params="float deltaTime" />
          <Method name="shouldStepPhysics" returnType="bool" params="" />
          <Method name="getFixedTimestep" returnType="float" params="" />
        </Methods>
      </File>
      <File path="src/core/SimClock.cpp">
        <Description>Implementation of SimClock class.</Description>
        <Constructors />
        <Methods />
      </File>
      <File path="src/core/AssetRegistry.h">
        <Description>Central registry for managing all asset types with numeric AssetId system. Updated to use Assets::AssetId type following "strings only at edges" principle. Supports fonts, textures, materials, mesh recipes, scene configurations, package management, and integrates with the asset pipeline architecture.</Description>
        <Constructors>
          <Constructor name="AssetRegistry" params="" />
        </Constructors>
        <Methods>
          <Method name="registerFont" returnType="void" params="Assets::AssetId id, std::unique_ptr&lt;FontAsset&gt; asset" />
          <Method name="registerTexture" returnType="void" params="Assets::AssetId id, std::unique_ptr&lt;TextureAsset&gt; asset" />
          <Method name="registerMaterial" returnType="void" params="Assets::AssetId id, std::unique_ptr&lt;MaterialAsset&gt; asset" />
          <Method name="registerMeshRecipe" returnType="void" params="Assets::AssetId id, std::unique_ptr&lt;MeshRecipeAsset&gt; asset" />
          <Method name="registerSceneConfig" returnType="void" params="Assets::AssetId id, const std::string&amp; sceneXml" />
          <Method name="getFont" returnType="const FontAsset*" params="Assets::AssetId id" />
          <Method name="getTexture" returnType="const TextureAsset*" params="Assets::AssetId id" />
          <Method name="getMaterial" returnType="const MaterialAsset*" params="Assets::AssetId id" />
          <Method name="getMeshRecipe" returnType="const MeshRecipeAsset*" params="Assets::AssetId id" />
          <Method name="getSceneConfig" returnType="const std::string*" params="Assets::AssetId id" />
          <Method name="setDefaultScene" returnType="void" params="Assets::AssetId id" />
          <Method name="getDefaultScene" returnType="const std::string*" params="" />
          <Method name="getDefaultSceneId" returnType="Assets::AssetId" params="" />
          <Method name="markPackageLoaded" returnType="void" params="const std::string&amp; packageName" />
          <Method name="getLoadedPackages" returnType="const std::vector&lt;std::string&gt;&amp;" params="" />
          <Method name="clear" returnType="void" params="" />
        </Methods>
      </File>
      <File path="src/core/AssetRegistry.cpp">
        <Description>Implementation of AssetRegistry class with support for asset storage, scene configuration management, package tracking, and numeric AssetId system integration.</Description>
        <Constructors />
        <Methods />
      </File>
      <File path="src/core/AssetIds.h">
        <Description>Auto-generated header file containing stable numeric asset ID constants. Generated by the asset pipeline codegen tool. Implements "strings only at edges" principle with compile-time AssetId constants under Assets namespace.</Description>
        <Constructors />
        <Methods />
      </File>
      <File path="src/core/AssetPackLoader.h">
        <Description>Loads and parses XML package files, extracting assets and configurations into the AssetRegistry. Supports parsing of assets, scene configurations, input configs, and overlay configs.</Description>
        <Constructors>
          <Constructor name="AssetPackLoader" params="AssetRegistry&amp; registry" />
        </Constructors>
        <Methods>
          <Method name="loadPackage" returnType="bool" params="const std::string&amp; packagePath" />
          <Method name="loadDeveloperPackage" returnType="bool" params="" />
          <Method name="parseAssets" returnType="bool" params="const std::string&amp; xmlContent, const std::string&amp; packageName" />
          <Method name="parseConfigurations" returnType="bool" params="const std::string&amp; xmlContent, const std::string&amp; packageName" />
          <Method name="parseFontAsset" returnType="std::unique_ptr&lt;FontAsset&gt;" params="const std::string&amp; xmlNode" />
        </Methods>
      </File>
      <File path="src/core/AssetPackLoader.cpp">
        <Description>Implementation of AssetPackLoader class with XML parsing for DeveloperPackage and scene configuration extraction.</Description>
        <Constructors />
        <Methods />
      </File>
    </Folder>
    <Folder name="components">
    </Folder>
    <Folder name="events">
      <File path="src/events/WorldGenEvents.h">
        <Description>Event definitions for world generation workflow including NoPackagesFoundEvent and DefaultWorldGeneratedEvent.</Description>
        <Constructors />
        <Methods />
      </File>
      <File path="src/events/InputEvents.h">
        <Description>Event definitions for input system including ConsoleToggleEvent and ConsoleVisibilityChangedEvent.</Description>
        <Constructors />
        <Methods />
      </File>
    </Folder>
    <Folder name="systems">
      <File path="src/systems/PhysicsSystem.h">
        <Description>ECS system responsible for physics simulation updates.</Description>
        <Constructors>
          <Constructor name="PhysicsSystem" params="EventBus&amp; eventBus, IAirDensityModel&amp; airDensityModel, IWindModel&amp; windModel, ICollisionResolver&amp; collisionResolver" />
        </Constructors>
        <Methods />
      </File>
      <File path="src/systems/PhysicsSystem.cpp">
        <Description>Implementation of PhysicsSystem class.</Description>
        <Constructors />
        <Methods />
      </File>
      <File path="src/systems/InputSystem.h">
        <Description>ECS system handling user input and translating to simulation events.</Description>
        <Constructors>
          <Constructor name="InputSystem" params="EventBus&amp; eventBus, IInputDevice&amp; inputDevice" />
        </Constructors>
        <Methods />
      </File>
      <File path="src/systems/InputSystem.cpp">
        <Description>Implementation of InputSystem class.</Description>
        <Constructors />
        <Methods />
      </File>
      <File path="src/systems/VehicleControlSystem.h">
        <Description>ECS system managing vehicle control logic and responses.</Description>
        <Constructors>
          <Constructor name="VehicleControlSystem" params="EventBus&amp; eventBus" />
        </Constructors>
        <Methods />
      </File>
      <File path="src/systems/VehicleControlSystem.cpp">
        <Description>Implementation of VehicleControlSystem class.</Description>
        <Constructors />
        <Methods />
      </File>
      <File path="src/systems/BootstrapSystem.h">
        <Description>One-shot system responsible for initial world construction and asset loading. Checks for available packages, loads them via AssetPackLoader, and triggers appropriate world generation events.</Description>
        <Constructors>
          <Constructor name="BootstrapSystem" params="EventBus&amp; eventBus, World&amp; world, AssetRegistry&amp; assetRegistry, AssetPackLoader&amp; assetLoader" />
        </Constructors>
        <Methods>
          <Method name="Init" returnType="void" params="" />
          <Method name="CheckForAssetPackages" returnType="bool" params="" />
          <Method name="LoadAvailablePackages" returnType="bool" params="" />
          <Method name="PostFrameUpdate" returnType="void" params="" />
        </Methods>
      </File>
      <File path="src/systems/BootstrapSystem.cpp">
        <Description>Implementation of BootstrapSystem class with package discovery, XML loading, and default scene fallback logic.</Description>
        <Constructors />
        <Methods />
      </File>
      <File path="src/systems/WorldGenSystem.h">
        <Description>ECS system for creating procedural worlds and default scenes. Supports both XML-driven world generation from scene configurations and fallback default world generation.</Description>
        <Constructors>
          <Constructor name="WorldGenSystem" params="EventBus&amp; eventBus, World&amp; world, AssetRegistry&amp; assetRegistry" />
        </Constructors>
        <Methods>
          <Method name="GenerateDefaultSphereWorld" returnType="void" params="" />
          <Method name="GenerateWorldFromXMLScene" returnType="void" params="const std::string&amp; sceneXml" />
          <Method name="OnNoPackagesFound" returnType="void" params="const NoPackagesFoundEvent&amp; event" />
          <Method name="OnDefaultWorldRequested" returnType="void" params="const DefaultWorldGeneratedEvent&amp; event" />
          <Method name="GenerateProceduralSphereMesh" returnType="AssetId" params="float radius, int segments" />
          <Method name="GetEarthMaterialId" returnType="AssetId" params="" />
          <Method name="GetAtmosphereMaterialId" returnType="AssetId" params="int layer" />
          <Method name="GetCloudMaterialId" returnType="AssetId" params="" />
        </Methods>
      </File>
      <File path="src/systems/WorldGenSystem.cpp">
        <Description>Implementation of WorldGenSystem class with XML scene parsing and Earth-like sphere world generation including atmosphere layers and clouds.</Description>
        <Constructors />
        <Methods />
      </File>
      <File path="src/systems/ConsoleSystem.h">
        <Description>ECS system managing developer console state, command processing, and visibility toggle via tilde key.</Description>
        <Constructors>
          <Constructor name="ConsoleSystem" params="EventBus&amp; eventBus" />
        </Constructors>
        <Methods>
          <Method name="IsVisible" returnType="bool" params="" />
          <Method name="OnConsoleToggle" returnType="void" params="const ConsoleToggleEvent&amp; event" />
          <Method name="ProcessCommand" returnType="void" params="const std::string&amp; command" />
        </Methods>
      </File>
      <File path="src/systems/ConsoleSystem.cpp">
        <Description>Implementation of ConsoleSystem class with console visibility management and event handling.</Description>
        <Constructors />
        <Methods />
      </File>
      <File path="src/systems/VisualizationSystem.h">
        <Description>ECS system responsible for rendering the 3D scene, HUD, debug overlays, and developer console UI. Supports Windows GDI rendering and entity visualization.</Description>
        <Constructors>
          <Constructor name="VisualizationSystem" params="EventBus&amp; eventBus, World&amp; world, HWND windowHandle" />
        </Constructors>
        <Methods>
          <Method name="RenderEntities" returnType="void" params="" />
          <Method name="RenderConsole" returnType="void" params="" />
          <Method name="RenderNoPackagesMessage" returnType="void" params="" />
          <Method name="DrawSphere" returnType="void" params="float x, float y, float radius, COLORREF color" />
          <Method name="DrawText" returnType="void" params="float x, float y, const std::string&amp; text, COLORREF color" />
          <Method name="OnNoPackagesFound" returnType="void" params="const NoPackagesFoundEvent&amp; event" />
          <Method name="OnConsoleVisibilityChanged" returnType="void" params="const ConsoleVisibilityChangedEvent&amp; event" />
        </Methods>
      </File>
      <File path="src/systems/VisualizationSystem.cpp">
        <Description>Implementation of VisualizationSystem class with Windows GDI rendering, entity visualization, and console UI rendering.</Description>
        <Constructors />
        <Methods />
      </File>
      <File path="src/systems/AssetHotReloadSystem.h">
        <Description>ECS system for development-time hot-reloading of asset packages. Watches XML files for changes and triggers reloading.</Description>
        <Constructors>
          <Constructor name="AssetHotReloadSystem" params="AssetRegistry&amp; assetRegistry, AssetPackLoader&amp; assetLoader" />
        </Constructors>
        <Methods>
          <Method name="watchPackage" returnType="void" params="const std::string&amp; packagePath" />
          <Method name="checkForChanges" returnType="void" params="" />
        </Methods>
      </File>
      <File path="src/systems/AssetHotReloadSystem.cpp">
        <Description>Implementation of AssetHotReloadSystem class with file watching and hot-reload capabilities.</Description>
        <Constructors />
        <Methods />
      </File>
    </Folder>
    <Folder name="physics">
      <File path="src/physics/IAirDensityModel.h">
        <Description>Interface for air density models used in physics calculations.</Description>
        <Constructors />
        <Methods>
          <Method name="getDensity" returnType="float" params="float altitude" />
        </Methods>
      </File>
      <File path="src/physics/ExponentialAirDensityModel.h">
        <Description>Concrete implementation of IAirDensityModel using exponential decay formula.</Description>
        <Constructors>
          <Constructor name="ExponentialAirDensityModel" params="float seaLevelDensity, float scaleHeight" />
        </Constructors>
        <Methods />
      </File>
      <File path="src/physics/ExponentialAirDensityModel.cpp">
        <Description>Implementation of ExponentialAirDensityModel class.</Description>
        <Constructors />
        <Methods />
      </File>
      <File path="src/physics/IWindModel.h">
        <Description>Interface for wind models used in physics simulations.</Description>
        <Constructors />
        <Methods>
          <Method name="getWindVector" returnType="Vector3" params="const Vector3&amp; position" />
        </Methods>
      </File>
      <File path="src/physics/PerlinWindModel.h">
        <Description>Concrete implementation of IWindModel using Perlin noise for wind simulation.</Description>
        <Constructors>
          <Constructor name="PerlinWindModel" params="float baseSpeed, float turbulenceScale, float heightScale, int seed" />
        </Constructors>
        <Methods />
      </File>
      <File path="src/physics/PerlinWindModel.cpp">
        <Description>Implementation of PerlinWindModel class.</Description>
        <Constructors />
        <Methods />
      </File>
      <File path="src/physics/ICollisionResolver.h">
        <Description>Interface for collision resolution strategies in physics.</Description>
        <Constructors />
        <Methods>
          <Method name="resolveCollision" returnType="void" params="Entity&amp; entityA, Entity&amp; entityB, const CollisionEvent&amp; event" />
        </Methods>
      </File>
      <File path="src/physics/ImpulseCollisionResolver.h">
        <Description>Concrete implementation of ICollisionResolver using impulse-based collision response.</Description>
        <Constructors>
          <Constructor name="ImpulseCollisionResolver" params="float restitution, float friction" />
        </Constructors>
        <Methods />
      </File>
      <File path="src/physics/ImpulseCollisionResolver.cpp">
        <Description>Implementation of ImpulseCollisionResolver class.</Description>
        <Constructors />
        <Methods />
      </File>
    </Folder>
    <Folder name="vehicles">
      <File path="src/vehicles/IVehicleBuilder.h">
        <Description>Interface for vehicle builders that construct entities from configuration files.</Description>
        <Constructors />
        <Methods>
          <Method name="build" returnType="std::unique_ptr&lt;Entity&gt;" params="const std::string&amp; configPath, EventBus&amp; eventBus" />
        </Methods>
      </File>
      <File path="src/vehicles/DroneBuilder.h">
        <Description>Concrete implementation of IVehicleBuilder for creating drone entities.</Description>
        <Constructors>
          <Constructor name="DroneBuilder" params="IXmlParser&amp; xmlParser" />
        </Constructors>
        <Methods />
      </File>
      <File path="src/vehicles/DroneBuilder.cpp">
        <Description>Implementation of DroneBuilder class.</Description>
        <Constructors />
        <Methods />
      </File>
    </Folder>
    <Folder name="utils">
      <File path="src/utils/IXmlParser.h">
        <Description>Interface for XML parsing utilities.</Description>
        <Constructors />
        <Methods>
          <Method name="parse" returnType="std::unique_ptr&lt;pugi::xml_document&gt;" params="const std::string&amp; filePath" />
        </Methods>
      </File>
      <File path="src/utils/PugiXmlParser.h">
        <Description>Concrete implementation of IXmlParser using pugixml library.</Description>
        <Constructors>
          <Constructor name="PugiXmlParser" params="" />
        </Constructors>
        <Methods />
      </File>
      <File path="src/utils/PugiXmlParser.cpp">
        <Description>Implementation of PugiXmlParser class.</Description>
        <Constructors />
        <Methods />
      </File>
    </Folder>
    <Folder name="platform">
      <File path="src/platform/IInputDevice.h">
        <Description>Interface for platform-specific input devices.</Description>
        <Constructors />
        <Methods>
          <Method name="isKeyPressed" returnType="bool" params="int keyCode" />
          <Method name="getMousePosition" returnType="std::pair&lt;int, int&gt;" params="" />
        </Methods>
      </File>
      <File path="src/platform/WinInputDevice.h">
        <Description>Concrete implementation of IInputDevice for Windows platform.</Description>
        <Constructors>
          <Constructor name="WinInputDevice" params="" />
        </Constructors>
        <Methods />
      </File>
      <File path="src/platform/WinInputDevice.cpp">
        <Description>Implementation of WinInputDevice class.</Description>
        <Constructors />
        <Methods />
      </File>
      <File path="src/platform/IXmlParser.h">
        <Description>Platform-independent interface for XML parsing operations. Abstraction layer for XML library dependencies, supporting file loading, schema validation, and XPath queries.</Description>
        <Constructors />
        <Methods>
          <Method name="loadFile" returnType="bool" params="const std::string&amp; filePath" />
          <Method name="validateAgainstSchema" returnType="bool" params="const std::string&amp; schemaPath" />
          <Method name="getLastError" returnType="std::string" params="" />
          <Method name="queryElements" returnType="std::vector&lt;std::string&gt;" params="const std::string&amp; xpath" />
          <Method name="getElementText" returnType="std::string" params="const std::string&amp; xpath" />
          <Method name="getElementAttribute" returnType="std::string" params="const std::string&amp; xpath, const std::string&amp; attributeName" />
        </Methods>
      </File>
      <File path="src/platform/PugiXmlParser.h">
        <Description>Concrete implementation of IXmlParser using pugixml library. Provides cross-platform XML parsing capabilities with schema validation and XPath support for the asset pipeline.</Description>
        <Constructors>
          <Constructor name="PugiXmlParser" params="" />
        </Constructors>
        <Methods />
      </File>
      <File path="src/platform/PugiXmlParser.cpp">
        <Description>Implementation of PugiXmlParser class with full XML processing capabilities for asset pipeline integration.</Description>
        <Constructors />
        <Methods />
      </File>
    </Folder>
    <Folder name="generators">
      <File path="src/generators/VoxelMeshGenerator.h">
        <Description>Procedural mesh generator for creating voxel-based geometry from parameters. Part of the asset pipeline for runtime mesh generation.</Description>
        <Constructors>
          <Constructor name="VoxelMeshGenerator" params="" />
        </Constructors>
        <Methods>
          <Method name="generateMesh" returnType="std::unique_ptr&lt;MeshAsset&gt;" params="const VoxelParameters&amp; params" />
          <Method name="setDimensions" returnType="void" params="int width, int height, int depth" />
          <Method name="setVoxelSize" returnType="void" params="float size" />
        </Methods>
      </File>
      <File path="src/generators/VoxelMeshGenerator.cpp">
        <Description>Implementation of VoxelMeshGenerator class for procedural voxel mesh creation.</Description>
        <Constructors />
        <Methods />
      </File>
      <File path="src/generators/ProceduralTextureGenerator.h">
        <Description>Procedural texture generator for creating textures from algorithmic parameters. Part of the asset pipeline for runtime texture generation.</Description>
        <Constructors>
          <Constructor name="ProceduralTextureGenerator" params="" />
        </Constructors>
        <Methods>
          <Method name="generateTexture" returnType="std::unique_ptr&lt;TextureAsset&gt;" params="const TextureParameters&amp; params" />
          <Method name="setResolution" returnType="void" params="int width, int height" />
          <Method name="setPattern" returnType="void" params="const std::string&amp; patternType" />
        </Methods>
      </File>
      <File path="src/generators/ProceduralTextureGenerator.cpp">
        <Description>Implementation of ProceduralTextureGenerator class for algorithmic texture creation.</Description>
        <Constructors />
        <Methods />
      </File>
      <File path="src/generators/BasicShaderGenerator.h">
        <Description>Procedural shader generator for creating GLSL shaders from parameters. Generates vertex and fragment shaders based on material requirements and lighting models.</Description>
        <Constructors>
          <Constructor name="BasicShaderGenerator" params="" />
        </Constructors>
        <Methods>
          <Method name="generateVertexShader" returnType="std::string" params="const ShaderParameters&amp; params" />
          <Method name="generateFragmentShader" returnType="std::string" params="const ShaderParameters&amp; params" />
          <Method name="generateFullShader" returnType="std::pair&lt;std::string, std::string&gt;" params="const ShaderParameters&amp; params" />
        </Methods>
      </File>
      <File path="src/generators/BasicShaderGenerator.cpp">
        <Description>Implementation of BasicShaderGenerator class for procedural GLSL shader generation with PBR support.</Description>
        <Constructors />
        <Methods />
      </File>
    </Folder>
  </Folder>
  <Folder name="assets">
    <Folder name="schemas">
      <Folder name="entities">
        <File path="assets/schemas/entities/vehicle.xsd">
          <Description>XSD schema definition for vehicle entity assets. Validates structure of vehicle XML files including components, physics properties, and visual elements.</Description>
        </File>
        <File path="assets/schemas/entities/aircraft.xsd">
          <Description>XSD schema definition for aircraft entity assets. Extends vehicle schema with aerodynamic properties and flight control surfaces.</Description>
        </File>
      </Folder>
      <Folder name="scenes">
        <File path="assets/schemas/scenes/scene.xsd">
          <Description>XSD schema definition for scene assets. Validates scene composition including entities, lighting, environment settings, and spawn points.</Description>
        </File>
        <File path="assets/schemas/scenes/environment.xsd">
          <Description>XSD schema definition for environment assets. Validates terrain, weather, atmospheric conditions, and procedural generation parameters.</Description>
        </File>
      </Folder>
    </Folder>
    <Folder name="runtime">
      <Folder name="data">
        <File path="assets/runtime/data/packages.list">
          <Description>Runtime package manifest listing all available asset packages with their binary pack locations and loading priorities.</Description>
        </File>
      </Folder>
    </Folder>
    <Folder name="build_tools">
      <Folder name="asset_compiler">
        <File path="assets/build_tools/asset_compiler/main.cpp">
          <Description>Main entry point for the asset compiler tool. Processes XML asset packages into optimized binary packs for runtime loading with schema validation and dependency resolution.</Description>
          <Methods>
            <Method name="main" returnType="int" params="int argc, char* argv[]" />
            <Method name="processPackage" returnType="bool" params="const std::string&amp; packagePath, const std::string&amp; outputPath" />
            <Method name="validateAssetSchemas" returnType="bool" params="const std::string&amp; packagePath" />
          </Methods>
        </File>
        <File path="assets/build_tools/asset_compiler/CMakeLists.txt">
          <Description>CMake configuration for asset compiler tool build system.</Description>
        </File>
      </Folder>
      <Folder name="codegen">
        <File path="assets/build_tools/codegen/main.cpp">
          <Description>Main entry point for the code generation tool. Scans asset packages to generate stable numeric asset IDs and C++ header files for compile-time asset access.</Description>
          <Methods>
            <Method name="main" returnType="int" params="int argc, char* argv[]" />
            <Method name="scanAssetPackages" returnType="std::vector&lt;AssetInfo&gt;" params="const std::string&amp; assetsPath" />
            <Method name="generateAssetIds" returnType="bool" params="const std::vector&lt;AssetInfo&gt;&amp; assets, const std::string&amp; outputPath" />
            <Method name="generateAssetIdHeader" returnType="bool" params="const std::vector&lt;AssetInfo&gt;&amp; assets, const std::string&amp; headerPath" />
          </Methods>
        </File>
        <File path="assets/build_tools/codegen/CMakeLists.txt">
          <Description>CMake configuration for code generation tool build system.</Description>
        </File>
      </Folder>
    </Folder>
    <Folder name="packages">
      <Folder name="city_01">
        <File path="assets/packages/city_01/package.xml">
          <Description>XML file declaring assets and dependencies for the city_01 package.</Description>
          <Constructors />
          <Methods />
        </File>
        <Folder name="meshes">
        </Folder>
        <Folder name="textures">
        </Folder>
        <Folder name="params">
          <File path="assets/packages/city_01/params/building_city_block.xml">
            <Description>XML file defining parametric parameters for a city building block.</Description>
            <Constructors />
            <Methods />
          </File>
        </Folder>
        <Folder name="code">
        </Folder>
      </Folder>
      <Folder name="DeveloperPackage">
        <File path="assets/packages/DeveloperPackage/package.xml">
          <Description>Core developer debug assets and default scene XML configuration. Defines console UI assets, Earth-like sphere world materials, procedural mesh recipes, scene configuration, input bindings, and overlay UI for the default development environment.</Description>
          <Constructors />
          <Methods />
        </File>
        <Folder name="console">
        </Folder>
        <Folder name="textures">
        </Folder>
      </Folder>
    </Folder>
    <Folder name="build_tools">
      <Folder name="asset_compiler">
        <File path="assets/build_tools/asset_compiler/CMakeLists.txt">
          <Description>CMake build configuration for the asset compiler CLI tool.</Description>
          <Constructors />
          <Methods />
        </File>
        <File path="assets/build_tools/asset_compiler/main.cpp">
          <Description>Main entry point for the asset compiler tool that processes XML to binary packs.</Description>
          <Constructors />
          <Methods>
            <Method name="main" returnType="int" params="int argc, char* argv[]" />
          </Methods>
        </File>
      </Folder>
      <Folder name="codegen">
        <File path="assets/build_tools/codegen/CMakeLists.txt">
          <Description>CMake build configuration for the codegen tool.</Description>
          <Constructors />
          <Methods />
        </File>
        <File path="assets/build_tools/codegen/main.cpp">
          <Description>Main entry point for the codegen tool that generates asset ID headers.</Description>
          <Constructors />
          <Methods>
            <Method name="main" returnType="int" params="int argc, char* argv[]" />
          </Methods>
        </File>
      </Folder>
    </Folder>
    <Folder name="runtime">
      <Folder name="data">
        <Folder name="packs">
        </Folder>
        <Folder name="plugins">
        </Folder>
        <Folder name="cache">
          <Folder name="shader_cache">
          </Folder>
          <Folder name="geom_cache">
          </Folder>
          <Folder name="thumb_index">
          </Folder>
        </Folder>
      </Folder>
    </Folder>
  </Folder>
  <Folder name="packages">
    <Folder name="core">
      <File path="packages/core/CMakeLists.txt">
        <Description>CMake build configuration for the core package.</Description>
        <Constructors />
        <Methods />
      </File>
      <Folder name="src">
      </Folder>
      <Folder name="include">
      </Folder>
    </Folder>
    <Folder name="physics">
      <File path="packages/physics/CMakeLists.txt">
        <Description>CMake build configuration for the physics package.</Description>
        <Constructors />
        <Methods />
      </File>
      <Folder name="src">
      </Folder>
      <Folder name="include">
      </Folder>
    </Folder>
    <Folder name="vehicles">
      <Folder name="drone-x1">
        <File path="packages/vehicles/drone-x1/CMakeLists.txt">
          <Description>CMake build configuration for the drone-x1 vehicle package.</Description>
          <Constructors />
          <Methods />
        </File>
        <Folder name="assets">
          <Folder name="models">
          </Folder>
          <Folder name="textures">
          </Folder>
        </Folder>
        <Folder name="config">
          <File path="packages/vehicles/drone-x1/config/drone_x1_components.xml">
            <Description>XML configuration file defining components for the drone-x1 vehicle.</Description>
            <Constructors />
            <Methods />
          </File>
        </Folder>
        <Folder name="src">
        </Folder>
        <Folder name="include">
        </Folder>
      </Folder>
      <Folder name="fixed-wing-alpha">
        <File path="packages/vehicles/fixed-wing-alpha/CMakeLists.txt">
          <Description>CMake build configuration for the fixed-wing-alpha vehicle package.</Description>
          <Constructors />
          <Methods />
        </File>
        <Folder name="assets">
          <Folder name="models">
          </Folder>
        </Folder>
        <Folder name="config">
        </Folder>
        <Folder name="src">
        </Folder>
        <Folder name="include">
        </Folder>
      </Folder>
    </Folder>
    <Folder name="environment">
      <File path="packages/environment/CMakeLists.txt">
        <Description>CMake build configuration for the environment package.</Description>
        <Constructors />
        <Methods />
      </File>
      <Folder name="world_gen">
        <File path="packages/environment/world_gen/CMakeLists.txt">
          <Description>CMake build configuration for the world generation package.</Description>
          <Constructors />
          <Methods />
        </File>
        <Folder name="scenes">
          <File path="packages/environment/world_gen/scenes/city_day_scene.xml">
            <Description>XML scene definition for a city day environment with procedural generation parameters.</Description>
            <Constructors />
            <Methods />
          </File>
        </Folder>
        <Folder name="furniture">
          <File path="packages/environment/world_gen/furniture/office_table_basic.xml">
            <Description>XML definition for a parametric office table furniture asset.</Description>
            <Constructors />
            <Methods />
          </File>
        </Folder>
        <Folder name="textures">
        </Folder>
      </Folder>
      <Folder name="assets">
        <Folder name="models">
        </Folder>
        <Folder name="textures">
        </Folder>
        <Folder name="sounds">
        </Folder>
        <Folder name="shaders">
        </Folder>
      </Folder>
    </Folder>
    <Folder name="ui">
      <File path="packages/ui/CMakeLists.txt">
        <Description>CMake build configuration for the UI package.</Description>
        <Constructors />
        <Methods />
      </File>
      <Folder name="assets">
        <Folder name="sounds">
        </Folder>
        <Folder name="images">
        </Folder>
      </Folder>
      <Folder name="config">
      </Folder>
      <Folder name="src">
      </Folder>
      <Folder name="include">
      </Folder>
    </Folder>
  </Folder>
  <Folder name="configs">
  </Folder>
</ProjectMap>
