<ProjectMap>
  <File path="CMakeLists.txt">
    <Description    <File path="docs/2.1-assets-logic.md">
      <Description>Documentation on asset and package logic, including principles, structure, and integration.</Description>
      <Constructors />
      <Methods />
    </File>
    <File path="docs/2.3-default-assets.md">
      <Description>Documentation on default assets, console, and Earth-like sphere world scene for the simulation.</Description>
      <Constructors />
      <Methods />
    </File>
    <File path="docs/2.3.1-default-asset-impl.md">
      <Description>Implementation details for default assets, including console system and sphere world generation.</Description>
      <Constructors />
      <Methods />
    </File>
    <File path="docs/prompt.md">
      <Description>Prompt file for generating the project code map.</Description>
      <Constructors />
      <Methods />
    </File>ld configuration file for the C++ project, setting up compilation and linking with SDL2 and OpenGL.</Description>
    <Constructors />
    <Methods />
  </File>
  <File path="README.md">
    <Description>Project README file containing build instructions, toolchain setup, and project overview.</Description>
    <Constructors />
    <Methods />
  </File>
  <File path="toolchain-arm64.cmake">
    <Description>CMake toolchain file for cross-compilation to ARM64 Linux platform.</Description>
    <Constructors />
    <Methods />
  </File>
  <File path=".gitignore">
    <Description>Git ignore file for excluding build artifacts, temporary files, and IDE-specific files from version control.</Description>
    <Constructors />
    <Methods />
  </File>
  <File path="build.ps1">
    <Description>PowerShell script to build the project in debug or release mode based on -r flag.</Description>
    <Constructors />
    <Methods />
  </File>
  <File path="build.sh">
    <Description>Bash script to build the project in debug or release mode based on -r flag.</Description>
    <Constructors />
    <Methods />
  </File>
  <File path="run.ps1">
    <Description>PowerShell script to run the built executable in debug or release mode based on -r flag.</Description>
    <Constructors />
    <Methods />
  </File>
  <File path="run.sh">
    <Description>Bash script to run the built executable in debug or release mode based on -r flag.</Description>
    <Constructors />
    <Methods />
  </File>
  <Folder name="docs">
    <File path="docs/1.0-structure.md">
      <Description>Documentation outlining the proposed C++ project structure for vehicle simulation.</Description>
      <Constructors />
      <Methods />
    </File>
    <File path="docs/1.1-toolchain.md">
      <Description>Documentation on the minimal toolchain for C++ development and cross-compilation.</Description>
      <Constructors />
      <Methods />
    </File>
    <File path="docs/1.2-IoC.md">
      <Description>Documentation on Inversion of Control implementation in the project.</Description>
      <Constructors />
      <Methods />
    </File>
    <File path="docs/2.0-assets-and-packages.md">
      <Description>Documentation on assets, packages, and configuration for the C++ vehicle simulation.</Description>
      <Constructors />
      <Methods />
    </File>
    <File path="docs/2.1-assets-logic.cd">
      <Description>Documentation on asset and package logic, including principles, structure, and integration.</Description>
      <Constructors />
      <Methods />
    </File>
    <File path="docs/prompt.md">
      <Description>Prompt file for generating the project code map.</Description>
      <Constructors />
      <Methods />
    </File>
  </Folder>
  <Folder name="src">
    <File path="src/main.cpp">
      <Description>Main application entry point. Initializes World, SimClock, EventBus, and registers all Systems. Creates initial entities (e.g. a drone via DroneBuilder). Contains the main simulation loop with fixed timestep coordination.</Description>
      <Constructors />
      <Methods>
        <Method name="main" returnType="int" params="" />
      </Methods>
    </File>
    <Folder name="core">
      <File path="src/core/IEvent.h">
        <Description>Base interface for all system events (e.g., BatteryLowEvent, CollisionEvent).</Description>
        <Constructors />
        <Methods>
          <Method name="getType" returnType="EventType" params="" />
        </Methods>
      </File>
      <File path="src/core/EventBus.h">
        <Description>Event-based communication (Observer pattern).</Description>
        <Constructors>
          <Constructor name="EventBus" params="" />
        </Constructors>
        <Methods>
          <Method name="subscribe" returnType="void" params="EventType type, std::function&lt;void(const IEvent&amp;)&gt; handler" />
          <Method name="publish" returnType="void" params="const IEvent&amp; event" />
        </Methods>
      </File>
      <File path="src/core/EventBus.cpp">
        <Description>Implementation of EventBus class.</Description>
        <Constructors />
        <Methods />
      </File>
      <File path="src/core/IComponent.h">
        <Description>Base interface for ECS components. Pure data structures.</Description>
        <Constructors />
        <Methods />
      </File>
      <File path="src/core/Entity.h">
        <Description>Represents a simulation object (drone, building, etc.).</Description>
        <Constructors>
          <Constructor name="Entity" params="unsigned int id" />
        </Constructors>
        <Methods>
          <Method name="addComponent" returnType="" params="" />
          <Method name="getComponent" returnType="" params="" />
        </Methods>
      </File>
      <File path="src/core/Entity.cpp">
        <Description>Implementation of Entity class.</Description>
        <Constructors />
        <Methods />
      </File>
      <File path="src/core/ISystem.h">
        <Description>Base interface for ECS systems.</Description>
        <Constructors />
        <Methods>
          <Method name="update" returnType="void" params="World&amp; world, float dt" />
        </Methods>
      </File>
      <File path="src/core/World.h">
        <Description>Manages all entities and systems. Orchestrates simulation loop.</Description>
        <Constructors>
          <Constructor name="World" params="EventBus&amp; eventBus" />
        </Constructors>
        <Methods>
          <Method name="addEntity" returnType="void" params="std::unique_ptr&lt;Entity&gt; entity" />
          <Method name="addSystem" returnType="void" params="std::unique_ptr&lt;ISystem&gt; system" />
          <Method name="update" returnType="void" params="float dt" />
        </Methods>
      </File>
      <File path="src/core/World.cpp">
        <Description>Implementation of World class.</Description>
        <Constructors />
        <Methods />
      </File>
      <File path="src/core/SimClock.h">
        <Description>Handles simulation time and fixed timestep logic.</Description>
        <Constructors>
          <Constructor name="SimClock" params="float fixedTimestep" />
        </Constructors>
        <Methods>
          <Method name="tick" returnType="void" params="float deltaTime" />
          <Method name="shouldStepPhysics" returnType="bool" params="" />
          <Method name="getFixedTimestep" returnType="float" params="" />
        </Methods>
      </File>
      <File path="src/core/SimClock.cpp">
        <Description>Implementation of SimClock class.</Description>
        <Constructors />
        <Methods />
      </File>
    </Folder>
    <Folder name="components">
    </Folder>
    <Folder name="systems">
      <File path="src/systems/PhysicsSystem.h">
        <Description>ECS system responsible for physics simulation updates.</Description>
        <Constructors>
          <Constructor name="PhysicsSystem" params="EventBus&amp; eventBus, IAirDensityModel&amp; airDensityModel, IWindModel&amp; windModel, ICollisionResolver&amp; collisionResolver" />
        </Constructors>
        <Methods />
      </File>
      <File path="src/systems/PhysicsSystem.cpp">
        <Description>Implementation of PhysicsSystem class.</Description>
        <Constructors />
        <Methods />
      </File>
      <File path="src/systems/InputSystem.h">
        <Description>ECS system handling user input and translating to simulation events.</Description>
        <Constructors>
          <Constructor name="InputSystem" params="EventBus&amp; eventBus, IInputDevice&amp; inputDevice" />
        </Constructors>
        <Methods />
      </File>
      <File path="src/systems/InputSystem.cpp">
        <Description>Implementation of InputSystem class.</Description>
        <Constructors />
        <Methods />
      </File>
      <File path="src/systems/VehicleControlSystem.h">
        <Description>ECS system managing vehicle control logic and responses.</Description>
        <Constructors>
          <Constructor name="VehicleControlSystem" params="EventBus&amp; eventBus" />
        </Constructors>
        <Methods />
      </File>
      <File path="src/systems/VehicleControlSystem.cpp">
        <Description>Implementation of VehicleControlSystem class.</Description>
        <Constructors />
        <Methods />
      </File>
    </Folder>
    <Folder name="physics">
      <File path="src/physics/IAirDensityModel.h">
        <Description>Interface for air density models used in physics calculations.</Description>
        <Constructors />
        <Methods>
          <Method name="getDensity" returnType="float" params="float altitude" />
        </Methods>
      </File>
      <File path="src/physics/ExponentialAirDensityModel.h">
        <Description>Concrete implementation of IAirDensityModel using exponential decay formula.</Description>
        <Constructors>
          <Constructor name="ExponentialAirDensityModel" params="float seaLevelDensity, float scaleHeight" />
        </Constructors>
        <Methods />
      </File>
      <File path="src/physics/ExponentialAirDensityModel.cpp">
        <Description>Implementation of ExponentialAirDensityModel class.</Description>
        <Constructors />
        <Methods />
      </File>
      <File path="src/physics/IWindModel.h">
        <Description>Interface for wind models used in physics simulations.</Description>
        <Constructors />
        <Methods>
          <Method name="getWindVector" returnType="Vector3" params="const Vector3&amp; position" />
        </Methods>
      </File>
      <File path="src/physics/PerlinWindModel.h">
        <Description>Concrete implementation of IWindModel using Perlin noise for wind simulation.</Description>
        <Constructors>
          <Constructor name="PerlinWindModel" params="float baseSpeed, float turbulenceScale, float heightScale, int seed" />
        </Constructors>
        <Methods />
      </File>
      <File path="src/physics/PerlinWindModel.cpp">
        <Description>Implementation of PerlinWindModel class.</Description>
        <Constructors />
        <Methods />
      </File>
      <File path="src/physics/ICollisionResolver.h">
        <Description>Interface for collision resolution strategies in physics.</Description>
        <Constructors />
        <Methods>
          <Method name="resolveCollision" returnType="void" params="Entity&amp; entityA, Entity&amp; entityB, const CollisionEvent&amp; event" />
        </Methods>
      </File>
      <File path="src/physics/ImpulseCollisionResolver.h">
        <Description>Concrete implementation of ICollisionResolver using impulse-based collision response.</Description>
        <Constructors>
          <Constructor name="ImpulseCollisionResolver" params="float restitution, float friction" />
        </Constructors>
        <Methods />
      </File>
      <File path="src/physics/ImpulseCollisionResolver.cpp">
        <Description>Implementation of ImpulseCollisionResolver class.</Description>
        <Constructors />
        <Methods />
      </File>
    </Folder>
    <Folder name="vehicles">
      <File path="src/vehicles/IVehicleBuilder.h">
        <Description>Interface for vehicle builders that construct entities from configuration files.</Description>
        <Constructors />
        <Methods>
          <Method name="build" returnType="std::unique_ptr&lt;Entity&gt;" params="const std::string&amp; configPath, EventBus&amp; eventBus" />
        </Methods>
      </File>
      <File path="src/vehicles/DroneBuilder.h">
        <Description>Concrete implementation of IVehicleBuilder for creating drone entities.</Description>
        <Constructors>
          <Constructor name="DroneBuilder" params="IXmlParser&amp; xmlParser" />
        </Constructors>
        <Methods />
      </File>
      <File path="src/vehicles/DroneBuilder.cpp">
        <Description>Implementation of DroneBuilder class.</Description>
        <Constructors />
        <Methods />
      </File>
    </Folder>
    <Folder name="utils">
      <File path="src/utils/IXmlParser.h">
        <Description>Interface for XML parsing utilities.</Description>
        <Constructors />
        <Methods>
          <Method name="parse" returnType="std::unique_ptr&lt;pugi::xml_document&gt;" params="const std::string&amp; filePath" />
        </Methods>
      </File>
      <File path="src/utils/PugiXmlParser.h">
        <Description>Concrete implementation of IXmlParser using pugixml library.</Description>
        <Constructors>
          <Constructor name="PugiXmlParser" params="" />
        </Constructors>
        <Methods />
      </File>
      <File path="src/utils/PugiXmlParser.cpp">
        <Description>Implementation of PugiXmlParser class.</Description>
        <Constructors />
        <Methods />
      </File>
    </Folder>
    <Folder name="platform">
      <File path="src/platform/IInputDevice.h">
        <Description>Interface for platform-specific input devices.</Description>
        <Constructors />
        <Methods>
          <Method name="isKeyPressed" returnType="bool" params="int keyCode" />
          <Method name="getMousePosition" returnType="std::pair&lt;int, int&gt;" params="" />
        </Methods>
      </File>
      <File path="src/platform/WinInputDevice.h">
        <Description>Concrete implementation of IInputDevice for Windows platform.</Description>
        <Constructors>
          <Constructor name="WinInputDevice" params="" />
        </Constructors>
        <Methods />
      </File>
      <File path="src/platform/WinInputDevice.cpp">
        <Description>Implementation of WinInputDevice class.</Description>
        <Constructors />
        <Methods />
      </File>
    </Folder>
  </Folder>
  <Folder name="assets">
    <Folder name="packages">
      <Folder name="city_01">
        <File path="assets/packages/city_01/package.xml">
          <Description>XML file declaring assets and dependencies for the city_01 package.</Description>
          <Constructors />
          <Methods />
        </File>
        <Folder name="meshes">
        </Folder>
        <Folder name="textures">
        </Folder>
        <Folder name="params">
          <File path="assets/packages/city_01/params/building_city_block.xml">
            <Description>XML file defining parametric parameters for a city building block.</Description>
            <Constructors />
            <Methods />
          </File>
        </Folder>
        <Folder name="code">
        </Folder>
      </Folder>
    </Folder>
    <Folder name="build_tools">
      <Folder name="asset_compiler">
        <File path="assets/build_tools/asset_compiler/CMakeLists.txt">
          <Description>CMake build configuration for the asset compiler CLI tool.</Description>
          <Constructors />
          <Methods />
        </File>
        <File path="assets/build_tools/asset_compiler/main.cpp">
          <Description>Main entry point for the asset compiler tool that processes XML to binary packs.</Description>
          <Constructors />
          <Methods>
            <Method name="main" returnType="int" params="int argc, char* argv[]" />
          </Methods>
        </File>
      </Folder>
      <Folder name="codegen">
        <File path="assets/build_tools/codegen/CMakeLists.txt">
          <Description>CMake build configuration for the codegen tool.</Description>
          <Constructors />
          <Methods />
        </File>
        <File path="assets/build_tools/codegen/main.cpp">
          <Description>Main entry point for the codegen tool that generates asset ID headers.</Description>
          <Constructors />
          <Methods>
            <Method name="main" returnType="int" params="int argc, char* argv[]" />
          </Methods>
        </File>
      </Folder>
    </Folder>
    <Folder name="runtime">
      <Folder name="data">
        <Folder name="packs">
        </Folder>
        <Folder name="plugins">
        </Folder>
        <Folder name="cache">
          <Folder name="shader_cache">
          </Folder>
          <Folder name="geom_cache">
          </Folder>
          <Folder name="thumb_index">
          </Folder>
        </Folder>
      </Folder>
    </Folder>
  </Folder>
  <Folder name="packages">
    <Folder name="core">
      <File path="packages/core/CMakeLists.txt">
        <Description>CMake build configuration for the core package.</Description>
        <Constructors />
        <Methods />
      </File>
      <Folder name="src">
      </Folder>
      <Folder name="include">
      </Folder>
    </Folder>
    <Folder name="physics">
      <File path="packages/physics/CMakeLists.txt">
        <Description>CMake build configuration for the physics package.</Description>
        <Constructors />
        <Methods />
      </File>
      <Folder name="src">
      </Folder>
      <Folder name="include">
      </Folder>
    </Folder>
    <Folder name="vehicles">
      <Folder name="drone-x1">
        <File path="packages/vehicles/drone-x1/CMakeLists.txt">
          <Description>CMake build configuration for the drone-x1 vehicle package.</Description>
          <Constructors />
          <Methods />
        </File>
        <Folder name="assets">
          <Folder name="models">
          </Folder>
          <Folder name="textures">
          </Folder>
        </Folder>
        <Folder name="config">
          <File path="packages/vehicles/drone-x1/config/drone_x1_components.xml">
            <Description>XML configuration file defining components for the drone-x1 vehicle.</Description>
            <Constructors />
            <Methods />
          </File>
        </Folder>
        <Folder name="src">
        </Folder>
        <Folder name="include">
        </Folder>
      </Folder>
      <Folder name="fixed-wing-alpha">
        <File path="packages/vehicles/fixed-wing-alpha/CMakeLists.txt">
          <Description>CMake build configuration for the fixed-wing-alpha vehicle package.</Description>
          <Constructors />
          <Methods />
        </File>
        <Folder name="assets">
          <Folder name="models">
          </Folder>
        </Folder>
        <Folder name="config">
        </Folder>
        <Folder name="src">
        </Folder>
        <Folder name="include">
        </Folder>
      </Folder>
    </Folder>
    <Folder name="environment">
      <File path="packages/environment/CMakeLists.txt">
        <Description>CMake build configuration for the environment package.</Description>
        <Constructors />
        <Methods />
      </File>
      <Folder name="world_gen">
        <File path="packages/environment/world_gen/CMakeLists.txt">
          <Description>CMake build configuration for the world generation package.</Description>
          <Constructors />
          <Methods />
        </File>
        <Folder name="scenes">
          <File path="packages/environment/world_gen/scenes/city_day_scene.xml">
            <Description>XML scene definition for a city day environment with procedural generation parameters.</Description>
            <Constructors />
            <Methods />
          </File>
        </Folder>
        <Folder name="furniture">
          <File path="packages/environment/world_gen/furniture/office_table_basic.xml">
            <Description>XML definition for a parametric office table furniture asset.</Description>
            <Constructors />
            <Methods />
          </File>
        </Folder>
        <Folder name="textures">
        </Folder>
      </Folder>
      <Folder name="assets">
        <Folder name="models">
        </Folder>
        <Folder name="textures">
        </Folder>
        <Folder name="sounds">
        </Folder>
        <Folder name="shaders">
        </Folder>
      </Folder>
    </Folder>
    <Folder name="ui">
      <File path="packages/ui/CMakeLists.txt">
        <Description>CMake build configuration for the UI package.</Description>
        <Constructors />
        <Methods />
      </File>
      <Folder name="assets">
        <Folder name="sounds">
        </Folder>
        <Folder name="images">
        </Folder>
      </Folder>
      <Folder name="config">
      </Folder>
      <Folder name="src">
      </Folder>
      <Folder name="include">
      </Folder>
    </Folder>
  </Folder>
  <Folder name="configs">
  </Folder>
</ProjectMap>
