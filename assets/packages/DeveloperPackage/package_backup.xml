<?xml version="1.0" encoding="UTF-8"?>
<!--
    Developer Package XML Configuration â€” MINIMAL
    Simple red cube on black background for testing
-->
<package name="DeveloperPackage" version="1.0" description="Minimal red cube scene for testing.">

    <!--
        Dependencies:
        Basic engine systems and shader library assumed to be built into runtime.
    -->
    <dependencies>
        <!-- No additional deps; assumes core shader library + ECS components exist. -->
    </dependencies>

    <!--
        Asset Declarations:
        Simplified naming scheme using voxel cubes as base primitive.
        All shapes are constructed from voxel building blocks.
    -->
    <assets>
        <!-- ==== CONSOLE ASSETS (unchanged) =================================================== -->
        <asset type="font" id="ConsoleFont">
            <path>console/console_font.ttf</path>
            <properties size="16" antialiasing="true" />
        </asset>
        <asset type="texture" id="ConsoleBackgroundTexture">
            <path>console/console_background.png</path>
            <properties format="PNG" mipmaps="false" filter="linear" />
        </asset>

        <!-- ==== DEFAULT SPHERE SCENE ASSETS (unchanged) ================================== -->
        <asset type="material" id="EarthSurfaceMaterial">
            <shader_id>BasicShader</shader_id>
            <params>
                <albedo_texture>textures/earth_albedo.ktx2</albedo_texture>
                <normal_map>textures/earth_normal.ktx2</normal_map>
                <roughness>0.8</roughness>
                <metallic>0.0</metallic>
            </params>
        </asset>
        <asset type="material" id="AtmosphereLayer1Material">
            <shader_id>BasicShader</shader_id>
            <params>
                <albedo_color>0.6 0.8 1.0 0.3</albedo_color>
                <transparency>true</transparency>
            </params>
        </asset>
        <asset type="material" id="AtmosphereLayer2Material">
            <shader_id>BasicShader</shader_id>
            <params>
                <albedo_color>0.4 0.6 0.9 0.2</albedo_color>
                <transparency>true</transparency>
            </params>
        </asset>
        <asset type="material" id="CloudLayerMaterial">
            <shader_id>BasicShader</shader_id>
            <params>
                <albedo_color>1.0 1.0 1.0 0.8</albedo_color>
                <transparency>true</transparency>
            </params>
        </asset>
        <asset type="mesh_recipe" id="SphereRecipe">
            <generator>VoxelGenerator</generator>
            <params>
                <type>sphere</type>
                <subdivisions>3</subdivisions>
                <radius>1.0</radius>
            </params>
        </asset>
        <asset type="mesh_recipe" id="CloudRecipe">
            <generator>VoxelGenerator</generator>
            <params>
                <type>cube</type>
                <size>1.0</size>
                <subdivisions>1</subdivisions>
            </params>
        </asset>

        <!-- ==== SIMPLIFIED SHADERS ======================================================= -->
        <asset type="shader" id="BasicShader">
            <vertex_shader>shaders/basic.vert</vertex_shader>
            <fragment_shader>shaders/basic.frag</fragment_shader>
            <parameters>
                <uniform name="albedo_color" type="vec4" default="1.0 1.0 1.0 1.0"/>
                <uniform name="roughness" type="float" default="0.5"/>
                <uniform name="metallic" type="float" default="0.0"/>
            </parameters>
        </asset>
        <asset type="shader" id="CelShader">
            <vertex_shader>shaders/cel.vert</vertex_shader>
            <fragment_shader>shaders/cel.frag</fragment_shader>
            <parameters>
                <uniform name="band_count" type="int" default="4"/>
                <uniform name="band_smoothness" type="float" default="0.1"/>
                <uniform name="rim_power" type="float" default="2.0"/>
            </parameters>
        </asset>

        <!-- ==== SIMPLIFIED PROCEDURAL TEXTURES =========================================== -->
        <asset type="texture_generator" id="WaterTexture">
            <generator>ProceduralTextureGenerator</generator>
            <params>
                <type>flat_noise</type>
                <size>32</size>
                <seed>1001</seed>
                <color_primary>#0066CC</color_primary>
                <color_secondary>#004499</color_secondary>
                <noise_scale>4.0</noise_scale>
            </params>
        </asset>
        <asset type="texture_generator" id="LandTexture">
            <generator>ProceduralTextureGenerator</generator>
            <params>
                <type>flat_noise</type>
                <size>32</size>
                <seed>1002</seed>
                <color_primary>#228B22</color_primary>
                <color_secondary>#006400</color_secondary>
                <noise_scale>6.0</noise_scale>
            </params>
        </asset>
        <asset type="texture_generator" id="RockTexture">
            <generator>ProceduralTextureGenerator</generator>
            <params>
                <type>speckle</type>
                <size>32</size>
                <seed>1003</seed>
                <color_primary>#696969</color_primary>
                <color_secondary>#2F2F2F</color_secondary>
                <noise_scale>8.0</noise_scale>
            </params>
        </asset>
        <asset type="texture_generator" id="CloudTexture">
            <generator>ProceduralTextureGenerator</generator>
            <params>
                <type>dither</type>
                <size>32</size>
                <seed>1004</seed>
                <color_primary>#FFFFFF</color_primary>
                <color_secondary>#E0E0E0</color_secondary>
                <noise_scale>2.0</noise_scale>
            </params>
        </asset>
        <asset type="texture_generator" id="AircraftBodyTexture">
            <generator>ProceduralTextureGenerator</generator>
            <params>
                <type>solid_color</type>
                <size>32</size>
                <color_primary>#CC3333</color_primary>
            </params>
        </asset>
        <asset type="texture_generator" id="AircraftWingTexture">
            <generator>ProceduralTextureGenerator</generator>
            <params>
                <type>solid_color</type>
                <size>32</size>
                <color_primary>#808080</color_primary>
            </params>
        </asset>

        <!-- ==== SIMPLIFIED MATERIALS ===================================================== -->
        <asset type="material" id="WaterMaterial">
            <shader_id>CelShader</shader_id>
            <textures>
                <texture slot="diffuse" asset_id="WaterTexture"/>
            </textures>
            <params>
                <band_count>3</band_count>
                <band_smoothness>0.15</band_smoothness>
            </params>
        </asset>
        <asset type="material" id="LandMaterial">
            <shader_id>CelShader</shader_id>
            <textures>
                <texture slot="diffuse" asset_id="LandTexture"/>
            </textures>
            <params>
                <band_count>4</band_count>
                <band_smoothness>0.1</band_smoothness>
            </params>
        </asset>
        <asset type="material" id="RockMaterial">
            <shader_id>CelShader</shader_id>
            <textures>
                <texture slot="diffuse" asset_id="RockTexture"/>
            </textures>
            <params>
                <band_count>3</band_count>
                <band_smoothness>0.2</band_smoothness>
            </params>
        </asset>
        <asset type="material" id="CloudMaterial">
            <shader_id>CelShader</shader_id>
            <textures>
                <texture slot="diffuse" asset_id="CloudTexture"/>
            </textures>
            <params>
                <band_count>2</band_count>
                <band_smoothness>0.3</band_smoothness>
                <transparency>true</transparency>
            </params>
        </asset>
        <asset type="material" id="AircraftBodyMaterial">
            <shader_id>CelShader</shader_id>
            <textures>
                <texture slot="diffuse" asset_id="AircraftBodyTexture"/>
            </textures>
            <params>
                <band_count>2</band_count>
                <band_smoothness>0.05</band_smoothness>
            </params>
        </asset>
        <asset type="material" id="AircraftWingMaterial">
            <shader_id>CelShader</shader_id>
            <textures>
                <texture slot="diffuse" asset_id="AircraftWingTexture"/>
            </textures>
            <params>
                <band_count>2</band_count>
                <band_smoothness>0.05</band_smoothness>
            </params>
        </asset>

        <!-- ==== SIMPLIFIED MESH RECIPES (All Voxel Based) ================================ -->
        <asset type="mesh_recipe" id="GlobeRecipe">
            <generator>VoxelGenerator</generator>
            <params>
                <type>sphere</type>
                <subdivisions>4</subdivisions>
                <radius>2.0</radius>
            </params>
        </asset>
        <asset type="mesh_recipe" id="CubeRecipe">
            <generator>VoxelGenerator</generator>
            <params>
                <type>cube</type>
                <size>1.0</size>
                <subdivisions>1</subdivisions>
            </params>
        </asset>
        <asset type="mesh_recipe" id="AircraftRecipe">
            <generator>VoxelGenerator</generator>
            <params>
                <type>compound</type>
                <parts>
                    <!-- Fuselage -->
                    <part name="body">
                        <primitive type="cube"/>
                        <scale x="0.3" y="0.3" z="1.2"/>
                        <offset x="0.0" y="0.0" z="0.0"/>
                    </part>
                    <!-- Wings -->
                    <part name="wings">
                        <primitive type="cube"/>
                        <scale x="1.5" y="0.1" z="0.4"/>
                        <offset x="0.0" y="0.0" z="-0.2"/>
                    </part>
                    <!-- Tail -->
                    <part name="tail">
                        <primitive type="cube"/>
                        <scale x="0.1" y="0.4" z="0.2"/>
                        <offset x="0.0" y="0.0" z="0.5"/>
                    </part>
                </parts>
            </params>
        </asset>
    </assets>

    <!--
        Scene Configurations:
        Simplified to use "loading_indicator" type instead of "voxel_busy_indicator"
    -->
    <configurations>
        <scenes>
            <!-- Default Earth-like sphere scene (unchanged functionality) -->
            <scene name="DefaultSphereScene" type="default_sphere" budget_memory_mb="2">
                <description>A simple Earth-like sphere with atmospheric layers for basic world visualization.</description>
                
                <camera>
                    <position x="0" y="0" z="8"/>
                    <target x="0" y="0" z="0"/>
                    <fov>45</fov>
                </camera>
                
                <lighting>
                    <directional_light intensity="1.0">
                        <direction x="-0.5" y="-1.0" z="-0.3"/>
                        <color r="1.0" g="0.95" b="0.8" a="1.0"/>
                    </directional_light>
                    <ambient_light intensity="0.2">
                        <color r="0.3" g="0.4" z="0.6" a="1.0"/>
                    </ambient_light>
                </lighting>
                
                <entities>
                    <entity id="earth_sphere" name="Earth">
                        <transform>
                            <position x="0" y="0" z="0"/>
                            <scale x="2.0" y="2.0" z="2.0"/>
                        </transform>
                        <mesh>
                            <voxel_primitive type="sphere" subdivisions="4" radius="1.0"/>
                        </mesh>
                        <material shader="basic">
                            <texture slot="diffuse" file="textures/earth_albedo.ktx2"/>
                            <parameters>
                                <parameter name="roughness" value="0.8" type="float"/>
                            </parameters>
                        </material>
                        <components>
                            <rotation>
                                <axis x="0" y="1" z="0"/>
                                <speed>0.1</speed>
                            </rotation>
                        </components>
                    </entity>
                </entities>
            </scene>

            <!-- Simplified Loading Indicator Scene -->
            <scene name="LoadingIndicatorScene" type="loading_indicator" budget_memory_mb="1">
                <description>Lightweight loading indicator with orbiting aircraft and cloud groups using voxel primitives.</description>
                
                <camera>
                    <position x="4.5" y="3.2" z="6.8"/>
                    <target x="0" y="0" z="0"/>
                    <fov>35</fov>
                </camera>
                
                <lighting>
                    <directional_light intensity="1.2">
                        <direction x="-0.6" y="-0.8" z="-0.4"/>
                        <color r="1.0" g="0.95" b="0.85" a="1.0"/>
                    </directional_light>
                    <ambient_light intensity="0.3">
                        <color r="0.4" g="0.5" b="0.7" a="1.0"/>
                    </ambient_light>
                </lighting>
                
                <entities>
                    <!-- Central Globe -->
                    <entity id="globe" name="Globe">
                        <transform>
                            <position x="0" y="0" z="0"/>
                        </transform>
                        <mesh>
                            <voxel_primitive type="sphere" subdivisions="3" radius="2.0"/>
                        </mesh>
                        <material shader="cel">
                            <texture slot="diffuse" asset_id="LandTexture"/>
                            <parameters>
                                <parameter name="band_count" value="4" type="int"/>
                                <parameter name="band_smoothness" value="0.1" type="float"/>
                            </parameters>
                        </material>
                        <components>
                            <rotation>
                                <axis x="0" y="1" z="0"/>
                                <speed>0.05</speed>
                            </rotation>
                        </components>
                    </entity>

                    <!-- Orbiting Aircraft 1 -->
                    <entity id="aircraft1" name="Aircraft1">
                        <mesh>
                            <voxel_compound name="aircraft">
                                <part name="body">
                                    <primitive type="cube"/>
                                    <scale x="0.3" y="0.3" z="1.2"/>
                                </part>
                                <part name="wings">
                                    <primitive type="cube"/>
                                    <scale x="1.5" y="0.1" z="0.4"/>
                                    <offset x="0.0" y="0.0" z="-0.2"/>
                                </part>
                            </voxel_compound>
                        </mesh>
                        <material shader="cel">
                            <texture slot="diffuse" asset_id="AircraftBodyTexture"/>
                        </material>
                        <components>
                            <orbital radius="4.5" speed="0.3" eccentricity="0.15" inclination="15.0" enable_banking="true" max_bank_angle="25.0">
                                <center x="0" y="0" z="0"/>
                                <axis x="0" y="1" z="0"/>
                            </orbital>
                            <trail particle_count="30" lifetime="1.5" spawn_rate="15.0"/>
                        </components>
                    </entity>

                    <!-- Orbiting Aircraft 2 -->
                    <entity id="aircraft2" name="Aircraft2">
                        <mesh>
                            <voxel_compound name="aircraft">
                                <part name="body">
                                    <primitive type="cube"/>
                                    <scale x="0.3" y="0.3" z="1.2"/>
                                </part>
                                <part name="wings">
                                    <primitive type="cube"/>
                                    <scale x="1.5" y="0.1" z="0.4"/>
                                    <offset x="0.0" y="0.0" z="-0.2"/>
                                </part>
                            </voxel_compound>
                        </mesh>
                        <material shader="cel">
                            <texture slot="diffuse" asset_id="AircraftBodyTexture"/>
                        </material>
                        <components>
                            <orbital radius="5.2" speed="0.25" eccentricity="0.1" inclination="-20.0" phase_offset="180.0" enable_banking="true">
                                <center x="0" y="0" z="0"/>
                                <axis x="0" y="1" z="0"/>
                            </orbital>
                            <trail particle_count="25" lifetime="1.8" spawn_rate="12.0"/>
                        </components>
                    </entity>

                    <!-- Cloud Group Spawner -->
                    <entity id="cloud_spawner" name="CloudSpawner">
                        <transform>
                            <position x="0" y="0" z="0"/>
                        </transform>
                        <components>
                            <spawner spawn_rate="0.08" max_entities="8" entity_lifetime="25.0" spawn_radius="7.0"/>
                        </components>
                    </entity>
                </entities>
            </scene>
        </scenes>
    </configurations>
</package>
                <roughness value="0.8" />
                <metallic value="0.0" />
            </params>
        </asset>
        <asset type="material" id="AtmosphereLayer1Material">
            <shader_id>AtmosphereShader</shader_id> <!-- Assumes a dedicated atmospheric shader -->
            <params>
                <color r="0.2" g="0.4" b="0.7" a="0.15" /> <!-- Blueish, slightly transparent -->
                <blend_mode>AlphaBlend</blend_mode>
            </params>
        </asset>
        <asset type="material" id="AtmosphereLayer2Material">
            <shader_id>AtmosphereShader</shader_id>
            <params>
                <color r="0.3" g="0.5" b="0.8" a="0.05" /> <!-- Lighter blue, more transparent -->
                <blend_mode>AlphaBlend</blend_mode>
            </params>
        </asset>
        <asset type="material" id="CloudLayerMaterial">
            <shader_id>CloudVolumeShader</shader_id> <!-- Assumes a shader capable of rendering volumetric clouds -->
            <params>
                <color r="1.0" g="1.0" b="1.0" a="0.7" /> <!-- White, semi-transparent -->
                <!-- Placeholder for a pre-baked noise texture for clouds, located under /assets/packages/DeveloperPackage/textures/ -->
                <texture_id>textures/perlin_noise_cloud.ktx2</texture_id>
                <scroll_speed u="0.01" v="0.005" /> <!-- Simulates cloud movement -->
            </params>
        </asset>

        <!--
            Procedural Mesh Recipes. These define parameters for "param generators"
            that the asset compiler executes to produce final geometry or runtime procedural recipes.

        -->
        <asset type="mesh_recipe" id="SphereRecipe">
            <generator>ProceduralSphereGenerator</generator> <!-- Refers to a C++ generator function -->
            <params>
                <param name="radius_param" type="float" default_value="1.0" />
                <param name="segments_param" type="int" default_value="32" />
                <param name="invert_normals_param" type="bool" default_value="false" /> <!-- For rendering atmospheric layers from inside -->
            </params>
        </asset>
        <asset type="mesh_recipe" id="VoxelCloudRecipe">
            <generator>ProceduralVoxelCloudGenerator</generator> <!-- Refers to a C++ generator function -->
            <params>
                <param name="base_radius_param" type="float" default_value="1.0" />
                <param name="height_range_param" type="float" default_value="0.1" />
                <param name="noise_scale_param" type="float" default_value="0.01" />
                <param name="density_threshold_param" type="float" default_value="0.5" />
            </params>
        </asset>

        <!-- ==== NEW: CEL SHADER + RANDOM 32Ã—32 TEXTURES ======================================= -->

        <!-- Minimal cel band shader (no outlines) -->
        <asset type="shader" id="CelBandShader">
            <path>shaders/cel_band_no_outline.shader</path>
            <params>
                <bands value="4"/>
                <outline_enabled value="false"/>
                <specular_mode value="off"/>
            </params>
        </asset>

        <!-- Six tiny textures generated at build/load (seed auto/random) -->
        <asset type="texture_generator" id="RndTex_Water32">
            <generator>FlatNoiseTextureGen</generator>
            <params width="32" height="32" base="#2B6FEA" noise_amp="0.05" seed="auto"/>
        </asset>
        <asset type="texture_generator" id="RndTex_Land32">
            <generator>FlatNoiseTextureGen</generator>
            <params width="32" height="32" base="#3BA15A" noise_amp="0.06" seed="auto"/>
        </asset>
        <asset type="texture_generator" id="RndTex_Rock32">
            <generator>SpeckleTextureGen</generator>
            <params width="32" height="32" base="#7C5B3A" speckle="#5F4A32" density="0.15" seed="auto"/>
        </asset>
        <asset type="texture_generator" id="RndTex_Cloud32">
            <generator>DitherTextureGen</generator>
            <params width="32" height="32" base="#F2F2F2" dither="0.04" seed="auto"/>
        </asset>
        <asset type="texture_generator" id="RndTex_Fuselage32">
            <generator>FlatNoiseTextureGen</generator>
            <params width="32" height="32" base="#E11D2E" noise_amp="0.03" seed="auto"/>
        </asset>
        <asset type="texture_generator" id="RndTex_Wings32">
            <generator>FlatNoiseTextureGen</generator>
            <params width="32" height="32" base="#B3B3B3" noise_amp="0.02" seed="auto"/>
        </asset>

        <!-- Cel materials that bind the tiny textures -->
        <asset type="material" id="Mat_Cel_Water">
            <shader_id>CelBandShader</shader_id>
            <params><albedo_texture>RndTex_Water32</albedo_texture></params>
        </asset>
        <asset type="material" id="Mat_Cel_Land">
            <shader_id>CelBandShader</shader_id>
            <params><albedo_texture>RndTex_Land32</albedo_texture></params>
        </asset>
        <asset type="material" id="Mat_Cel_Rock">
            <shader_id>CelBandShader</shader_id>
            <params><albedo_texture>RndTex_Rock32</albedo_texture></params>
        </asset>
        <asset type="material" id="Mat_Cel_Cloud">
            <shader_id>CelBandShader</shader_id>
            <params>
                <albedo_texture>RndTex_Cloud32</albedo_texture>
                <alpha_mode>Premultiplied</alpha_mode>
            </params>
        </asset>
        <asset type="material" id="Mat_Cel_Fuselage">
            <shader_id>CelBandShader</shader_id>
            <params><albedo_texture>RndTex_Fuselage32</albedo_texture></params>
        </asset>
        <asset type="material" id="Mat_Cel_Wings">
            <shader_id>CelBandShader</shader_id>
            <params><albedo_texture>RndTex_Wings32</albedo_texture></params>
        </asset>

        <!-- ==== NEW: TINY MESH RECIPES (low memory) ========================================== -->

        <!-- Low-poly globe (icosphere/cubesphere) -->
        <asset type="mesh_recipe" id="LowPolyGlobeRecipe">
            <generator>IcoSphereGenerator</generator>
            <params>
                <param name="radius" type="float" default_value="1.0" />
                <param name="subdiv" type="int" default_value="2" /> <!-- ~320 tris -->
                <param name="flat_shading" type="bool" default_value="true" />
            </params>
        </asset>

        <!-- Unit cube reused for voxel clouds & contrail -->
        <asset type="mesh_recipe" id="UnitCubeRecipe">
            <generator>CubeGenerator</generator>
            <params>
                <param name="size" type="float" default_value="1.0"/>
            </params>
        </asset>

        <!-- Low-poly aircraft (simple fuselage + wings + tail) -->
        <asset type="mesh_recipe" id="LowPolyAircraftRecipe">
            <generator>ProceduralAircraftGenerator</generator>
            <params>
                <param name="length" type="float" default_value="0.25" />
                <param name="fuselage_segments" type="int" default_value="6" />
                <param name="wing_span" type="float" default_value="0.22" />
                <param name="tail_span" type="float" default_value="0.12" />
                <param name="flat_shading" type="bool" default_value="true" />
            </params>
        </asset>

        <!-- Optional: procedural "land bumps" overlay using the same globe mesh with jitter mask -->
        <asset type="mesh_recipe" id="GlobeLandBumpsRecipe">
            <generator>SphericalPatchDisplaceGenerator</generator>
            <params>
                <param name="base_radius" type="float" default_value="1.0" />
                <param name="subdiv" type="int" default_value="2" />
                <param name="patch_count" type="int" default_value="24" />
                <param name="min_height" type="float" default_value="0.03" />
                <param name="max_height" type="float" default_value="0.06" />
                <param name="seed" type="int" default_value="-1" /> <!-- -1 = random -->
            </params>
        </asset>

        <!-- Paper Plane Materials & Mesh Recipe -->
        <asset type="material" id="PlaneFuselageMaterial">
            <shader_id>CelFlatShader</shader_id>
            <params>
                <color r="0.88" g="0.15" b="0.20" a="1.0" />
                <roughness value="0.9" />
                <metallic value="0.0" />
            </params>
        </asset>
        <asset type="material" id="PlaneWingMaterial">
            <shader_id>CelFlatShader</shader_id>
            <params>
                <color r="0.70" g="0.70" b="0.72" a="1.0" />
                <roughness value="0.95" />
                <metallic value="0.0" />
            </params>
        </asset>
        <asset type="mesh_recipe" id="PaperPlaneRecipe">
            <generator>ProceduralPaperPlaneGenerator</generator>
            <params>
                <param name="length_param" type="float" default_value="0.25" />
                <param name="wing_span_param" type="float" default_value="0.22" />
                <param name="fin_height_param" type="float" default_value="0.05" />
            </params>
        </asset>
    </assets>

    <!--
        Configuration Declarations:
        These define higher-level structures and system configurations, often referencing AssetIds.
        In release builds, these are prebaked into the .pak's PARAMS section.
    -->
    <configurations>
        <!-- ==== EXISTING CONFIGURATION (unchanged) =========================================== -->
        <!--
            Default Scene Configuration: The "Earth-like" sphere world.
            This SceneConfig would be provided to the WorldGenSystem if no other packages are found
            during the BootstrapSystem's initialization [previous conversation].
            The WorldGenSystem then instantiates entities and components based on this data.
            [previous conversation, BootstrapSystem, WorldGenSystem code examples]
        -->
        <scene_config id="DefaultSphereWorldScene" type="procedural_earth_like">
            <description>A basic Earth-like sphere with atmospheric layers and orbiting voxel clouds.</description>

            <!-- Earth Entity -->
            <entity name="Earth" entity_id="EarthEntityId">
                <component type="TransformC">
                    <position x="0.0" y="-6371000.0" z="0.0" /> <!-- Approximated Earth radius offset [previous conversation] -->
                    <orientation x="0.0" y="0.0" z="0.0" w="1.0" /> <!-- Identity quaternion -->
                </component>
                <component type="RenderableC">
                    <mesh_recipe_ref id="SphereRecipe">
                        <param name="radius_param" value="6371000.0" />
                        <param name="segments_param" value="64" />
                        <param name="invert_normals_param" value="false" />
                    </mesh_recipe_ref>
                    <material_ref id="EarthSurfaceMaterial" />
                </component>
            </entity>

            <!-- Atmospheric Layers -->
            <entity name="AtmosphereLayer1" entity_id="AtmosphereLayer1EntityId">
                <component type="TransformC">
                    <position x="0.0" y="-6371000.0" z="0.0" />
                    <orientation x="0.0" y="0.0" z="0.0" w="1.0" />
                </component>
                <component type="RenderableC">
                    <mesh_recipe_ref id="SphereRecipe">
                        <param name="radius_param" value="6371000.0 + 10000.0" /> <!-- 10km above surface [previous conversation] -->
                        <param name="segments_param" value="32" />
                        <param name="invert_normals_param" value="true" /> <!-- Render from inside the sphere -->
                    </mesh_recipe_ref>
                    <material_ref id="AtmosphereLayer1Material" />
                </component>
            </entity>
            <entity name="AtmosphereLayer2" entity_id="AtmosphereLayer2EntityId">
                <component type="TransformC">
                    <position x="0.0" y="-6371000.0" z="0.0" />
                    <orientation x="0.0" y="0.0" z="0.0" w="1.0" />
                </component>
                <component type="RenderableC">
                    <mesh_recipe_ref id="SphereRecipe">
                        <param name="radius_param" value="6371000.0 + 20000.0" /> <!-- 20km above surface [previous conversation] -->
                        <param name="segments_param" value="32" />
                        <param name="invert_normals_param" value="true" />
                    </mesh_recipe_ref>
                    <material_ref id="AtmosphereLayer2Material" />
                </component>
            </entity>

            <!-- Voxel Clouds orbiting Earth -->
            <entity name="VoxelClouds" entity_id="VoxelCloudsEntityId">
                <component type="TransformC">
                    <position x="0.0" y="-6371000.0" z="0.0" />
                    <orientation x="0.0" y="0.0" z="0.0" w="1.0" />
                </component>
                <component type="RenderableC">
                    <mesh_recipe_ref id="VoxelCloudRecipe">
                        <param name="base_radius_param" value="6371000.0 + 5000.0" /> <!-- Clouds start at 5km altitude [previous conversation] -->
                        <param name="height_range_param" value="5000.0" /> <!-- Clouds span 5km vertically [previous conversation] -->
                        <param name="noise_scale_param" value="0.0001" />
                        <param name="density_threshold_param" value="0.55" />
                    </mesh_recipe_ref>
                    <material_ref id="CloudLayerMaterial" />
                </component>
                <!-- Further components could define cloud movement/animation logic -->
            </entity>

            <!-- Low-Poly Paper Plane Entity (orbiting indicator) -->
            <entity name="PaperPlane" entity_id="PaperPlaneEntityId">
                <component type="TransformC">
                    <position x="0.0" y="-6371000.0" z="0.0" />
                    <orientation x="0.0" y="0.0" z="0.0" w="1.0" />
                </component>
                <component type="RenderableC">
                    <mesh_recipe_ref id="PaperPlaneRecipe">
                        <param name="length_param" value="0.25" />
                        <param name="wing_span_param" value="0.22" />
                        <param name="fin_height_param" value="0.05" />
                    </mesh_recipe_ref>
                    <material_ref id="PlaneFuselageMaterial" />
                    <!-- Wing material could be assigned by multi-material system in future; placeholder single material now -->
                </component>
            </entity>

            <!-- Environmental Physics Parameters for WorldGenSystem [30, 31, previous conversation] -->
            <env_physics_params>
                <gravity x="0.0" y="-9.81" z="0.0" /> <!-- Constant Earth gravity -->
                <air_density_model type="exponential">
                    <rho_0 value="1.225" /> <!-- Sea level density -->
                    <scale_height value="8500.0" /> <!-- Scale height for exponential approximation -->
                </air_density_model>
                <!-- Default Wind Model -->
                <wind_model type="constant">
                    <velocity x="5.0" y="0.0" z="0.0" /> <!-- Gentle constant wind in X direction -->
                </wind_model>
            </env_physics_params>
        </scene_config>

        <!-- ==== NEW: VOXEL BUSY INDICATOR SCENE CONFIGURATION ============================== -->
        <!--
            Compact busy indicator scene featuring low-poly voxel globe with cel-shaded 32Ã—32 textures,
            orbital aircraft groups with procedural contrails, and voxel cloud patches.
            Memory budget: ~1MB total (texture + mesh + misc).
        -->
        <scene_config id="VoxelBusyIndicatorScene" type="voxel_busy_indicator">
            <description>Low-poly voxel busy indicator with orbiting aircraft and clouds</description>
            
            <!-- Performance constraints for busy indicator use case -->
            <memory_budget max_mb="1.0"/>
            <performance_targets>
                <max_draw_calls>25</max_draw_calls>
                <max_triangles>2000</max_triangles>
                <target_fps>60</target_fps>
            </performance_targets>

            <!-- ==== CORE GLOBE ENTITIES ================================================= -->
            <!-- Primary globe: water regions (base layer) -->
            <entity name="GlobeWater" entity_id="GlobeWaterEntityId">
                <component type="TransformC">
                    <position x="0.0" y="0.0" z="0.0" />
                    <orientation x="0.0" y="0.0" z="0.0" w="1.0" />
                </component>
                <component type="RenderableC">
                    <mesh_recipe_ref id="LowPolyGlobeRecipe">
                        <param name="radius" value="1.0" />
                        <param name="subdiv" value="2" /> <!-- ~320 triangles -->
                        <param name="flat_shading" value="true" />
                    </mesh_recipe_ref>
                    <material_ref id="Mat_Cel_Water" />
                </component>
                <component type="VoxelRegionC">
                    <param name="type" value="water" />
                    <param name="coverage" value="0.65" />
                </component>
            </entity>

            <!-- Land overlay: procedural land patches -->
            <entity name="GlobeLand" entity_id="GlobeLandEntityId">
                <component type="TransformC">
                    <position x="0.0" y="0.0" z="0.0" />
                    <orientation x="0.0" y="0.0" z="0.0" w="1.0" />
                    <scale x="1.001" y="1.001" z="1.001" /> <!-- Slight offset to avoid z-fighting -->
                </component>
                <component type="RenderableC">
                    <mesh_recipe_ref id="GlobeLandBumpsRecipe">
                        <param name="base_radius" value="1.0" />
                        <param name="subdiv" value="2" />
                        <param name="patch_count" value="24" />
                        <param name="min_height" value="0.03" />
                        <param name="max_height" value="0.06" />
                        <param name="seed" value="-1" /> <!-- Random -->
                    </mesh_recipe_ref>
                    <material_ref id="Mat_Cel_Land" />
                </component>
                <component type="VoxelRegionC">
                    <param name="type" value="land" />
                    <param name="coverage" value="0.30" />
                </component>
            </entity>

            <!-- Rock/mountain patches (smaller scale) -->
            <entity name="GlobeRocks" entity_id="GlobeRocksEntityId">
                <component type="TransformC">
                    <position x="0.0" y="0.0" z="0.0" />
                    <orientation x="0.0" y="0.0" z="0.0" w="1.0" />
                    <scale x="1.002" y="1.002" z="1.002" /> <!-- Slightly higher layer -->
                </component>
                <component type="RenderableC">
                    <mesh_recipe_ref id="GlobeLandBumpsRecipe">
                        <param name="base_radius" value="1.0" />
                        <param name="subdiv" value="2" />
                        <param name="patch_count" value="12" /> <!-- Fewer patches for rocks -->
                        <param name="min_height" value="0.05" />
                        <param name="max_height" value="0.08" />
                        <param name="seed" value="-1" />
                    </mesh_recipe_ref>
                    <material_ref id="Mat_Cel_Rock" />
                </component>
                <component type="VoxelRegionC">
                    <param name="type" value="rock" />
                    <param name="coverage" value="0.05" />
                </component>
            </entity>

            <!-- ==== ORBITAL AIRCRAFT GROUP 1 (high-speed outer orbit) ==================== -->
            <entity name="Aircraft_Group1_A" entity_id="Aircraft_Group1_A_Id">
                <component type="TransformC">
                    <position x="1.8" y="0.3" z="0.0" />
                    <orientation x="0.0" y="0.0" z="0.0" w="1.0" />
                    <scale x="0.6" y="0.6" z="0.6" />
                </component>
                <component type="RenderableC">
                    <mesh_recipe_ref id="LowPolyAircraftRecipe">
                        <param name="length" value="0.25" />
                        <param name="fuselage_segments" value="6" />
                        <param name="wing_span" value="0.22" />
                        <param name="tail_span" value="0.12" />
                        <param name="flat_shading" value="true" />
                    </mesh_recipe_ref>
                    <material_ref id="Mat_Cel_Fuselage" />
                </component>
                <component type="OrbitalC">
                    <param name="center_x" value="0.0" />
                    <param name="center_y" value="0.0" />
                    <param name="center_z" value="0.0" />
                    <param name="radius" value="1.8" />
                    <param name="speed" value="1.2" />
                    <param name="axis_x" value="0.1" />
                    <param name="axis_y" value="1.0" />
                    <param name="axis_z" value="0.05" />
                    <param name="phase_offset" value="0.0" />
                </component>
                <component type="ContrailC">
                    <param name="length" value="0.4" />
                    <param name="fade_time" value="2.0" />
                    <param name="material_ref" value="Mat_Cel_Cloud" />
                    <param name="cube_asset_ref" value="UnitCubeRecipe" />
                </component>
            </entity>

            <entity name="Aircraft_Group1_B" entity_id="Aircraft_Group1_B_Id">
                <component type="TransformC">
                    <position x="1.8" y="0.3" z="0.0" />
                    <orientation x="0.0" y="0.0" z="0.0" w="1.0" />
                    <scale x="0.55" y="0.55" z="0.55" />
                </component>
                <component type="RenderableC">
                    <mesh_recipe_ref id="LowPolyAircraftRecipe" />
                    <material_ref id="Mat_Cel_Wings" />
                </component>
                <component type="OrbitalC">
                    <param name="center_x" value="0.0" />
                    <param name="center_y" value="0.0" />
                    <param name="center_z" value="0.0" />
                    <param name="radius" value="1.8" />
                    <param name="speed" value="1.2" />
                    <param name="axis_x" value="0.1" />
                    <param name="axis_y" value="1.0" />
                    <param name="axis_z" value="0.05" />
                    <param name="phase_offset" value="0.33" />
                </component>
                <component type="ContrailC">
                    <param name="length" value="0.35" />
                    <param name="fade_time" value="1.8" />
                    <param name="material_ref" value="Mat_Cel_Cloud" />
                    <param name="cube_asset_ref" value="UnitCubeRecipe" />
                </component>
            </entity>

            <entity name="Aircraft_Group1_C" entity_id="Aircraft_Group1_C_Id">
                <component type="TransformC">
                    <position x="1.8" y="0.3" z="0.0" />
                    <orientation x="0.0" y="0.0" z="0.0" w="1.0" />
                    <scale x="0.5" y="0.5" z="0.5" />
                </component>
                <component type="RenderableC">
                    <mesh_recipe_ref id="LowPolyAircraftRecipe" />
                    <material_ref id="Mat_Cel_Fuselage" />
                </component>
                <component type="OrbitalC">
                    <param name="center_x" value="0.0" />
                    <param name="center_y" value="0.0" />
                    <param name="center_z" value="0.0" />
                    <param name="radius" value="1.8" />
                    <param name="speed" value="1.2" />
                    <param name="axis_x" value="0.1" />
                    <param name="axis_y" value="1.0" />
                    <param name="axis_z" value="0.05" />
                    <param name="phase_offset" value="0.66" />
                </component>
                <component type="ContrailC">
                    <param name="length" value="0.3" />
                    <param name="fade_time" value="1.5" />
                    <param name="material_ref" value="Mat_Cel_Cloud" />
                    <param name="cube_asset_ref" value="UnitCubeRecipe" />
                </component>
            </entity>

            <!-- ==== ORBITAL AIRCRAFT GROUP 2 (mid-speed middle orbit) ===================== -->
            <entity name="Aircraft_Group2_A" entity_id="Aircraft_Group2_A_Id">
                <component type="TransformC">
                    <position x="1.5" y="0.0" z="0.0" />
                    <orientation x="0.0" y="0.0" z="0.0" w="1.0" />
                    <scale x="0.7" y="0.7" z="0.7" />
                </component>
                <component type="RenderableC">
                    <mesh_recipe_ref id="LowPolyAircraftRecipe" />
                    <material_ref id="Mat_Cel_Wings" />
                </component>
                <component type="OrbitalC">
                    <param name="center_x" value="0.0" />
                    <param name="center_y" value="0.0" />
                    <param name="center_z" value="0.0" />
                    <param name="radius" value="1.5" />
                    <param name="speed" value="0.8" />
                    <param name="axis_x" value="0.05" />
                    <param name="axis_y" value="1.0" />
                    <param name="axis_z" value="0.2" />
                    <param name="phase_offset" value="0.25" />
                </component>
                <component type="ContrailC">
                    <param name="length" value="0.5" />
                    <param name="fade_time" value="2.5" />
                    <param name="material_ref" value="Mat_Cel_Cloud" />
                    <param name="cube_asset_ref" value="UnitCubeRecipe" />
                </component>
            </entity>

            <entity name="Aircraft_Group2_B" entity_id="Aircraft_Group2_B_Id">
                <component type="TransformC">
                    <position x="1.5" y="0.0" z="0.0" />
                    <orientation x="0.0" y="0.0" z="0.0" w="1.0" />
                    <scale x="0.65" y="0.65" z="0.65" />
                </component>
                <component type="RenderableC">
                    <mesh_recipe_ref id="LowPolyAircraftRecipe" />
                    <material_ref id="Mat_Cel_Fuselage" />
                </component>
                <component type="OrbitalC">
                    <param name="center_x" value="0.0" />
                    <param name="center_y" value="0.0" />
                    <param name="center_z" value="0.0" />
                    <param name="radius" value="1.5" />
                    <param name="speed" value="0.8" />
                    <param name="axis_x" value="0.05" />
                    <param name="axis_y" value="1.0" />
                    <param name="axis_z" value="0.2" />
                    <param name="phase_offset" value="0.75" />
                </component>
                <component type="ContrailC">
                    <param name="length" value="0.45" />
                    <param name="fade_time" value="2.2" />
                    <param name="material_ref" value="Mat_Cel_Cloud" />
                    <param name="cube_asset_ref" value="UnitCubeRecipe" />
                </component>
            </entity>

            <!-- ==== ORBITAL CLOUD GROUPS ============================================ -->
            <!-- Sparse voxel cloud patches on various orbits -->
            <entity name="CloudGroup_A1" entity_id="CloudGroup_A1_Id">
                <component type="TransformC">
                    <position x="1.3" y="0.4" z="0.2" />
                    <orientation x="0.0" y="0.0" z="0.0" w="1.0" />
                    <scale x="0.15" y="0.1" z="0.15" />
                </component>
                <component type="RenderableC">
                    <mesh_recipe_ref id="UnitCubeRecipe" />
                    <material_ref id="Mat_Cel_Cloud" />
                </component>
                <component type="OrbitalC">
                    <param name="center_x" value="0.0" />
                    <param name="center_y" value="0.0" />
                    <param name="center_z" value="0.0" />
                    <param name="radius" value="1.3" />
                    <param name="speed" value="0.3" />
                    <param name="axis_x" value="0.2" />
                    <param name="axis_y" value="1.0" />
                    <param name="axis_z" value="0.1" />
                    <param name="phase_offset" value="0.1" />
                </component>
                <component type="VoxelCloudC">
                    <param name="density" value="0.6" />
                    <param name="drift_speed" value="0.02" />
                </component>
            </entity>

            <entity name="CloudGroup_A2" entity_id="CloudGroup_A2_Id">
                <component type="TransformC">
                    <position x="1.3" y="0.4" z="0.2" />
                    <orientation x="0.0" y="0.0" z="0.0" w="1.0" />
                    <scale x="0.12" y="0.08" z="0.12" />
                </component>
                <component type="RenderableC">
                    <mesh_recipe_ref id="UnitCubeRecipe" />
                    <material_ref id="Mat_Cel_Cloud" />
                </component>
                <component type="OrbitalC">
                    <param name="center_x" value="0.0" />
                    <param name="center_y" value="0.0" />
                    <param name="center_z" value="0.0" />
                    <param name="radius" value="1.3" />
                    <param name="speed" value="0.3" />
                    <param name="axis_x" value="0.2" />
                    <param name="axis_y" value="1.0" />
                    <param name="axis_z" value="0.1" />
                    <param name="phase_offset" value="0.4" />
                </component>
                <component type="VoxelCloudC">
                    <param name="density" value="0.5" />
                    <param name="drift_speed" value="0.015" />
                </component>
            </entity>

            <entity name="CloudGroup_A3" entity_id="CloudGroup_A3_Id">
                <component type="TransformC">
                    <position x="1.3" y="0.4" z="0.2" />
                    <orientation x="0.0" y="0.0" z="0.0" w="1.0" />
                    <scale x="0.18" y="0.12" z="0.18" />
                </component>
                <component type="RenderableC">
                    <mesh_recipe_ref id="UnitCubeRecipe" />
                    <material_ref id="Mat_Cel_Cloud" />
                </component>
                <component type="OrbitalC">
                    <param name="center_x" value="0.0" />
                    <param name="center_y" value="0.0" />
                    <param name="center_z" value="0.0" />
                    <param name="radius" value="1.3" />
                    <param name="speed" value="0.3" />
                    <param name="axis_x" value="0.2" />
                    <param name="axis_y" value="1.0" />
                    <param name="axis_z" value="0.1" />
                    <param name="phase_offset" value="0.7" />
                </component>
                <component type="VoxelCloudC">
                    <param name="density" value="0.7" />
                    <param name="drift_speed" value="0.025" />
                </component>
            </entity>

            <entity name="CloudGroup_B1" entity_id="CloudGroup_B1_Id">
                <component type="TransformC">
                    <position x="1.6" y="-0.3" z="0.4" />
                    <orientation x="0.0" y="0.0" z="0.0" w="1.0" />
                    <scale x="0.2" y="0.14" z="0.16" />
                </component>
                <component type="RenderableC">
                    <mesh_recipe_ref id="UnitCubeRecipe" />
                    <material_ref id="Mat_Cel_Cloud" />
                </component>
                <component type="OrbitalC">
                    <param name="center_x" value="0.0" />
                    <param name="center_y" value="0.0" />
                    <param name="center_z" value="0.0" />
                    <param name="radius" value="1.6" />
                    <param name="speed" value="0.45" />
                    <param name="axis_x" value="0.15" />
                    <param name="axis_y" value="1.0" />
                    <param name="axis_z" value="-0.1" />
                    <param name="phase_offset" value="0.2" />
                </component>
                <component type="VoxelCloudC">
                    <param name="density" value="0.65" />
                    <param name="drift_speed" value="0.018" />
                </component>
            </entity>

            <entity name="CloudGroup_B2" entity_id="CloudGroup_B2_Id">
                <component type="TransformC">
                    <position x="1.6" y="-0.3" z="0.4" />
                    <orientation x="0.0" y="0.0" z="0.0" w="1.0" />
                    <scale x="0.14" y="0.1" z="0.14" />
                </component>
                <component type="RenderableC">
                    <mesh_recipe_ref id="UnitCubeRecipe" />
                    <material_ref id="Mat_Cel_Cloud" />
                </component>
                <component type="OrbitalC">
                    <param name="center_x" value="0.0" />
                    <param name="center_y" value="0.0" />
                    <param name="center_z" value="0.0" />
                    <param name="radius" value="1.6" />
                    <param name="speed" value="0.45" />
                    <param name="axis_x" value="0.15" />
                    <param name="axis_y" value="1.0" />
                    <param name="axis_z" value="-0.1" />
                    <param name="phase_offset" value="0.6" />
                </component>
                <component type="VoxelCloudC">
                    <param name="density" value="0.55" />
                    <param name="drift_speed" value="0.012" />
                </component>
            </entity>

            <!-- ==== CAMERA & LIGHTING ========================================== -->
            <!-- Slightly off-center camera for dynamic perspective -->
            <camera_config>
                <position x="0.5" y="1.8" z="3.2" />
                <look_at x="0.0" y="0.0" z="0.0" />
                <fov_degrees>45</fov_degrees>
                <near_plane>0.1</near_plane>
                <far_plane>50.0</far_plane>
                <!-- Optional: gentle camera sway for "floating" effect -->
                <auto_orbit enabled="true" speed="0.08" radius="3.5" axis_x="0" axis_y="1" axis_z="0" />
            </camera_config>

            <!-- Cel-friendly lighting: strong directional + minimal ambient -->
            <lighting_config>
                <primary_light type="directional">
                    <direction x="-0.6" y="-1.0" z="-0.4" />
                    <color r="1.0" g="0.95" b="0.85" />
                    <intensity>1.2</intensity>
                    <cast_shadows>false</cast_shadows> <!-- Keep performance high -->
                </primary_light>
                <ambient_light>
                    <color r="0.25" g="0.35" b="0.5" />
                    <intensity>0.15</intensity>
                </ambient_light>
                <!-- Optional: secondary rim light for better shape definition -->
                <rim_light type="directional">
                    <direction x="0.8" y="0.3" z="0.5" />
                    <color r="0.4" g="0.6" b="0.9" />
                    <intensity>0.3</intensity>
                </rim_light>
            </lighting_config>

            <!-- ==== RENDER ENVIRONMENT & PERFORMANCE ========================== -->
            <render_environment>
                <background_color r="0.08" g="0.12" b="0.18" a="1.0" />
                <fog enabled="false" /> <!-- Minimal overhead for busy indicator -->
                <post_processing enabled="false" /> <!-- Raw cel output -->
                <vsync enabled="true" />
            </render_environment>

            <!-- ==== ANIMATION SYSTEM ============================================ -->
            <!-- Global animation controller for orbital mechanics and effects -->
            <animation_system>
                <orbital_manager>
                    <!-- Manages all OrbitalC components -->
                    <global_time_scale>1.0</global_time_scale>
                    <pause_on_background>true</pause_on_background>
                </orbital_manager>
                <contrail_manager>
                    <!-- Manages all ContrailC components -->
                    <max_contrail_segments>8</max_contrail_segments>
                    <update_frequency_hz>30</update_frequency_hz>
                </contrail_manager>
                <cloud_drift_manager>
                    <!-- Manages VoxelCloudC drift effects -->
                    <global_wind_factor>1.0</global_wind_factor>
                    <turbulence_scale>0.1</turbulence_scale>
                </cloud_drift_manager>
            </animation_system>
        </scene_config>

        <!--
            Global Input Configuration (supporting overlay input):
            Defines key bindings relevant to the developer package.
            This configuration is processed by the InputSystem.
        -->
        <input_config id="GlobalDeveloperInput">
            <key_bindings>
                <binding action="ToggleDebugConsole" key_code="TILDE" device="Keyboard" /> <!-- Tilde key for console [previous conversation] -->
                <!-- Other debug-specific key bindings could be defined here -->
            </key_bindings>
        </input_config>

        <!--
            Overlay Configuration:
            Defines the debug console UI and other visual overlays.
            This configuration is consumed by the VisualizationSystem.
        -->
        <overlay_config id="DeveloperOverlay">
            <ui_element type="DebugConsole" visible_by_default="false">
                <font_asset_ref id="ConsoleFont" />
                <background_texture_asset_ref id="ConsoleBackgroundTexture" />
                <dimensions width_percent="80" height_percent="40" />
                <position x_percent="10" y_percent="5" />
                <color background="0x000000A0" text="0xFFFFFFFF" cursor="0xFF00FF" />
            </ui_element>

            <!-- Message displayed when no other packages are loaded [previous conversation, VisualizationSystem] -->
            <ui_element type="TextMessageOverlay" id="NoPackagesFoundDisplay" visible_by_default="false">
                <text_content>No packages found. Displaying default sphere world.</text_content>
                <font_asset_ref id="ConsoleFont" />
                <color text="0xFFFFAA00" background="0x00000080" />
                <position x_percent="50" y_percent="95" alignment="Center" />
            </ui_element>
        </overlay_config>

        <!-- Debug Component Configuration -->
        <component_config id="GlobalDebugComponent">
            <component type="DebugC">
                <param name="show_physics_wireframe" value="false" />
                <param name="show_wind_vectors" value="false" />
                <!-- Add other debug toggles here -->
            </component>
        </component_config>

    </configurations>

    <!--
        main.cpp Communication:
        The `main.cpp` (your application's entry point) does NOT directly parse this XML at runtime.
        Instead, it orchestrates the initialization of core systems that then consume the data defined here.
        This follows the principles of IoC and a "thin runtime, fat tools" approach.

        Here's how `main.cpp` facilitates the communication and utilizes this package's definitions:

        1.  Initializes Core Infrastructure: `main.cpp` first sets up the global IoC Container and EventBus.
            These are fundamental for Dependency Injection and Event-Driven Communication.

        2.  Invokes BootstrapSystem: `main.cpp` then creates and calls `BootstrapSystem::Init()`.
            This is the one-shot system responsible for initial world construction and asset loading.

        3.  Asset Loading Decision:
            *   In a **Release Build**: `BootstrapSystem` (via `AssetPackLoader`) attempts to memory-map
                pre-compiled `.pak` files (e.g., `DeveloperPackage.pak`, which is the binary representation of this XML).
                The data (assets, scene, input, overlay configs) are loaded into the `AssetRegistry`.
            *   In a **Debug Build**: `BootstrapSystem` configures the `AssetHotReloadSystem` to watch this XML file
                (and others) for changes. If changes occur, the XML is parsed, converted to an Intermediate
                Representation (IR), and built into a staging registry, which is atomically swapped at the
                end of the frame.

        4.  Default Scene Fallback:
            *   `BootstrapSystem` queries the `AssetRegistry`. **If no other packages are successfully loaded**,
                `BootstrapSystem` then instructs the `WorldGenSystem` (which receives the `DefaultSphereWorldScene`
                configuration from this package via IoC) to generate the "Earth-like" sphere world [previous conversation].
                It also emits a `NoPackagesFoundEvent` [previous conversation].

        5.  Input and Overlay Activation:
            *   The `InputSystem` (configured by `GlobalDeveloperInput` from this package) detects the **Tilde** (~) key press
                and publishes a `ConsoleToggleEvent` to the `EventBus` [previous conversation, 11].
            *   The `ConsoleSystem` and `VisualizationSystem` (configured by `DeveloperOverlay` from this package)
                subscribe to this `ConsoleToggleEvent`. When triggered, `VisualizationSystem` renders the debug console UI
                using the `ConsoleFont` and `ConsoleBackgroundTexture` assets. It also renders the "No packages found" message
                if the corresponding event was received [previous conversation, 12, 135].

        In essence, this XML is the **declarative source of truth** for configuration and asset definitions that drives
        the runtime behavior of the C++ systems and components, allowing for modularity and extensibility without
        modifying core C++ logic.
    -->
</package>
