# Source Code Collection - 2025-09-17


================================================================================
FILE: .vscode\settings.json
================================================================================

{
    "files.associations": {
        "xstring": "cpp",
        "xiosbase": "cpp",
        "locale": "cpp",
        "thread": "cpp",
        "xlocale": "cpp",
        "xlocmes": "cpp",
        "xlocmon": "cpp",
        "xlocnum": "cpp",
        "xloctime": "cpp",
        "algorithm": "cpp",
        "array": "cpp",
        "atomic": "cpp",
        "bit": "cpp",
        "cctype": "cpp",
        "charconv": "cpp",
        "chrono": "cpp",
        "clocale": "cpp",
        "cmath": "cpp",
        "codecvt": "cpp",
        "compare": "cpp",
        "concepts": "cpp",
        "cstddef": "cpp",
        "cstdint": "cpp",
        "cstdio": "cpp",
        "cstdlib": "cpp",
        "cstring": "cpp",
        "ctime": "cpp",
        "cwchar": "cpp",
        "deque": "cpp",
        "exception": "cpp",
        "filesystem": "cpp",
        "format": "cpp",
        "forward_list": "cpp",
        "fstream": "cpp",
        "functional": "cpp",
        "initializer_list": "cpp",
        "iomanip": "cpp",
        "ios": "cpp",
        "iosfwd": "cpp",
        "iostream": "cpp",
        "istream": "cpp",
        "iterator": "cpp",
        "limits": "cpp",
        "list": "cpp",
        "map": "cpp",
        "memory": "cpp",
        "new": "cpp",
        "optional": "cpp",
        "ostream": "cpp",
        "queue": "cpp",
        "random": "cpp",
        "ratio": "cpp",
        "regex": "cpp",
        "set": "cpp",
        "sstream": "cpp",
        "stack": "cpp",
        "stdexcept": "cpp",
        "stop_token": "cpp",
        "streambuf": "cpp",
        "string": "cpp",
        "system_error": "cpp",
        "tuple": "cpp",
        "type_traits": "cpp",
        "typeindex": "cpp",
        "typeinfo": "cpp",
        "unordered_map": "cpp",
        "utility": "cpp",
        "variant": "cpp",
        "vector": "cpp",
        "xfacet": "cpp",
        "xhash": "cpp",
        "xlocbuf": "cpp",
        "xlocinfo": "cpp",
        "xmemory": "cpp",
        "xtr1common": "cpp",
        "xtree": "cpp",
        "xutility": "cpp",
        "mutex": "cpp",
        "unordered_set": "cpp"
    }
}


================================================================================
FILE: assets\packages\core\package.json
================================================================================

{
    "metadata": {
        "id": "core",
        "name": "Core Package",
        "version": "1.0.0",
        "description": "Core entities and scenes for the FPV Flight Simulator",
        "author": "FPV Flight Simulator Team"
    },
    "dependencies": [],
    "assets": {
        "materials": [
            {
                "id": "redCubeMaterial",
                "name": "Red Cube Material",
                "diffuseColor": {
                    "r": 1.0,
                    "g": 0.0,
                    "b": 0.0,
                    "a": 1.0
                },
                "specularColor": {
                    "r": 0.2,
                    "g": 0.9,
                    "b": 0.2,
                    "a": 1.0
                },
                "shininess": 32.0
            },
            {
                "id": "violetCubeMaterial",
                "name": "Violet Cube Material",
                "diffuseColor": {
                    "r": 0.6,
                    "g": 0.2,
                    "b": 0.9,
                    "a": 1.0
                },
                "specularColor": {
                    "r": 0.8,
                    "g": 0.6,
                    "b": 1.0,
                    "a": 1.0
                },
                "shininess": 32.0
            }
        ],
        "meshes": [
            {
                "id": "cubeMesh",
                "name": "Cube Mesh",
                "type": "procedural",
                "primitive": {
                    "type": "cube",
                    "size": {
                        "width": 1.0,
                        "height": 1.0,
                        "depth": 1.0
                    },
                    "uvMapping": true
                }
            }
        ]
    },
    "scenes": [
        {
            "id": "redCubeScene",
            "name": "Red Cube Scene",
            "default": true,
            "description": "A simple scene with a red cube in the center of the screen",
            "settings": {
                "backgroundColor": {
                    "r": 0.1,
                    "g": 0.1,
                    "b": 0.2,
                    "a": 1.0
                },
                "ambientLight": {
                    "r": 0.3,
                    "g": 0.3,
                    "b": 0.3
                }
            },
            "camera": {
                "position": {
                    "x": 0.0,
                    "y": 0.0,
                    "z": 5.0
                },
                "target": {
                    "x": 0.0,
                    "y": 0.0,
                    "z": 0.0
                },
                "up": {
                    "x": 0.0,
                    "y": 1.0,
                    "z": 0.0
                },
                "fov": 45.0,
                "nearPlane": 0.1,
                "farPlane": 100.0
            },
            "entities": [
                {
                    "id": "redCube",
                    "name": "Red Cube",
                    "transform": {
                        "position": {
                            "x": 0.0,
                            "y": 0.0,
                            "z": 0.0
                        },
                        "rotation": {
                            "x": 0.0,
                            "y": 0.0,
                            "z": 0.0,
                            "w": 1.0
                        },
                        "scale": {
                            "x": 1.0,
                            "y": 1.0,
                            "z": 1.0
                        }
                    },
                    "renderable": {
                        "mesh": "cubeMesh",
                        "material": "redCubeMaterial",
                        "visible": true
                    },
                    "behavior": {
                        "codeBehind": "core.SpinBehavior",
                        "parameters": {
                            "rotationSpeed": 45.0,
                            "axis": {
                                "x": 0.0,
                                "y": 1.0,
                                "z": 0.0
                            }
                        }
                    }
                },
                {
                    "id": "violetCube",
                    "name": "Violet Cube",
                    "transform": {
                        "position": {
                            "x": 2.5,
                            "y": 0.0,
                            "z": 0.0
                        },
                        "rotation": {
                            "x": 0.0,
                            "y": 0.0,
                            "z": 0.0,
                            "w": 1.0
                        },
                        "scale": {
                            "x": 1.0,
                            "y": 1.0,
                            "z": 1.0
                        }
                    },
                    "renderable": {
                        "mesh": "cubeMesh",
                        "material": "violetCubeMaterial",
                        "visible": true
                    },
                    "behavior": {
                        "codeBehind": "core.SpinBehavior",
                        "parameters": {
                            "rotationSpeed": 60.0,
                            "axis": {
                                "x": 1.0,
                                "y": 0.0,
                                "z": 0.0
                            }
                        }
                    }
                },
                {
                    "id": "mainLight",
                    "name": "Main Light",
                    "transform": {
                        "position": {
                            "x": 2.0,
                            "y": 2.0,
                            "z": 2.0
                        },
                        "rotation": {
                            "x": 0.0,
                            "y": 0.0,
                            "z": 0.0,
                            "w": 1.0
                        },
                        "scale": {
                            "x": 1.0,
                            "y": 1.0,
                            "z": 1.0
                        }
                    },
                    "light": {
                        "type": "directional",
                        "color": {
                            "r": 0.1,
                            "g": 0.0,
                            "b": 0.0
                        },
                        "intensity": 1.0,
                        "direction": {
                            "x": -1.0,
                            "y": -1.0,
                            "z": -1.0
                        }
                    }
                }
            ]
        }
    ],
    "behaviors": [
        {
            "class": "core.SpinBehavior",
            "name": "Spin Behavior",
            "description": "Rotates an entity continuously around a specified axis",
            "parameters": [
                {
                    "name": "rotationSpeed",
                    "type": "float",
                    "default": 30.0,
                    "description": "Rotation speed in degrees per second"
                },
                {
                    "name": "axis",
                    "type": "vector3",
                    "default": [
                        0,
                        1,
                        0
                    ],
                    "description": "Rotation axis (normalized)"
                }
            ]
        }
    ]
}


================================================================================
FILE: assets\packages\TestPackage\package.json
================================================================================

{
    "metadata": {
        "id": "dev.test",
        "name": "Test Package",
        "version": "1.0.0",
        "description": "Test package for JSON transition",
        "author": "Developer"
    },
    "dependencies": [
        {
            "id": "core.engine",
            "version": "1.0.0",
            "required": true
        }
    ],
    "assets": {
        "textures": [
            {
                "id": "test_texture",
                "path": "textures/test.png",
                "generateMipmaps": true,
                "compressionFormat": "auto"
            }
        ],
        "materials": [
            {
                "id": "test_material",
                "shader": "basic_shader",
                "textures": {
                    "diffuse": "test_texture"
                },
                "properties": {
                    "color": "1.0,1.0,1.0,1.0",
                    "metallic": 0.0,
                    "roughness": 0.5
                }
            }
        ],
        "meshes": [
            {
                "id": "test_cube",
                "path": "meshes/cube.obj",
                "optimize": true,
                "generateTangents": false
            }
        ],
        "shaders": [
            {
                "id": "basic_shader",
                "vertex": "shaders/basic.vert",
                "fragment": "shaders/basic.frag",
                "defines": [
                    "USE_LIGHTING"
                ]
            }
        ]
    },
    "scenes": [
        {
            "id": "test_scene",
            "name": "Test Scene",
            "entities": [
                {
                    "id": "test_cube_entity",
                    "name": "Test Cube",
                    "transform": {
                        "position": [
                            0.0,
                            0.0,
                            0.0
                        ],
                        "rotation": [
                            0.0,
                            0.0,
                            0.0,
                            1.0
                        ],
                        "scale": [
                            1.0,
                            1.0,
                            1.0
                        ]
                    },
                    "components": {
                        "mesh": {
                            "asset": "test_cube"
                        },
                        "material": {
                            "asset": "test_material"
                        },
                        "renderable": {
                            "visible": true,
                            "castShadows": true,
                            "receiveShadows": true
                        }
                    },
                    "behavior": {
                        "type": "SpinBehavior",
                        "parameters": {
                            "speed": 1.0,
                            "axis": "y"
                        }
                    }
                }
            ]
        }
    ]
}


================================================================================
FILE: build_tools\build-tools\CMakeFiles\4.1.0\CompilerIdCXX\CMakeCXXCompilerId.cpp
================================================================================

/* This source file must have a .cpp extension so that all C++ compilers
   recognize the extension without flags.  Borland does not know .cxx for
   example.  */
#ifndef __cplusplus
# error "A C compiler has been selected for C++."
#endif

#if !defined(__has_include)
/* If the compiler does not have __has_include, pretend the answer is
   always no.  */
#  define __has_include(x) 0
#endif


/* Version number components: V=Version, R=Revision, P=Patch
   Version date components:   YYYY=Year, MM=Month,   DD=Day  */

#if defined(__INTEL_COMPILER) || defined(__ICC)
# define COMPILER_ID "Intel"
# if defined(_MSC_VER)
#  define SIMULATE_ID "MSVC"
# endif
# if defined(__GNUC__)
#  define SIMULATE_ID "GNU"
# endif
  /* __INTEL_COMPILER = VRP prior to 2021, and then VVVV for 2021 and later,
     except that a few beta releases use the old format with V=2021.  */
# if __INTEL_COMPILER < 2021 || __INTEL_COMPILER == 202110 || __INTEL_COMPILER == 202111
#  define COMPILER_VERSION_MAJOR DEC(__INTEL_COMPILER/100)
#  define COMPILER_VERSION_MINOR DEC(__INTEL_COMPILER/10 % 10)
#  if defined(__INTEL_COMPILER_UPDATE)
#   define COMPILER_VERSION_PATCH DEC(__INTEL_COMPILER_UPDATE)
#  else
#   define COMPILER_VERSION_PATCH DEC(__INTEL_COMPILER   % 10)
#  endif
# else
#  define COMPILER_VERSION_MAJOR DEC(__INTEL_COMPILER)
#  define COMPILER_VERSION_MINOR DEC(__INTEL_COMPILER_UPDATE)
   /* The third version component from --version is an update index,
      but no macro is provided for it.  */
#  define COMPILER_VERSION_PATCH DEC(0)
# endif
# if defined(__INTEL_COMPILER_BUILD_DATE)
   /* __INTEL_COMPILER_BUILD_DATE = YYYYMMDD */
#  define COMPILER_VERSION_TWEAK DEC(__INTEL_COMPILER_BUILD_DATE)
# endif
# if defined(_MSC_VER)
   /* _MSC_VER = VVRR */
#  define SIMULATE_VERSION_MAJOR DEC(_MSC_VER / 100)
#  define SIMULATE_VERSION_MINOR DEC(_MSC_VER % 100)
# endif
# if defined(__GNUC__)
#  define SIMULATE_VERSION_MAJOR DEC(__GNUC__)
# elif defined(__GNUG__)
#  define SIMULATE_VERSION_MAJOR DEC(__GNUG__)
# endif
# if defined(__GNUC_MINOR__)
#  define SIMULATE_VERSION_MINOR DEC(__GNUC_MINOR__)
# endif
# if defined(__GNUC_PATCHLEVEL__)
#  define SIMULATE_VERSION_PATCH DEC(__GNUC_PATCHLEVEL__)
# endif

#elif (defined(__clang__) && defined(__INTEL_CLANG_COMPILER)) || defined(__INTEL_LLVM_COMPILER)
# define COMPILER_ID "IntelLLVM"
#if defined(_MSC_VER)
# define SIMULATE_ID "MSVC"
#endif
#if defined(__GNUC__)
# define SIMULATE_ID "GNU"
#endif
/* __INTEL_LLVM_COMPILER = VVVVRP prior to 2021.2.0, VVVVRRPP for 2021.2.0 and
 * later.  Look for 6 digit vs. 8 digit version number to decide encoding.
 * VVVV is no smaller than the current year when a version is released.
 */
#if __INTEL_LLVM_COMPILER < 1000000L
# define COMPILER_VERSION_MAJOR DEC(__INTEL_LLVM_COMPILER/100)
# define COMPILER_VERSION_MINOR DEC(__INTEL_LLVM_COMPILER/10 % 10)
# define COMPILER_VERSION_PATCH DEC(__INTEL_LLVM_COMPILER    % 10)
#else
# define COMPILER_VERSION_MAJOR DEC(__INTEL_LLVM_COMPILER/10000)
# define COMPILER_VERSION_MINOR DEC(__INTEL_LLVM_COMPILER/100 % 100)
# define COMPILER_VERSION_PATCH DEC(__INTEL_LLVM_COMPILER     % 100)
#endif
#if defined(_MSC_VER)
  /* _MSC_VER = VVRR */
# define SIMULATE_VERSION_MAJOR DEC(_MSC_VER / 100)
# define SIMULATE_VERSION_MINOR DEC(_MSC_VER % 100)
#endif
#if defined(__GNUC__)
# define SIMULATE_VERSION_MAJOR DEC(__GNUC__)
#elif defined(__GNUG__)
# define SIMULATE_VERSION_MAJOR DEC(__GNUG__)
#endif
#if defined(__GNUC_MINOR__)
# define SIMULATE_VERSION_MINOR DEC(__GNUC_MINOR__)
#endif
#if defined(__GNUC_PATCHLEVEL__)
# define SIMULATE_VERSION_PATCH DEC(__GNUC_PATCHLEVEL__)
#endif

#elif defined(__PATHCC__)
# define COMPILER_ID "PathScale"
# define COMPILER_VERSION_MAJOR DEC(__PATHCC__)
# define COMPILER_VERSION_MINOR DEC(__PATHCC_MINOR__)
# if defined(__PATHCC_PATCHLEVEL__)
#  define COMPILER_VERSION_PATCH DEC(__PATHCC_PATCHLEVEL__)
# endif

#elif defined(__BORLANDC__) && defined(__CODEGEARC_VERSION__)
# define COMPILER_ID "Embarcadero"
# define COMPILER_VERSION_MAJOR HEX(__CODEGEARC_VERSION__>>24 & 0x00FF)
# define COMPILER_VERSION_MINOR HEX(__CODEGEARC_VERSION__>>16 & 0x00FF)
# define COMPILER_VERSION_PATCH DEC(__CODEGEARC_VERSION__     & 0xFFFF)

#elif defined(__BORLANDC__)
# define COMPILER_ID "Borland"
  /* __BORLANDC__ = 0xVRR */
# define COMPILER_VERSION_MAJOR HEX(__BORLANDC__>>8)
# define COMPILER_VERSION_MINOR HEX(__BORLANDC__ & 0xFF)

#elif defined(__WATCOMC__) && __WATCOMC__ < 1200
# define COMPILER_ID "Watcom"
   /* __WATCOMC__ = VVRR */
# define COMPILER_VERSION_MAJOR DEC(__WATCOMC__ / 100)
# define COMPILER_VERSION_MINOR DEC((__WATCOMC__ / 10) % 10)
# if (__WATCOMC__ % 10) > 0
#  define COMPILER_VERSION_PATCH DEC(__WATCOMC__ % 10)
# endif

#elif defined(__WATCOMC__)
# define COMPILER_ID "OpenWatcom"
   /* __WATCOMC__ = VVRP + 1100 */
# define COMPILER_VERSION_MAJOR DEC((__WATCOMC__ - 1100) / 100)
# define COMPILER_VERSION_MINOR DEC((__WATCOMC__ / 10) % 10)
# if (__WATCOMC__ % 10) > 0
#  define COMPILER_VERSION_PATCH DEC(__WATCOMC__ % 10)
# endif

#elif defined(__SUNPRO_CC)
# define COMPILER_ID "SunPro"
# if __SUNPRO_CC >= 0x5100
   /* __SUNPRO_CC = 0xVRRP */
#  define COMPILER_VERSION_MAJOR HEX(__SUNPRO_CC>>12)
#  define COMPILER_VERSION_MINOR HEX(__SUNPRO_CC>>4 & 0xFF)
#  define COMPILER_VERSION_PATCH HEX(__SUNPRO_CC    & 0xF)
# else
   /* __SUNPRO_CC = 0xVRP */
#  define COMPILER_VERSION_MAJOR HEX(__SUNPRO_CC>>8)
#  define COMPILER_VERSION_MINOR HEX(__SUNPRO_CC>>4 & 0xF)
#  define COMPILER_VERSION_PATCH HEX(__SUNPRO_CC    & 0xF)
# endif

#elif defined(__HP_aCC)
# define COMPILER_ID "HP"
  /* __HP_aCC = VVRRPP */
# define COMPILER_VERSION_MAJOR DEC(__HP_aCC/10000)
# define COMPILER_VERSION_MINOR DEC(__HP_aCC/100 % 100)
# define COMPILER_VERSION_PATCH DEC(__HP_aCC     % 100)

#elif defined(__DECCXX)
# define COMPILER_ID "Compaq"
  /* __DECCXX_VER = VVRRTPPPP */
# define COMPILER_VERSION_MAJOR DEC(__DECCXX_VER/10000000)
# define COMPILER_VERSION_MINOR DEC(__DECCXX_VER/100000  % 100)
# define COMPILER_VERSION_PATCH DEC(__DECCXX_VER         % 10000)

#elif defined(__IBMCPP__) && defined(__COMPILER_VER__)
# define COMPILER_ID "zOS"
  /* __IBMCPP__ = VRP */
# define COMPILER_VERSION_MAJOR DEC(__IBMCPP__/100)
# define COMPILER_VERSION_MINOR DEC(__IBMCPP__/10 % 10)
# define COMPILER_VERSION_PATCH DEC(__IBMCPP__    % 10)

#elif defined(__open_xl__) && defined(__clang__)
# define COMPILER_ID "IBMClang"
# define COMPILER_VERSION_MAJOR DEC(__open_xl_version__)
# define COMPILER_VERSION_MINOR DEC(__open_xl_release__)
# define COMPILER_VERSION_PATCH DEC(__open_xl_modification__)
# define COMPILER_VERSION_TWEAK DEC(__open_xl_ptf_fix_level__)
# define COMPILER_VERSION_INTERNAL_STR  __clang_version__


#elif defined(__ibmxl__) && defined(__clang__)
# define COMPILER_ID "XLClang"
# define COMPILER_VERSION_MAJOR DEC(__ibmxl_version__)
# define COMPILER_VERSION_MINOR DEC(__ibmxl_release__)
# define COMPILER_VERSION_PATCH DEC(__ibmxl_modification__)
# define COMPILER_VERSION_TWEAK DEC(__ibmxl_ptf_fix_level__)


#elif defined(__IBMCPP__) && !defined(__COMPILER_VER__) && __IBMCPP__ >= 800
# define COMPILER_ID "XL"
  /* __IBMCPP__ = VRP */
# define COMPILER_VERSION_MAJOR DEC(__IBMCPP__/100)
# define COMPILER_VERSION_MINOR DEC(__IBMCPP__/10 % 10)
# define COMPILER_VERSION_PATCH DEC(__IBMCPP__    % 10)

#elif defined(__IBMCPP__) && !defined(__COMPILER_VER__) && __IBMCPP__ < 800
# define COMPILER_ID "VisualAge"
  /* __IBMCPP__ = VRP */
# define COMPILER_VERSION_MAJOR DEC(__IBMCPP__/100)
# define COMPILER_VERSION_MINOR DEC(__IBMCPP__/10 % 10)
# define COMPILER_VERSION_PATCH DEC(__IBMCPP__    % 10)

#elif defined(__NVCOMPILER)
# define COMPILER_ID "NVHPC"
# define COMPILER_VERSION_MAJOR DEC(__NVCOMPILER_MAJOR__)
# define COMPILER_VERSION_MINOR DEC(__NVCOMPILER_MINOR__)
# if defined(__NVCOMPILER_PATCHLEVEL__)
#  define COMPILER_VERSION_PATCH DEC(__NVCOMPILER_PATCHLEVEL__)
# endif

#elif defined(__PGI)
# define COMPILER_ID "PGI"
# define COMPILER_VERSION_MAJOR DEC(__PGIC__)
# define COMPILER_VERSION_MINOR DEC(__PGIC_MINOR__)
# if defined(__PGIC_PATCHLEVEL__)
#  define COMPILER_VERSION_PATCH DEC(__PGIC_PATCHLEVEL__)
# endif

#elif defined(__clang__) && defined(__cray__)
# define COMPILER_ID "CrayClang"
# define COMPILER_VERSION_MAJOR DEC(__cray_major__)
# define COMPILER_VERSION_MINOR DEC(__cray_minor__)
# define COMPILER_VERSION_PATCH DEC(__cray_patchlevel__)
# define COMPILER_VERSION_INTERNAL_STR __clang_version__


#elif defined(_CRAYC)
# define COMPILER_ID "Cray"
# define COMPILER_VERSION_MAJOR DEC(_RELEASE_MAJOR)
# define COMPILER_VERSION_MINOR DEC(_RELEASE_MINOR)

#elif defined(__TI_COMPILER_VERSION__)
# define COMPILER_ID "TI"
  /* __TI_COMPILER_VERSION__ = VVVRRRPPP */
# define COMPILER_VERSION_MAJOR DEC(__TI_COMPILER_VERSION__/1000000)
# define COMPILER_VERSION_MINOR DEC(__TI_COMPILER_VERSION__/1000   % 1000)
# define COMPILER_VERSION_PATCH DEC(__TI_COMPILER_VERSION__        % 1000)

#elif defined(__CLANG_FUJITSU)
# define COMPILER_ID "FujitsuClang"
# define COMPILER_VERSION_MAJOR DEC(__FCC_major__)
# define COMPILER_VERSION_MINOR DEC(__FCC_minor__)
# define COMPILER_VERSION_PATCH DEC(__FCC_patchlevel__)
# define COMPILER_VERSION_INTERNAL_STR __clang_version__


#elif defined(__FUJITSU)
# define COMPILER_ID "Fujitsu"
# if defined(__FCC_version__)
#   define COMPILER_VERSION __FCC_version__
# elif defined(__FCC_major__)
#   define COMPILER_VERSION_MAJOR DEC(__FCC_major__)
#   define COMPILER_VERSION_MINOR DEC(__FCC_minor__)
#   define COMPILER_VERSION_PATCH DEC(__FCC_patchlevel__)
# endif
# if defined(__fcc_version)
#   define COMPILER_VERSION_INTERNAL DEC(__fcc_version)
# elif defined(__FCC_VERSION)
#   define COMPILER_VERSION_INTERNAL DEC(__FCC_VERSION)
# endif


#elif defined(__ghs__)
# define COMPILER_ID "GHS"
/* __GHS_VERSION_NUMBER = VVVVRP */
# ifdef __GHS_VERSION_NUMBER
# define COMPILER_VERSION_MAJOR DEC(__GHS_VERSION_NUMBER / 100)
# define COMPILER_VERSION_MINOR DEC(__GHS_VERSION_NUMBER / 10 % 10)
# define COMPILER_VERSION_PATCH DEC(__GHS_VERSION_NUMBER      % 10)
# endif

#elif defined(__TASKING__)
# define COMPILER_ID "Tasking"
  # define COMPILER_VERSION_MAJOR DEC(__VERSION__/1000)
  # define COMPILER_VERSION_MINOR DEC(__VERSION__ % 100)
# define COMPILER_VERSION_INTERNAL DEC(__VERSION__)

#elif defined(__ORANGEC__)
# define COMPILER_ID "OrangeC"
# define COMPILER_VERSION_MAJOR DEC(__ORANGEC_MAJOR__)
# define COMPILER_VERSION_MINOR DEC(__ORANGEC_MINOR__)
# define COMPILER_VERSION_PATCH DEC(__ORANGEC_PATCHLEVEL__)

#elif defined(__RENESAS__)
# define COMPILER_ID "Renesas"
/* __RENESAS_VERSION__ = 0xVVRRPP00 */
# define COMPILER_VERSION_MAJOR HEX(__RENESAS_VERSION__ >> 24 & 0xFF)
# define COMPILER_VERSION_MINOR HEX(__RENESAS_VERSION__ >> 16 & 0xFF)
# define COMPILER_VERSION_PATCH HEX(__RENESAS_VERSION__ >> 8  & 0xFF)

#elif defined(__SCO_VERSION__)
# define COMPILER_ID "SCO"

#elif defined(__ARMCC_VERSION) && !defined(__clang__)
# define COMPILER_ID "ARMCC"
#if __ARMCC_VERSION >= 1000000
  /* __ARMCC_VERSION = VRRPPPP */
  # define COMPILER_VERSION_MAJOR DEC(__ARMCC_VERSION/1000000)
  # define COMPILER_VERSION_MINOR DEC(__ARMCC_VERSION/10000 % 100)
  # define COMPILER_VERSION_PATCH DEC(__ARMCC_VERSION     % 10000)
#else
  /* __ARMCC_VERSION = VRPPPP */
  # define COMPILER_VERSION_MAJOR DEC(__ARMCC_VERSION/100000)
  # define COMPILER_VERSION_MINOR DEC(__ARMCC_VERSION/10000 % 10)
  # define COMPILER_VERSION_PATCH DEC(__ARMCC_VERSION    % 10000)
#endif


#elif defined(__clang__) && defined(__apple_build_version__)
# define COMPILER_ID "AppleClang"
# if defined(_MSC_VER)
#  define SIMULATE_ID "MSVC"
# endif
# define COMPILER_VERSION_MAJOR DEC(__clang_major__)
# define COMPILER_VERSION_MINOR DEC(__clang_minor__)
# define COMPILER_VERSION_PATCH DEC(__clang_patchlevel__)
# if defined(_MSC_VER)
   /* _MSC_VER = VVRR */
#  define SIMULATE_VERSION_MAJOR DEC(_MSC_VER / 100)
#  define SIMULATE_VERSION_MINOR DEC(_MSC_VER % 100)
# endif
# define COMPILER_VERSION_TWEAK DEC(__apple_build_version__)

#elif defined(__clang__) && defined(__ARMCOMPILER_VERSION)
# define COMPILER_ID "ARMClang"
  # define COMPILER_VERSION_MAJOR DEC(__ARMCOMPILER_VERSION/1000000)
  # define COMPILER_VERSION_MINOR DEC(__ARMCOMPILER_VERSION/10000 % 100)
  # define COMPILER_VERSION_PATCH DEC(__ARMCOMPILER_VERSION/100   % 100)
# define COMPILER_VERSION_INTERNAL DEC(__ARMCOMPILER_VERSION)

#elif defined(__clang__) && defined(__ti__)
# define COMPILER_ID "TIClang"
  # define COMPILER_VERSION_MAJOR DEC(__ti_major__)
  # define COMPILER_VERSION_MINOR DEC(__ti_minor__)
  # define COMPILER_VERSION_PATCH DEC(__ti_patchlevel__)
# define COMPILER_VERSION_INTERNAL DEC(__ti_version__)

#elif defined(__clang__)
# define COMPILER_ID "Clang"
# if defined(_MSC_VER)
#  define SIMULATE_ID "MSVC"
# endif
# define COMPILER_VERSION_MAJOR DEC(__clang_major__)
# define COMPILER_VERSION_MINOR DEC(__clang_minor__)
# define COMPILER_VERSION_PATCH DEC(__clang_patchlevel__)
# if defined(_MSC_VER)
   /* _MSC_VER = VVRR */
#  define SIMULATE_VERSION_MAJOR DEC(_MSC_VER / 100)
#  define SIMULATE_VERSION_MINOR DEC(_MSC_VER % 100)
# endif

#elif defined(__LCC__) && (defined(__GNUC__) || defined(__GNUG__) || defined(__MCST__))
# define COMPILER_ID "LCC"
# define COMPILER_VERSION_MAJOR DEC(__LCC__ / 100)
# define COMPILER_VERSION_MINOR DEC(__LCC__ % 100)
# if defined(__LCC_MINOR__)
#  define COMPILER_VERSION_PATCH DEC(__LCC_MINOR__)
# endif
# if defined(__GNUC__) && defined(__GNUC_MINOR__)
#  define SIMULATE_ID "GNU"
#  define SIMULATE_VERSION_MAJOR DEC(__GNUC__)
#  define SIMULATE_VERSION_MINOR DEC(__GNUC_MINOR__)
#  if defined(__GNUC_PATCHLEVEL__)
#   define SIMULATE_VERSION_PATCH DEC(__GNUC_PATCHLEVEL__)
#  endif
# endif

#elif defined(__GNUC__) || defined(__GNUG__)
# define COMPILER_ID "GNU"
# if defined(__GNUC__)
#  define COMPILER_VERSION_MAJOR DEC(__GNUC__)
# else
#  define COMPILER_VERSION_MAJOR DEC(__GNUG__)
# endif
# if defined(__GNUC_MINOR__)
#  define COMPILER_VERSION_MINOR DEC(__GNUC_MINOR__)
# endif
# if defined(__GNUC_PATCHLEVEL__)
#  define COMPILER_VERSION_PATCH DEC(__GNUC_PATCHLEVEL__)
# endif

#elif defined(_MSC_VER)
# define COMPILER_ID "MSVC"
  /* _MSC_VER = VVRR */
# define COMPILER_VERSION_MAJOR DEC(_MSC_VER / 100)
# define COMPILER_VERSION_MINOR DEC(_MSC_VER % 100)
# if defined(_MSC_FULL_VER)
#  if _MSC_VER >= 1400
    /* _MSC_FULL_VER = VVRRPPPPP */
#   define COMPILER_VERSION_PATCH DEC(_MSC_FULL_VER % 100000)
#  else
    /* _MSC_FULL_VER = VVRRPPPP */
#   define COMPILER_VERSION_PATCH DEC(_MSC_FULL_VER % 10000)
#  endif
# endif
# if defined(_MSC_BUILD)
#  define COMPILER_VERSION_TWEAK DEC(_MSC_BUILD)
# endif

#elif defined(_ADI_COMPILER)
# define COMPILER_ID "ADSP"
#if defined(__VERSIONNUM__)
  /* __VERSIONNUM__ = 0xVVRRPPTT */
#  define COMPILER_VERSION_MAJOR DEC(__VERSIONNUM__ >> 24 & 0xFF)
#  define COMPILER_VERSION_MINOR DEC(__VERSIONNUM__ >> 16 & 0xFF)
#  define COMPILER_VERSION_PATCH DEC(__VERSIONNUM__ >> 8 & 0xFF)
#  define COMPILER_VERSION_TWEAK DEC(__VERSIONNUM__ & 0xFF)
#endif

#elif defined(__IAR_SYSTEMS_ICC__) || defined(__IAR_SYSTEMS_ICC)
# define COMPILER_ID "IAR"
# if defined(__VER__) && defined(__ICCARM__)
#  define COMPILER_VERSION_MAJOR DEC((__VER__) / 1000000)
#  define COMPILER_VERSION_MINOR DEC(((__VER__) / 1000) % 1000)
#  define COMPILER_VERSION_PATCH DEC((__VER__) % 1000)
#  define COMPILER_VERSION_INTERNAL DEC(__IAR_SYSTEMS_ICC__)
# elif defined(__VER__) && (defined(__ICCAVR__) || defined(__ICCRX__) || defined(__ICCRH850__) || defined(__ICCRL78__) || defined(__ICC430__) || defined(__ICCRISCV__) || defined(__ICCV850__) || defined(__ICC8051__) || defined(__ICCSTM8__))
#  define COMPILER_VERSION_MAJOR DEC((__VER__) / 100)
#  define COMPILER_VERSION_MINOR DEC((__VER__) - (((__VER__) / 100)*100))
#  define COMPILER_VERSION_PATCH DEC(__SUBVERSION__)
#  define COMPILER_VERSION_INTERNAL DEC(__IAR_SYSTEMS_ICC__)
# endif

#elif defined(__DCC__) && defined(_DIAB_TOOL)
# define COMPILER_ID "Diab"
  # define COMPILER_VERSION_MAJOR DEC(__VERSION_MAJOR_NUMBER__)
  # define COMPILER_VERSION_MINOR DEC(__VERSION_MINOR_NUMBER__)
  # define COMPILER_VERSION_PATCH DEC(__VERSION_ARCH_FEATURE_NUMBER__)
  # define COMPILER_VERSION_TWEAK DEC(__VERSION_BUG_FIX_NUMBER__)



/* These compilers are either not known or too old to define an
  identification macro.  Try to identify the platform and guess that
  it is the native compiler.  */
#elif defined(__hpux) || defined(__hpua)
# define COMPILER_ID "HP"

#else /* unknown compiler */
# define COMPILER_ID ""
#endif

/* Construct the string literal in pieces to prevent the source from
   getting matched.  Store it in a pointer rather than an array
   because some compilers will just produce instructions to fill the
   array rather than assigning a pointer to a static array.  */
char const* info_compiler = "INFO" ":" "compiler[" COMPILER_ID "]";
#ifdef SIMULATE_ID
char const* info_simulate = "INFO" ":" "simulate[" SIMULATE_ID "]";
#endif

#ifdef __QNXNTO__
char const* qnxnto = "INFO" ":" "qnxnto[]";
#endif

#if defined(__CRAYXT_COMPUTE_LINUX_TARGET)
char const *info_cray = "INFO" ":" "compiler_wrapper[CrayPrgEnv]";
#endif

#define STRINGIFY_HELPER(X) #X
#define STRINGIFY(X) STRINGIFY_HELPER(X)

/* Identify known platforms by name.  */
#if defined(__linux) || defined(__linux__) || defined(linux)
# define PLATFORM_ID "Linux"

#elif defined(__MSYS__)
# define PLATFORM_ID "MSYS"

#elif defined(__CYGWIN__)
# define PLATFORM_ID "Cygwin"

#elif defined(__MINGW32__)
# define PLATFORM_ID "MinGW"

#elif defined(__APPLE__)
# define PLATFORM_ID "Darwin"

#elif defined(_WIN32) || defined(__WIN32__) || defined(WIN32)
# define PLATFORM_ID "Windows"

#elif defined(__FreeBSD__) || defined(__FreeBSD)
# define PLATFORM_ID "FreeBSD"

#elif defined(__NetBSD__) || defined(__NetBSD)
# define PLATFORM_ID "NetBSD"

#elif defined(__OpenBSD__) || defined(__OPENBSD)
# define PLATFORM_ID "OpenBSD"

#elif defined(__sun) || defined(sun)
# define PLATFORM_ID "SunOS"

#elif defined(_AIX) || defined(__AIX) || defined(__AIX__) || defined(__aix) || defined(__aix__)
# define PLATFORM_ID "AIX"

#elif defined(__hpux) || defined(__hpux__)
# define PLATFORM_ID "HP-UX"

#elif defined(__HAIKU__)
# define PLATFORM_ID "Haiku"

#elif defined(__BeOS) || defined(__BEOS__) || defined(_BEOS)
# define PLATFORM_ID "BeOS"

#elif defined(__QNX__) || defined(__QNXNTO__)
# define PLATFORM_ID "QNX"

#elif defined(__tru64) || defined(_tru64) || defined(__TRU64__)
# define PLATFORM_ID "Tru64"

#elif defined(__riscos) || defined(__riscos__)
# define PLATFORM_ID "RISCos"

#elif defined(__sinix) || defined(__sinix__) || defined(__SINIX__)
# define PLATFORM_ID "SINIX"

#elif defined(__UNIX_SV__)
# define PLATFORM_ID "UNIX_SV"

#elif defined(__bsdos__)
# define PLATFORM_ID "BSDOS"

#elif defined(_MPRAS) || defined(MPRAS)
# define PLATFORM_ID "MP-RAS"

#elif defined(__osf) || defined(__osf__)
# define PLATFORM_ID "OSF1"

#elif defined(_SCO_SV) || defined(SCO_SV) || defined(sco_sv)
# define PLATFORM_ID "SCO_SV"

#elif defined(__ultrix) || defined(__ultrix__) || defined(_ULTRIX)
# define PLATFORM_ID "ULTRIX"

#elif defined(__XENIX__) || defined(_XENIX) || defined(XENIX)
# define PLATFORM_ID "Xenix"

#elif defined(__WATCOMC__)
# if defined(__LINUX__)
#  define PLATFORM_ID "Linux"

# elif defined(__DOS__)
#  define PLATFORM_ID "DOS"

# elif defined(__OS2__)
#  define PLATFORM_ID "OS2"

# elif defined(__WINDOWS__)
#  define PLATFORM_ID "Windows3x"

# elif defined(__VXWORKS__)
#  define PLATFORM_ID "VxWorks"

# else /* unknown platform */
#  define PLATFORM_ID
# endif

#elif defined(__INTEGRITY)
# if defined(INT_178B)
#  define PLATFORM_ID "Integrity178"

# else /* regular Integrity */
#  define PLATFORM_ID "Integrity"
# endif

# elif defined(_ADI_COMPILER)
#  define PLATFORM_ID "ADSP"

#else /* unknown platform */
# define PLATFORM_ID

#endif

/* For windows compilers MSVC and Intel we can determine
   the architecture of the compiler being used.  This is because
   the compilers do not have flags that can change the architecture,
   but rather depend on which compiler is being used
*/
#if defined(_WIN32) && defined(_MSC_VER)
# if defined(_M_IA64)
#  define ARCHITECTURE_ID "IA64"

# elif defined(_M_ARM64EC)
#  define ARCHITECTURE_ID "ARM64EC"

# elif defined(_M_X64) || defined(_M_AMD64)
#  define ARCHITECTURE_ID "x64"

# elif defined(_M_IX86)
#  define ARCHITECTURE_ID "X86"

# elif defined(_M_ARM64)
#  define ARCHITECTURE_ID "ARM64"

# elif defined(_M_ARM)
#  if _M_ARM == 4
#   define ARCHITECTURE_ID "ARMV4I"
#  elif _M_ARM == 5
#   define ARCHITECTURE_ID "ARMV5I"
#  else
#   define ARCHITECTURE_ID "ARMV" STRINGIFY(_M_ARM)
#  endif

# elif defined(_M_MIPS)
#  define ARCHITECTURE_ID "MIPS"

# elif defined(_M_SH)
#  define ARCHITECTURE_ID "SHx"

# else /* unknown architecture */
#  define ARCHITECTURE_ID ""
# endif

#elif defined(__WATCOMC__)
# if defined(_M_I86)
#  define ARCHITECTURE_ID "I86"

# elif defined(_M_IX86)
#  define ARCHITECTURE_ID "X86"

# else /* unknown architecture */
#  define ARCHITECTURE_ID ""
# endif

#elif defined(__IAR_SYSTEMS_ICC__) || defined(__IAR_SYSTEMS_ICC)
# if defined(__ICCARM__)
#  define ARCHITECTURE_ID "ARM"

# elif defined(__ICCRX__)
#  define ARCHITECTURE_ID "RX"

# elif defined(__ICCRH850__)
#  define ARCHITECTURE_ID "RH850"

# elif defined(__ICCRL78__)
#  define ARCHITECTURE_ID "RL78"

# elif defined(__ICCRISCV__)
#  define ARCHITECTURE_ID "RISCV"

# elif defined(__ICCAVR__)
#  define ARCHITECTURE_ID "AVR"

# elif defined(__ICC430__)
#  define ARCHITECTURE_ID "MSP430"

# elif defined(__ICCV850__)
#  define ARCHITECTURE_ID "V850"

# elif defined(__ICC8051__)
#  define ARCHITECTURE_ID "8051"

# elif defined(__ICCSTM8__)
#  define ARCHITECTURE_ID "STM8"

# else /* unknown architecture */
#  define ARCHITECTURE_ID ""
# endif

#elif defined(__ghs__)
# if defined(__PPC64__)
#  define ARCHITECTURE_ID "PPC64"

# elif defined(__ppc__)
#  define ARCHITECTURE_ID "PPC"

# elif defined(__ARM__)
#  define ARCHITECTURE_ID "ARM"

# elif defined(__x86_64__)
#  define ARCHITECTURE_ID "x64"

# elif defined(__i386__)
#  define ARCHITECTURE_ID "X86"

# else /* unknown architecture */
#  define ARCHITECTURE_ID ""
# endif

#elif defined(__clang__) && defined(__ti__)
# if defined(__ARM_ARCH)
#  define ARCHITECTURE_ID "ARM"

# else /* unknown architecture */
#  define ARCHITECTURE_ID ""
# endif

#elif defined(__TI_COMPILER_VERSION__)
# if defined(__TI_ARM__)
#  define ARCHITECTURE_ID "ARM"

# elif defined(__MSP430__)
#  define ARCHITECTURE_ID "MSP430"

# elif defined(__TMS320C28XX__)
#  define ARCHITECTURE_ID "TMS320C28x"

# elif defined(__TMS320C6X__) || defined(_TMS320C6X)
#  define ARCHITECTURE_ID "TMS320C6x"

# else /* unknown architecture */
#  define ARCHITECTURE_ID ""
# endif

# elif defined(__ADSPSHARC__)
#  define ARCHITECTURE_ID "SHARC"

# elif defined(__ADSPBLACKFIN__)
#  define ARCHITECTURE_ID "Blackfin"

#elif defined(__TASKING__)

# if defined(__CTC__) || defined(__CPTC__)
#  define ARCHITECTURE_ID "TriCore"

# elif defined(__CMCS__)
#  define ARCHITECTURE_ID "MCS"

# elif defined(__CARM__) || defined(__CPARM__)
#  define ARCHITECTURE_ID "ARM"

# elif defined(__CARC__)
#  define ARCHITECTURE_ID "ARC"

# elif defined(__C51__)
#  define ARCHITECTURE_ID "8051"

# elif defined(__CPCP__)
#  define ARCHITECTURE_ID "PCP"

# else
#  define ARCHITECTURE_ID ""
# endif

#elif defined(__RENESAS__)
# if defined(__CCRX__)
#  define ARCHITECTURE_ID "RX"

# elif defined(__CCRL__)
#  define ARCHITECTURE_ID "RL78"

# elif defined(__CCRH__)
#  define ARCHITECTURE_ID "RH850"

# else
#  define ARCHITECTURE_ID ""
# endif

#else
#  define ARCHITECTURE_ID
#endif

/* Convert integer to decimal digit literals.  */
#define DEC(n)                   \
  ('0' + (((n) / 10000000)%10)), \
  ('0' + (((n) / 1000000)%10)),  \
  ('0' + (((n) / 100000)%10)),   \
  ('0' + (((n) / 10000)%10)),    \
  ('0' + (((n) / 1000)%10)),     \
  ('0' + (((n) / 100)%10)),      \
  ('0' + (((n) / 10)%10)),       \
  ('0' +  ((n) % 10))

/* Convert integer to hex digit literals.  */
#define HEX(n)             \
  ('0' + ((n)>>28 & 0xF)), \
  ('0' + ((n)>>24 & 0xF)), \
  ('0' + ((n)>>20 & 0xF)), \
  ('0' + ((n)>>16 & 0xF)), \
  ('0' + ((n)>>12 & 0xF)), \
  ('0' + ((n)>>8  & 0xF)), \
  ('0' + ((n)>>4  & 0xF)), \
  ('0' + ((n)     & 0xF))

/* Construct a string literal encoding the version number. */
#ifdef COMPILER_VERSION
char const* info_version = "INFO" ":" "compiler_version[" COMPILER_VERSION "]";

/* Construct a string literal encoding the version number components. */
#elif defined(COMPILER_VERSION_MAJOR)
char const info_version[] = {
  'I', 'N', 'F', 'O', ':',
  'c','o','m','p','i','l','e','r','_','v','e','r','s','i','o','n','[',
  COMPILER_VERSION_MAJOR,
# ifdef COMPILER_VERSION_MINOR
  '.', COMPILER_VERSION_MINOR,
#  ifdef COMPILER_VERSION_PATCH
   '.', COMPILER_VERSION_PATCH,
#   ifdef COMPILER_VERSION_TWEAK
    '.', COMPILER_VERSION_TWEAK,
#   endif
#  endif
# endif
  ']','\0'};
#endif

/* Construct a string literal encoding the internal version number. */
#ifdef COMPILER_VERSION_INTERNAL
char const info_version_internal[] = {
  'I', 'N', 'F', 'O', ':',
  'c','o','m','p','i','l','e','r','_','v','e','r','s','i','o','n','_',
  'i','n','t','e','r','n','a','l','[',
  COMPILER_VERSION_INTERNAL,']','\0'};
#elif defined(COMPILER_VERSION_INTERNAL_STR)
char const* info_version_internal = "INFO" ":" "compiler_version_internal[" COMPILER_VERSION_INTERNAL_STR "]";
#endif

/* Construct a string literal encoding the version number components. */
#ifdef SIMULATE_VERSION_MAJOR
char const info_simulate_version[] = {
  'I', 'N', 'F', 'O', ':',
  's','i','m','u','l','a','t','e','_','v','e','r','s','i','o','n','[',
  SIMULATE_VERSION_MAJOR,
# ifdef SIMULATE_VERSION_MINOR
  '.', SIMULATE_VERSION_MINOR,
#  ifdef SIMULATE_VERSION_PATCH
   '.', SIMULATE_VERSION_PATCH,
#   ifdef SIMULATE_VERSION_TWEAK
    '.', SIMULATE_VERSION_TWEAK,
#   endif
#  endif
# endif
  ']','\0'};
#endif

/* Construct the string literal in pieces to prevent the source from
   getting matched.  Store it in a pointer rather than an array
   because some compilers will just produce instructions to fill the
   array rather than assigning a pointer to a static array.  */
char const* info_platform = "INFO" ":" "platform[" PLATFORM_ID "]";
char const* info_arch = "INFO" ":" "arch[" ARCHITECTURE_ID "]";



#define CXX_STD_98 199711L
#define CXX_STD_11 201103L
#define CXX_STD_14 201402L
#define CXX_STD_17 201703L
#define CXX_STD_20 202002L
#define CXX_STD_23 202302L

#if defined(__INTEL_COMPILER) && defined(_MSVC_LANG)
#  if _MSVC_LANG > CXX_STD_17
#    define CXX_STD _MSVC_LANG
#  elif _MSVC_LANG == CXX_STD_17 && defined(__cpp_aggregate_paren_init)
#    define CXX_STD CXX_STD_20
#  elif _MSVC_LANG > CXX_STD_14 && __cplusplus > CXX_STD_17
#    define CXX_STD CXX_STD_20
#  elif _MSVC_LANG > CXX_STD_14
#    define CXX_STD CXX_STD_17
#  elif defined(__INTEL_CXX11_MODE__) && defined(__cpp_aggregate_nsdmi)
#    define CXX_STD CXX_STD_14
#  elif defined(__INTEL_CXX11_MODE__)
#    define CXX_STD CXX_STD_11
#  else
#    define CXX_STD CXX_STD_98
#  endif
#elif defined(_MSC_VER) && defined(_MSVC_LANG)
#  if _MSVC_LANG > __cplusplus
#    define CXX_STD _MSVC_LANG
#  else
#    define CXX_STD __cplusplus
#  endif
#elif defined(__NVCOMPILER)
#  if __cplusplus == CXX_STD_17 && defined(__cpp_aggregate_paren_init)
#    define CXX_STD CXX_STD_20
#  else
#    define CXX_STD __cplusplus
#  endif
#elif defined(__INTEL_COMPILER) || defined(__PGI)
#  if __cplusplus == CXX_STD_11 && defined(__cpp_namespace_attributes)
#    define CXX_STD CXX_STD_17
#  elif __cplusplus == CXX_STD_11 && defined(__cpp_aggregate_nsdmi)
#    define CXX_STD CXX_STD_14
#  else
#    define CXX_STD __cplusplus
#  endif
#elif (defined(__IBMCPP__) || defined(__ibmxl__)) && defined(__linux__)
#  if __cplusplus == CXX_STD_11 && defined(__cpp_aggregate_nsdmi)
#    define CXX_STD CXX_STD_14
#  else
#    define CXX_STD __cplusplus
#  endif
#elif __cplusplus == 1 && defined(__GXX_EXPERIMENTAL_CXX0X__)
#  define CXX_STD CXX_STD_11
#else
#  define CXX_STD __cplusplus
#endif

const char* info_language_standard_default = "INFO" ":" "standard_default["
#if CXX_STD > CXX_STD_23
  "26"
#elif CXX_STD > CXX_STD_20
  "23"
#elif CXX_STD > CXX_STD_17
  "20"
#elif CXX_STD > CXX_STD_14
  "17"
#elif CXX_STD > CXX_STD_11
  "14"
#elif CXX_STD >= CXX_STD_11
  "11"
#else
  "98"
#endif
"]";

const char* info_language_extensions_default = "INFO" ":" "extensions_default["
#if (defined(__clang__) || defined(__GNUC__) || defined(__xlC__) ||           \
     defined(__TI_COMPILER_VERSION__) || defined(__RENESAS__)) &&             \
  !defined(__STRICT_ANSI__)
  "ON"
#else
  "OFF"
#endif
"]";

/*--------------------------------------------------------------------------*/

int main(int argc, char* argv[])
{
  int require = 0;
  require += info_compiler[argc];
  require += info_platform[argc];
  require += info_arch[argc];
#ifdef COMPILER_VERSION_MAJOR
  require += info_version[argc];
#endif
#if defined(COMPILER_VERSION_INTERNAL) || defined(COMPILER_VERSION_INTERNAL_STR)
  require += info_version_internal[argc];
#endif
#ifdef SIMULATE_ID
  require += info_simulate[argc];
#endif
#ifdef SIMULATE_VERSION_MAJOR
  require += info_simulate_version[argc];
#endif
#if defined(__CRAYXT_COMPUTE_LINUX_TARGET)
  require += info_cray[argc];
#endif
  require += info_language_standard_default[argc];
  require += info_language_extensions_default[argc];
  (void)argv;
  return require;
}


================================================================================
FILE: build-debug\assets\packages\core\package.json
================================================================================

{
    "metadata": {
        "id": "core",
        "name": "Core Package",
        "version": "1.0.0",
        "description": "Core entities and scenes for the FPV Flight Simulator",
        "author": "FPV Flight Simulator Team"
    },
    "dependencies": [],
    "assets": {
        "materials": [
            {
                "id": "redCubeMaterial",
                "name": "Red Cube Material",
                "diffuseColor": {
                    "r": 1.0,
                    "g": 0.0,
                    "b": 0.0,
                    "a": 1.0
                },
                "specularColor": {
                    "r": 0.2,
                    "g": 0.9,
                    "b": 0.2,
                    "a": 1.0
                },
                "shininess": 32.0
            },
            {
                "id": "violetCubeMaterial",
                "name": "Violet Cube Material",
                "diffuseColor": {
                    "r": 0.6,
                    "g": 0.2,
                    "b": 0.9,
                    "a": 1.0
                },
                "specularColor": {
                    "r": 0.8,
                    "g": 0.6,
                    "b": 1.0,
                    "a": 1.0
                },
                "shininess": 32.0
            }
        ],
        "meshes": [
            {
                "id": "cubeMesh",
                "name": "Cube Mesh",
                "type": "procedural",
                "primitive": {
                    "type": "cube",
                    "size": {
                        "width": 1.0,
                        "height": 1.0,
                        "depth": 1.0
                    },
                    "uvMapping": true
                }
            }
        ]
    },
    "scenes": [
        {
            "id": "redCubeScene",
            "name": "Red Cube Scene",
            "default": true,
            "description": "A simple scene with a red cube in the center of the screen",
            "settings": {
                "backgroundColor": {
                    "r": 0.1,
                    "g": 0.1,
                    "b": 0.2,
                    "a": 1.0
                },
                "ambientLight": {
                    "r": 0.3,
                    "g": 0.3,
                    "b": 0.3
                }
            },
            "camera": {
                "position": {
                    "x": 0.0,
                    "y": 0.0,
                    "z": 5.0
                },
                "target": {
                    "x": 0.0,
                    "y": 0.0,
                    "z": 0.0
                },
                "up": {
                    "x": 0.0,
                    "y": 1.0,
                    "z": 0.0
                },
                "fov": 45.0,
                "nearPlane": 0.1,
                "farPlane": 100.0
            },
            "entities": [
                {
                    "id": "redCube",
                    "name": "Red Cube",
                    "transform": {
                        "position": {
                            "x": 0.0,
                            "y": 0.0,
                            "z": 0.0
                        },
                        "rotation": {
                            "x": 0.0,
                            "y": 0.0,
                            "z": 0.0,
                            "w": 1.0
                        },
                        "scale": {
                            "x": 1.0,
                            "y": 1.0,
                            "z": 1.0
                        }
                    },
                    "renderable": {
                        "mesh": "cubeMesh",
                        "material": "redCubeMaterial",
                        "visible": true
                    },
                    "behavior": {
                        "codeBehind": "core.SpinBehavior",
                        "parameters": {
                            "rotationSpeed": 45.0,
                            "axis": {
                                "x": 0.0,
                                "y": 1.0,
                                "z": 0.0
                            }
                        }
                    }
                },
                {
                    "id": "violetCube",
                    "name": "Violet Cube",
                    "transform": {
                        "position": {
                            "x": 2.5,
                            "y": 0.0,
                            "z": 0.0
                        },
                        "rotation": {
                            "x": 0.0,
                            "y": 0.0,
                            "z": 0.0,
                            "w": 1.0
                        },
                        "scale": {
                            "x": 1.0,
                            "y": 1.0,
                            "z": 1.0
                        }
                    },
                    "renderable": {
                        "mesh": "cubeMesh",
                        "material": "violetCubeMaterial",
                        "visible": true
                    },
                    "behavior": {
                        "codeBehind": "core.SpinBehavior",
                        "parameters": {
                            "rotationSpeed": 60.0,
                            "axis": {
                                "x": 1.0,
                                "y": 0.0,
                                "z": 0.0
                            }
                        }
                    }
                },
                {
                    "id": "mainLight",
                    "name": "Main Light",
                    "transform": {
                        "position": {
                            "x": 2.0,
                            "y": 2.0,
                            "z": 2.0
                        },
                        "rotation": {
                            "x": 0.0,
                            "y": 0.0,
                            "z": 0.0,
                            "w": 1.0
                        },
                        "scale": {
                            "x": 1.0,
                            "y": 1.0,
                            "z": 1.0
                        }
                    },
                    "light": {
                        "type": "directional",
                        "color": {
                            "r": 0.1,
                            "g": 0.0,
                            "b": 0.0
                        },
                        "intensity": 1.0,
                        "direction": {
                            "x": -1.0,
                            "y": -1.0,
                            "z": -1.0
                        }
                    }
                }
            ]
        }
    ],
    "behaviors": [
        {
            "class": "core.SpinBehavior",
            "name": "Spin Behavior",
            "description": "Rotates an entity continuously around a specified axis",
            "parameters": [
                {
                    "name": "rotationSpeed",
                    "type": "float",
                    "default": 30.0,
                    "description": "Rotation speed in degrees per second"
                },
                {
                    "name": "axis",
                    "type": "vector3",
                    "default": [
                        0,
                        1,
                        0
                    ],
                    "description": "Rotation axis (normalized)"
                }
            ]
        }
    ]
}


================================================================================
FILE: build-debug\assets\packages\TestPackage\package.json
================================================================================

{
    "metadata": {
        "id": "dev.test",
        "name": "Test Package",
        "version": "1.0.0",
        "description": "Test package for JSON transition",
        "author": "Developer"
    },
    "dependencies": [
        {
            "id": "core.engine",
            "version": "1.0.0",
            "required": true
        }
    ],
    "assets": {
        "textures": [
            {
                "id": "test_texture",
                "path": "textures/test.png",
                "generateMipmaps": true,
                "compressionFormat": "auto"
            }
        ],
        "materials": [
            {
                "id": "test_material",
                "shader": "basic_shader",
                "textures": {
                    "diffuse": "test_texture"
                },
                "properties": {
                    "color": "1.0,1.0,1.0,1.0",
                    "metallic": 0.0,
                    "roughness": 0.5
                }
            }
        ],
        "meshes": [
            {
                "id": "test_cube",
                "path": "meshes/cube.obj",
                "optimize": true,
                "generateTangents": false
            }
        ],
        "shaders": [
            {
                "id": "basic_shader",
                "vertex": "shaders/basic.vert",
                "fragment": "shaders/basic.frag",
                "defines": [
                    "USE_LIGHTING"
                ]
            }
        ]
    },
    "scenes": [
        {
            "id": "test_scene",
            "name": "Test Scene",
            "entities": [
                {
                    "id": "test_cube_entity",
                    "name": "Test Cube",
                    "transform": {
                        "position": [
                            0.0,
                            0.0,
                            0.0
                        ],
                        "rotation": [
                            0.0,
                            0.0,
                            0.0,
                            1.0
                        ],
                        "scale": [
                            1.0,
                            1.0,
                            1.0
                        ]
                    },
                    "components": {
                        "mesh": {
                            "asset": "test_cube"
                        },
                        "material": {
                            "asset": "test_material"
                        },
                        "renderable": {
                            "visible": true,
                            "castShadows": true,
                            "receiveShadows": true
                        }
                    },
                    "behavior": {
                        "type": "SpinBehavior",
                        "parameters": {
                            "speed": 1.0,
                            "axis": "y"
                        }
                    }
                }
            ]
        }
    ]
}


================================================================================
FILE: build-debug\CMakeFiles\4.1.0\CompilerIdCXX\CMakeCXXCompilerId.cpp
================================================================================

/* This source file must have a .cpp extension so that all C++ compilers
   recognize the extension without flags.  Borland does not know .cxx for
   example.  */
#ifndef __cplusplus
# error "A C compiler has been selected for C++."
#endif

#if !defined(__has_include)
/* If the compiler does not have __has_include, pretend the answer is
   always no.  */
#  define __has_include(x) 0
#endif


/* Version number components: V=Version, R=Revision, P=Patch
   Version date components:   YYYY=Year, MM=Month,   DD=Day  */

#if defined(__INTEL_COMPILER) || defined(__ICC)
# define COMPILER_ID "Intel"
# if defined(_MSC_VER)
#  define SIMULATE_ID "MSVC"
# endif
# if defined(__GNUC__)
#  define SIMULATE_ID "GNU"
# endif
  /* __INTEL_COMPILER = VRP prior to 2021, and then VVVV for 2021 and later,
     except that a few beta releases use the old format with V=2021.  */
# if __INTEL_COMPILER < 2021 || __INTEL_COMPILER == 202110 || __INTEL_COMPILER == 202111
#  define COMPILER_VERSION_MAJOR DEC(__INTEL_COMPILER/100)
#  define COMPILER_VERSION_MINOR DEC(__INTEL_COMPILER/10 % 10)
#  if defined(__INTEL_COMPILER_UPDATE)
#   define COMPILER_VERSION_PATCH DEC(__INTEL_COMPILER_UPDATE)
#  else
#   define COMPILER_VERSION_PATCH DEC(__INTEL_COMPILER   % 10)
#  endif
# else
#  define COMPILER_VERSION_MAJOR DEC(__INTEL_COMPILER)
#  define COMPILER_VERSION_MINOR DEC(__INTEL_COMPILER_UPDATE)
   /* The third version component from --version is an update index,
      but no macro is provided for it.  */
#  define COMPILER_VERSION_PATCH DEC(0)
# endif
# if defined(__INTEL_COMPILER_BUILD_DATE)
   /* __INTEL_COMPILER_BUILD_DATE = YYYYMMDD */
#  define COMPILER_VERSION_TWEAK DEC(__INTEL_COMPILER_BUILD_DATE)
# endif
# if defined(_MSC_VER)
   /* _MSC_VER = VVRR */
#  define SIMULATE_VERSION_MAJOR DEC(_MSC_VER / 100)
#  define SIMULATE_VERSION_MINOR DEC(_MSC_VER % 100)
# endif
# if defined(__GNUC__)
#  define SIMULATE_VERSION_MAJOR DEC(__GNUC__)
# elif defined(__GNUG__)
#  define SIMULATE_VERSION_MAJOR DEC(__GNUG__)
# endif
# if defined(__GNUC_MINOR__)
#  define SIMULATE_VERSION_MINOR DEC(__GNUC_MINOR__)
# endif
# if defined(__GNUC_PATCHLEVEL__)
#  define SIMULATE_VERSION_PATCH DEC(__GNUC_PATCHLEVEL__)
# endif

#elif (defined(__clang__) && defined(__INTEL_CLANG_COMPILER)) || defined(__INTEL_LLVM_COMPILER)
# define COMPILER_ID "IntelLLVM"
#if defined(_MSC_VER)
# define SIMULATE_ID "MSVC"
#endif
#if defined(__GNUC__)
# define SIMULATE_ID "GNU"
#endif
/* __INTEL_LLVM_COMPILER = VVVVRP prior to 2021.2.0, VVVVRRPP for 2021.2.0 and
 * later.  Look for 6 digit vs. 8 digit version number to decide encoding.
 * VVVV is no smaller than the current year when a version is released.
 */
#if __INTEL_LLVM_COMPILER < 1000000L
# define COMPILER_VERSION_MAJOR DEC(__INTEL_LLVM_COMPILER/100)
# define COMPILER_VERSION_MINOR DEC(__INTEL_LLVM_COMPILER/10 % 10)
# define COMPILER_VERSION_PATCH DEC(__INTEL_LLVM_COMPILER    % 10)
#else
# define COMPILER_VERSION_MAJOR DEC(__INTEL_LLVM_COMPILER/10000)
# define COMPILER_VERSION_MINOR DEC(__INTEL_LLVM_COMPILER/100 % 100)
# define COMPILER_VERSION_PATCH DEC(__INTEL_LLVM_COMPILER     % 100)
#endif
#if defined(_MSC_VER)
  /* _MSC_VER = VVRR */
# define SIMULATE_VERSION_MAJOR DEC(_MSC_VER / 100)
# define SIMULATE_VERSION_MINOR DEC(_MSC_VER % 100)
#endif
#if defined(__GNUC__)
# define SIMULATE_VERSION_MAJOR DEC(__GNUC__)
#elif defined(__GNUG__)
# define SIMULATE_VERSION_MAJOR DEC(__GNUG__)
#endif
#if defined(__GNUC_MINOR__)
# define SIMULATE_VERSION_MINOR DEC(__GNUC_MINOR__)
#endif
#if defined(__GNUC_PATCHLEVEL__)
# define SIMULATE_VERSION_PATCH DEC(__GNUC_PATCHLEVEL__)
#endif

#elif defined(__PATHCC__)
# define COMPILER_ID "PathScale"
# define COMPILER_VERSION_MAJOR DEC(__PATHCC__)
# define COMPILER_VERSION_MINOR DEC(__PATHCC_MINOR__)
# if defined(__PATHCC_PATCHLEVEL__)
#  define COMPILER_VERSION_PATCH DEC(__PATHCC_PATCHLEVEL__)
# endif

#elif defined(__BORLANDC__) && defined(__CODEGEARC_VERSION__)
# define COMPILER_ID "Embarcadero"
# define COMPILER_VERSION_MAJOR HEX(__CODEGEARC_VERSION__>>24 & 0x00FF)
# define COMPILER_VERSION_MINOR HEX(__CODEGEARC_VERSION__>>16 & 0x00FF)
# define COMPILER_VERSION_PATCH DEC(__CODEGEARC_VERSION__     & 0xFFFF)

#elif defined(__BORLANDC__)
# define COMPILER_ID "Borland"
  /* __BORLANDC__ = 0xVRR */
# define COMPILER_VERSION_MAJOR HEX(__BORLANDC__>>8)
# define COMPILER_VERSION_MINOR HEX(__BORLANDC__ & 0xFF)

#elif defined(__WATCOMC__) && __WATCOMC__ < 1200
# define COMPILER_ID "Watcom"
   /* __WATCOMC__ = VVRR */
# define COMPILER_VERSION_MAJOR DEC(__WATCOMC__ / 100)
# define COMPILER_VERSION_MINOR DEC((__WATCOMC__ / 10) % 10)
# if (__WATCOMC__ % 10) > 0
#  define COMPILER_VERSION_PATCH DEC(__WATCOMC__ % 10)
# endif

#elif defined(__WATCOMC__)
# define COMPILER_ID "OpenWatcom"
   /* __WATCOMC__ = VVRP + 1100 */
# define COMPILER_VERSION_MAJOR DEC((__WATCOMC__ - 1100) / 100)
# define COMPILER_VERSION_MINOR DEC((__WATCOMC__ / 10) % 10)
# if (__WATCOMC__ % 10) > 0
#  define COMPILER_VERSION_PATCH DEC(__WATCOMC__ % 10)
# endif

#elif defined(__SUNPRO_CC)
# define COMPILER_ID "SunPro"
# if __SUNPRO_CC >= 0x5100
   /* __SUNPRO_CC = 0xVRRP */
#  define COMPILER_VERSION_MAJOR HEX(__SUNPRO_CC>>12)
#  define COMPILER_VERSION_MINOR HEX(__SUNPRO_CC>>4 & 0xFF)
#  define COMPILER_VERSION_PATCH HEX(__SUNPRO_CC    & 0xF)
# else
   /* __SUNPRO_CC = 0xVRP */
#  define COMPILER_VERSION_MAJOR HEX(__SUNPRO_CC>>8)
#  define COMPILER_VERSION_MINOR HEX(__SUNPRO_CC>>4 & 0xF)
#  define COMPILER_VERSION_PATCH HEX(__SUNPRO_CC    & 0xF)
# endif

#elif defined(__HP_aCC)
# define COMPILER_ID "HP"
  /* __HP_aCC = VVRRPP */
# define COMPILER_VERSION_MAJOR DEC(__HP_aCC/10000)
# define COMPILER_VERSION_MINOR DEC(__HP_aCC/100 % 100)
# define COMPILER_VERSION_PATCH DEC(__HP_aCC     % 100)

#elif defined(__DECCXX)
# define COMPILER_ID "Compaq"
  /* __DECCXX_VER = VVRRTPPPP */
# define COMPILER_VERSION_MAJOR DEC(__DECCXX_VER/10000000)
# define COMPILER_VERSION_MINOR DEC(__DECCXX_VER/100000  % 100)
# define COMPILER_VERSION_PATCH DEC(__DECCXX_VER         % 10000)

#elif defined(__IBMCPP__) && defined(__COMPILER_VER__)
# define COMPILER_ID "zOS"
  /* __IBMCPP__ = VRP */
# define COMPILER_VERSION_MAJOR DEC(__IBMCPP__/100)
# define COMPILER_VERSION_MINOR DEC(__IBMCPP__/10 % 10)
# define COMPILER_VERSION_PATCH DEC(__IBMCPP__    % 10)

#elif defined(__open_xl__) && defined(__clang__)
# define COMPILER_ID "IBMClang"
# define COMPILER_VERSION_MAJOR DEC(__open_xl_version__)
# define COMPILER_VERSION_MINOR DEC(__open_xl_release__)
# define COMPILER_VERSION_PATCH DEC(__open_xl_modification__)
# define COMPILER_VERSION_TWEAK DEC(__open_xl_ptf_fix_level__)
# define COMPILER_VERSION_INTERNAL_STR  __clang_version__


#elif defined(__ibmxl__) && defined(__clang__)
# define COMPILER_ID "XLClang"
# define COMPILER_VERSION_MAJOR DEC(__ibmxl_version__)
# define COMPILER_VERSION_MINOR DEC(__ibmxl_release__)
# define COMPILER_VERSION_PATCH DEC(__ibmxl_modification__)
# define COMPILER_VERSION_TWEAK DEC(__ibmxl_ptf_fix_level__)


#elif defined(__IBMCPP__) && !defined(__COMPILER_VER__) && __IBMCPP__ >= 800
# define COMPILER_ID "XL"
  /* __IBMCPP__ = VRP */
# define COMPILER_VERSION_MAJOR DEC(__IBMCPP__/100)
# define COMPILER_VERSION_MINOR DEC(__IBMCPP__/10 % 10)
# define COMPILER_VERSION_PATCH DEC(__IBMCPP__    % 10)

#elif defined(__IBMCPP__) && !defined(__COMPILER_VER__) && __IBMCPP__ < 800
# define COMPILER_ID "VisualAge"
  /* __IBMCPP__ = VRP */
# define COMPILER_VERSION_MAJOR DEC(__IBMCPP__/100)
# define COMPILER_VERSION_MINOR DEC(__IBMCPP__/10 % 10)
# define COMPILER_VERSION_PATCH DEC(__IBMCPP__    % 10)

#elif defined(__NVCOMPILER)
# define COMPILER_ID "NVHPC"
# define COMPILER_VERSION_MAJOR DEC(__NVCOMPILER_MAJOR__)
# define COMPILER_VERSION_MINOR DEC(__NVCOMPILER_MINOR__)
# if defined(__NVCOMPILER_PATCHLEVEL__)
#  define COMPILER_VERSION_PATCH DEC(__NVCOMPILER_PATCHLEVEL__)
# endif

#elif defined(__PGI)
# define COMPILER_ID "PGI"
# define COMPILER_VERSION_MAJOR DEC(__PGIC__)
# define COMPILER_VERSION_MINOR DEC(__PGIC_MINOR__)
# if defined(__PGIC_PATCHLEVEL__)
#  define COMPILER_VERSION_PATCH DEC(__PGIC_PATCHLEVEL__)
# endif

#elif defined(__clang__) && defined(__cray__)
# define COMPILER_ID "CrayClang"
# define COMPILER_VERSION_MAJOR DEC(__cray_major__)
# define COMPILER_VERSION_MINOR DEC(__cray_minor__)
# define COMPILER_VERSION_PATCH DEC(__cray_patchlevel__)
# define COMPILER_VERSION_INTERNAL_STR __clang_version__


#elif defined(_CRAYC)
# define COMPILER_ID "Cray"
# define COMPILER_VERSION_MAJOR DEC(_RELEASE_MAJOR)
# define COMPILER_VERSION_MINOR DEC(_RELEASE_MINOR)

#elif defined(__TI_COMPILER_VERSION__)
# define COMPILER_ID "TI"
  /* __TI_COMPILER_VERSION__ = VVVRRRPPP */
# define COMPILER_VERSION_MAJOR DEC(__TI_COMPILER_VERSION__/1000000)
# define COMPILER_VERSION_MINOR DEC(__TI_COMPILER_VERSION__/1000   % 1000)
# define COMPILER_VERSION_PATCH DEC(__TI_COMPILER_VERSION__        % 1000)

#elif defined(__CLANG_FUJITSU)
# define COMPILER_ID "FujitsuClang"
# define COMPILER_VERSION_MAJOR DEC(__FCC_major__)
# define COMPILER_VERSION_MINOR DEC(__FCC_minor__)
# define COMPILER_VERSION_PATCH DEC(__FCC_patchlevel__)
# define COMPILER_VERSION_INTERNAL_STR __clang_version__


#elif defined(__FUJITSU)
# define COMPILER_ID "Fujitsu"
# if defined(__FCC_version__)
#   define COMPILER_VERSION __FCC_version__
# elif defined(__FCC_major__)
#   define COMPILER_VERSION_MAJOR DEC(__FCC_major__)
#   define COMPILER_VERSION_MINOR DEC(__FCC_minor__)
#   define COMPILER_VERSION_PATCH DEC(__FCC_patchlevel__)
# endif
# if defined(__fcc_version)
#   define COMPILER_VERSION_INTERNAL DEC(__fcc_version)
# elif defined(__FCC_VERSION)
#   define COMPILER_VERSION_INTERNAL DEC(__FCC_VERSION)
# endif


#elif defined(__ghs__)
# define COMPILER_ID "GHS"
/* __GHS_VERSION_NUMBER = VVVVRP */
# ifdef __GHS_VERSION_NUMBER
# define COMPILER_VERSION_MAJOR DEC(__GHS_VERSION_NUMBER / 100)
# define COMPILER_VERSION_MINOR DEC(__GHS_VERSION_NUMBER / 10 % 10)
# define COMPILER_VERSION_PATCH DEC(__GHS_VERSION_NUMBER      % 10)
# endif

#elif defined(__TASKING__)
# define COMPILER_ID "Tasking"
  # define COMPILER_VERSION_MAJOR DEC(__VERSION__/1000)
  # define COMPILER_VERSION_MINOR DEC(__VERSION__ % 100)
# define COMPILER_VERSION_INTERNAL DEC(__VERSION__)

#elif defined(__ORANGEC__)
# define COMPILER_ID "OrangeC"
# define COMPILER_VERSION_MAJOR DEC(__ORANGEC_MAJOR__)
# define COMPILER_VERSION_MINOR DEC(__ORANGEC_MINOR__)
# define COMPILER_VERSION_PATCH DEC(__ORANGEC_PATCHLEVEL__)

#elif defined(__RENESAS__)
# define COMPILER_ID "Renesas"
/* __RENESAS_VERSION__ = 0xVVRRPP00 */
# define COMPILER_VERSION_MAJOR HEX(__RENESAS_VERSION__ >> 24 & 0xFF)
# define COMPILER_VERSION_MINOR HEX(__RENESAS_VERSION__ >> 16 & 0xFF)
# define COMPILER_VERSION_PATCH HEX(__RENESAS_VERSION__ >> 8  & 0xFF)

#elif defined(__SCO_VERSION__)
# define COMPILER_ID "SCO"

#elif defined(__ARMCC_VERSION) && !defined(__clang__)
# define COMPILER_ID "ARMCC"
#if __ARMCC_VERSION >= 1000000
  /* __ARMCC_VERSION = VRRPPPP */
  # define COMPILER_VERSION_MAJOR DEC(__ARMCC_VERSION/1000000)
  # define COMPILER_VERSION_MINOR DEC(__ARMCC_VERSION/10000 % 100)
  # define COMPILER_VERSION_PATCH DEC(__ARMCC_VERSION     % 10000)
#else
  /* __ARMCC_VERSION = VRPPPP */
  # define COMPILER_VERSION_MAJOR DEC(__ARMCC_VERSION/100000)
  # define COMPILER_VERSION_MINOR DEC(__ARMCC_VERSION/10000 % 10)
  # define COMPILER_VERSION_PATCH DEC(__ARMCC_VERSION    % 10000)
#endif


#elif defined(__clang__) && defined(__apple_build_version__)
# define COMPILER_ID "AppleClang"
# if defined(_MSC_VER)
#  define SIMULATE_ID "MSVC"
# endif
# define COMPILER_VERSION_MAJOR DEC(__clang_major__)
# define COMPILER_VERSION_MINOR DEC(__clang_minor__)
# define COMPILER_VERSION_PATCH DEC(__clang_patchlevel__)
# if defined(_MSC_VER)
   /* _MSC_VER = VVRR */
#  define SIMULATE_VERSION_MAJOR DEC(_MSC_VER / 100)
#  define SIMULATE_VERSION_MINOR DEC(_MSC_VER % 100)
# endif
# define COMPILER_VERSION_TWEAK DEC(__apple_build_version__)

#elif defined(__clang__) && defined(__ARMCOMPILER_VERSION)
# define COMPILER_ID "ARMClang"
  # define COMPILER_VERSION_MAJOR DEC(__ARMCOMPILER_VERSION/1000000)
  # define COMPILER_VERSION_MINOR DEC(__ARMCOMPILER_VERSION/10000 % 100)
  # define COMPILER_VERSION_PATCH DEC(__ARMCOMPILER_VERSION/100   % 100)
# define COMPILER_VERSION_INTERNAL DEC(__ARMCOMPILER_VERSION)

#elif defined(__clang__) && defined(__ti__)
# define COMPILER_ID "TIClang"
  # define COMPILER_VERSION_MAJOR DEC(__ti_major__)
  # define COMPILER_VERSION_MINOR DEC(__ti_minor__)
  # define COMPILER_VERSION_PATCH DEC(__ti_patchlevel__)
# define COMPILER_VERSION_INTERNAL DEC(__ti_version__)

#elif defined(__clang__)
# define COMPILER_ID "Clang"
# if defined(_MSC_VER)
#  define SIMULATE_ID "MSVC"
# endif
# define COMPILER_VERSION_MAJOR DEC(__clang_major__)
# define COMPILER_VERSION_MINOR DEC(__clang_minor__)
# define COMPILER_VERSION_PATCH DEC(__clang_patchlevel__)
# if defined(_MSC_VER)
   /* _MSC_VER = VVRR */
#  define SIMULATE_VERSION_MAJOR DEC(_MSC_VER / 100)
#  define SIMULATE_VERSION_MINOR DEC(_MSC_VER % 100)
# endif

#elif defined(__LCC__) && (defined(__GNUC__) || defined(__GNUG__) || defined(__MCST__))
# define COMPILER_ID "LCC"
# define COMPILER_VERSION_MAJOR DEC(__LCC__ / 100)
# define COMPILER_VERSION_MINOR DEC(__LCC__ % 100)
# if defined(__LCC_MINOR__)
#  define COMPILER_VERSION_PATCH DEC(__LCC_MINOR__)
# endif
# if defined(__GNUC__) && defined(__GNUC_MINOR__)
#  define SIMULATE_ID "GNU"
#  define SIMULATE_VERSION_MAJOR DEC(__GNUC__)
#  define SIMULATE_VERSION_MINOR DEC(__GNUC_MINOR__)
#  if defined(__GNUC_PATCHLEVEL__)
#   define SIMULATE_VERSION_PATCH DEC(__GNUC_PATCHLEVEL__)
#  endif
# endif

#elif defined(__GNUC__) || defined(__GNUG__)
# define COMPILER_ID "GNU"
# if defined(__GNUC__)
#  define COMPILER_VERSION_MAJOR DEC(__GNUC__)
# else
#  define COMPILER_VERSION_MAJOR DEC(__GNUG__)
# endif
# if defined(__GNUC_MINOR__)
#  define COMPILER_VERSION_MINOR DEC(__GNUC_MINOR__)
# endif
# if defined(__GNUC_PATCHLEVEL__)
#  define COMPILER_VERSION_PATCH DEC(__GNUC_PATCHLEVEL__)
# endif

#elif defined(_MSC_VER)
# define COMPILER_ID "MSVC"
  /* _MSC_VER = VVRR */
# define COMPILER_VERSION_MAJOR DEC(_MSC_VER / 100)
# define COMPILER_VERSION_MINOR DEC(_MSC_VER % 100)
# if defined(_MSC_FULL_VER)
#  if _MSC_VER >= 1400
    /* _MSC_FULL_VER = VVRRPPPPP */
#   define COMPILER_VERSION_PATCH DEC(_MSC_FULL_VER % 100000)
#  else
    /* _MSC_FULL_VER = VVRRPPPP */
#   define COMPILER_VERSION_PATCH DEC(_MSC_FULL_VER % 10000)
#  endif
# endif
# if defined(_MSC_BUILD)
#  define COMPILER_VERSION_TWEAK DEC(_MSC_BUILD)
# endif

#elif defined(_ADI_COMPILER)
# define COMPILER_ID "ADSP"
#if defined(__VERSIONNUM__)
  /* __VERSIONNUM__ = 0xVVRRPPTT */
#  define COMPILER_VERSION_MAJOR DEC(__VERSIONNUM__ >> 24 & 0xFF)
#  define COMPILER_VERSION_MINOR DEC(__VERSIONNUM__ >> 16 & 0xFF)
#  define COMPILER_VERSION_PATCH DEC(__VERSIONNUM__ >> 8 & 0xFF)
#  define COMPILER_VERSION_TWEAK DEC(__VERSIONNUM__ & 0xFF)
#endif

#elif defined(__IAR_SYSTEMS_ICC__) || defined(__IAR_SYSTEMS_ICC)
# define COMPILER_ID "IAR"
# if defined(__VER__) && defined(__ICCARM__)
#  define COMPILER_VERSION_MAJOR DEC((__VER__) / 1000000)
#  define COMPILER_VERSION_MINOR DEC(((__VER__) / 1000) % 1000)
#  define COMPILER_VERSION_PATCH DEC((__VER__) % 1000)
#  define COMPILER_VERSION_INTERNAL DEC(__IAR_SYSTEMS_ICC__)
# elif defined(__VER__) && (defined(__ICCAVR__) || defined(__ICCRX__) || defined(__ICCRH850__) || defined(__ICCRL78__) || defined(__ICC430__) || defined(__ICCRISCV__) || defined(__ICCV850__) || defined(__ICC8051__) || defined(__ICCSTM8__))
#  define COMPILER_VERSION_MAJOR DEC((__VER__) / 100)
#  define COMPILER_VERSION_MINOR DEC((__VER__) - (((__VER__) / 100)*100))
#  define COMPILER_VERSION_PATCH DEC(__SUBVERSION__)
#  define COMPILER_VERSION_INTERNAL DEC(__IAR_SYSTEMS_ICC__)
# endif

#elif defined(__DCC__) && defined(_DIAB_TOOL)
# define COMPILER_ID "Diab"
  # define COMPILER_VERSION_MAJOR DEC(__VERSION_MAJOR_NUMBER__)
  # define COMPILER_VERSION_MINOR DEC(__VERSION_MINOR_NUMBER__)
  # define COMPILER_VERSION_PATCH DEC(__VERSION_ARCH_FEATURE_NUMBER__)
  # define COMPILER_VERSION_TWEAK DEC(__VERSION_BUG_FIX_NUMBER__)



/* These compilers are either not known or too old to define an
  identification macro.  Try to identify the platform and guess that
  it is the native compiler.  */
#elif defined(__hpux) || defined(__hpua)
# define COMPILER_ID "HP"

#else /* unknown compiler */
# define COMPILER_ID ""
#endif

/* Construct the string literal in pieces to prevent the source from
   getting matched.  Store it in a pointer rather than an array
   because some compilers will just produce instructions to fill the
   array rather than assigning a pointer to a static array.  */
char const* info_compiler = "INFO" ":" "compiler[" COMPILER_ID "]";
#ifdef SIMULATE_ID
char const* info_simulate = "INFO" ":" "simulate[" SIMULATE_ID "]";
#endif

#ifdef __QNXNTO__
char const* qnxnto = "INFO" ":" "qnxnto[]";
#endif

#if defined(__CRAYXT_COMPUTE_LINUX_TARGET)
char const *info_cray = "INFO" ":" "compiler_wrapper[CrayPrgEnv]";
#endif

#define STRINGIFY_HELPER(X) #X
#define STRINGIFY(X) STRINGIFY_HELPER(X)

/* Identify known platforms by name.  */
#if defined(__linux) || defined(__linux__) || defined(linux)
# define PLATFORM_ID "Linux"

#elif defined(__MSYS__)
# define PLATFORM_ID "MSYS"

#elif defined(__CYGWIN__)
# define PLATFORM_ID "Cygwin"

#elif defined(__MINGW32__)
# define PLATFORM_ID "MinGW"

#elif defined(__APPLE__)
# define PLATFORM_ID "Darwin"

#elif defined(_WIN32) || defined(__WIN32__) || defined(WIN32)
# define PLATFORM_ID "Windows"

#elif defined(__FreeBSD__) || defined(__FreeBSD)
# define PLATFORM_ID "FreeBSD"

#elif defined(__NetBSD__) || defined(__NetBSD)
# define PLATFORM_ID "NetBSD"

#elif defined(__OpenBSD__) || defined(__OPENBSD)
# define PLATFORM_ID "OpenBSD"

#elif defined(__sun) || defined(sun)
# define PLATFORM_ID "SunOS"

#elif defined(_AIX) || defined(__AIX) || defined(__AIX__) || defined(__aix) || defined(__aix__)
# define PLATFORM_ID "AIX"

#elif defined(__hpux) || defined(__hpux__)
# define PLATFORM_ID "HP-UX"

#elif defined(__HAIKU__)
# define PLATFORM_ID "Haiku"

#elif defined(__BeOS) || defined(__BEOS__) || defined(_BEOS)
# define PLATFORM_ID "BeOS"

#elif defined(__QNX__) || defined(__QNXNTO__)
# define PLATFORM_ID "QNX"

#elif defined(__tru64) || defined(_tru64) || defined(__TRU64__)
# define PLATFORM_ID "Tru64"

#elif defined(__riscos) || defined(__riscos__)
# define PLATFORM_ID "RISCos"

#elif defined(__sinix) || defined(__sinix__) || defined(__SINIX__)
# define PLATFORM_ID "SINIX"

#elif defined(__UNIX_SV__)
# define PLATFORM_ID "UNIX_SV"

#elif defined(__bsdos__)
# define PLATFORM_ID "BSDOS"

#elif defined(_MPRAS) || defined(MPRAS)
# define PLATFORM_ID "MP-RAS"

#elif defined(__osf) || defined(__osf__)
# define PLATFORM_ID "OSF1"

#elif defined(_SCO_SV) || defined(SCO_SV) || defined(sco_sv)
# define PLATFORM_ID "SCO_SV"

#elif defined(__ultrix) || defined(__ultrix__) || defined(_ULTRIX)
# define PLATFORM_ID "ULTRIX"

#elif defined(__XENIX__) || defined(_XENIX) || defined(XENIX)
# define PLATFORM_ID "Xenix"

#elif defined(__WATCOMC__)
# if defined(__LINUX__)
#  define PLATFORM_ID "Linux"

# elif defined(__DOS__)
#  define PLATFORM_ID "DOS"

# elif defined(__OS2__)
#  define PLATFORM_ID "OS2"

# elif defined(__WINDOWS__)
#  define PLATFORM_ID "Windows3x"

# elif defined(__VXWORKS__)
#  define PLATFORM_ID "VxWorks"

# else /* unknown platform */
#  define PLATFORM_ID
# endif

#elif defined(__INTEGRITY)
# if defined(INT_178B)
#  define PLATFORM_ID "Integrity178"

# else /* regular Integrity */
#  define PLATFORM_ID "Integrity"
# endif

# elif defined(_ADI_COMPILER)
#  define PLATFORM_ID "ADSP"

#else /* unknown platform */
# define PLATFORM_ID

#endif

/* For windows compilers MSVC and Intel we can determine
   the architecture of the compiler being used.  This is because
   the compilers do not have flags that can change the architecture,
   but rather depend on which compiler is being used
*/
#if defined(_WIN32) && defined(_MSC_VER)
# if defined(_M_IA64)
#  define ARCHITECTURE_ID "IA64"

# elif defined(_M_ARM64EC)
#  define ARCHITECTURE_ID "ARM64EC"

# elif defined(_M_X64) || defined(_M_AMD64)
#  define ARCHITECTURE_ID "x64"

# elif defined(_M_IX86)
#  define ARCHITECTURE_ID "X86"

# elif defined(_M_ARM64)
#  define ARCHITECTURE_ID "ARM64"

# elif defined(_M_ARM)
#  if _M_ARM == 4
#   define ARCHITECTURE_ID "ARMV4I"
#  elif _M_ARM == 5
#   define ARCHITECTURE_ID "ARMV5I"
#  else
#   define ARCHITECTURE_ID "ARMV" STRINGIFY(_M_ARM)
#  endif

# elif defined(_M_MIPS)
#  define ARCHITECTURE_ID "MIPS"

# elif defined(_M_SH)
#  define ARCHITECTURE_ID "SHx"

# else /* unknown architecture */
#  define ARCHITECTURE_ID ""
# endif

#elif defined(__WATCOMC__)
# if defined(_M_I86)
#  define ARCHITECTURE_ID "I86"

# elif defined(_M_IX86)
#  define ARCHITECTURE_ID "X86"

# else /* unknown architecture */
#  define ARCHITECTURE_ID ""
# endif

#elif defined(__IAR_SYSTEMS_ICC__) || defined(__IAR_SYSTEMS_ICC)
# if defined(__ICCARM__)
#  define ARCHITECTURE_ID "ARM"

# elif defined(__ICCRX__)
#  define ARCHITECTURE_ID "RX"

# elif defined(__ICCRH850__)
#  define ARCHITECTURE_ID "RH850"

# elif defined(__ICCRL78__)
#  define ARCHITECTURE_ID "RL78"

# elif defined(__ICCRISCV__)
#  define ARCHITECTURE_ID "RISCV"

# elif defined(__ICCAVR__)
#  define ARCHITECTURE_ID "AVR"

# elif defined(__ICC430__)
#  define ARCHITECTURE_ID "MSP430"

# elif defined(__ICCV850__)
#  define ARCHITECTURE_ID "V850"

# elif defined(__ICC8051__)
#  define ARCHITECTURE_ID "8051"

# elif defined(__ICCSTM8__)
#  define ARCHITECTURE_ID "STM8"

# else /* unknown architecture */
#  define ARCHITECTURE_ID ""
# endif

#elif defined(__ghs__)
# if defined(__PPC64__)
#  define ARCHITECTURE_ID "PPC64"

# elif defined(__ppc__)
#  define ARCHITECTURE_ID "PPC"

# elif defined(__ARM__)
#  define ARCHITECTURE_ID "ARM"

# elif defined(__x86_64__)
#  define ARCHITECTURE_ID "x64"

# elif defined(__i386__)
#  define ARCHITECTURE_ID "X86"

# else /* unknown architecture */
#  define ARCHITECTURE_ID ""
# endif

#elif defined(__clang__) && defined(__ti__)
# if defined(__ARM_ARCH)
#  define ARCHITECTURE_ID "ARM"

# else /* unknown architecture */
#  define ARCHITECTURE_ID ""
# endif

#elif defined(__TI_COMPILER_VERSION__)
# if defined(__TI_ARM__)
#  define ARCHITECTURE_ID "ARM"

# elif defined(__MSP430__)
#  define ARCHITECTURE_ID "MSP430"

# elif defined(__TMS320C28XX__)
#  define ARCHITECTURE_ID "TMS320C28x"

# elif defined(__TMS320C6X__) || defined(_TMS320C6X)
#  define ARCHITECTURE_ID "TMS320C6x"

# else /* unknown architecture */
#  define ARCHITECTURE_ID ""
# endif

# elif defined(__ADSPSHARC__)
#  define ARCHITECTURE_ID "SHARC"

# elif defined(__ADSPBLACKFIN__)
#  define ARCHITECTURE_ID "Blackfin"

#elif defined(__TASKING__)

# if defined(__CTC__) || defined(__CPTC__)
#  define ARCHITECTURE_ID "TriCore"

# elif defined(__CMCS__)
#  define ARCHITECTURE_ID "MCS"

# elif defined(__CARM__) || defined(__CPARM__)
#  define ARCHITECTURE_ID "ARM"

# elif defined(__CARC__)
#  define ARCHITECTURE_ID "ARC"

# elif defined(__C51__)
#  define ARCHITECTURE_ID "8051"

# elif defined(__CPCP__)
#  define ARCHITECTURE_ID "PCP"

# else
#  define ARCHITECTURE_ID ""
# endif

#elif defined(__RENESAS__)
# if defined(__CCRX__)
#  define ARCHITECTURE_ID "RX"

# elif defined(__CCRL__)
#  define ARCHITECTURE_ID "RL78"

# elif defined(__CCRH__)
#  define ARCHITECTURE_ID "RH850"

# else
#  define ARCHITECTURE_ID ""
# endif

#else
#  define ARCHITECTURE_ID
#endif

/* Convert integer to decimal digit literals.  */
#define DEC(n)                   \
  ('0' + (((n) / 10000000)%10)), \
  ('0' + (((n) / 1000000)%10)),  \
  ('0' + (((n) / 100000)%10)),   \
  ('0' + (((n) / 10000)%10)),    \
  ('0' + (((n) / 1000)%10)),     \
  ('0' + (((n) / 100)%10)),      \
  ('0' + (((n) / 10)%10)),       \
  ('0' +  ((n) % 10))

/* Convert integer to hex digit literals.  */
#define HEX(n)             \
  ('0' + ((n)>>28 & 0xF)), \
  ('0' + ((n)>>24 & 0xF)), \
  ('0' + ((n)>>20 & 0xF)), \
  ('0' + ((n)>>16 & 0xF)), \
  ('0' + ((n)>>12 & 0xF)), \
  ('0' + ((n)>>8  & 0xF)), \
  ('0' + ((n)>>4  & 0xF)), \
  ('0' + ((n)     & 0xF))

/* Construct a string literal encoding the version number. */
#ifdef COMPILER_VERSION
char const* info_version = "INFO" ":" "compiler_version[" COMPILER_VERSION "]";

/* Construct a string literal encoding the version number components. */
#elif defined(COMPILER_VERSION_MAJOR)
char const info_version[] = {
  'I', 'N', 'F', 'O', ':',
  'c','o','m','p','i','l','e','r','_','v','e','r','s','i','o','n','[',
  COMPILER_VERSION_MAJOR,
# ifdef COMPILER_VERSION_MINOR
  '.', COMPILER_VERSION_MINOR,
#  ifdef COMPILER_VERSION_PATCH
   '.', COMPILER_VERSION_PATCH,
#   ifdef COMPILER_VERSION_TWEAK
    '.', COMPILER_VERSION_TWEAK,
#   endif
#  endif
# endif
  ']','\0'};
#endif

/* Construct a string literal encoding the internal version number. */
#ifdef COMPILER_VERSION_INTERNAL
char const info_version_internal[] = {
  'I', 'N', 'F', 'O', ':',
  'c','o','m','p','i','l','e','r','_','v','e','r','s','i','o','n','_',
  'i','n','t','e','r','n','a','l','[',
  COMPILER_VERSION_INTERNAL,']','\0'};
#elif defined(COMPILER_VERSION_INTERNAL_STR)
char const* info_version_internal = "INFO" ":" "compiler_version_internal[" COMPILER_VERSION_INTERNAL_STR "]";
#endif

/* Construct a string literal encoding the version number components. */
#ifdef SIMULATE_VERSION_MAJOR
char const info_simulate_version[] = {
  'I', 'N', 'F', 'O', ':',
  's','i','m','u','l','a','t','e','_','v','e','r','s','i','o','n','[',
  SIMULATE_VERSION_MAJOR,
# ifdef SIMULATE_VERSION_MINOR
  '.', SIMULATE_VERSION_MINOR,
#  ifdef SIMULATE_VERSION_PATCH
   '.', SIMULATE_VERSION_PATCH,
#   ifdef SIMULATE_VERSION_TWEAK
    '.', SIMULATE_VERSION_TWEAK,
#   endif
#  endif
# endif
  ']','\0'};
#endif

/* Construct the string literal in pieces to prevent the source from
   getting matched.  Store it in a pointer rather than an array
   because some compilers will just produce instructions to fill the
   array rather than assigning a pointer to a static array.  */
char const* info_platform = "INFO" ":" "platform[" PLATFORM_ID "]";
char const* info_arch = "INFO" ":" "arch[" ARCHITECTURE_ID "]";



#define CXX_STD_98 199711L
#define CXX_STD_11 201103L
#define CXX_STD_14 201402L
#define CXX_STD_17 201703L
#define CXX_STD_20 202002L
#define CXX_STD_23 202302L

#if defined(__INTEL_COMPILER) && defined(_MSVC_LANG)
#  if _MSVC_LANG > CXX_STD_17
#    define CXX_STD _MSVC_LANG
#  elif _MSVC_LANG == CXX_STD_17 && defined(__cpp_aggregate_paren_init)
#    define CXX_STD CXX_STD_20
#  elif _MSVC_LANG > CXX_STD_14 && __cplusplus > CXX_STD_17
#    define CXX_STD CXX_STD_20
#  elif _MSVC_LANG > CXX_STD_14
#    define CXX_STD CXX_STD_17
#  elif defined(__INTEL_CXX11_MODE__) && defined(__cpp_aggregate_nsdmi)
#    define CXX_STD CXX_STD_14
#  elif defined(__INTEL_CXX11_MODE__)
#    define CXX_STD CXX_STD_11
#  else
#    define CXX_STD CXX_STD_98
#  endif
#elif defined(_MSC_VER) && defined(_MSVC_LANG)
#  if _MSVC_LANG > __cplusplus
#    define CXX_STD _MSVC_LANG
#  else
#    define CXX_STD __cplusplus
#  endif
#elif defined(__NVCOMPILER)
#  if __cplusplus == CXX_STD_17 && defined(__cpp_aggregate_paren_init)
#    define CXX_STD CXX_STD_20
#  else
#    define CXX_STD __cplusplus
#  endif
#elif defined(__INTEL_COMPILER) || defined(__PGI)
#  if __cplusplus == CXX_STD_11 && defined(__cpp_namespace_attributes)
#    define CXX_STD CXX_STD_17
#  elif __cplusplus == CXX_STD_11 && defined(__cpp_aggregate_nsdmi)
#    define CXX_STD CXX_STD_14
#  else
#    define CXX_STD __cplusplus
#  endif
#elif (defined(__IBMCPP__) || defined(__ibmxl__)) && defined(__linux__)
#  if __cplusplus == CXX_STD_11 && defined(__cpp_aggregate_nsdmi)
#    define CXX_STD CXX_STD_14
#  else
#    define CXX_STD __cplusplus
#  endif
#elif __cplusplus == 1 && defined(__GXX_EXPERIMENTAL_CXX0X__)
#  define CXX_STD CXX_STD_11
#else
#  define CXX_STD __cplusplus
#endif

const char* info_language_standard_default = "INFO" ":" "standard_default["
#if CXX_STD > CXX_STD_23
  "26"
#elif CXX_STD > CXX_STD_20
  "23"
#elif CXX_STD > CXX_STD_17
  "20"
#elif CXX_STD > CXX_STD_14
  "17"
#elif CXX_STD > CXX_STD_11
  "14"
#elif CXX_STD >= CXX_STD_11
  "11"
#else
  "98"
#endif
"]";

const char* info_language_extensions_default = "INFO" ":" "extensions_default["
#if (defined(__clang__) || defined(__GNUC__) || defined(__xlC__) ||           \
     defined(__TI_COMPILER_VERSION__) || defined(__RENESAS__)) &&             \
  !defined(__STRICT_ANSI__)
  "ON"
#else
  "OFF"
#endif
"]";

/*--------------------------------------------------------------------------*/

int main(int argc, char* argv[])
{
  int require = 0;
  require += info_compiler[argc];
  require += info_platform[argc];
  require += info_arch[argc];
#ifdef COMPILER_VERSION_MAJOR
  require += info_version[argc];
#endif
#if defined(COMPILER_VERSION_INTERNAL) || defined(COMPILER_VERSION_INTERNAL_STR)
  require += info_version_internal[argc];
#endif
#ifdef SIMULATE_ID
  require += info_simulate[argc];
#endif
#ifdef SIMULATE_VERSION_MAJOR
  require += info_simulate_version[argc];
#endif
#if defined(__CRAYXT_COMPUTE_LINUX_TARGET)
  require += info_cray[argc];
#endif
  require += info_language_standard_default[argc];
  require += info_language_extensions_default[argc];
  (void)argv;
  return require;
}


================================================================================
FILE: build-debug\CMakeFiles\InstallScripts.json
================================================================================

{
	"InstallScripts" : 
	[
		"C:/Users/pawel/Desktop/drone_sim_ggl/build-debug/cmake_install.cmake"
	],
	"Parallel" : false
}


================================================================================
FILE: build-debug\internal_assets\core\materials\default_material.json
================================================================================

{
    "material": {
        "id": "default_material",
        "name": "Default Material",
        "shader": "default_shader",
        "params": {
            "albedo": {
                "type": "color",
                "r": 0.8,
                "g": 0.8,
                "b": 0.8,
                "a": 1.0
            },
            "roughness": {
                "type": "float",
                "value": 0.5
            },
            "metallic": {
                "type": "float",
                "value": 0.0
            },
            "specular": {
                "type": "float",
                "value": 0.5
            }
        },
        "textures": [
            {
                "name": "albedoMap",
                "path": "textures/default.png"
            },
            {
                "name": "normalMap",
                "path": "textures/default_normal.png"
            },
            {
                "name": "roughnessMap",
                "path": "textures/default_roughness.png"
            },
            {
                "name": "metallicMap",
                "path": "textures/default_metallic.png"
            }
        ]
    }
}


================================================================================
FILE: build-debug\internal_assets\core\scenes\green_cubes_scene.json
================================================================================

{
    "scene": {
        "id": "green_cubes_scene",
        "name": "Three Green Cubes",
        "entities": [
            {
                "id": "green_cube_1",
                "name": "Green Cube 1",
                "transform": {
                    "position": {
                        "x": -1.5,
                        "y": 0.0,
                        "z": 0.0
                    },
                    "rotation": {
                        "x": 0.0,
                        "y": 0.0,
                        "z": 0.0,
                        "w": 1.0
                    },
                    "scale": {
                        "x": 0.8,
                        "y": 0.8,
                        "z": 0.8
                    }
                },
                "mesh": {
                    "asset": "mesh.cube"
                },
                "material": {
                    "asset": "material.green"
                },
                "behavior": {
                    "codeBehind": "SpinBehavior",
                    "params": {
                        "speed": 30.0,
                        "axisY": 1.0,
                        "axisX": 0.5
                    }
                }
            },
            {
                "id": "green_cube_2",
                "name": "Green Cube 2",
                "transform": {
                    "position": {
                        "x": 0.0,
                        "y": 0.0,
                        "z": 0.0
                    },
                    "rotation": {
                        "x": 0.0,
                        "y": 0.0,
                        "z": 0.0,
                        "w": 1.0
                    },
                    "scale": {
                        "x": 0.8,
                        "y": 0.8,
                        "z": 0.8
                    }
                },
                "mesh": {
                    "asset": "mesh.cube"
                },
                "material": {
                    "asset": "material.green"
                },
                "behavior": {
                    "codeBehind": "SpinBehavior",
                    "params": {
                        "speed": 5.0,
                        "axisY": 1.0
                    }
                }
            },
            {
                "id": "green_cube_3",
                "name": "Green Cube 3",
                "transform": {
                    "position": {
                        "x": 1.5,
                        "y": 0.0,
                        "z": 0.0
                    },
                    "rotation": {
                        "x": 0.0,
                        "y": 0.0,
                        "z": 0.0,
                        "w": 1.0
                    },
                    "scale": {
                        "x": 0.8,
                        "y": 0.8,
                        "z": 0.8
                    }
                },
                "mesh": {
                    "asset": "mesh.cube"
                },
                "material": {
                    "asset": "material.green"
                },
                "behavior": {
                    "codeBehind": "SpinBehavior",
                    "params": {
                        "speed": 60.0,
                        "axisY": 1.0,
                        "axisZ": 0.5
                    }
                }
            },
            {
                "id": "red_cube",
                "name": "Red Cube",
                "transform": {
                    "position": {
                        "x": 0.0,
                        "y": 1.5,
                        "z": 0.0
                    },
                    "rotation": {
                        "x": 0.0,
                        "y": 0.0,
                        "z": 0.0,
                        "w": 1.0
                    },
                    "scale": {
                        "x": 1.0,
                        "y": 1.0,
                        "z": 1.0
                    }
                },
                "mesh": {
                    "asset": "mesh.cube"
                },
                "material": {
                    "asset": "material.red"
                },
                "behavior": {
                    "codeBehind": "SpinBehavior",
                    "params": {
                        "speed": -45.0,
                        "axisY": 1.0,
                        "axisX": 0.3
                    }
                }
            }
        ]
    }
}


================================================================================
FILE: build-debug\internal_assets\core\internal_assets.json
================================================================================

{
    "internal_assets": {
        "version": "1.0",
        "description": "Internal Assets Configuration - Core internal assets required by the engine. These assets are used when user assets are not available.",
        "assets": [
            {
                "id": "texture.default",
                "type": "texture",
                "path": "core/textures/default.png"
            },
            {
                "id": "texture.default_normal",
                "type": "texture",
                "path": "core/textures/default_normal.png"
            },
            {
                "id": "texture.default_roughness",
                "type": "texture",
                "path": "core/textures/default_roughness.png"
            },
            {
                "id": "texture.default_metallic",
                "type": "texture",
                "path": "core/textures/default_metallic.png"
            },
            {
                "id": "font.default",
                "type": "font",
                "path": "core/fonts/default.ttf"
            },
            {
                "id": "audio.default",
                "type": "audio",
                "path": "core/audio/default.wav"
            },
            {
                "id": "material.default",
                "type": "material",
                "path": "core/materials/default_material.json"
            },
            {
                "id": "material.green",
                "type": "material",
                "path": "core/materials/green_material.json"
            },
            {
                "id": "material.red",
                "type": "material",
                "path": "core/materials/red_material.json"
            },
            {
                "id": "mesh.cube",
                "type": "mesh",
                "path": "core/meshes/cube.obj"
            },
            {
                "id": "mesh.sphere",
                "type": "mesh",
                "path": "core/meshes/sphere.obj"
            },
            {
                "id": "mesh.plane",
                "type": "mesh",
                "path": "core/meshes/plane.obj"
            },
            {
                "id": "scene.green_cubes",
                "type": "scene",
                "path": "core/scenes/green_cubes_scene.json"
            },
            {
                "id": "shader.default",
                "type": "shader",
                "path": "core/shaders/default_shader.glsl"
            }
        ],
        "fallbacks": [
            {
                "type": "texture",
                "asset_id": "texture.error",
                "path": "error.png"
            },
            {
                "type": "font",
                "asset_id": "font.error",
                "path": "error.ttf"
            },
            {
                "type": "audio",
                "asset_id": "audio.error",
                "path": "error.wav"
            },
            {
                "type": "material",
                "asset_id": "material.error",
                "path": "core/materials/error_material.json"
            },
            {
                "type": "mesh",
                "asset_id": "mesh.error",
                "path": "core/meshes/cube.obj"
            },
            {
                "type": "shader",
                "asset_id": "shader.error",
                "path": "core/shaders/error_shader.glsl"
            }
        ]
    }
}


================================================================================
FILE: configs\entity_factory_config.json
================================================================================

{
    "entityFactory": {
        "maxEntities": 10000,
        "defaultComponents": [
            "Transform",
            "Render"
        ]
    },
    "componentDefinitions": {
        "Transform": {
            "type": "TransformComponent",
            "required": true
        },
        "Render": {
            "type": "RenderComponent",
            "required": false
        },
        "Physics": {
            "type": "PhysicsComponent",
            "required": false
        },
        "Battery": {
            "type": "BatteryComponent",
            "required": false
        }
    },
    "entityTemplates": {
        "Drone": {
            "components": [
                "Transform",
                "Render",
                "Physics",
                "Battery"
            ],
            "defaultValues": {
                "Transform": {
                    "position": {
                        "x": 0,
                        "y": 0,
                        "z": 0
                    },
                    "rotation": {
                        "x": 0,
                        "y": 0,
                        "z": 0
                    },
                    "scale": {
                        "x": 1,
                        "y": 1,
                        "z": 1
                    }
                },
                "Battery": {
                    "maxCapacity": 5000,
                    "currentCharge": 5000,
                    "drainRate": 10
                }
            }
        }
    }
}


================================================================================
FILE: configs\input_config.json
================================================================================

{
    "settings": {
        "mouseSensitivity": 1.0,
        "mouseInvertY": false,
        "keyboardRepeatDelay": 300,
        "keyboardRepeatRate": 50,
        "gamepadDeadzone": 0.1,
        "gamepadSensitivity": 1.0
    },
    "keyBindings": [
        {
            "action": "ToggleDebugConsole",
            "key": "TILDE",
            "modifiers": []
        }
    ],
    "mouseBindings": [],
    "gamepadBindings": [],
    "contexts": [
        {
            "name": "Flight",
            "activeBindings": [
                "ToggleDebugConsole"
            ]
        }
    ],
    "defaultContext": "Flight"
}


================================================================================
FILE: configs\physics_config.json
================================================================================

{
    "simulation": {
        "fixedTimestep": 0.016667,
        "maxSubsteps": 4
    },
    "airDensity": {
        "seaLevelDensity": 1.225,
        "scaleHeight": 8400.0
    },
    "wind": {
        "baseWindSpeed": 5.0,
        "turbulenceScale": 100.0,
        "turbulenceIntensity": 0.1,
        "randomSeed": 42
    },
    "collision": {
        "restitution": 0.6,
        "friction": 0.7
    }
}


================================================================================
FILE: configs\render_config.json
================================================================================

{
    "display": {
        "windowTitle": "FPV Flight Simulator",
        "defaultWidth": 1024,
        "defaultHeight": 768,
        "fullscreen": false,
        "resizable": true,
        "vsync": true
    },
    "camera": {
        "fieldOfView": 75.0,
        "nearPlane": 0.1,
        "farPlane": 10000.0,
        "initialPosition": {
            "x": 0.0,
            "y": 5.0,
            "z": 10.0
        },
        "initialTarget": {
            "x": 0.0,
            "y": 0.0,
            "z": 0.0
        }
    },
    "projection2D": {
        "screenCenterX": 512.0,
        "screenCenterY": 384.0,
        "worldToScreenScale": 0.01,
        "defaultEntityRadius": 50.0
    },
    "console": {
        "height": 200,
        "backgroundColor": {
            "r": 0,
            "g": 0,
            "b": 0,
            "a": 180
        },
        "borderColor": {
            "r": 100,
            "g": 100,
            "b": 100,
            "a": 255
        },
        "borderWidth": 2,
        "textColor": {
            "r": 255,
            "g": 255,
            "b": 255,
            "a": 255
        },
        "titleColor": {
            "r": 255,
            "g": 255,
            "b": 0,
            "a": 255
        },
        "marginX": 10,
        "marginY": 20
    },
    "antiAliasing": {
        "msaaSamples": 4,
        "enableFXAA": false
    },
    "performance": {
        "maxFps": 60,
        "enableFrameLimiting": true,
        "renderDistance": 1000.0,
        "lodBias": 1.0
    },
    "quality": {
        "textureFiltering": "linear",
        "anisotropicFiltering": 8,
        "shadowQuality": "medium",
        "reflectionQuality": "low"
    },
    "debug": {
        "showFps": true,
        "showWireframe": false,
        "showBoundingBoxes": false,
        "showCoordinateAxes": false
    }
}


================================================================================
FILE: internal_assets\core\materials\default_material.json
================================================================================

{
    "material": {
        "id": "default_material",
        "name": "Default Material",
        "shader": "default_shader",
        "params": {
            "albedo": {
                "type": "color",
                "r": 0.8,
                "g": 0.8,
                "b": 0.8,
                "a": 1.0
            },
            "roughness": {
                "type": "float",
                "value": 0.5
            },
            "metallic": {
                "type": "float",
                "value": 0.0
            },
            "specular": {
                "type": "float",
                "value": 0.5
            }
        },
        "textures": [
            {
                "name": "albedoMap",
                "path": "textures/default.png"
            },
            {
                "name": "normalMap",
                "path": "textures/default_normal.png"
            },
            {
                "name": "roughnessMap",
                "path": "textures/default_roughness.png"
            },
            {
                "name": "metallicMap",
                "path": "textures/default_metallic.png"
            }
        ]
    }
}


================================================================================
FILE: internal_assets\core\scenes\green_cubes_scene.json
================================================================================

{
    "scene": {
        "id": "green_cubes_scene",
        "name": "Three Green Cubes",
        "entities": [
            {
                "id": "green_cube_1",
                "name": "Green Cube 1",
                "transform": {
                    "position": {
                        "x": -1.5,
                        "y": 0.0,
                        "z": 0.0
                    },
                    "rotation": {
                        "x": 0.0,
                        "y": 0.0,
                        "z": 0.0,
                        "w": 1.0
                    },
                    "scale": {
                        "x": 0.8,
                        "y": 0.8,
                        "z": 0.8
                    }
                },
                "mesh": {
                    "asset": "mesh.cube"
                },
                "material": {
                    "asset": "material.green"
                },
                "behavior": {
                    "codeBehind": "SpinBehavior",
                    "params": {
                        "speed": 30.0,
                        "axisY": 1.0,
                        "axisX": 0.5
                    }
                }
            },
            {
                "id": "green_cube_2",
                "name": "Green Cube 2",
                "transform": {
                    "position": {
                        "x": 0.0,
                        "y": 0.0,
                        "z": 0.0
                    },
                    "rotation": {
                        "x": 0.0,
                        "y": 0.0,
                        "z": 0.0,
                        "w": 1.0
                    },
                    "scale": {
                        "x": 0.8,
                        "y": 0.8,
                        "z": 0.8
                    }
                },
                "mesh": {
                    "asset": "mesh.cube"
                },
                "material": {
                    "asset": "material.green"
                },
                "behavior": {
                    "codeBehind": "SpinBehavior",
                    "params": {
                        "speed": 5.0,
                        "axisY": 1.0
                    }
                }
            },
            {
                "id": "green_cube_3",
                "name": "Green Cube 3",
                "transform": {
                    "position": {
                        "x": 1.5,
                        "y": 0.0,
                        "z": 0.0
                    },
                    "rotation": {
                        "x": 0.0,
                        "y": 0.0,
                        "z": 0.0,
                        "w": 1.0
                    },
                    "scale": {
                        "x": 0.8,
                        "y": 0.8,
                        "z": 0.8
                    }
                },
                "mesh": {
                    "asset": "mesh.cube"
                },
                "material": {
                    "asset": "material.green"
                },
                "behavior": {
                    "codeBehind": "SpinBehavior",
                    "params": {
                        "speed": 60.0,
                        "axisY": 1.0,
                        "axisZ": 0.5
                    }
                }
            },
            {
                "id": "red_cube",
                "name": "Red Cube",
                "transform": {
                    "position": {
                        "x": 0.0,
                        "y": 1.5,
                        "z": 0.0
                    },
                    "rotation": {
                        "x": 0.0,
                        "y": 0.0,
                        "z": 0.0,
                        "w": 1.0
                    },
                    "scale": {
                        "x": 1.0,
                        "y": 1.0,
                        "z": 1.0
                    }
                },
                "mesh": {
                    "asset": "mesh.cube"
                },
                "material": {
                    "asset": "material.red"
                },
                "behavior": {
                    "codeBehind": "SpinBehavior",
                    "params": {
                        "speed": -45.0,
                        "axisY": 1.0,
                        "axisX": 0.3
                    }
                }
            }
        ]
    }
}


================================================================================
FILE: internal_assets\core\internal_assets.json
================================================================================

{
    "internal_assets": {
        "version": "1.0",
        "description": "Internal Assets Configuration - Core internal assets required by the engine. These assets are used when user assets are not available.",
        "assets": [
            {
                "id": "texture.default",
                "type": "texture",
                "path": "core/textures/default.png"
            },
            {
                "id": "texture.default_normal",
                "type": "texture",
                "path": "core/textures/default_normal.png"
            },
            {
                "id": "texture.default_roughness",
                "type": "texture",
                "path": "core/textures/default_roughness.png"
            },
            {
                "id": "texture.default_metallic",
                "type": "texture",
                "path": "core/textures/default_metallic.png"
            },
            {
                "id": "font.default",
                "type": "font",
                "path": "core/fonts/default.ttf"
            },
            {
                "id": "audio.default",
                "type": "audio",
                "path": "core/audio/default.wav"
            },
            {
                "id": "material.default",
                "type": "material",
                "path": "core/materials/default_material.json"
            },
            {
                "id": "material.green",
                "type": "material",
                "path": "core/materials/green_material.json"
            },
            {
                "id": "material.red",
                "type": "material",
                "path": "core/materials/red_material.json"
            },
            {
                "id": "mesh.cube",
                "type": "mesh",
                "path": "core/meshes/cube.obj"
            },
            {
                "id": "mesh.sphere",
                "type": "mesh",
                "path": "core/meshes/sphere.obj"
            },
            {
                "id": "mesh.plane",
                "type": "mesh",
                "path": "core/meshes/plane.obj"
            },
            {
                "id": "scene.green_cubes",
                "type": "scene",
                "path": "core/scenes/green_cubes_scene.json"
            },
            {
                "id": "shader.default",
                "type": "shader",
                "path": "core/shaders/default_shader.glsl"
            }
        ],
        "fallbacks": [
            {
                "type": "texture",
                "asset_id": "texture.error",
                "path": "error.png"
            },
            {
                "type": "font",
                "asset_id": "font.error",
                "path": "error.ttf"
            },
            {
                "type": "audio",
                "asset_id": "audio.error",
                "path": "error.wav"
            },
            {
                "type": "material",
                "asset_id": "material.error",
                "path": "core/materials/error_material.json"
            },
            {
                "type": "mesh",
                "asset_id": "mesh.error",
                "path": "core/meshes/cube.obj"
            },
            {
                "type": "shader",
                "asset_id": "shader.error",
                "path": "core/shaders/error_shader.glsl"
            }
        ]
    }
}


================================================================================
FILE: packages\core\package.json
================================================================================

{
    "metadata": {
        "id": "core",
        "name": "Core Package",
        "version": "1.0.0",
        "description": "Core entities and scenes for the FPV Flight Simulator",
        "author": "FPV Flight Simulator Team"
    },
    "dependencies": [],
    "assets": {
        "materials": [
            {
                "id": "redCubeMaterial",
                "name": "Red Cube Material",
                "diffuseColor": {
                    "r": 1.0,
                    "g": 0.0,
                    "b": 0.0,
                    "a": 1.0
                },
                "specularColor": {
                    "r": 0.2,
                    "g": 0.9,
                    "b": 0.2,
                    "a": 1.0
                },
                "shininess": 32.0
            }
        ],
        "meshes": [
            {
                "id": "cubeMesh",
                "name": "Cube Mesh",
                "type": "procedural",
                "primitive": {
                    "type": "cube",
                    "size": {
                        "width": 1.0,
                        "height": 1.0,
                        "depth": 1.0
                    },
                    "uvMapping": true
                }
            }
        ]
    },
    "scenes": [
        {
            "id": "redCubeScene",
            "name": "Red Cube Scene",
            "default": true,
            "description": "A simple scene with a red cube in the center of the screen",
            "settings": {
                "backgroundColor": {
                    "r": 0.1,
                    "g": 0.1,
                    "b": 0.2,
                    "a": 1.0
                },
                "ambientLight": {
                    "r": 0.3,
                    "g": 0.3,
                    "b": 0.3
                }
            },
            "camera": {
                "position": {
                    "x": 0.0,
                    "y": 0.0,
                    "z": 5.0
                },
                "target": {
                    "x": 0.0,
                    "y": 0.0,
                    "z": 0.0
                },
                "up": {
                    "x": 0.0,
                    "y": 1.0,
                    "z": 0.0
                },
                "fov": 45.0,
                "nearPlane": 0.1,
                "farPlane": 100.0
            },
            "entities": [
                {
                    "id": "redCube",
                    "name": "Red Cube",
                    "transform": {
                        "position": {
                            "x": 0.0,
                            "y": 0.0,
                            "z": 0.0
                        },
                        "rotation": {
                            "x": 0.0,
                            "y": 0.0,
                            "z": 0.0,
                            "w": 1.0
                        },
                        "scale": {
                            "x": 1.0,
                            "y": 1.0,
                            "z": 1.0
                        }
                    },
                    "renderable": {
                        "mesh": "cubeMesh",
                        "material": "redCubeMaterial",
                        "visible": true
                    },
                    "behavior": {
                        "codeBehind": "core.SpinBehavior",
                        "parameters": {
                            "rotationSpeed": 45.0,
                            "axis": {
                                "x": 0.0,
                                "y": 1.0,
                                "z": 0.0
                            }
                        }
                    }
                },
                {
                    "id": "mainLight",
                    "name": "Main Light",
                    "transform": {
                        "position": {
                            "x": 2.0,
                            "y": 2.0,
                            "z": 2.0
                        },
                        "rotation": {
                            "x": 0.0,
                            "y": 0.0,
                            "z": 0.0,
                            "w": 1.0
                        },
                        "scale": {
                            "x": 1.0,
                            "y": 1.0,
                            "z": 1.0
                        }
                    },
                    "light": {
                        "type": "directional",
                        "color": {
                            "r": 0.1,
                            "g": 0.0,
                            "b": 0.0
                        },
                        "intensity": 1.0,
                        "direction": {
                            "x": -1.0,
                            "y": -1.0,
                            "z": -1.0
                        }
                    }
                }
            ]
        }
    ],
    "behaviors": [
        {
            "class": "core.SpinBehavior",
            "name": "Spin Behavior",
            "description": "Rotates an entity continuously around a specified axis",
            "parameters": [
                {
                    "name": "rotationSpeed",
                    "type": "float",
                    "default": 1.0,
                    "description": "Rotation speed in degrees per second"
                },
                {
                    "name": "axis",
                    "type": "vector3",
                    "default": [
                        0,
                        1,
                        0
                    ],
                    "description": "Rotation axis (normalized)"
                }
            ]
        }
    ]
}


================================================================================
FILE: src\assets\AssetCompilerService.cpp
================================================================================

#include "AssetCompilerService.h"
#include <filesystem>
#include <fstream>
#include <iostream>
#include <chrono>
#include <sstream>
#include <iomanip>
#include <cstring>
#include <algorithm>
#include "../debug.h"

namespace AssetCompilation
{
    AssetCompilerService::AssetCompilerService()
        : outputDirectory_("runtime/data/compiled"), debugMode_(false), optimizationLevel_(1)
    {
        // Register default asset type mappings
        registerAssetType(".png", AssetType::Texture);
        registerAssetType(".jpg", AssetType::Texture);
        registerAssetType(".jpeg", AssetType::Texture);
        registerAssetType(".bmp", AssetType::Texture);
        registerAssetType(".tga", AssetType::Texture);

        registerAssetType(".obj", AssetType::Mesh);
        registerAssetType(".fbx", AssetType::Mesh);
        registerAssetType(".gltf", AssetType::Mesh);
        registerAssetType(".dae", AssetType::Mesh);

        registerAssetType(".wav", AssetType::Audio);
        registerAssetType(".mp3", AssetType::Audio);
        registerAssetType(".ogg", AssetType::Audio);

        registerAssetType(".xml", AssetType::Scene); // Scene or entity files

        if (Debug())
        {
            DEBUG_LOG("AssetCompilerService initialized with output directory: " << outputDirectory_);
        }
    }

    AssetCompilerService::~AssetCompilerService() = default;

    void AssetCompilerService::setOutputDirectory(const std::string &directory)
    {
        outputDirectory_ = directory;
        if (debugMode_ && Debug())
        {
            DEBUG_LOG("Asset output directory set to: " << outputDirectory_);
        }
    }

    void AssetCompilerService::setDebugMode(bool enabled)
    {
        debugMode_ = enabled;
        if (Debug())
        {
            DEBUG_LOG("Asset compiler debug mode: " << (enabled ? "enabled" : "disabled"));
        }
    }

    void AssetCompilerService::setOptimizationLevel(int level)
    {
        optimizationLevel_ = std::max(0, std::min(2, level));
        if (debugMode_ && Debug())
        {
            DEBUG_LOG("Asset compiler optimization level set to: " << optimizationLevel_);
        }
    }

    void AssetCompilerService::registerAssetType(const std::string &extension, AssetType type)
    {
        typeMapping_[extension] = type;
        if (debugMode_ && Debug())
        {
            DEBUG_LOG("Registered asset type mapping: " << extension << " -> " << static_cast<int>(type));
        }
    }

    CompilationResult AssetCompilerService::compileAsset(const std::string &sourceFile)
    {
        // Create default metadata
        AssetMetadata metadata;
        metadata.sourceFile = sourceFile;
        metadata.type = detectAssetType(sourceFile);
        metadata.requiresCompilation = true;

        return compileAsset(sourceFile, metadata);
    }

    CompilationResult AssetCompilerService::compileAsset(const std::string &sourceFile, const AssetMetadata &metadata)
    {
        auto startTime = std::chrono::high_resolution_clock::now();
        CompilationResult result;

        try
        {
            if (debugMode_ && Debug())
            {
                DEBUG_LOG("Compiling asset: " << sourceFile);
            }

            // Validate source file exists
            if (!std::filesystem::exists(sourceFile))
            {
                result.success = false;
                result.errorMessage = "Source file does not exist: " + sourceFile;
                return result;
            }

            // Ensure output directory exists
            if (!ensureOutputDirectory())
            {
                result.success = false;
                result.errorMessage = "Failed to create output directory: " + outputDirectory_;
                return result;
            }

            // Check if compilation is needed
            std::string compiledPath = getCompiledPath(sourceFile);
            if (!metadata.requiresCompilation && isUpToDate(sourceFile, compiledPath))
            {
                result.success = true;
                result.outputPath = compiledPath;
                result.errorMessage = "Asset is up to date, skipped compilation";
                statistics_.assetsSkipped++;
                return result;
            }

            // Compile based on asset type
            switch (metadata.type)
            {
            case AssetType::Texture:
                result = compileTexture(sourceFile, metadata);
                break;
            case AssetType::Mesh:
                result = compileMesh(sourceFile, metadata);
                break;
            case AssetType::Material:
                result = compileMaterial(sourceFile, metadata);
                break;
            case AssetType::Audio:
                result = compileAudio(sourceFile, metadata);
                break;
            case AssetType::Scene:
                result = compileScene(sourceFile, metadata);
                break;
            case AssetType::Entity:
                result = compileEntity(sourceFile, metadata);
                break;
            default:
                result.success = false;
                result.errorMessage = "Unknown or unsupported asset type";
                break;
            }

            // Update statistics
            if (result.success)
            {
                statistics_.assetsCompiled++;
                statistics_.totalInputSize += std::filesystem::file_size(sourceFile);
                if (std::filesystem::exists(result.outputPath))
                {
                    statistics_.totalOutputSize += std::filesystem::file_size(result.outputPath);
                }
            }
        }
        catch (const std::exception &e)
        {
            result.success = false;
            result.errorMessage = "Exception during compilation: " + std::string(e.what());
        }

        auto endTime = std::chrono::high_resolution_clock::now();
        result.compilationTimeMs = std::chrono::duration<double, std::milli>(endTime - startTime).count();
        statistics_.totalCompilationTime += result.compilationTimeMs;

        if (debugMode_ && Debug())
        {
            DEBUG_LOG("Compilation " << (result.success ? "succeeded" : "failed")
                                     << " in " << result.compilationTimeMs << "ms");
            if (!result.success)
            {
                DEBUG_LOG("Error: " << result.errorMessage);
            }
        }

        return result;
    }

    std::vector<CompilationResult> AssetCompilerService::compileAssetPackage(const std::string &packagePath)
    {
        std::vector<CompilationResult> results;

        if (debugMode_ && Debug())
        {
            DEBUG_LOG("Compiling asset package: " << normalizePath(packagePath));
        }

        try
        {
            if (!std::filesystem::exists(packagePath))
            {
                CompilationResult result;
                result.success = false;
                result.errorMessage = "Package path does not exist: " + packagePath;
                results.push_back(result);
                return results;
            }

            // Look for package.xml to get asset list
            std::filesystem::path packagePath_fs(packagePath);
            std::filesystem::path packageXml = packagePath_fs / "package.xml";
            if (std::filesystem::exists(packageXml))
            {
                // TODO: Parse package.xml to get asset list
                // For now, compile all supported files in directory
                results = compileDirectory(packagePath, true);
            }
            else
            {
                // No package.xml, compile all supported files
                results = compileDirectory(packagePath, true);
            }
        }
        catch (const std::exception &e)
        {
            CompilationResult result;
            result.success = false;
            result.errorMessage = "Exception during package compilation: " + std::string(e.what());
            results.push_back(result);
        }

        return results;
    }

    std::vector<CompilationResult> AssetCompilerService::compileDirectory(const std::string &sourcePath, bool recursive)
    {
        std::vector<CompilationResult> results;

        if (debugMode_ && Debug())
        {
            DEBUG_LOG("Compiling directory: " << normalizePath(sourcePath) << (recursive ? " (recursive)" : ""));
        }

        try
        {
            if (recursive)
            {
                for (const auto &entry : std::filesystem::recursive_directory_iterator(sourcePath))
                {
                    if (entry.is_regular_file())
                    {
                        std::filesystem::path entryPath = entry.path();
                        std::string filePath = entryPath.make_preferred().string();

                        // Skip files that are inside package directories
                        // Packages should only be compiled via compileAssetPackage()
                        std::string packageSeparator = "packages" + std::string(1, std::filesystem::path::preferred_separator);
                        if (filePath.find(packageSeparator) != std::string::npos)
                        {
                            if (debugMode_ && Debug())
                            {
                                DEBUG_LOG("Skipping package file during general scan: " << normalizePath(filePath));
                            }
                            continue;
                        }

                        AssetType type = detectAssetType(filePath);

                        if (type != AssetType::Unknown)
                        {
                            CompilationResult result = compileAsset(filePath);
                            results.push_back(result);
                        }
                    }
                }
            }
            else
            {
                for (const auto &entry : std::filesystem::directory_iterator(sourcePath))
                {
                    if (entry.is_regular_file())
                    {
                        std::filesystem::path entryPath = entry.path();
                        std::string filePath = entryPath.make_preferred().string();

                        // Skip files that are inside package directories
                        // Packages should only be compiled via compileAssetPackage()
                        std::string packageSeparator = "packages" + std::string(1, std::filesystem::path::preferred_separator);
                        if (filePath.find(packageSeparator) != std::string::npos)
                        {
                            if (debugMode_ && Debug())
                            {
                                DEBUG_LOG("Skipping package file during general scan: " << normalizePath(filePath));
                            }
                            continue;
                        }

                        AssetType type = detectAssetType(filePath);

                        if (type != AssetType::Unknown)
                        {
                            CompilationResult result = compileAsset(filePath);
                            results.push_back(result);
                        }
                    }
                }
            }
        }
        catch (const std::exception &e)
        {
            CompilationResult result;
            result.success = false;
            result.errorMessage = "Exception during directory compilation: " + std::string(e.what());
            results.push_back(result);
        }

        return results;
    }

    bool AssetCompilerService::validateAsset(const std::string &sourceFile, std::vector<std::string> &errors)
    {
        errors.clear();

        try
        {
            if (!std::filesystem::exists(sourceFile))
            {
                errors.push_back("Source file does not exist: " + sourceFile);
                return false;
            }

            // Check file permissions
            try
            {
                std::filesystem::file_status status = std::filesystem::status(sourceFile);
                if (status.type() != std::filesystem::file_type::regular)
                {
                    errors.push_back("Source path is not a regular file: " + sourceFile);
                    return false;
                }
            }
            catch (const std::exception &e)
            {
                errors.push_back("Cannot check file status for '" + sourceFile + "': " + std::string(e.what()));
                return false;
            }

            AssetType type = detectAssetType(sourceFile);
            if (type == AssetType::Unknown)
            {
                std::filesystem::path path(sourceFile);
                errors.push_back("Unknown or unsupported asset type for extension '" + path.extension().string() + "' in file: " + sourceFile);
                return false;
            }

            // Check file size first for all types
            size_t fileSize = 0;
            try
            {
                fileSize = std::filesystem::file_size(sourceFile);
                if (fileSize == 0)
                {
                    errors.push_back("Asset file is empty (0 bytes): " + sourceFile);
                    return false;
                }
            }
            catch (const std::exception &e)
            {
                errors.push_back("Cannot determine file size for '" + sourceFile + "': " + std::string(e.what()));
                return false;
            }

            // Type-specific validation
            switch (type)
            {
            case AssetType::Texture:
                // Basic texture validation
                if (debugMode_ && Debug())
                {
                    DEBUG_LOG("Validating texture file: " << sourceFile << " (size: " << fileSize << " bytes)");
                }
                // Could add more sophisticated image format validation here
                break;

            case AssetType::Scene:
            case AssetType::Entity:
            {
                if (debugMode_ && Debug())
                {
                    DEBUG_LOG("Validating XML file: " << sourceFile << " (size: " << fileSize << " bytes)");
                }

                // XML validation for scene/entity files
                std::ifstream file(sourceFile);
                if (!file.is_open())
                {
                    errors.push_back("Cannot open XML file for reading: " + sourceFile + " (errno: " + std::strerror(errno) + ")");
                    return false;
                }

                try
                {
                    std::string content((std::istreambuf_iterator<char>(file)),
                                        std::istreambuf_iterator<char>());

                    if (content.empty())
                    {
                        errors.push_back("XML file content is empty after reading: " + sourceFile);
                        return false;
                    }

                    // Basic XML structure validation
                    if (content.find('<') == std::string::npos)
                    {
                        errors.push_back("XML file does not contain any XML tags: " + sourceFile);
                        return false;
                    }

                    // Check for basic XML structure
                    size_t openTags = std::count(content.begin(), content.end(), '<');
                    size_t closeTags = std::count(content.begin(), content.end(), '>');

                    if (openTags != closeTags)
                    {
                        errors.push_back("XML file has mismatched angle brackets (< vs >): " + sourceFile +
                                         " (found " + std::to_string(openTags) + " '<' and " +
                                         std::to_string(closeTags) + " '>' characters)");
                        return false;
                    }

                    // Check for XML declaration or root element
                    if (content.find("<?xml") == std::string::npos &&
                        content.find("<scene") == std::string::npos &&
                        content.find("<entity") == std::string::npos &&
                        content.find("<root") == std::string::npos)
                    {
                        errors.push_back("XML file does not contain recognizable XML declaration or root element: " + sourceFile);
                        return false;
                    }

                    if (debugMode_ && Debug())
                    {
                        DEBUG_LOG("XML validation passed for: " << sourceFile);
                    }
                }
                catch (const std::exception &e)
                {
                    errors.push_back("Exception while reading XML file '" + sourceFile + "': " + std::string(e.what()));
                    return false;
                }
            }
            break;

            case AssetType::Audio:
                if (debugMode_ && Debug())
                {
                    DEBUG_LOG("Validating audio file: " << sourceFile << " (size: " << fileSize << " bytes)");
                }
                // Could add audio format validation here
                break;

            default:
                // Basic file validation for other types
                if (debugMode_ && Debug())
                {
                    DEBUG_LOG("Validating generic asset file: " << sourceFile << " (size: " << fileSize << " bytes)");
                }
                break;
            }

            return true;
        }
        catch (const std::exception &e)
        {
            errors.push_back("Exception during validation of '" + sourceFile + "': " + std::string(e.what()));
            return false;
        }
    }

    std::vector<std::string> AssetCompilerService::getDependencies(const std::string &sourceFile)
    {
        std::vector<std::string> dependencies;

        // Basic dependency detection - can be enhanced for specific asset types
        AssetType type = detectAssetType(sourceFile);

        if (type == AssetType::Scene || type == AssetType::Entity)
        {
            // For XML files, look for asset references
            try
            {
                std::ifstream file(sourceFile);
                if (file.is_open())
                {
                    std::string content((std::istreambuf_iterator<char>(file)),
                                        std::istreambuf_iterator<char>());

                    // Simple dependency extraction - look for material_id, mesh_id, etc.
                    // This could be enhanced with proper XML parsing
                    // For now, just return empty dependencies
                }
            }
            catch (...)
            {
                // Ignore errors in dependency detection
            }
        }

        return dependencies;
    }

    bool AssetCompilerService::isUpToDate(const std::string &sourceFile, const std::string &compiledFile)
    {
        try
        {
            if (!std::filesystem::exists(compiledFile))
            {
                return false;
            }

            auto sourceTime = std::filesystem::last_write_time(sourceFile);
            auto compiledTime = std::filesystem::last_write_time(compiledFile);

            return compiledTime >= sourceTime;
        }
        catch (...)
        {
            return false;
        }
    }

    void AssetCompilerService::clearCache()
    {
        try
        {
            if (std::filesystem::exists(outputDirectory_))
            {
                std::filesystem::remove_all(outputDirectory_);
                std::filesystem::create_directories(outputDirectory_);

                if (debugMode_ && Debug())
                {
                    DEBUG_LOG("Asset cache cleared");
                }
            }
        }
        catch (const std::exception &e)
        {
            std::cerr << "Error clearing cache: " << e.what() << std::endl;
        }
    }

    void AssetCompilerService::rebuildCache()
    {
        clearCache();

        // Rebuild cache by compiling only asset packages
        if (std::filesystem::exists("assets/packages"))
        {
            compileDirectory("assets/packages", true);
        }
    }

    size_t AssetCompilerService::getCacheSize() const
    {
        size_t totalSize = 0;

        try
        {
            if (std::filesystem::exists(outputDirectory_))
            {
                for (const auto &entry : std::filesystem::recursive_directory_iterator(outputDirectory_))
                {
                    if (entry.is_regular_file())
                    {
                        totalSize += entry.file_size();
                    }
                }
            }
        }
        catch (...)
        {
            // Ignore errors
        }

        return totalSize;
    }

    const AssetCompilerService::Statistics &AssetCompilerService::getStatistics() const
    {
        return statistics_;
    }

    void AssetCompilerService::resetStatistics()
    {
        statistics_ = Statistics{};
    }

    // Private implementation methods

    CompilationResult AssetCompilerService::compileTexture(const std::string &sourceFile, const AssetMetadata &metadata)
    {
        CompilationResult result;

        try
        {
            if (debugMode_ && Debug())
            {
                DEBUG_LOG("Starting texture compilation for: " << sourceFile);
            }

            // Simple texture compilation - copy file with optimized format
            std::string outputPath = getCompiledPath(sourceFile, ".tex");

            if (debugMode_ && Debug())
            {
                DEBUG_LOG("Output path determined: " << normalizePath(outputPath));
            }

            // Ensure output directory exists
            std::filesystem::path outputDir = std::filesystem::path(outputPath).parent_path();
            try
            {
                if (!std::filesystem::exists(outputDir))
                {
                    std::filesystem::create_directories(outputDir);
                    if (debugMode_ && Debug())
                    {
                        DEBUG_LOG("Created output directory: " << outputDir.string());
                    }
                }
            }
            catch (const std::exception &e)
            {
                result.success = false;
                result.errorMessage = "Failed to create output directory '" + outputDir.string() + "': " + std::string(e.what());
                if (debugMode_ && Debug())
                {
                    DEBUG_LOG("Directory creation failed: " << result.errorMessage);
                }
                return result;
            }

            // Open source file
            std::ifstream source(sourceFile, std::ios::binary);
            if (!source.is_open())
            {
                result.success = false;
                result.errorMessage = "Failed to open source texture file '" + sourceFile + "': " + std::strerror(errno);
                if (debugMode_ && Debug())
                {
                    DEBUG_LOG("Source file open failed: " << result.errorMessage);
                }
                return result;
            }

            if (debugMode_ && Debug())
            {
                DEBUG_LOG("Source texture file opened successfully");
            }

            // Open destination file
            std::ofstream dest(outputPath, std::ios::binary);
            if (!dest.is_open())
            {
                result.success = false;
                result.errorMessage = "Failed to create destination texture file '" + outputPath + "': " + std::strerror(errno);
                if (debugMode_ && Debug())
                {
                    DEBUG_LOG("Destination file creation failed: " << result.errorMessage);
                }
                return result;
            }

            if (debugMode_ && Debug())
            {
                DEBUG_LOG("Destination texture file created successfully");
            }

            // Copy file content
            try
            {
                dest << source.rdbuf();

                // Check for stream errors
                if (source.bad())
                {
                    result.success = false;
                    result.errorMessage = "Error reading from source texture file '" + sourceFile + "' during copy operation";
                    if (debugMode_ && Debug())
                    {
                        DEBUG_LOG("Source read error: " << result.errorMessage);
                    }
                    return result;
                }

                if (dest.bad())
                {
                    result.success = false;
                    result.errorMessage = "Error writing to destination texture file '" + outputPath + "' during copy operation";
                    if (debugMode_ && Debug())
                    {
                        DEBUG_LOG("Destination write error: " << result.errorMessage);
                    }
                    return result;
                }

                // Close files explicitly
                source.close();
                dest.close();

                // Verify the output file was created and has content
                if (!std::filesystem::exists(outputPath))
                {
                    result.success = false;
                    result.errorMessage = "Output texture file '" + outputPath + "' was not created despite successful copy operation";
                    if (debugMode_ && Debug())
                    {
                        DEBUG_LOG("Output file verification failed: " << result.errorMessage);
                    }
                    return result;
                }

                auto outputSize = std::filesystem::file_size(outputPath);
                if (outputSize == 0)
                {
                    result.success = false;
                    result.errorMessage = "Output texture file '" + outputPath + "' is empty after copy operation";
                    if (debugMode_ && Debug())
                    {
                        DEBUG_LOG("Output file size verification failed: " << result.errorMessage);
                    }
                    return result;
                }

                result.success = true;
                result.outputPath = outputPath;
                result.outputSizeBytes = outputSize;

                if (debugMode_ && Debug())
                {
                    DEBUG_LOG("Texture compilation successful: " << normalizePath(sourceFile) << " -> " << normalizePath(outputPath)
                                                                 << " (size: " << outputSize << " bytes)");
                }
            }
            catch (const std::exception &e)
            {
                result.success = false;
                result.errorMessage = "Texture file copy operation failed: " + std::string(e.what());
                if (debugMode_ && Debug())
                {
                    DEBUG_LOG("File copy exception: " << result.errorMessage);
                }
                return result;
            }
        }
        catch (const std::exception &e)
        {
            result.success = false;
            result.errorMessage = "Texture compilation error: " + std::string(e.what());
            if (debugMode_ && Debug())
            {
                DEBUG_LOG("Texture compilation exception: " << result.errorMessage);
            }
        }

        return result;
    }

    CompilationResult AssetCompilerService::compileMesh(const std::string &sourceFile, const AssetMetadata &metadata)
    {
        CompilationResult result;

        // Placeholder mesh compilation
        result.success = true;
        result.outputPath = getCompiledPath(sourceFile, ".mesh");
        result.errorMessage = "Mesh compilation not fully implemented yet";

        if (debugMode_ && Debug())
        {
            DEBUG_LOG("Mesh compilation placeholder for: " << sourceFile);
        }

        return result;
    }

    CompilationResult AssetCompilerService::compileMaterial(const std::string &sourceFile, const AssetMetadata &metadata)
    {
        CompilationResult result;

        try
        {
            // Material compilation - process XML to binary format
            std::string outputPath = getCompiledPath(sourceFile, ".mat");

            // Simple copy for now - could add optimization and validation
            std::ifstream source(sourceFile, std::ios::binary);
            std::ofstream dest(outputPath, std::ios::binary);

            if (source && dest)
            {
                dest << source.rdbuf();

                result.success = true;
                result.outputPath = outputPath;
                result.outputSizeBytes = std::filesystem::file_size(outputPath);

                if (debugMode_ && Debug())
                {
                    DEBUG_LOG("Compiled material: " << normalizePath(sourceFile) << " -> " << normalizePath(outputPath));
                }
            }
            else
            {
                result.success = false;
                result.errorMessage = "Failed to compile material file";
            }
        }
        catch (const std::exception &e)
        {
            result.success = false;
            result.errorMessage = "Material compilation error: " + std::string(e.what());
        }

        return result;
    }

    CompilationResult AssetCompilerService::compileAudio(const std::string &sourceFile, const AssetMetadata &metadata)
    {
        CompilationResult result;

        // Placeholder audio compilation
        result.success = true;
        result.outputPath = getCompiledPath(sourceFile, ".audio");
        result.errorMessage = "Audio compilation not fully implemented yet";

        if (debugMode_ && Debug())
        {
            DEBUG_LOG("Audio compilation placeholder for: " << sourceFile);
        }

        return result;
    }

    CompilationResult AssetCompilerService::compileScene(const std::string &sourceFile, const AssetMetadata &metadata)
    {
        CompilationResult result;

        try
        {
            if (debugMode_ && Debug())
            {
                DEBUG_LOG("Starting scene compilation for: " << normalizePath(sourceFile));
            }

            // Scene compilation - validate and optimize XML
            std::string outputPath = getCompiledPath(sourceFile, ".scene");

            if (debugMode_ && Debug())
            {
                DEBUG_LOG("Output path determined: " << normalizePath(outputPath));
            }

            // For now, copy with validation
            std::vector<std::string> errors;
            if (!validateAsset(sourceFile, errors))
            {
                result.success = false;
                std::string allErrors = "Scene validation failed: ";
                for (size_t i = 0; i < errors.size(); ++i)
                {
                    if (i > 0)
                        allErrors += "; ";
                    allErrors += errors[i];
                }
                result.errorMessage = allErrors;

                if (debugMode_ && Debug())
                {
                    DEBUG_LOG("Scene validation failed: " << allErrors);
                }
                return result;
            }

            if (debugMode_ && Debug())
            {
                DEBUG_LOG("Scene validation passed, starting file I/O operations");
            }

            // Ensure output directory exists
            std::filesystem::path outputDir = std::filesystem::path(outputPath).parent_path();
            try
            {
                if (!std::filesystem::exists(outputDir))
                {
                    std::filesystem::create_directories(outputDir);
                    if (debugMode_ && Debug())
                    {
                        DEBUG_LOG("Created output directory: " << outputDir.string());
                    }
                }
            }
            catch (const std::exception &e)
            {
                result.success = false;
                result.errorMessage = "Failed to create output directory '" + outputDir.string() + "': " + std::string(e.what());
                if (debugMode_ && Debug())
                {
                    DEBUG_LOG("Directory creation failed: " << result.errorMessage);
                }
                return result;
            }

            // Open source file
            std::ifstream source(sourceFile, std::ios::binary);
            if (!source.is_open())
            {
                result.success = false;
                result.errorMessage = "Failed to open source file '" + sourceFile + "': " + std::strerror(errno);
                if (debugMode_ && Debug())
                {
                    DEBUG_LOG("Source file open failed: " << result.errorMessage);
                }
                return result;
            }

            if (debugMode_ && Debug())
            {
                DEBUG_LOG("Source file opened successfully");
            }

            // Open destination file
            std::ofstream dest(outputPath, std::ios::binary);
            if (!dest.is_open())
            {
                result.success = false;
                result.errorMessage = "Failed to create destination file '" + outputPath + "': " + std::strerror(errno);
                if (debugMode_ && Debug())
                {
                    DEBUG_LOG("Destination file creation failed: " << result.errorMessage);
                }
                return result;
            }

            if (debugMode_ && Debug())
            {
                DEBUG_LOG("Destination file created successfully");
            }

            // Copy file content
            try
            {
                dest << source.rdbuf();

                // Check for stream errors
                if (source.bad())
                {
                    result.success = false;
                    result.errorMessage = "Error reading from source file '" + sourceFile + "' during copy operation";
                    if (debugMode_ && Debug())
                    {
                        DEBUG_LOG("Source read error: " << result.errorMessage);
                    }
                    return result;
                }

                if (dest.bad())
                {
                    result.success = false;
                    result.errorMessage = "Error writing to destination file '" + outputPath + "' during copy operation";
                    if (debugMode_ && Debug())
                    {
                        DEBUG_LOG("Destination write error: " << result.errorMessage);
                    }
                    return result;
                }

                // Close files explicitly
                source.close();
                dest.close();

                // Verify the output file was created and has content
                if (!std::filesystem::exists(outputPath))
                {
                    result.success = false;
                    result.errorMessage = "Output file '" + outputPath + "' was not created despite successful copy operation";
                    if (debugMode_ && Debug())
                    {
                        DEBUG_LOG("Output file verification failed: " << result.errorMessage);
                    }
                    return result;
                }

                auto outputSize = std::filesystem::file_size(outputPath);
                if (outputSize == 0)
                {
                    result.success = false;
                    result.errorMessage = "Output file '" + outputPath + "' is empty after copy operation";
                    if (debugMode_ && Debug())
                    {
                        DEBUG_LOG("Output file size verification failed: " << result.errorMessage);
                    }
                    return result;
                }

                result.success = true;
                result.outputPath = outputPath;
                result.outputSizeBytes = outputSize;

                if (debugMode_ && Debug())
                {
                    DEBUG_LOG("Scene compilation successful: " << normalizePath(sourceFile) << " -> " << normalizePath(outputPath)
                                                               << " (size: " << outputSize << " bytes)");
                }
            }
            catch (const std::exception &e)
            {
                result.success = false;
                result.errorMessage = "File copy operation failed: " + std::string(e.what());
                if (debugMode_ && Debug())
                {
                    DEBUG_LOG("File copy exception: " << result.errorMessage);
                }
                return result;
            }
        }
        catch (const std::exception &e)
        {
            result.success = false;
            result.errorMessage = "Scene compilation error: " + std::string(e.what());
            if (debugMode_ && Debug())
            {
                DEBUG_LOG("Scene compilation exception: " << result.errorMessage);
            }
        }

        return result;
    }

    CompilationResult AssetCompilerService::compileEntity(const std::string &sourceFile, const AssetMetadata &metadata)
    {
        CompilationResult result;

        // Similar to scene compilation
        return compileScene(sourceFile, metadata);
    }

    AssetType AssetCompilerService::detectAssetType(const std::string &sourceFile)
    {
        std::filesystem::path path(sourceFile);
        std::string extension = path.extension().string();

        // Convert to lowercase for case-insensitive matching
        std::transform(extension.begin(), extension.end(), extension.begin(), ::tolower);

        auto it = typeMapping_.find(extension);
        if (it != typeMapping_.end())
        {
            return it->second;
        }

        return AssetType::Unknown;
    }

    std::string AssetCompilerService::generateChecksum(const std::string &filePath)
    {
        // Simple checksum based on file size and modification time
        try
        {
            auto size = std::filesystem::file_size(filePath);
            auto time = std::filesystem::last_write_time(filePath);

            std::stringstream ss;
            ss << std::hex << size << "_" << time.time_since_epoch().count();
            return ss.str();
        }
        catch (...)
        {
            return "unknown";
        }
    }

    bool AssetCompilerService::ensureOutputDirectory()
    {
        try
        {
            if (!std::filesystem::exists(outputDirectory_))
            {
                std::filesystem::create_directories(outputDirectory_);
            }
            return true;
        }
        catch (...)
        {
            return false;
        }
    }

    std::string AssetCompilerService::getCompiledPath(const std::string &sourceFile, const std::string &extension)
    {
        std::filesystem::path sourcePath(sourceFile);
        std::filesystem::path relativePath = std::filesystem::relative(sourcePath);

        std::filesystem::path outputPath = std::filesystem::path(outputDirectory_) / relativePath;
        outputPath.replace_extension(extension);

        // Normalize path separators for consistent display
        return outputPath.make_preferred().string();
    }

    std::string AssetCompilerService::normalizePath(const std::string &path)
    {
        return std::filesystem::path(path).make_preferred().string();
    }

} // namespace AssetCompilation


================================================================================
FILE: src\assets\AssetCompilerService.h
================================================================================

#pragma once

#include <string>
#include <vector>
#include <memory>
#include <unordered_map>

namespace AssetCompilation
{
    enum class AssetType
    {
        Unknown,
        Texture,
        Mesh,
        Material,
        Audio,
        Scene,
        Entity
    };

    struct CompilationResult
    {
        bool success = false;
        std::string errorMessage;
        std::string outputPath;
        size_t outputSizeBytes = 0;
        double compilationTimeMs = 0.0;
    };

    struct AssetMetadata
    {
        std::string sourceFile;
        AssetType type;
        std::string targetFormat;
        std::unordered_map<std::string, std::string> parameters;
        bool requiresCompilation = true;
        std::string checksum;
    };

    /**
     * Runtime asset compilation service that processes raw assets into
     * optimized runtime formats with proper validation and caching.
     */
    class AssetCompilerService
    {
    public:
        AssetCompilerService();
        ~AssetCompilerService();

        // Configuration
        void setOutputDirectory(const std::string &directory);
        void setDebugMode(bool enabled);
        void setOptimizationLevel(int level); // 0=none, 1=basic, 2=aggressive

        // Asset type registration
        void registerAssetType(const std::string &extension, AssetType type);

        // Compilation methods
        CompilationResult compileAsset(const std::string &sourceFile);
        CompilationResult compileAsset(const std::string &sourceFile, const AssetMetadata &metadata);

        // Batch compilation
        std::vector<CompilationResult> compileAssetPackage(const std::string &packagePath);
        std::vector<CompilationResult> compileDirectory(const std::string &sourcePath, bool recursive = true);

        // Asset validation and dependency checking
        bool validateAsset(const std::string &sourceFile, std::vector<std::string> &errors);
        std::vector<std::string> getDependencies(const std::string &sourceFile);
        bool isUpToDate(const std::string &sourceFile, const std::string &compiledFile);

        // Cache management
        void clearCache();
        void rebuildCache();
        size_t getCacheSize() const;

        // Compiler statistics
        struct Statistics
        {
            size_t assetsCompiled = 0;
            size_t assetsCached = 0;
            size_t assetsSkipped = 0;
            double totalCompilationTime = 0.0;
            size_t totalInputSize = 0;
            size_t totalOutputSize = 0;
        };

        const Statistics &getStatistics() const;
        void resetStatistics();

    private:
        std::string outputDirectory_;
        bool debugMode_;
        int optimizationLevel_;
        std::unordered_map<std::string, AssetType> typeMapping_;
        Statistics statistics_;

        // Asset type specific compilers
        CompilationResult compileTexture(const std::string &sourceFile, const AssetMetadata &metadata);
        CompilationResult compileMesh(const std::string &sourceFile, const AssetMetadata &metadata);
        CompilationResult compileMaterial(const std::string &sourceFile, const AssetMetadata &metadata);
        CompilationResult compileAudio(const std::string &sourceFile, const AssetMetadata &metadata);
        CompilationResult compileScene(const std::string &sourceFile, const AssetMetadata &metadata);
        CompilationResult compileEntity(const std::string &sourceFile, const AssetMetadata &metadata);

        // Utility methods
        AssetType detectAssetType(const std::string &sourceFile);
        std::string generateChecksum(const std::string &filePath);
        bool ensureOutputDirectory();
        std::string getCompiledPath(const std::string &sourceFile, const std::string &extension = ".compiled");
        std::string normalizePath(const std::string &path);
    };

} // namespace AssetCompilation


================================================================================
FILE: src\assets\AssetRegistry.cpp
================================================================================

#include "AssetRegistry.h"
#include <algorithm>
#include <filesystem>

namespace Assets
{

    AssetRegistry::AssetRegistry() = default;

    AssetRegistry::~AssetRegistry()
    {
        if (isInitialized)
        {
            shutdown();
        }
    }

    void AssetRegistry::initialize()
    {
        if (isInitialized)
        {
            return;
        }

        assets.clear();
        packageAssets.clear();
        loadCallbacks.clear();
        unloadCallbacks.clear();

        isInitialized = true;
    }

    void AssetRegistry::shutdown()
    {
        if (!isInitialized)
        {
            return;
        }

        // Unload all assets
        for (auto &[id, info] : assets)
        {
            if (info.isLoaded)
            {
                unloadAssetData(info);
            }
        }

        assets.clear();
        packageAssets.clear();
        loadCallbacks.clear();
        unloadCallbacks.clear();

        isInitialized = false;
    }

    void AssetRegistry::registerPackageAssets(const Package &package)
    {
        if (!isInitialized)
        {
            return;
        }

        std::vector<AssetId> assetIds;

        for (const auto &asset : package.assets)
        {
            AssetId assetId = AssetIdGenerator::generateAssetId(package.metadata.id, asset.id);

            // Create asset info
            AssetInfo info(assetId, package.metadata.id, asset.id, asset.type,
                           getAssetPath(package, asset));

            assets[assetId] = std::move(info);
            assetIds.push_back(assetId);
        }

        packageAssets[package.metadata.id] = std::move(assetIds);
    }

    void AssetRegistry::unregisterPackageAssets(const std::string &packageId)
    {
        auto it = packageAssets.find(packageId);
        if (it != packageAssets.end())
        {
            // Unload and remove assets
            for (AssetId assetId : it->second)
            {
                auto assetIt = assets.find(assetId);
                if (assetIt != assets.end())
                {
                    if (assetIt->second.isLoaded)
                    {
                        unloadAssetData(assetIt->second);
                    }
                    assets.erase(assetIt);
                }
            }
            packageAssets.erase(it);
        }
    }

    bool AssetRegistry::loadAsset(AssetId assetId)
    {
        auto it = assets.find(assetId);
        if (it == assets.end())
        {
            return false;
        }

        AssetInfo &info = it->second;
        if (info.isLoaded)
        {
            return true; // Already loaded
        }

        return loadAssetData(info);
    }

    void AssetRegistry::unloadAsset(AssetId assetId)
    {
        auto it = assets.find(assetId);
        if (it != assets.end() && it->second.isLoaded)
        {
            unloadAssetData(it->second);
        }
    }

    const AssetRegistry::AssetInfo *AssetRegistry::getAssetInfo(AssetId assetId) const
    {
        auto it = assets.find(assetId);
        return (it != assets.end()) ? &it->second : nullptr;
    }

    void *AssetRegistry::getAssetData(AssetId assetId) const
    {
        const auto *info = getAssetInfo(assetId);
        return (info && info->isLoaded) ? info->data : nullptr;
    }

    bool AssetRegistry::isAssetLoaded(AssetId assetId) const
    {
        const auto *info = getAssetInfo(assetId);
        return info && info->isLoaded;
    }

    std::optional<AssetId> AssetRegistry::resolveAssetReference(const std::string &packageId,
                                                                const std::string &assetRef) const
    {
        auto it = packageAssets.find(packageId);
        if (it == packageAssets.end())
        {
            return std::nullopt;
        }

        // Look for asset by name in the package
        for (AssetId assetId : it->second)
        {
            const auto *info = getAssetInfo(assetId);
            if (info && info->assetName == assetRef)
            {
                return assetId;
            }
        }

        return std::nullopt;
    }

    std::vector<AssetId> AssetRegistry::getAssetsByType(AssetType type) const
    {
        std::vector<AssetId> result;

        for (const auto &[id, info] : assets)
        {
            if (info.type == type)
            {
                result.push_back(id);
            }
        }

        return result;
    }

    std::vector<AssetId> AssetRegistry::getAssetsByPackage(const std::string &packageId) const
    {
        auto it = packageAssets.find(packageId);
        return (it != packageAssets.end()) ? it->second : std::vector<AssetId>{};
    }

    void AssetRegistry::registerAssetLoader(AssetType type, AssetLoadCallback loadCallback,
                                            AssetUnloadCallback unloadCallback)
    {
        if (loadCallback)
        {
            loadCallbacks[type] = std::move(loadCallback);
        }
        if (unloadCallback)
        {
            unloadCallbacks[type] = std::move(unloadCallback);
        }
    }

    size_t AssetRegistry::preloadPackageAssets(const std::string &packageId)
    {
        auto assetIds = getAssetsByPackage(packageId);
        size_t loadedCount = 0;

        for (AssetId assetId : assetIds)
        {
            if (loadAsset(assetId))
            {
                loadedCount++;
            }
        }

        return loadedCount;
    }

    void AssetRegistry::unloadPackageAssets(const std::string &packageId)
    {
        auto assetIds = getAssetsByPackage(packageId);

        for (AssetId assetId : assetIds)
        {
            unloadAsset(assetId);
        }
    }

    AssetRegistry::MemoryStats AssetRegistry::getMemoryStats() const
    {
        MemoryStats stats;
        stats.totalAssets = assets.size();

        for (const auto &[id, info] : assets)
        {
            if (info.isLoaded)
            {
                stats.loadedAssets++;
                stats.totalMemoryUsage += info.dataSize;
                stats.memoryByType[info.type] += info.dataSize;
            }
        }

        return stats;
    }

    size_t AssetRegistry::garbageCollect()
    {
        // In a real implementation, this would check reference counts
        // For now, we'll just return 0 since we don't have reference tracking
        return 0;
    }

    bool AssetRegistry::loadAssetData(AssetInfo &assetInfo)
    {
        auto it = loadCallbacks.find(assetInfo.type);
        if (it == loadCallbacks.end())
        {
            return false; // No loader registered for this type
        }

        try
        {
            size_t dataSize = 0;
            void *data = it->second(assetInfo.filePath, dataSize);

            if (data)
            {
                assetInfo.data = data;
                assetInfo.dataSize = dataSize;
                assetInfo.isLoaded = true;
                return true;
            }
        }
        catch (const std::exception &)
        {
            // Loading failed
        }

        return false;
    }

    void AssetRegistry::unloadAssetData(AssetInfo &assetInfo)
    {
        if (!assetInfo.isLoaded || !assetInfo.data)
        {
            return;
        }

        auto it = unloadCallbacks.find(assetInfo.type);
        if (it != unloadCallbacks.end())
        {
            try
            {
                it->second(assetInfo.data, assetInfo.type);
            }
            catch (const std::exception &)
            {
                // Cleanup failed, but continue anyway
            }
        }

        assetInfo.data = nullptr;
        assetInfo.dataSize = 0;
        assetInfo.isLoaded = false;
    }

    std::string AssetRegistry::getAssetPath(const Package &package, const AssetDefinition &asset) const
    {
        // Construct path relative to package directory
        std::filesystem::path packageDir = std::filesystem::path(package.metadata.packagePath).parent_path();
        std::filesystem::path assetPath = packageDir / asset.path;
        return assetPath.string();
    }

} // namespace Assets


================================================================================
FILE: src\assets\AssetRegistry.h
================================================================================

#pragma once
#include "Package.h"
#include <unordered_map>
#include <memory>
#include <string>
#include <functional>
#include <vector>
#include <optional>

namespace Assets
{

    /**
     * Registry for managing all loaded assets from packages.
     * Provides centralized access to assets by AssetId and supports
     * asset reference resolution and lifecycle management.
     */
    class AssetRegistry
    {
    public:
        /**
         * Structure containing asset metadata and loading information
         */
        struct AssetInfo
        {
            AssetId id;
            std::string packageId;
            std::string assetName;
            AssetType type;
            std::string filePath;
            bool isLoaded = false;
            void *data = nullptr; // Pointer to loaded asset data
            size_t dataSize = 0;

            AssetInfo() = default;
            AssetInfo(AssetId id, const std::string &packageId, const std::string &assetName,
                      AssetType type, const std::string &filePath)
                : id(id), packageId(packageId), assetName(assetName), type(type), filePath(filePath) {}
        };

        /**
         * Callback type for asset loading operations
         */
        using AssetLoadCallback = std::function<void *(const std::string &filePath, size_t &outSize)>;
        using AssetUnloadCallback = std::function<void(void *data, AssetType type)>;

        AssetRegistry();
        ~AssetRegistry();

        /**
         * Initialize the asset registry
         */
        void initialize();

        /**
         * Shutdown the registry and unload all assets
         */
        void shutdown();

        /**
         * Register assets from a package
         * @param package The package containing assets to register
         */
        void registerPackageAssets(const Package &package);

        /**
         * Unregister all assets from a package
         * @param packageId ID of the package to unregister
         */
        void unregisterPackageAssets(const std::string &packageId);

        /**
         * Load an asset by ID
         * @param assetId ID of the asset to load
         * @return True if asset was successfully loaded
         */
        bool loadAsset(AssetId assetId);

        /**
         * Unload an asset by ID
         * @param assetId ID of the asset to unload
         */
        void unloadAsset(AssetId assetId);

        /**
         * Get asset information by ID
         * @param assetId ID of the asset
         * @return Pointer to asset info, or nullptr if not found
         */
        const AssetInfo *getAssetInfo(AssetId assetId) const;

        /**
         * Get loaded asset data by ID
         * @param assetId ID of the asset
         * @return Pointer to asset data, or nullptr if not loaded
         */
        void *getAssetData(AssetId assetId) const;

        /**
         * Get asset data with type checking
         * @param assetId ID of the asset
         * @return Typed pointer to asset data, or nullptr if not loaded or wrong type
         */
        template <typename T>
        T *getAssetData(AssetId assetId) const
        {
            const auto *info = getAssetInfo(assetId);
            if (info && info->isLoaded && info->data)
            {
                return static_cast<T *>(info->data);
            }
            return nullptr;
        }

        /**
         * Check if an asset is loaded
         * @param assetId ID of the asset
         * @return True if the asset is loaded
         */
        bool isAssetLoaded(AssetId assetId) const;

        /**
         * Resolve an asset reference to an AssetId
         * @param packageId ID of the package containing the reference
         * @param assetRef Asset reference string (e.g., "meshes/cube.obj")
         * @return AssetId if found, nullopt otherwise
         */
        std::optional<AssetId> resolveAssetReference(const std::string &packageId,
                                                     const std::string &assetRef) const;

        /**
         * Get all assets of a specific type
         * @param type Asset type to filter by
         * @return Vector of asset IDs matching the type
         */
        std::vector<AssetId> getAssetsByType(AssetType type) const;

        /**
         * Get all assets from a specific package
         * @param packageId ID of the package
         * @return Vector of asset IDs from the package
         */
        std::vector<AssetId> getAssetsByPackage(const std::string &packageId) const;

        /**
         * Register asset loading callbacks for specific asset types
         * @param type Asset type
         * @param loadCallback Function to load asset data from file
         * @param unloadCallback Function to cleanup asset data
         */
        void registerAssetLoader(AssetType type, AssetLoadCallback loadCallback,
                                 AssetUnloadCallback unloadCallback);

        /**
         * Preload all assets from a package
         * @param packageId ID of the package
         * @return Number of assets successfully loaded
         */
        size_t preloadPackageAssets(const std::string &packageId);

        /**
         * Unload all assets from a package
         * @param packageId ID of the package
         */
        void unloadPackageAssets(const std::string &packageId);

        /**
         * Get memory usage statistics
         */
        struct MemoryStats
        {
            size_t totalAssets = 0;
            size_t loadedAssets = 0;
            size_t totalMemoryUsage = 0;
            std::unordered_map<AssetType, size_t> memoryByType;
        };

        MemoryStats getMemoryStats() const;

        /**
         * Force garbage collection of unused assets
         * @return Number of assets unloaded
         */
        size_t garbageCollect();

    private:
        // Asset storage
        std::unordered_map<AssetId, AssetInfo> assets;

        // Asset loaders by type
        std::unordered_map<AssetType, AssetLoadCallback> loadCallbacks;
        std::unordered_map<AssetType, AssetUnloadCallback> unloadCallbacks;

        // Package to assets mapping for efficient cleanup
        std::unordered_map<std::string, std::vector<AssetId>> packageAssets;

        bool isInitialized = false;

        /**
         * Load asset data using registered loader
         */
        bool loadAssetData(AssetInfo &assetInfo);

        /**
         * Unload asset data using registered unloader
         */
        void unloadAssetData(AssetInfo &assetInfo);

        /**
         * Get default asset path relative to package
         */
        std::string getAssetPath(const Package &package, const AssetDefinition &asset) const;
    };

} // namespace Assets


================================================================================
FILE: src\assets\Package.cpp
================================================================================

#include "Package.h"
#include <sstream>
#include <algorithm>

namespace Assets
{

    // FNV-1a hash implementation for stable ID generation
    uint64_t AssetIdGenerator::fnv1a_hash(const std::string &str)
    {
        const uint64_t FNV_offset_basis = 14695981039346656037ULL;
        const uint64_t FNV_prime = 1099511628211ULL;

        uint64_t hash = FNV_offset_basis;
        for (char c : str)
        {
            hash ^= static_cast<uint64_t>(c);
            hash *= FNV_prime;
        }
        return hash;
    }

    AssetId AssetIdGenerator::generateAssetId(const std::string &packageId, const std::string &assetId)
    {
        uint64_t packageHash = fnv1a_hash(packageId);
        uint64_t assetHash = fnv1a_hash(assetId);

        // Combine hashes and truncate to 32-bit for compatibility with existing AssetId
        uint64_t combined = (packageHash << 32) | (assetHash & 0xFFFFFFFF);
        return static_cast<AssetId>(combined & 0xFFFFFFFF);
    }

    SceneId AssetIdGenerator::generateSceneId(const std::string &packageId, const std::string &sceneId)
    {
        std::string combined = packageId + ":" + sceneId;
        return static_cast<SceneId>(fnv1a_hash(combined));
    }

    EntityId AssetIdGenerator::generateEntityId(const std::string &sceneId, const std::string &entityId)
    {
        std::string combined = sceneId + ":" + entityId;
        return static_cast<EntityId>(fnv1a_hash(combined));
    }

    // BehaviorParams implementation
    template <>
    float BehaviorParams::get<float>(const std::string &name, const float &defaultValue) const
    {
        return getFloat(name, defaultValue);
    }

    template <>
    int BehaviorParams::get<int>(const std::string &name, const int &defaultValue) const
    {
        return getInt(name, defaultValue);
    }

    template <>
    bool BehaviorParams::get<bool>(const std::string &name, const bool &defaultValue) const
    {
        return getBool(name, defaultValue);
    }

    template <>
    std::string BehaviorParams::get<std::string>(const std::string &name, const std::string &defaultValue) const
    {
        return getString(name, defaultValue);
    }

    float BehaviorParams::getFloat(const std::string &name, float defaultValue) const
    {
        auto it = parameters.find(name);
        if (it == parameters.end())
        {
            return defaultValue;
        }

        try
        {
            return std::stof(it->second);
        }
        catch (const std::exception &)
        {
            return defaultValue;
        }
    }

    int BehaviorParams::getInt(const std::string &name, int defaultValue) const
    {
        auto it = parameters.find(name);
        if (it == parameters.end())
        {
            return defaultValue;
        }

        try
        {
            return std::stoi(it->second);
        }
        catch (const std::exception &)
        {
            return defaultValue;
        }
    }

    bool BehaviorParams::getBool(const std::string &name, bool defaultValue) const
    {
        auto it = parameters.find(name);
        if (it == parameters.end())
        {
            return defaultValue;
        }

        std::string value = it->second;
        std::transform(value.begin(), value.end(), value.begin(), ::tolower);

        return value == "true" || value == "1" || value == "yes";
    }

    std::string BehaviorParams::getString(const std::string &name, const std::string &defaultValue) const
    {
        auto it = parameters.find(name);
        return (it != parameters.end()) ? it->second : defaultValue;
    }

    BehaviorParams::Vector3 BehaviorParams::getVector3(const std::string &name, const Vector3 &defaultValue) const
    {
        auto it = parameters.find(name);
        if (it == parameters.end())
        {
            return defaultValue;
        }

        std::istringstream iss(it->second);
        Vector3 result = defaultValue;
        iss >> result.x >> result.y >> result.z;
        return result;
    }

    BehaviorParams::Vector2 BehaviorParams::getVector2(const std::string &name, const Vector2 &defaultValue) const
    {
        auto it = parameters.find(name);
        if (it == parameters.end())
        {
            return defaultValue;
        }

        std::istringstream iss(it->second);
        Vector2 result = defaultValue;
        iss >> result.x >> result.y;
        return result;
    }

    BehaviorParams::Color BehaviorParams::getColor(const std::string &name, const Color &defaultValue) const
    {
        auto it = parameters.find(name);
        if (it == parameters.end())
        {
            return defaultValue;
        }

        std::istringstream iss(it->second);
        Color result = defaultValue;
        iss >> result.r >> result.g >> result.b >> result.a;
        return result;
    }

} // namespace Assets


================================================================================
FILE: src\assets\Package.h
================================================================================

#pragma once

#include <string>
#include <vector>
#include <unordered_map>
#include <memory>
#include <variant>
#include "../core/AssetIds.h" // Include existing AssetId definition

namespace Assets
{

    // Forward declarations
    class Asset;
    class Scene;
    class Entity;

    // Asset types enumeration
    enum class AssetType
    {
        Material,
        Mesh,
        Texture,
        Shader,
        Audio,
        Scene
    };

    // Asset identification - use existing definition from AssetIds.h
    using SceneId = uint32_t;
    using EntityId = uint32_t;

    // Package dependency information
    struct PackageDependency
    {
        std::string packageId;
        std::string version;
        bool required = true;
    };

    // Package metadata
    struct PackageMetadata
    {
        std::string id;
        std::string name;
        std::string version;
        std::string description;
        std::string author;
        std::string packagePath; // Path to the package file
        std::vector<PackageDependency> dependencies;
    };

    // Asset definition data structures
    struct MaterialAssetData
    {
        std::string shaderReference;
        std::unordered_map<std::string, std::string> textureReferences;
        std::unordered_map<std::string, std::string> properties;
    };

    struct MeshAssetData
    {
        std::string sourcePath;
        bool optimize = true;
        bool generateTangents = false;
        int optimizationLevel = 1;
    };

    struct TextureAssetData
    {
        std::string sourcePath;
        bool generateMipmaps = true;
        std::string compressionFormat = "auto";
        int compressionQuality = 85;
    };

    struct ShaderAssetData
    {
        std::string vertexShaderPath;
        std::string fragmentShaderPath;
        std::string geometryShaderPath; // Optional
        std::vector<std::string> defines;
    };

    struct AudioAssetData
    {
        std::string sourcePath;
        bool compressed = true;
        int sampleRate = 44100;
        int bitDepth = 16;
    };

    // Asset definition
    struct AssetDefinition
    {
        std::string id;
        AssetType type;
        std::string path; // Path to the asset file
        std::variant<MaterialAssetData, MeshAssetData, TextureAssetData,
                     ShaderAssetData, AudioAssetData>
            data;
        uint64_t sourceHash = 0;
    };

    // Component definitions
    enum class ComponentType
    {
        Transform,
        Mesh,
        Material,
        Renderable,
        Physics,
        Audio,
        Behavior
    };

    struct MeshComponent
    {
        std::string assetRef;
    };

    struct MaterialComponent
    {
        std::string assetRef;
    };

    struct RenderableComponent
    {
        bool visible = true;
        bool castShadows = true;
        bool receiveShadows = true;
        float lodBias = 1.0f;
    };

    struct PhysicsComponent
    {
        float mass = 1.0f;
        float friction = 0.8f;
        float restitution = 0.2f;
        bool isStatic = false;
        struct
        {
            float x, y, z;
        } centerOfMass = {0, 0, 0};
    };

    struct AudioComponent
    {
        std::string assetRef;
        bool autoPlay = false;
        bool loop = false;
        float volume = 1.0f;
        float pitch = 1.0f;
    };

    // Transform data
    struct Transform
    {
        struct
        {
            float x, y, z;
        } position = {0, 0, 0};
        struct
        {
            float x, y, z, w;
        } rotation = {0, 0, 0, 1}; // Quaternion
        struct
        {
            float x, y, z;
        } scale = {1, 1, 1};
    };

    // Component definition
    struct Component
    {
        ComponentType type;
        std::variant<MeshComponent, MaterialComponent, RenderableComponent,
                     PhysicsComponent, AudioComponent>
            data;
    };

    // Behavior parameters
    class BehaviorParams
    {
    public:
        void setParameter(const std::string &name, const std::string &value)
        {
            parameters[name] = value;
        }

        template <typename T>
        T get(const std::string &name, const T &defaultValue = T{}) const;

        float getFloat(const std::string &name, float defaultValue = 0.0f) const;
        int getInt(const std::string &name, int defaultValue = 0) const;
        bool getBool(const std::string &name, bool defaultValue = false) const;
        std::string getString(const std::string &name, const std::string &defaultValue = "") const;

        // Vector types
        struct Vector3
        {
            float x, y, z;
        };
        struct Vector2
        {
            float x, y;
        };
        struct Color
        {
            float r, g, b, a;
        };

        Vector3 getVector3(const std::string &name, const Vector3 &defaultValue = {0, 0, 0}) const;
        Vector2 getVector2(const std::string &name, const Vector2 &defaultValue = {0, 0}) const;
        Color getColor(const std::string &name, const Color &defaultValue = {1, 1, 1, 1}) const;

    private:
        std::unordered_map<std::string, std::string> parameters;
    };

    // Entity definition
    struct EntityDefinition
    {
        std::string id;
        std::string name;
        Transform transform;
        std::vector<Component> components;
        std::string behaviorClass;
        BehaviorParams behaviorParams;
    };

    // Scene definition
    struct SceneDefinition
    {
        std::string id;
        std::string name;
        std::vector<EntityDefinition> entities;
    };

    // Main package structure
    struct Package
    {
        PackageMetadata metadata;
        std::vector<AssetDefinition> assets;
        std::vector<SceneDefinition> scenes;
        std::string sourcePath;

        // Utility methods
        const AssetDefinition *findAsset(const std::string &assetId) const
        {
            for (const auto &asset : assets)
            {
                if (asset.id == assetId)
                {
                    return &asset;
                }
            }
            return nullptr;
        }

        const SceneDefinition *findScene(const std::string &sceneId) const
        {
            for (const auto &scene : scenes)
            {
                if (scene.id == sceneId)
                {
                    return &scene;
                }
            }
            return nullptr;
        }
    };

    // Asset ID generation utilities
    class AssetIdGenerator
    {
    public:
        static AssetId generateAssetId(const std::string &packageId, const std::string &assetId);
        static SceneId generateSceneId(const std::string &packageId, const std::string &sceneId);
        static EntityId generateEntityId(const std::string &sceneId, const std::string &entityId);

    private:
        static uint64_t fnv1a_hash(const std::string &str);
    };

} // namespace Assets


================================================================================
FILE: src\assets\PackageJsonParser.cpp
================================================================================

#include "PackageJsonParser.h"
#include "platform/NlohmannJsonParser.h"
#include <fstream>
#include <iostream>

namespace Assets
{

    PackageJsonParser::PackageJsonParser()
        : jsonParser_(std::make_unique<NlohmannJsonParser>())
    {
    }

    PackageJsonParser::PackageJsonParser(std::unique_ptr<IJsonParserUnified> parser)
        : jsonParser_(std::move(parser))
    {
    }

    PackageLoadResult PackageJsonParser::loadPackage(const std::string &packagePath)
    {
        PackageLoadResult result;

        if (!jsonParser_->loadFile(packagePath))
        {
            result.errors = jsonParser_->getErrors();
            result.success = false;
            return result;
        }

        const auto &rootJson = jsonParser_->getRootJson();

        if (!validatePackageJson(rootJson))
        {
            result.errors = jsonParser_->getErrors();
            result.warnings = jsonParser_->getWarnings();
            result.success = false;
            return result;
        }

        // Parse package data
        bool success = true;
        success &= parsePackageMetadata(rootJson, result.package);
        success &= parseDependencies(rootJson, result.package);
        success &= parseAssets(rootJson, result.package);
        success &= parseScenes(rootJson, result.package);

        result.errors = jsonParser_->getErrors();
        result.warnings = jsonParser_->getWarnings();
        result.success = success && !jsonParser_->hasErrors();

        return result;
    }

    PackageLoadResult PackageJsonParser::loadPackageFromString(const std::string &jsonContent)
    {
        PackageLoadResult result;

        if (!jsonParser_->loadString(jsonContent))
        {
            result.errors = jsonParser_->getErrors();
            result.success = false;
            return result;
        }

        const auto &rootJson = jsonParser_->getRootJson();

        if (!validatePackageJson(rootJson))
        {
            result.errors = jsonParser_->getErrors();
            result.warnings = jsonParser_->getWarnings();
            result.success = false;
            return result;
        }

        // Parse package data
        bool success = true;
        success &= parsePackageMetadata(rootJson, result.package);
        success &= parseDependencies(rootJson, result.package);
        success &= parseAssets(rootJson, result.package);
        success &= parseScenes(rootJson, result.package);

        result.errors = jsonParser_->getErrors();
        result.warnings = jsonParser_->getWarnings();
        result.success = success && !jsonParser_->hasErrors();

        return result;
    }

    bool PackageJsonParser::validatePackageJson(const nlohmann::json &json)
    {
        // Basic validation - check required fields
        if (!json.is_object())
        {
            addError("Package JSON must be an object");
            return false;
        }

        if (!json.contains("metadata"))
        {
            addError("Package JSON missing required 'metadata' section");
            return false;
        }

        if (!json.contains("assets") && !json.contains("scenes"))
        {
            addWarning("Package contains no assets or scenes");
        }

        const auto &metadata = json["metadata"];
        if (!metadata.contains("id") || !metadata.contains("name") || !metadata.contains("version"))
        {
            addError("Package metadata missing required fields (id, name, version)");
            return false;
        }

        return true;
    }

    bool PackageJsonParser::parsePackageMetadata(const nlohmann::json &json, Package &package)
    {
        if (!json.contains("metadata"))
            return false;

        const auto &metadata = json["metadata"];

        package.metadata.id = metadata.value("id", "");
        package.metadata.name = metadata.value("name", "");
        package.metadata.version = metadata.value("version", "1.0.0");
        package.metadata.description = metadata.value("description", "");
        package.metadata.author = metadata.value("author", "");

        if (package.metadata.id.empty() || package.metadata.name.empty())
        {
            addError("Package ID and name cannot be empty");
            return false;
        }

        return true;
    }

    bool PackageJsonParser::parseDependencies(const nlohmann::json &json, Package &package)
    {
        if (!json.contains("dependencies"))
            return true; // Dependencies are optional

        const auto &deps = json["dependencies"];
        if (!deps.is_array())
        {
            addError("Dependencies must be an array");
            return false;
        }

        for (const auto &depJson : deps)
        {
            if (!depJson.is_object())
            {
                addWarning("Skipping invalid dependency entry");
                continue;
            }

            PackageDependency dep;
            dep.packageId = depJson.value("id", "");
            dep.version = depJson.value("version", "");
            dep.required = depJson.value("required", true);

            if (!dep.packageId.empty() && !dep.version.empty())
            {
                package.metadata.dependencies.push_back(dep);
            }
            else
            {
                addWarning("Skipping dependency with missing id or version");
            }
        }

        return true;
    }

    bool PackageJsonParser::parseAssets(const nlohmann::json &json, Package &package)
    {
        if (!json.contains("assets"))
            return true; // Assets are optional at package level

        const auto &assets = json["assets"];
        if (!assets.is_object())
        {
            addError("Assets section must be an object");
            return false;
        }

        // Parse different asset types
        if (assets.contains("textures") && assets["textures"].is_array())
        {
            for (const auto &textureJson : assets["textures"])
            {
                package.assets.push_back(parseAssetDefinition(textureJson, AssetType::Texture));
            }
        }

        if (assets.contains("materials") && assets["materials"].is_array())
        {
            for (const auto &materialJson : assets["materials"])
            {
                package.assets.push_back(parseAssetDefinition(materialJson, AssetType::Material));
            }
        }

        if (assets.contains("meshes") && assets["meshes"].is_array())
        {
            for (const auto &meshJson : assets["meshes"])
            {
                package.assets.push_back(parseAssetDefinition(meshJson, AssetType::Mesh));
            }
        }

        if (assets.contains("shaders") && assets["shaders"].is_array())
        {
            for (const auto &shaderJson : assets["shaders"])
            {
                package.assets.push_back(parseAssetDefinition(shaderJson, AssetType::Shader));
            }
        }

        if (assets.contains("audio") && assets["audio"].is_array())
        {
            for (const auto &audioJson : assets["audio"])
            {
                package.assets.push_back(parseAssetDefinition(audioJson, AssetType::Audio));
            }
        }

        return true;
    }

    bool PackageJsonParser::parseScenes(const nlohmann::json &json, Package &package)
    {
        if (!json.contains("scenes"))
            return true; // Scenes are optional

        const auto &scenes = json["scenes"];
        if (!scenes.is_array())
        {
            addError("Scenes section must be an array");
            return false;
        }

        for (const auto &sceneJson : scenes)
        {
            package.scenes.push_back(parseSceneDefinition(sceneJson));
        }

        return true;
    }

    AssetDefinition PackageJsonParser::parseAssetDefinition(const nlohmann::json &json, AssetType type)
    {
        AssetDefinition asset;
        asset.id = json.value("id", "");
        asset.path = json.value("path", "");
        asset.type = type;

        switch (type)
        {
        case AssetType::Texture:
            asset.data = parseTextureAssetData(json);
            break;
        case AssetType::Material:
            asset.data = parseMaterialAssetData(json);
            break;
        case AssetType::Mesh:
            asset.data = parseMeshAssetData(json);
            break;
        case AssetType::Shader:
            asset.data = parseShaderAssetData(json);
            break;
        case AssetType::Audio:
            asset.data = parseAudioAssetData(json);
            break;
        default:
            addWarning("Unknown asset type for asset: " + asset.id);
            break;
        }

        return asset;
    }

    TextureAssetData PackageJsonParser::parseTextureAssetData(const nlohmann::json &json)
    {
        TextureAssetData data;
        data.sourcePath = json.value("path", "");
        data.generateMipmaps = json.value("generateMipmaps", true);
        data.compressionFormat = json.value("compressionFormat", "auto");
        data.compressionQuality = json.value("compressionQuality", 85);
        return data;
    }

    MaterialAssetData PackageJsonParser::parseMaterialAssetData(const nlohmann::json &json)
    {
        MaterialAssetData data;
        data.shaderReference = json.value("shader", "");

        if (json.contains("textures") && json["textures"].is_object())
        {
            for (const auto &[key, value] : json["textures"].items())
            {
                if (value.is_string())
                    data.textureReferences[key] = value.get<std::string>();
            }
        }

        if (json.contains("properties") && json["properties"].is_object())
        {
            for (const auto &[key, value] : json["properties"].items())
            {
                if (value.is_string())
                    data.properties[key] = value.get<std::string>();
                else if (value.is_number())
                    data.properties[key] = std::to_string(value.get<float>());
                else if (value.is_boolean())
                    data.properties[key] = value.get<bool>() ? "true" : "false";
            }
        }

        return data;
    }

    MeshAssetData PackageJsonParser::parseMeshAssetData(const nlohmann::json &json)
    {
        MeshAssetData data;
        data.sourcePath = json.value("path", "");
        data.optimize = json.value("optimize", true);
        data.generateTangents = json.value("generateTangents", false);
        data.optimizationLevel = json.value("optimizationLevel", 1);
        return data;
    }

    ShaderAssetData PackageJsonParser::parseShaderAssetData(const nlohmann::json &json)
    {
        ShaderAssetData data;
        data.vertexShaderPath = json.value("vertex", "");
        data.fragmentShaderPath = json.value("fragment", "");
        data.geometryShaderPath = json.value("geometry", "");

        if (json.contains("defines") && json["defines"].is_array())
        {
            for (const auto &define : json["defines"])
            {
                if (define.is_string())
                    data.defines.push_back(define.get<std::string>());
            }
        }

        return data;
    }

    AudioAssetData PackageJsonParser::parseAudioAssetData(const nlohmann::json &json)
    {
        AudioAssetData data;
        data.sourcePath = json.value("path", "");
        data.compressed = json.value("compressed", true);
        data.sampleRate = json.value("sampleRate", 44100);
        data.bitDepth = json.value("bitDepth", 16);
        return data;
    }

    SceneDefinition PackageJsonParser::parseSceneDefinition(const nlohmann::json &json)
    {
        SceneDefinition scene;
        scene.id = json.value("id", "");
        scene.name = json.value("name", "");

        if (json.contains("entities") && json["entities"].is_array())
        {
            for (const auto &entityJson : json["entities"])
            {
                scene.entities.push_back(parseEntityDefinition(entityJson));
            }
        }

        return scene;
    }

    EntityDefinition PackageJsonParser::parseEntityDefinition(const nlohmann::json &json)
    {
        EntityDefinition entity;
        entity.id = json.value("id", "");
        entity.name = json.value("name", "");

        if (json.contains("transform"))
        {
            entity.transform = parseTransform(json["transform"]);
        }

        if (json.contains("components") && json["components"].is_object())
        {
            const auto &components = json["components"];

            // Parse different component types
            if (components.contains("mesh"))
            {
                entity.components.push_back(parseComponent(components["mesh"], ComponentType::Mesh));
            }
            if (components.contains("material"))
            {
                entity.components.push_back(parseComponent(components["material"], ComponentType::Material));
            }
            if (components.contains("renderable"))
            {
                entity.components.push_back(parseComponent(components["renderable"], ComponentType::Renderable));
            }
            if (components.contains("physics"))
            {
                entity.components.push_back(parseComponent(components["physics"], ComponentType::Physics));
            }
            if (components.contains("audio"))
            {
                entity.components.push_back(parseComponent(components["audio"], ComponentType::Audio));
            }
        }

        if (json.contains("behavior"))
        {
            const auto &behavior = json["behavior"];
            entity.behaviorClass = behavior.value("type", "");
            entity.behaviorParams = parseBehaviorParams(behavior);
        }

        return entity;
    }

    Component PackageJsonParser::parseComponent(const nlohmann::json &json, ComponentType type)
    {
        Component component;
        component.type = type;

        switch (type)
        {
        case ComponentType::Mesh:
        {
            MeshComponent meshComp;
            meshComp.assetRef = json.value("asset", "");
            component.data = meshComp;
            break;
        }
        case ComponentType::Material:
        {
            MaterialComponent materialComp;
            materialComp.assetRef = json.value("asset", "");
            component.data = materialComp;
            break;
        }
        case ComponentType::Renderable:
        {
            RenderableComponent renderComp;
            renderComp.visible = json.value("visible", true);
            renderComp.castShadows = json.value("castShadows", true);
            renderComp.receiveShadows = json.value("receiveShadows", true);
            renderComp.lodBias = json.value("lodBias", 1.0f);
            component.data = renderComp;
            break;
        }
        case ComponentType::Physics:
        {
            PhysicsComponent physicsComp;
            physicsComp.mass = json.value("mass", 1.0f);
            physicsComp.friction = json.value("friction", 0.8f);
            physicsComp.restitution = json.value("restitution", 0.2f);
            physicsComp.isStatic = json.value("isStatic", false);

            if (json.contains("centerOfMass") && json["centerOfMass"].is_array() && json["centerOfMass"].size() >= 3)
            {
                const auto &com = json["centerOfMass"];
                physicsComp.centerOfMass.x = com[0].get<float>();
                physicsComp.centerOfMass.y = com[1].get<float>();
                physicsComp.centerOfMass.z = com[2].get<float>();
            }

            component.data = physicsComp;
            break;
        }
        case ComponentType::Audio:
        {
            AudioComponent audioComp;
            audioComp.assetRef = json.value("asset", "");
            audioComp.autoPlay = json.value("autoPlay", false);
            audioComp.loop = json.value("loop", false);
            audioComp.volume = json.value("volume", 1.0f);
            audioComp.pitch = json.value("pitch", 1.0f);
            component.data = audioComp;
            break;
        }
        default:
            addWarning("Unknown component type");
            break;
        }

        return component;
    }

    Transform PackageJsonParser::parseTransform(const nlohmann::json &json)
    {
        Transform transform;

        if (json.contains("position") && json["position"].is_array() && json["position"].size() >= 3)
        {
            const auto &pos = json["position"];
            transform.position.x = pos[0].get<float>();
            transform.position.y = pos[1].get<float>();
            transform.position.z = pos[2].get<float>();
        }

        if (json.contains("rotation") && json["rotation"].is_array() && json["rotation"].size() >= 4)
        {
            const auto &rot = json["rotation"];
            transform.rotation.x = rot[0].get<float>();
            transform.rotation.y = rot[1].get<float>();
            transform.rotation.z = rot[2].get<float>();
            transform.rotation.w = rot[3].get<float>();
        }

        if (json.contains("scale") && json["scale"].is_array() && json["scale"].size() >= 3)
        {
            const auto &scale = json["scale"];
            transform.scale.x = scale[0].get<float>();
            transform.scale.y = scale[1].get<float>();
            transform.scale.z = scale[2].get<float>();
        }

        return transform;
    }

    BehaviorParams PackageJsonParser::parseBehaviorParams(const nlohmann::json &json)
    {
        BehaviorParams params;

        if (json.contains("parameters") && json["parameters"].is_object())
        {
            for (const auto &[key, value] : json["parameters"].items())
            {
                if (value.is_string())
                    params.setParameter(key, value.get<std::string>());
                else if (value.is_number_float())
                    params.setParameter(key, std::to_string(value.get<float>()));
                else if (value.is_number_integer())
                    params.setParameter(key, std::to_string(value.get<int>()));
                else if (value.is_boolean())
                    params.setParameter(key, value.get<bool>() ? "true" : "false");
            }
        }

        return params;
    }

    void PackageJsonParser::addError(const std::string &error)
    {
        jsonParser_->addError(error);
    }

    void PackageJsonParser::addWarning(const std::string &warning)
    {
        jsonParser_->addWarning(warning);
    }

} // namespace Assets


================================================================================
FILE: src\assets\PackageJsonParser.h
================================================================================

#pragma once

#include "Package.h"
#include "utils/IJsonParserUnified.h"
#include <string>
#include <memory>
#include <nlohmann/json.hpp>

namespace Assets
{

    // JSON parsing result
    struct PackageLoadResult
    {
        bool success = false;
        Package package;
        std::vector<std::string> errors;
        std::vector<std::string> warnings;
    };

    /**
     * @brief JSON-based package parser for loading package manifests.
     *
     * Replaces the XML-based PackageParser with JSON support.
     */
    class PackageJsonParser
    {
    private:
        std::unique_ptr<IJsonParserUnified> jsonParser_;

        // Helper methods for parsing different sections
        bool parsePackageMetadata(const nlohmann::json &json, Package &package);
        bool parseDependencies(const nlohmann::json &json, Package &package);
        bool parseAssets(const nlohmann::json &json, Package &package);
        bool parseScenes(const nlohmann::json &json, Package &package);

        // Asset parsing methods
        AssetDefinition parseAssetDefinition(const nlohmann::json &json, AssetType type);
        MaterialAssetData parseMaterialAssetData(const nlohmann::json &json);
        MeshAssetData parseMeshAssetData(const nlohmann::json &json);
        TextureAssetData parseTextureAssetData(const nlohmann::json &json);
        ShaderAssetData parseShaderAssetData(const nlohmann::json &json);
        AudioAssetData parseAudioAssetData(const nlohmann::json &json);

        // Scene parsing methods
        SceneDefinition parseSceneDefinition(const nlohmann::json &json);
        EntityDefinition parseEntityDefinition(const nlohmann::json &json);
        Component parseComponent(const nlohmann::json &json, ComponentType type);
        Transform parseTransform(const nlohmann::json &json);
        BehaviorParams parseBehaviorParams(const nlohmann::json &json);

        // Error handling
        void addError(const std::string &error);
        void addWarning(const std::string &warning);

    public:
        PackageJsonParser();
        explicit PackageJsonParser(std::unique_ptr<IJsonParserUnified> parser);
        ~PackageJsonParser() = default;

        /**
         * @brief Load package from JSON file
         * @param packagePath Path to package.json file
         * @return Package load result with success status and any errors
         */
        PackageLoadResult loadPackage(const std::string &packagePath);

        /**
         * @brief Load package from JSON string content
         * @param jsonContent JSON content as string
         * @return Package load result with success status and any errors
         */
        PackageLoadResult loadPackageFromString(const std::string &jsonContent);

        /**
         * @brief Validate JSON structure against package schema
         * @param json JSON object to validate
         * @return true if valid, false otherwise
         */
        bool validatePackageJson(const nlohmann::json &json);
    };

} // namespace Assets


================================================================================
FILE: src\assets\PackageManager.cpp
================================================================================

#include "PackageManager.h"
#include <filesystem>
#include <algorithm>
#include <queue>
#include <unordered_set>
#include <functional>

namespace Assets
{

    PackageManager::PackageManager() = default;
    PackageManager::~PackageManager() = default;

    PackageDiscoveryResult PackageManager::discoverPackages(const std::string &packagesDirectory)
    {
        PackageDiscoveryResult result;

        try
        {
            if (!std::filesystem::exists(packagesDirectory))
            {
                result.errors.push_back("Packages directory does not exist: " + packagesDirectory);
                return result;
            }

            result.packagePaths = findPackageFiles(packagesDirectory);
        }
        catch (const std::exception &e)
        {
            result.errors.push_back("Error discovering packages: " + std::string(e.what()));
        }

        return result;
    }

    PackageLoadResult PackageManager::loadPackage(const std::string &packagePath)
    {
        auto result = parser.loadPackage(packagePath);

        if (result.success)
        {
            // Check if package is already loaded
            if (isPackageLoaded(result.package.metadata.id))
            {
                result.errors.push_back("Package already loaded: " + result.package.metadata.id);
                result.success = false;
                return result;
            }

            // Validate dependencies
            if (!validateDependencies(result.package))
            {
                auto missing = getMissingDependencies(result.package);
                for (const auto &dep : missing)
                {
                    result.errors.push_back("Missing dependency: " + dep);
                }
                result.success = false;
                return result;
            }

            // Store the package
            auto packagePtr = std::make_unique<Package>(std::move(result.package));
            const auto &packageRef = *packagePtr;
            loadedPackages[packageRef.metadata.id] = std::move(packagePtr);

            // Notify callback
            if (packageLoadedCallback)
            {
                packageLoadedCallback(packageRef);
            }
        }

        return result;
    }

    bool PackageManager::unloadPackage(const std::string &packageId)
    {
        auto it = loadedPackages.find(packageId);
        if (it == loadedPackages.end())
        {
            return false;
        }

        // Check if other packages depend on this one
        for (const auto &[id, package] : loadedPackages)
        {
            if (id != packageId)
            {
                for (const auto &dep : package->metadata.dependencies)
                {
                    if (dep.packageId == packageId && dep.required)
                    {
                        // Cannot unload - other packages depend on it
                        return false;
                    }
                }
            }
        }

        // Notify callback before removal
        if (packageUnloadedCallback)
        {
            packageUnloadedCallback(packageId);
        }

        loadedPackages.erase(it);
        return true;
    }

    const Package *PackageManager::getPackage(const std::string &packageId) const
    {
        auto it = loadedPackages.find(packageId);
        return (it != loadedPackages.end()) ? it->second.get() : nullptr;
    }

    std::vector<const Package *> PackageManager::getAllPackages() const
    {
        std::vector<const Package *> packages;
        packages.reserve(loadedPackages.size());

        for (const auto &[id, package] : loadedPackages)
        {
            packages.push_back(package.get());
        }

        return packages;
    }

    bool PackageManager::isPackageLoaded(const std::string &packageId) const
    {
        return loadedPackages.find(packageId) != loadedPackages.end();
    }

    std::vector<std::string> PackageManager::getLoadOrder(const std::vector<std::string> &packageIds) const
    {
        std::unordered_map<std::string, std::vector<std::string>> dependencyGraph;
        buildDependencyGraph(packageIds, dependencyGraph);

        if (hasCyclicDependencies(packageIds))
        {
            return {}; // Return empty if cyclic dependencies detected
        }

        return topologicalSort(dependencyGraph);
    }

    bool PackageManager::validateDependencies(const Package &package) const
    {
        for (const auto &dep : package.metadata.dependencies)
        {
            if (dep.required && !isPackageLoaded(dep.packageId))
            {
                return false;
            }
        }
        return true;
    }

    std::vector<std::string> PackageManager::getMissingDependencies(const Package &package) const
    {
        std::vector<std::string> missing;

        for (const auto &dep : package.metadata.dependencies)
        {
            if (!isPackageLoaded(dep.packageId))
            {
                missing.push_back(dep.packageId);
            }
        }

        return missing;
    }

    AssetId PackageManager::resolveAssetReference(const std::string &packageId,
                                                  const std::string &assetRef) const
    {
        const auto *package = getPackage(packageId);
        if (!package)
        {
            return 0; // Invalid AssetId
        }

        // Check if asset exists in the package
        const auto *asset = package->findAsset(assetRef);
        if (asset)
        {
            return AssetIdGenerator::generateAssetId(packageId, assetRef);
        }

        // Asset not found in specified package
        return 0; // Invalid AssetId
    }

    const Package *PackageManager::findPackageContainingAsset(AssetId assetId) const
    {
        // This would need a reverse lookup table for efficiency in a real implementation
        for (const auto &[id, package] : loadedPackages)
        {
            for (const auto &asset : package->assets)
            {
                AssetId generatedId = AssetIdGenerator::generateAssetId(id, asset.id);
                if (generatedId == assetId)
                {
                    return package.get();
                }
            }
        }
        return nullptr;
    }

    std::vector<std::string> PackageManager::findPackageFiles(const std::string &directory) const
    {
        std::vector<std::string> packagePaths;

        try
        {
            for (const auto &entry : std::filesystem::recursive_directory_iterator(directory))
            {
                if (entry.is_regular_file() && entry.path().filename() == "package.json")
                {
                    packagePaths.push_back(entry.path().string());
                }
            }
        }
        catch (const std::exception &)
        {
            // Directory iteration failed - return empty list
        }

        return packagePaths;
    }

    bool PackageManager::hasCyclicDependencies(const std::vector<std::string> &packageIds) const
    {
        std::unordered_map<std::string, std::vector<std::string>> graph;
        buildDependencyGraph(packageIds, graph);

        std::unordered_set<std::string> visiting;
        std::unordered_set<std::string> visited;

        std::function<bool(const std::string &)> hasCycle = [&](const std::string &node) -> bool
        {
            if (visiting.count(node))
            {
                return true; // Back edge found - cycle detected
            }
            if (visited.count(node))
            {
                return false; // Already processed
            }

            visiting.insert(node);

            auto it = graph.find(node);
            if (it != graph.end())
            {
                for (const auto &neighbor : it->second)
                {
                    if (hasCycle(neighbor))
                    {
                        return true;
                    }
                }
            }

            visiting.erase(node);
            visited.insert(node);
            return false;
        };

        for (const auto &packageId : packageIds)
        {
            if (!visited.count(packageId))
            {
                if (hasCycle(packageId))
                {
                    return true;
                }
            }
        }

        return false;
    }

    void PackageManager::buildDependencyGraph(const std::vector<std::string> &packageIds,
                                              std::unordered_map<std::string, std::vector<std::string>> &graph) const
    {
        for (const auto &packageId : packageIds)
        {
            const auto *package = getPackage(packageId);
            if (package)
            {
                graph[packageId] = {};
                for (const auto &dep : package->metadata.dependencies)
                {
                    if (std::find(packageIds.begin(), packageIds.end(), dep.packageId) != packageIds.end())
                    {
                        graph[packageId].push_back(dep.packageId);
                    }
                }
            }
        }
    }

    std::vector<std::string> PackageManager::topologicalSort(const std::unordered_map<std::string,
                                                                                      std::vector<std::string>> &graph) const
    {
        std::vector<std::string> result;
        std::unordered_map<std::string, int> inDegree;

        // Calculate in-degrees
        for (const auto &[node, neighbors] : graph)
        {
            if (inDegree.find(node) == inDegree.end())
            {
                inDegree[node] = 0;
            }
            for (const auto &neighbor : neighbors)
            {
                inDegree[neighbor]++;
            }
        }

        // Find nodes with no incoming edges
        std::queue<std::string> queue;
        for (const auto &[node, degree] : inDegree)
        {
            if (degree == 0)
            {
                queue.push(node);
            }
        }

        // Process nodes
        while (!queue.empty())
        {
            std::string current = queue.front();
            queue.pop();
            result.push_back(current);

            auto it = graph.find(current);
            if (it != graph.end())
            {
                for (const auto &neighbor : it->second)
                {
                    inDegree[neighbor]--;
                    if (inDegree[neighbor] == 0)
                    {
                        queue.push(neighbor);
                    }
                }
            }
        }

        return result;
    }

} // namespace Assets


================================================================================
FILE: src\assets\PackageManager.h
================================================================================

#pragma once

#include "Package.h"
#include "PackageJsonParser.h"
#include <unordered_map>
#include <functional>
#include <memory>
#include <vector>
#include <string>

namespace Assets
{

    // Package discovery result
    struct PackageDiscoveryResult
    {
        std::vector<std::string> packagePaths;
        std::vector<std::string> errors;
    };

    // Package manager for loading and managing packages
    class PackageManager
    {
    public:
        PackageManager();
        ~PackageManager();

        // Package discovery and loading
        PackageDiscoveryResult discoverPackages(const std::string &packagesDirectory);
        PackageLoadResult loadPackage(const std::string &packagePath);
        bool unloadPackage(const std::string &packageId);

        // Package access
        const Package *getPackage(const std::string &packageId) const;
        std::vector<const Package *> getAllPackages() const;
        bool isPackageLoaded(const std::string &packageId) const;

        // Dependency management
        std::vector<std::string> getLoadOrder(const std::vector<std::string> &packageIds) const;
        bool validateDependencies(const Package &package) const;
        std::vector<std::string> getMissingDependencies(const Package &package) const;

        // Asset resolution
        AssetId resolveAssetReference(const std::string &packageId,
                                      const std::string &assetRef) const;
        const Package *findPackageContainingAsset(AssetId assetId) const;

        // Events
        using PackageLoadedCallback = std::function<void(const Package &)>;
        using PackageUnloadedCallback = std::function<void(const std::string &)>;

        void setPackageLoadedCallback(PackageLoadedCallback callback)
        {
            packageLoadedCallback = callback;
        }

        void setPackageUnloadedCallback(PackageUnloadedCallback callback)
        {
            packageUnloadedCallback = callback;
        }

    private:
        // Internal storage
        std::unordered_map<std::string, std::unique_ptr<Package>> loadedPackages;
        PackageJsonParser parser;

        // Callbacks
        PackageLoadedCallback packageLoadedCallback;
        PackageUnloadedCallback packageUnloadedCallback;

        // Utility methods
        std::vector<std::string> findPackageFiles(const std::string &directory) const;
        bool hasCyclicDependencies(const std::vector<std::string> &packageIds) const;
        void buildDependencyGraph(const std::vector<std::string> &packageIds,
                                  std::unordered_map<std::string, std::vector<std::string>> &graph) const;
        std::vector<std::string> topologicalSort(const std::unordered_map<std::string,
                                                                          std::vector<std::string>> &graph) const;
    };

} // namespace Assets


================================================================================
FILE: src\assets\ShaderAsset.cpp
================================================================================

#include "ShaderAsset.h"
#include <sstream>

std::string BasicShaderGenerator::generateCelVertexShader(int bands)
{
    std::ostringstream ss;

    ss << "#version 330 core\n";
    ss << getCommonAttributes();
    ss << getCommonUniforms();
    ss << "\n";
    ss << "out vec3 FragPos;\n";
    ss << "out vec3 Normal;\n";
    ss << "out vec2 TexCoord;\n";
    ss << "out vec3 WorldPos;\n";
    ss << "\n";
    ss << "void main()\n";
    ss << "{\n";
    ss << "    FragPos = vec3(uModel * vec4(aPos, 1.0));\n";
    ss << "    Normal = mat3(transpose(inverse(uModel))) * aNormal;\n";
    ss << "    TexCoord = aTexCoord;\n";
    ss << "    WorldPos = FragPos;\n";
    ss << "\n";
    ss << "    gl_Position = uProjection * uView * vec4(FragPos, 1.0);\n";
    ss << "}\n";

    return ss.str();
}

std::string BasicShaderGenerator::generateCelFragmentShader(int bands, bool outlineEnabled)
{
    std::ostringstream ss;

    ss << "#version 330 core\n";
    ss << "in vec3 FragPos;\n";
    ss << "in vec3 Normal;\n";
    ss << "in vec2 TexCoord;\n";
    ss << "in vec3 WorldPos;\n";
    ss << "\n";
    ss << "out vec4 FragColor;\n";
    ss << "\n";
    ss << "uniform sampler2D uAlbedoTexture;\n";
    ss << "uniform vec3 uLightDirection;\n";
    ss << "uniform vec3 uLightColor;\n";
    ss << "uniform float uAmbientStrength;\n";
    ss << "uniform int uCelBands;\n";
    ss << "uniform bool uOutlineEnabled;\n";
    ss << "\n";
    ss << "void main()\n";
    ss << "{\n";
    ss << "    // Sample albedo texture\n";
    ss << "    vec4 albedo = texture(uAlbedoTexture, TexCoord);\n";
    ss << "    \n";
    ss << "    // Calculate lighting\n";
    ss << "    vec3 norm = normalize(Normal);\n";
    ss << "    vec3 lightDir = normalize(-uLightDirection);\n";
    ss << "    \n";
    ss << "    // Cel-shading calculation\n";
    ss << "    float NdotL = max(dot(norm, lightDir), 0.0);\n";
    ss << "    \n";
    ss << "    // Quantize lighting into bands\n";
    ss << "    float celFactor = floor(NdotL * float(uCelBands)) / float(uCelBands);\n";
    ss << "    \n";
    ss << "    // Apply ambient and diffuse lighting\n";
    ss << "    vec3 ambient = uAmbientStrength * uLightColor;\n";
    ss << "    vec3 diffuse = celFactor * uLightColor;\n";
    ss << "    \n";
    ss << "    vec3 result = (ambient + diffuse) * albedo.rgb;\n";
    ss << "    \n";
    ss << "    FragColor = vec4(result, albedo.a);\n";
    ss << "}\n";

    return ss.str();
}

std::string BasicShaderGenerator::generateUnlitVertexShader()
{
    std::ostringstream ss;

    ss << "#version 330 core\n";
    ss << getCommonAttributes();
    ss << getCommonUniforms();
    ss << "\n";
    ss << "out vec2 TexCoord;\n";
    ss << "\n";
    ss << "void main()\n";
    ss << "{\n";
    ss << "    TexCoord = aTexCoord;\n";
    ss << "    gl_Position = uProjection * uView * uModel * vec4(aPos, 1.0);\n";
    ss << "}\n";

    return ss.str();
}

std::string BasicShaderGenerator::generateUnlitFragmentShader()
{
    std::ostringstream ss;

    ss << "#version 330 core\n";
    ss << "in vec2 TexCoord;\n";
    ss << "\n";
    ss << "out vec4 FragColor;\n";
    ss << "\n";
    ss << "uniform sampler2D uAlbedoTexture;\n";
    ss << "uniform vec4 uColor;\n";
    ss << "\n";
    ss << "void main()\n";
    ss << "{\n";
    ss << "    vec4 texColor = texture(uAlbedoTexture, TexCoord);\n";
    ss << "    FragColor = texColor * uColor;\n";
    ss << "}\n";

    return ss.str();
}

std::unique_ptr<ShaderAsset> BasicShaderGenerator::createCelBandShader(const std::string &id,
                                                                       int bands,
                                                                       bool outlineEnabled)
{
    auto shader = std::make_unique<ShaderAsset>();

    shader->id = id;
    shader->path = "procedural://" + id; // Mark as procedurally generated
    shader->vertexSource = generateCelVertexShader(bands);
    shader->fragmentSource = generateCelFragmentShader(bands, outlineEnabled);

    // Set parameters
    shader->parameters["bands"] = std::to_string(bands);
    shader->parameters["outline_enabled"] = outlineEnabled ? "true" : "false";
    shader->parameters["specular_mode"] = "off";

    // Note: Actual compilation would happen in a rendering system
    shader->isCompiled = false;
    shader->programId = 0;

    return shader;
}

std::string BasicShaderGenerator::getCommonUniforms()
{
    std::ostringstream ss;
    ss << "uniform mat4 uModel;\n";
    ss << "uniform mat4 uView;\n";
    ss << "uniform mat4 uProjection;\n";
    return ss.str();
}

std::string BasicShaderGenerator::getCommonAttributes()
{
    std::ostringstream ss;
    ss << "layout (location = 0) in vec3 aPos;\n";
    ss << "layout (location = 1) in vec3 aNormal;\n";
    ss << "layout (location = 2) in vec2 aTexCoord;\n";
    return ss.str();
}




================================================================================
FILE: src\assets\ShaderAsset.h
================================================================================

#pragma once
#include <string>
#include <map>
#include <memory>

/**
 * @file ShaderAsset.h
 * @brief Asset structure for shader resources.
 *
 * Defines the basic shader asset structure for loading and managing
 * shaders in the asset system. Supports vertex and fragment shader
 * sources with parameter definitions.
 */

/**
 * @struct ShaderAsset
 * @brief Asset data structure for shader resources.
 *
 * Contains shader source code, compilation state, and parameter definitions
 * for use in the rendering pipeline.
 */
struct ShaderAsset
{
    /** @brief Shader asset identifier */
    std::string id;

    /** @brief Path to the shader file */
    std::string path;

    /** @brief Vertex shader source code */
    std::string vertexSource;

    /** @brief Fragment shader source code */
    std::string fragmentSource;

    /** @brief Shader parameters and their default values */
    std::map<std::string, std::string> parameters;

    /** @brief Whether the shader has been compiled successfully */
    bool isCompiled;

    /** @brief Compilation error messages (if any) */
    std::string compilationErrors;

    /** @brief OpenGL shader program ID (if compiled) */
    unsigned int programId;

    /**
     * @brief Construct a new ShaderAsset.
     */
    ShaderAsset()
        : isCompiled(false), programId(0)
    {
    }

    /**
     * @brief Get parameter value with fallback.
     *
     * @param paramName Name of the parameter
     * @param defaultValue Default value if parameter not found
     * @return Parameter value or default
     */
    std::string getParameter(const std::string &paramName, const std::string &defaultValue = "") const
    {
        auto it = parameters.find(paramName);
        return (it != parameters.end()) ? it->second : defaultValue;
    }

    /**
     * @brief Check if parameter exists.
     *
     * @param paramName Name of the parameter to check
     * @return True if parameter exists
     */
    bool hasParameter(const std::string &paramName) const
    {
        return parameters.find(paramName) != parameters.end();
    }
};

/**
 * @class BasicShaderGenerator
 * @brief Generates basic shader source code for common materials.
 *
 * Provides factory methods for creating simple shaders including
 * the cel-shading shader used in the voxel busy indicator scene.
 */
class BasicShaderGenerator
{
public:
    /**
     * @brief Generate a cel-shading vertex shader.
     *
     * @param bands Number of cel-shading bands
     * @return Vertex shader source code
     */
    static std::string generateCelVertexShader(int bands = 4);

    /**
     * @brief Generate a cel-shading fragment shader.
     *
     * @param bands Number of cel-shading bands
     * @param outlineEnabled Whether outline rendering is enabled
     * @return Fragment shader source code
     */
    static std::string generateCelFragmentShader(int bands = 4, bool outlineEnabled = false);

    /**
     * @brief Generate a simple unlit vertex shader.
     *
     * @return Basic vertex shader source code
     */
    static std::string generateUnlitVertexShader();

    /**
     * @brief Generate a simple unlit fragment shader.
     *
     * @return Basic fragment shader source code
     */
    static std::string generateUnlitFragmentShader();

    /**
     * @brief Create a complete cel-shading shader asset.
     *
     * @param id Asset identifier
     * @param bands Number of cel-shading bands
     * @param outlineEnabled Whether outlines are enabled
     * @return Complete shader asset
     */
    static std::unique_ptr<ShaderAsset> createCelBandShader(const std::string &id,
                                                            int bands = 4,
                                                            bool outlineEnabled = false);

private:
    static std::string getCommonUniforms();
    static std::string getCommonAttributes();
};



================================================================================
FILE: src\behaviors\CubeSpinBehavior.cpp
================================================================================

#include "CubeSpinBehavior.h"
#include "../components/Transform.h"
#include "../math/Math.h"

namespace Behaviors
{

    void CubeSpinBehavior::initialize(Core::Entity &entity, const Assets::BehaviorParams &params)
    {
        // Get rotation axis from parameters (default: Y-axis)
        auto axisX = getParameter<float>("axisX", 0.0f);
        auto axisY = getParameter<float>("axisY", 1.0f);
        auto axisZ = getParameter<float>("axisZ", 0.0f);
        rotationAxis = Math::Vec3(axisX, axisY, axisZ);

        // Get rotation speed from parameters (default: 90 degrees per second)
        rotationSpeed = getParameter<float>("speed", 90.0f);

        // Check if entity has a Transform component
        hasTransform = entity.hasComponent<Components::Transform>();

        if (!hasTransform)
        {
            // Log warning: entity needs Transform component for CubeSpinBehavior
        }

        currentRotation = 0.0f;
    }

    void CubeSpinBehavior::update(float deltaTime)
    {
        if (!hasTransform)
        {
            return;
        }

        auto &transform = getEntity().getComponent<Components::Transform>();

        // Update rotation
        currentRotation += rotationSpeed * deltaTime;

        // Keep rotation in [0, 360) range
        if (currentRotation >= 360.0f)
        {
            currentRotation -= 360.0f;
        }

        // Apply rotation around the specified axis
        float radians = Math::degreesToRadians(currentRotation);

        // Create rotation quaternion around the specified axis
        Math::Quaternion rotation = Math::Quaternion::fromAxisAngle(rotationAxis, radians);

        // Apply rotation to transform
        transform.rotation = rotation;
        transform.markDirty();
    }

    void CubeSpinBehavior::cleanup()
    {
        // No special cleanup needed
    }

} // namespace Behaviors

// Register the behavior with the system
REGISTER_BEHAVIOR(Behaviors::CubeSpinBehavior, "CubeSpinBehavior")


================================================================================
FILE: src\behaviors\CubeSpinBehavior.h
================================================================================

#pragma once
#include "../components/EntityBehavior.h"
#include "../math/Vec3.h"

namespace Behaviors
{

    /**
     * Simple behavior that spins an entity around a specified axis.
     * Used to demonstrate the red cube spinning behavior from the package system.
     */
    class CubeSpinBehavior : public Components::EntityBehavior
    {
    public:
        void initialize(Core::Entity &entity, const Assets::BehaviorParams &params) override;
        void update(float deltaTime) override;
        void cleanup() override;

    private:
        Math::Vec3 rotationAxis = {0.0f, 1.0f, 0.0f}; // Default: Y-axis
        float rotationSpeed = 90.0f;                  // degrees per second
        float currentRotation = 0.0f;

        bool hasTransform = false;
    };

} // namespace Behaviors


================================================================================
FILE: src\behaviors\DebugOverlayBehavior.cpp
================================================================================

#include "DebugOverlayBehavior.h"
#include "../debug.h"
#include "../core/EventBus.h"
#include "../core/World.h"
#include <iostream>
#include <mmsystem.h>

// Static members
DebugOverlayBehavior *DebugOverlayBehavior::instance = nullptr;
bool DebugOverlayBehavior::keyHandlerRegistered = false;

void DebugOverlayBehavior::initialize(Entity &entity, const Assets::BehaviorParams &params)
{
    // Store instance for static key handling
    instance = this;

    // Get parameters from package.xml
    toggleKey = params.getString("toggleKey", "F9");
    fontAsset = params.getString("fontAsset", "DebugFont");
    soundAsset = params.getString("soundAsset", "DebugToggleSound");
    backgroundAsset = params.getString("backgroundAsset", "DebugPanelBackground");

    // Load debug font
    loadDebugFont();

    DEBUG_LOG("✅ Debug overlay initialized (Press " + toggleKey + " to toggle)");
}

void DebugOverlayBehavior::update(float deltaTime)
{
    if (!debugModeEnabled)
        return;

    // Only update the scene info periodically to avoid performance impact
    lastInfoUpdateTime += deltaTime;
    if (lastInfoUpdateTime >= INFO_UPDATE_INTERVAL)
    {
        gatherSceneInfo();
        lastInfoUpdateTime = 0.0f;
    }
}

void DebugOverlayBehavior::render()
{
    if (!debugModeEnabled)
        return;

    // Save GL state
    glMatrixMode(GL_PROJECTION);
    glPushMatrix();
    glLoadIdentity();

    // Get window dimensions
    RECT rect;
    HDC hdc = wglGetCurrentDC();
    GetClientRect(WindowFromDC(hdc), &rect);
    glOrtho(0, rect.right, rect.bottom, 0, -1, 1);

    glMatrixMode(GL_MODELVIEW);
    glPushMatrix();
    glLoadIdentity();

    // Render debug info
    renderDebugInfo();

    // Restore GL state
    glMatrixMode(GL_PROJECTION);
    glPopMatrix();
    glMatrixMode(GL_MODELVIEW);
    glPopMatrix();
}

void DebugOverlayBehavior::cleanup()
{
    cleanupDebugFont();
    instance = nullptr;
}

void DebugOverlayBehavior::toggleDebugMode()
{
    debugModeEnabled = !debugModeEnabled;

    // Play sound effect
    playToggleSound();

    if (debugModeEnabled)
    {
        DEBUG_LOG("🔍 Debug mode enabled");
    }
    else
    {
        DEBUG_LOG("🔍 Debug mode disabled");
    }

    if (debugModeEnabled)
    {
        gatherSceneInfo();
    }
}

void DebugOverlayBehavior::gatherSceneInfo()
{
    sceneEntities.clear();

    // For now, add static info about the core package scene
    EntityDebugInfo cubeInfo;
    cubeInfo.name = "Red Test Cube";
    cubeInfo.type = "3D Object";
    cubeInfo.properties["Position"] = "(0, 0, 0)";
    cubeInfo.properties["Scale"] = "(1, 1, 1)";
    cubeInfo.properties["Material"] = "RedCubeMaterial";
    cubeInfo.properties["Mesh"] = "CubeMesh";
    cubeInfo.properties["Behavior"] = "SpinBehavior";
    sceneEntities.push_back(cubeInfo);

    EntityDebugInfo debugInfo;
    debugInfo.name = "Debug Overlay";
    debugInfo.type = "System";
    debugInfo.properties["Position"] = "(0, 0, -1)";
    debugInfo.properties["Behavior"] = "DebugOverlayBehavior";
    debugInfo.properties["Toggle Key"] = toggleKey;
    sceneEntities.push_back(debugInfo);
}

void DebugOverlayBehavior::renderDebugInfo()
{
    // Disable depth testing for overlay
    glDisable(GL_DEPTH_TEST);

    // Semi-transparent background for debug panel
    glEnable(GL_BLEND);
    glBlendFunc(GL_SRC_ALPHA, GL_ONE_MINUS_SRC_ALPHA);
    glColor4f(0.0f, 0.0f, 0.0f, 0.7f);
    glBegin(GL_QUADS);
    glVertex2f(10, 10);
    glVertex2f(400, 10);
    glVertex2f(400, 500);
    glVertex2f(10, 500);
    glEnd();

    // Set text color to yellow for visibility
    glColor3f(1.0f, 1.0f, 0.0f);

    // Render title
    renderDebugText(20, 30, "=== DEBUG MODE (F9 to toggle) ===");

    int y = 70;
    renderDebugText(20, y, "CORE PACKAGE SYSTEM:");
    y += 20;
    renderDebugText(30, y, "• Active Package: core");
    y += 15;
    renderDebugText(30, y, "• Scene: DefaultScene");
    y += 15;
    renderDebugText(30, y, "• Assets loaded from package definitions");
    y += 25;

    renderDebugText(20, y, "SCENE OBJECTS:");
    y += 20;

    for (const auto &entity : sceneEntities)
    {
        renderDebugText(20, y, "• " + entity.name + " (" + entity.type + ")");
        y += 20;

        for (const auto &[key, value] : entity.properties)
        {
            renderDebugText(30, y, "- " + key + ": " + value);
            y += 15;
        }
        y += 5;
    }

    // Render system info
    y += 10;
    renderDebugText(20, y, "DEFAULT ASSETS:");
    y += 20;
    renderDebugText(30, y, "- Font: assets/default/default.ttf");
    y += 15;
    renderDebugText(30, y, "- Audio: assets/default/default.wav");
    y += 15;
    renderDebugText(30, y, "- Texture: assets/default/default.png");

    // Render controls info
    y += 25;
    renderDebugText(20, y, "CONTROLS:");
    y += 20;
    renderDebugText(30, y, toggleKey + " - Toggle debug");
    y += 15;
    renderDebugText(30, y, "ESC - Exit");

    // Restore states
    glDisable(GL_BLEND);
    glEnable(GL_DEPTH_TEST);
}

bool DebugOverlayBehavior::loadDebugFont()
{
    HDC hdc = wglGetCurrentDC();
    if (!hdc)
        return false;

    // Create font
    debugFont = CreateFont(
        14,                          // Height
        0,                           // Width
        0,                           // Escapement
        0,                           // Orientation
        FW_NORMAL,                   // Weight
        FALSE,                       // Italic
        FALSE,                       // Underline
        FALSE,                       // StrikeOut
        ANSI_CHARSET,                // CharSet
        OUT_TT_PRECIS,               // OutputPrecision
        CLIP_DEFAULT_PRECIS,         // ClipPrecision
        ANTIALIASED_QUALITY,         // Quality
        FF_DONTCARE | DEFAULT_PITCH, // PitchAndFamily
        "Arial"                      // Facename
    );

    if (!debugFont)
    {
        DEBUG_LOG("⚠️  Failed to create debug font, using system font");
        return false;
    }

    // Create display lists for font rendering
    fontDisplayLists = glGenLists(256);
    if (!fontDisplayLists)
    {
        DEBUG_LOG("⚠️  Failed to create font display lists");
        return false;
    }

    // Select font into device context
    HFONT oldFont = (HFONT)SelectObject(hdc, debugFont);

    // Build display lists for ASCII characters
    wglUseFontBitmaps(hdc, 0, 256, fontDisplayLists);

    // Restore previous font
    SelectObject(hdc, oldFont);

    DEBUG_LOG("✅ Debug font loaded successfully");
    return true;
}

void DebugOverlayBehavior::renderDebugText(float x, float y, const std::string &text)
{
    if (!fontDisplayLists)
        return;

    // Position text
    glRasterPos2f(x, y);

    // Render each character using display lists
    glPushAttrib(GL_LIST_BIT);
    glListBase(fontDisplayLists);
    glCallLists(text.length(), GL_UNSIGNED_BYTE, text.c_str());
    glPopAttrib();
}

void DebugOverlayBehavior::cleanupDebugFont()
{
    if (fontDisplayLists)
    {
        glDeleteLists(fontDisplayLists, 256);
        fontDisplayLists = 0;
    }

    if (debugFont)
    {
        DeleteObject(debugFont);
        debugFont = NULL;
    }
}

void DebugOverlayBehavior::playToggleSound()
{
    // Play default audio file asynchronously
    std::string audioPath = "assets\\default\\default.wav";

    // Use Windows PlaySound API to play the default audio
    if (!PlaySoundA(audioPath.c_str(), NULL, SND_FILENAME | SND_ASYNC))
    {
        // If file doesn't exist, play system sound
        PlaySoundA("SystemDefault", NULL, SND_ALIAS | SND_ASYNC);
        DEBUG_LOG("🔊 Debug sound (system default)");
    }
    else
    {
        DEBUG_LOG("🔊 Debug sound (default.wav)");
    }
}

// Static key handler
void DebugOverlayBehavior::handleKeyPress(int key)
{
    if (instance && key == VK_F9)
    {
        instance->toggleDebugMode();
    }
}


================================================================================
FILE: src\behaviors\DebugOverlayBehavior.h
================================================================================

#pragma once

#include "../components/EntityBehavior.h"
#include <string>
#include <unordered_map>
#include <vector>
#include <windows.h>
#include <GL/gl.h>

class DebugOverlayBehavior : public Components::EntityBehavior
{
public:
    void initialize(Entity &entity, const Assets::BehaviorParams &params) override;
    void update(float deltaTime) override;
    void cleanup() override;

    // Custom render method (not from base class)
    void render();

private:
    // Debug state
    bool debugModeEnabled = false;
    std::string toggleKey = "F9";

    // Asset references
    std::string fontAsset;
    std::string soundAsset;
    std::string backgroundAsset;

    // Font rendering
    HFONT debugFont = NULL;
    GLuint fontDisplayLists = 0;

    // Cached scene data for display
    struct EntityDebugInfo
    {
        std::string name;
        std::string type;
        std::unordered_map<std::string, std::string> properties;
    };
    std::vector<EntityDebugInfo> sceneEntities;

    // Last update time to prevent gathering info every frame
    float lastInfoUpdateTime = 0.0f;
    const float INFO_UPDATE_INTERVAL = 0.5f; // Update debug info twice per second

    // Methods
    void toggleDebugMode();
    void gatherSceneInfo();
    void renderDebugInfo();
    bool loadDebugFont();
    void renderDebugText(float x, float y, const std::string &text);
    void cleanupDebugFont();
    void playToggleSound();

    // Static key handling
    static DebugOverlayBehavior *instance;
    static bool keyHandlerRegistered;

public:
    static void handleKeyPress(int key);
};


================================================================================
FILE: src\behaviors\MovementBehavior.cpp
================================================================================

#include "MovementBehavior.h"
#include "../components/Transform.h"
#include "../math/Math.h"
#include <sstream>

namespace Behaviors
{

    void MovementBehavior::initialize(Core::Entity &entity, const Assets::BehaviorParams &params)
    {
        // Parse movement type
        auto typeStr = getParameter<std::string>("type", "linear");
        movementType = parseMovementType(typeStr);

        // Get common parameters
        speed = getParameter<float>("speed", 1.0f);

        // Check if entity has Transform component
        hasTransform = entity.hasComponent<Components::Transform>();
        if (hasTransform)
        {
            auto &transform = entity.getComponent<Components::Transform>();
            startPosition = transform.position;
        }

        // Initialize based on movement type
        switch (movementType)
        {
        case MovementType::Linear:
            direction.x = getParameter<float>("directionX", 1.0f);
            direction.y = getParameter<float>("directionY", 0.0f);
            direction.z = getParameter<float>("directionZ", 0.0f);
            direction = Math::normalize(direction);
            break;

        case MovementType::Circular:
            center.x = getParameter<float>("centerX", startPosition.x);
            center.y = getParameter<float>("centerY", startPosition.y);
            center.z = getParameter<float>("centerZ", startPosition.z);
            radius = getParameter<float>("radius", 5.0f);
            angularSpeed = getParameter<float>("angularSpeed", 45.0f);
            currentAngle = 0.0f;
            break;

        case MovementType::Waypoints:
            // Parse waypoints from comma-separated values
            auto waypointsStr = getParameter<std::string>("waypoints", "");
            if (!waypointsStr.empty())
            {
                std::istringstream iss(waypointsStr);
                std::string token;
                Math::Vec3 waypoint;
                int componentIndex = 0;

                while (std::getline(iss, token, ','))
                {
                    float value = std::stof(token);
                    switch (componentIndex % 3)
                    {
                    case 0:
                        waypoint.x = value;
                        break;
                    case 1:
                        waypoint.y = value;
                        break;
                    case 2:
                        waypoint.z = value;
                        waypoints.push_back(waypoint);
                        break;
                    }
                    componentIndex++;
                }
            }

            loop = getParameter<bool>("loop", true);
            currentWaypoint = 0;
            break;
        }
    }

    void MovementBehavior::update(float deltaTime)
    {
        if (!hasTransform)
        {
            return;
        }

        switch (movementType)
        {
        case MovementType::Linear:
            updateLinearMovement(deltaTime);
            break;
        case MovementType::Circular:
            updateCircularMovement(deltaTime);
            break;
        case MovementType::Waypoints:
            updateWaypointMovement(deltaTime);
            break;
        }
    }

    void MovementBehavior::cleanup()
    {
        // No special cleanup needed
    }

    void MovementBehavior::updateLinearMovement(float deltaTime)
    {
        auto &transform = getEntity().getComponent<Components::Transform>();

        Math::Vec3 movement = direction * speed * deltaTime;
        transform.position = transform.position + movement;
        transform.markDirty();
    }

    void MovementBehavior::updateCircularMovement(float deltaTime)
    {
        auto &transform = getEntity().getComponent<Components::Transform>();

        currentAngle += angularSpeed * deltaTime;
        if (currentAngle >= 360.0f)
        {
            currentAngle -= 360.0f;
        }

        float radians = Math::degreesToRadians(currentAngle);
        transform.position.x = center.x + radius * std::cos(radians);
        transform.position.z = center.z + radius * std::sin(radians);
        transform.position.y = center.y; // Keep Y constant

        transform.markDirty();
    }

    void MovementBehavior::updateWaypointMovement(float deltaTime)
    {
        if (waypoints.empty())
        {
            return;
        }

        auto &transform = getEntity().getComponent<Components::Transform>();
        Math::Vec3 currentPos = transform.position;
        Math::Vec3 targetPos = waypoints[currentWaypoint];

        // Calculate direction to target
        Math::Vec3 direction = targetPos - currentPos;
        float distance = Math::length(direction);

        // Check if we've reached the waypoint
        if (distance < 0.1f)
        { // Within 0.1 units
            currentWaypoint++;

            if (currentWaypoint >= waypoints.size())
            {
                if (loop)
                {
                    currentWaypoint = 0;
                }
                else
                {
                    // Stop at the last waypoint
                    currentWaypoint = waypoints.size() - 1;
                    return;
                }
            }

            // Recalculate for new target
            targetPos = waypoints[currentWaypoint];
            direction = targetPos - currentPos;
            distance = Math::length(direction);
        }

        if (distance > 0.0f)
        {
            direction = direction / distance; // Normalize
            Math::Vec3 movement = direction * speed * deltaTime;

            // Don't overshoot the target
            if (Math::length(movement) > distance)
            {
                movement = direction * distance;
            }

            transform.position = currentPos + movement;
            transform.markDirty();
        }
    }

    MovementBehavior::MovementType MovementBehavior::parseMovementType(const std::string &typeStr) const
    {
        if (typeStr == "circular")
        {
            return MovementType::Circular;
        }
        else if (typeStr == "waypoints")
        {
            return MovementType::Waypoints;
        }
        else
        {
            return MovementType::Linear; // Default
        }
    }

} // namespace Behaviors

// Register the behavior with the system
REGISTER_BEHAVIOR(Behaviors::MovementBehavior, "MovementBehavior")


================================================================================
FILE: src\behaviors\MovementBehavior.h
================================================================================

#pragma once
#include "../components/EntityBehavior.h"
#include "../math/Vec3.h"

namespace Behaviors
{

    /**
     * Behavior for moving entities along specified paths or directions.
     * Supports linear movement, circular movement, and waypoint-based paths.
     */
    class MovementBehavior : public Components::EntityBehavior
    {
    public:
        enum class MovementType
        {
            Linear,   // Move in a straight line
            Circular, // Move in a circle
            Waypoints // Move between predefined waypoints
        };

        void initialize(Core::Entity &entity, const Assets::BehaviorParams &params) override;
        void update(float deltaTime) override;
        void cleanup() override;

    private:
        MovementType movementType = MovementType::Linear;
        Math::Vec3 velocity = {0.0f, 0.0f, 0.0f};
        float speed = 1.0f;

        // Linear movement
        Math::Vec3 direction = {1.0f, 0.0f, 0.0f};

        // Circular movement
        Math::Vec3 center = {0.0f, 0.0f, 0.0f};
        float radius = 5.0f;
        float angularSpeed = 45.0f; // degrees per second
        float currentAngle = 0.0f;

        // Waypoint movement
        std::vector<Math::Vec3> waypoints;
        size_t currentWaypoint = 0;
        bool loop = true;

        bool hasTransform = false;
        Math::Vec3 startPosition = {0.0f, 0.0f, 0.0f};

        void updateLinearMovement(float deltaTime);
        void updateCircularMovement(float deltaTime);
        void updateWaypointMovement(float deltaTime);
        MovementType parseMovementType(const std::string &typeStr) const;
    };

} // namespace Behaviors


================================================================================
FILE: src\behaviors\SpinBehavior.cpp
================================================================================

#include "SpinBehavior.h"
#include "../core/Entity.h"
#include "../components/TransformC.h"
#include "../core/Vector3D.h"
#include "../core/Quaternion.h"
#include "../assets/Package.h"
#include <cmath>
#include <iostream>

namespace Behaviors
{
    SpinBehavior::SpinBehavior()
        : rotationSpeed_(30.0f)  // Default 30 degrees per second
        , rotationAxis_(0.0f, 1.0f, 0.0f)  // Default Y-axis
        , currentRotation_(0.0f)
        , entity_(nullptr)
    {
    }

    void SpinBehavior::initialize(Entity& entity, const Assets::BehaviorParams& params)
    {
        entity_ = &entity;

        // Parse parameters from XML
        rotationSpeed_ = params.getFloat("rotationSpeed", 30.0f);
        
        // Parse axis parameter
        std::string axisStr = params.getString("axis", "0.0,1.0,0.0");
        
        // Simple parsing for "x,y,z" format
        size_t pos1 = axisStr.find(',');
        size_t pos2 = axisStr.find(',', pos1 + 1);
        
        if (pos1 != std::string::npos && pos2 != std::string::npos)
        {
            try 
            {
                rotationAxis_.x = std::stof(axisStr.substr(0, pos1));
                rotationAxis_.y = std::stof(axisStr.substr(pos1 + 1, pos2 - pos1 - 1));
                rotationAxis_.z = std::stof(axisStr.substr(pos2 + 1));
                
                // Normalize the axis
                float length = std::sqrt(rotationAxis_.x * rotationAxis_.x + 
                               rotationAxis_.y * rotationAxis_.y + 
                               rotationAxis_.z * rotationAxis_.z);
                if (length > 0.0f)
                {
                    rotationAxis_.x /= length;
                    rotationAxis_.y /= length;
                    rotationAxis_.z /= length;
                }
            }
            catch (const std::exception&) 
            {
                std::cerr << "Warning: Invalid axis parameter, using default Y-axis" << std::endl;
                rotationAxis_ = Vector3D{0.0f, 1.0f, 0.0f};
            }
        }

        std::cout << "✅ SpinBehavior initialized:" << std::endl;
        std::cout << "   - Rotation speed: " << rotationSpeed_ << " degrees/second" << std::endl;
        std::cout << "   - Rotation axis: (" << rotationAxis_.x << ", " << rotationAxis_.y << ", " << rotationAxis_.z << ")" << std::endl;
    }

    void SpinBehavior::update(float deltaTime)
    {
        if (!entity_)
            return;

        // Update rotation
        currentRotation_ += rotationSpeed_ * deltaTime;
        
        // Keep rotation in [0, 360) range
        while (currentRotation_ >= 360.0f)
            currentRotation_ -= 360.0f;
        while (currentRotation_ < 0.0f)
            currentRotation_ += 360.0f;

        // Convert to radians
        float radians = currentRotation_ * (3.14159f / 180.0f);

        // Create rotation quaternion
        float halfAngle = radians * 0.5f;
        float sinHalf = std::sin(halfAngle);
        float cosHalf = std::cos(halfAngle);

        Quaternion rotation;
        rotation.x = rotationAxis_.x * sinHalf;
        rotation.y = rotationAxis_.y * sinHalf;
        rotation.z = rotationAxis_.z * sinHalf;
        rotation.w = cosHalf;

        // Apply rotation to entity (assuming it has TransformC component)
        // For now, just log the rotation for demonstration
        static int logCounter = 0;
        if (++logCounter % 60 == 0)  // Log every 60 updates (~1 second at 60fps)
        {
            std::cout << "🔄 Red cube rotation: " << currentRotation_ << " degrees" << std::endl;
        }
    }

    void SpinBehavior::cleanup()
    {
        entity_ = nullptr;
        std::cout << "🧹 SpinBehavior cleaned up" << std::endl;
    }
}


================================================================================
FILE: src\behaviors\SpinBehavior.h
================================================================================

#pragma once

#include "../components/EntityBehavior.h"
#include "../core/Vector3D.h"

namespace Behaviors
{
    /**
     * @brief Behavior that continuously rotates an entity around a specified axis
     * 
     * This behavior is used in the red cube scene to make the cube spin,
     * demonstrating the XML-driven scene authoring with C++ code-behind behaviors.
     */
    class SpinBehavior : public Components::EntityBehavior
    {
    public:
        SpinBehavior();
        virtual ~SpinBehavior() = default;

        // EntityBehavior interface
        void initialize(Entity& entity, const Assets::BehaviorParams& params) override;
        void update(float deltaTime) override;
        void cleanup() override;

    private:
        float rotationSpeed_;    // Degrees per second
        Vector3D rotationAxis_;  // Normalized rotation axis
        float currentRotation_;  // Current rotation in degrees
        Entity* entity_;         // Reference to the entity we're attached to
    };
}


================================================================================
FILE: src\components\AudioC.h
================================================================================

#pragma once
#include "../core/IComponent.h"
#include <string>

/**
 * @file AudioC.h
 * @brief Component for entities that produce sound.
 *
 * The AudioC component defines the audio properties of an entity,
 * including sound assets, volume, and playback controls.
 * Entities with this component can emit sounds in the simulation.
 */

/**
 * @struct AudioC
 * @brief Component that defines audio properties for an entity.
 *
 * This component inherits from IComponent and provides the necessary
 * information for audio systems to play sounds for the entity.
 * It references sound assets by ID and controls volume and looping.
 */
struct AudioC : public IComponent
{
    /** @brief ID of the sound asset to play */
    std::string soundId;

    /** @brief Volume level (0.0 = silent, 1.0 = full volume) */
    float volume;

    /** @brief Whether the sound should loop continuously */
    bool loop;

    /** @brief Whether the sound is currently playing */
    bool isPlaying;

    /**
     * @brief Construct a new AudioC component.
     *
     * @param sound ID of the sound asset (empty string for no sound)
     * @param vol Volume level (default: 1.0)
     * @param l Whether the sound should loop (default: false)
     */
    AudioC(std::string sound = "",
           float vol = 1.0f,
           bool l = false)
        : soundId(sound), volume(vol), loop(l), isPlaying(false) {}
};



================================================================================
FILE: src\components\ContrailC.h
================================================================================

/**
 * @file ContrailC.h
 * @brief Contrail component for particle trail effects behind aircraft
 *
 * The ContrailC component creates and manages particle-based trail effects
 * that follow aircraft in orbital motion. Features include:
 * - Physics-based particle lifecycle with fade curves
 * - Velocity-based particle spawning
 * - Configurable trail length and density
 * - Smooth particle interpolation for visual continuity
 * - Integration with orbital motion systems
 *
 * @author Generated for Voxel Busy Indicator Scene
 * @date 2024
 */

#pragma once

#include "../math/MathUtils.h"
#include <vector>
#include <cstdint>

/**
 * @brief Component for particle-based contrail effects
 *
 * Creates trailing particle effects behind moving aircraft with realistic
 * physics simulation and smooth visual transitions. Particles are spawned
 * based on velocity and fade over time using configurable curves.
 */
class ContrailC
{
public:
    /**
     * @brief Individual particle in the contrail system
     */
    struct Particle
    {
        Math::float3 position; /**< Current particle position */
        Math::float3 velocity; /**< Current particle velocity */
        float age;             /**< Particle age in seconds */
        float maxAge;          /**< Maximum particle lifetime */
        float size;            /**< Current particle size */
        float alpha;           /**< Current particle alpha/opacity */
        bool active;           /**< Whether particle is active */

        Particle() : position{0, 0, 0}, velocity{0, 0, 0}, age(0), maxAge(1), size(1), alpha(1), active(false) {}
    };

    /**
     * @brief Contrail configuration parameters
     */
    struct ContrailParams
    {
        float spawnRate;           /**< Particles per second */
        float particleLifetime;    /**< Max particle age in seconds */
        float initialSize;         /**< Starting particle size */
        float finalSize;           /**< Ending particle size */
        float velocityInheritance; /**< How much parent velocity particles inherit [0,1] */
        float gravityStrength;     /**< Downward gravity acceleration */
        float dragCoefficient;     /**< Air resistance factor */
        Math::float3 windVelocity; /**< Environmental wind vector */

        ContrailParams()
            : spawnRate(20.0f), particleLifetime(3.0f), initialSize(0.1f), finalSize(0.05f), velocityInheritance(0.3f), gravityStrength(0.5f), dragCoefficient(0.8f), windVelocity{0, 0, 0}
        {
        }
    };

private:
    /** @brief Current contrail configuration */
    ContrailParams params;

    /** @brief Active particle pool */
    std::vector<Particle> particles;

    /** @brief Maximum number of particles */
    size_t maxParticles;

    /** @brief Time accumulator for particle spawning */
    float spawnAccumulator;

    /** @brief Random state for particle variation */
    uint32_t randomState;

    /** @brief Whether contrail emission is enabled */
    bool emissionEnabled;

    /** @brief Last position for velocity calculation */
    Math::float3 lastPosition;

    /** @brief Whether last position is valid */
    bool hasLastPosition;

public:
    /**
     * @brief Construct a new ContrailC component
     *
     * @param maxParticleCount Maximum number of particles in the system
     * @param emitParticles Whether to start emitting particles immediately
     */
    ContrailC(size_t maxParticleCount = 100, bool emitParticles = true)
        : maxParticles(maxParticleCount), spawnAccumulator(0.0f), randomState(42), emissionEnabled(emitParticles), lastPosition{0, 0, 0}, hasLastPosition(false)
    {
        particles.reserve(maxParticles);
    }

    /**
     * @brief Set contrail parameters
     *
     * @param newParams New configuration parameters
     */
    void setParams(const ContrailParams &newParams)
    {
        params = newParams;
    }

    /**
     * @brief Get current contrail parameters
     *
     * @return Current configuration parameters
     */
    const ContrailParams &getParams() const
    {
        return params;
    }

    /**
     * @brief Enable or disable particle emission
     *
     * @param enabled Whether to emit new particles
     */
    void setEmissionEnabled(bool enabled)
    {
        emissionEnabled = enabled;
    }

    /**
     * @brief Check if particle emission is enabled
     *
     * @return True if emitting particles
     */
    bool isEmissionEnabled() const
    {
        return emissionEnabled;
    }

    /**
     * @brief Update contrail simulation
     *
     * @param deltaTime Time step in seconds
     * @param currentPosition Current emitter position
     */
    void update(float deltaTime, const Math::float3 &currentPosition)
    {
        // Calculate velocity from position change
        Math::float3 velocity = {0, 0, 0};
        if (hasLastPosition)
        {
            velocity = Math::scale(Math::sub(currentPosition, lastPosition), 1.0f / deltaTime);
        }

        // Update existing particles
        updateParticles(deltaTime);

        // Spawn new particles if emission is enabled
        if (emissionEnabled)
        {
            spawnParticles(deltaTime, currentPosition, velocity);
        }

        // Update last position
        lastPosition = currentPosition;
        hasLastPosition = true;
    }

    /**
     * @brief Get all active particles
     *
     * @return Vector of active particles
     */
    std::vector<Particle> getActiveParticles() const
    {
        std::vector<Particle> active;
        for (const auto &particle : particles)
        {
            if (particle.active)
            {
                active.push_back(particle);
            }
        }
        return active;
    }

    /**
     * @brief Get number of active particles
     *
     * @return Count of active particles
     */
    size_t getActiveParticleCount() const
    {
        size_t count = 0;
        for (const auto &particle : particles)
        {
            if (particle.active)
                count++;
        }
        return count;
    }

    /**
     * @brief Clear all particles
     */
    void clearParticles()
    {
        for (auto &particle : particles)
        {
            particle.active = false;
        }
    }

private:
    /**
     * @brief Update all active particles
     *
     * @param deltaTime Time step in seconds
     */
    void updateParticles(float deltaTime)
    {
        for (auto &particle : particles)
        {
            if (!particle.active)
                continue;

            // Age the particle
            particle.age += deltaTime;

            // Check if particle should die
            if (particle.age >= particle.maxAge)
            {
                particle.active = false;
                continue;
            }

            // Calculate age ratio for fade curves
            float ageRatio = particle.age / particle.maxAge;

            // Apply physics forces
            Math::float3 forces = {0, 0, 0};

            // Gravity
            forces = Math::add(forces, {0, -params.gravityStrength, 0});

            // Drag (air resistance)
            Math::float3 dragForce = Math::scale(particle.velocity, -params.dragCoefficient);
            forces = Math::add(forces, dragForce);

            // Wind
            Math::float3 windForce = Math::scale(
                Math::sub(params.windVelocity, particle.velocity),
                params.dragCoefficient * 0.5f);
            forces = Math::add(forces, windForce);

            // Update velocity and position
            particle.velocity = Math::add(particle.velocity, Math::scale(forces, deltaTime));
            particle.position = Math::add(particle.position, Math::scale(particle.velocity, deltaTime));

            // Update visual properties using fade curves
            particle.size = Math::lerp(params.initialSize, params.finalSize, ageRatio);
            particle.alpha = Math::fadeOut(ageRatio); // Smooth fade out over lifetime
        }
    }

    /**
     * @brief Spawn new particles based on emission rate
     *
     * @param deltaTime Time step in seconds
     * @param position Current emitter position
     * @param velocity Current emitter velocity
     */
    void spawnParticles(float deltaTime, const Math::float3 &position, const Math::float3 &velocity)
    {
        spawnAccumulator += deltaTime;

        float spawnInterval = 1.0f / params.spawnRate;
        while (spawnAccumulator >= spawnInterval)
        {
            spawnParticle(position, velocity);
            spawnAccumulator -= spawnInterval;
        }
    }

    /**
     * @brief Spawn a single particle
     *
     * @param position Spawn position
     * @param velocity Emitter velocity
     */
    void spawnParticle(const Math::float3 &position, const Math::float3 &velocity)
    {
        // Find inactive particle slot
        Particle *particle = nullptr;
        for (auto &p : particles)
        {
            if (!p.active)
            {
                particle = &p;
                break;
            }
        }

        // If no slot available and under max count, add new particle
        if (!particle && particles.size() < maxParticles)
        {
            particles.emplace_back();
            particle = &particles.back();
        }

        // If still no slot, skip spawning
        if (!particle)
            return;

        // Initialize particle
        particle->active = true;
        particle->age = 0.0f;
        particle->maxAge = params.particleLifetime * (0.8f + 0.4f * Math::rand01(randomState));

        // Position with small random offset
        Math::float3 offset = {
            (Math::rand01(randomState) - 0.5f) * 0.02f,
            (Math::rand01(randomState) - 0.5f) * 0.02f,
            (Math::rand01(randomState) - 0.5f) * 0.02f};
        particle->position = Math::add(position, offset);

        // Velocity inheritance with random variation
        Math::float3 inheritedVel = Math::scale(velocity, params.velocityInheritance);
        Math::float3 randomVel = {
            (Math::rand01(randomState) - 0.5f) * 0.1f,
            (Math::rand01(randomState) - 0.5f) * 0.1f,
            (Math::rand01(randomState) - 0.5f) * 0.1f};
        particle->velocity = Math::add(inheritedVel, randomVel);

        // Visual properties
        particle->size = params.initialSize;
        particle->alpha = 1.0f;
    }
};



================================================================================
FILE: src\components\DebugC.h
================================================================================

#pragma once
#include "../core/IComponent.h"
#include <unordered_map>
#include <string>

/**
 * @file DebugC.h
 * @brief Component for entities that require debug visualization or information.
 *
 * The DebugC component provides debugging capabilities for entities,
 * including debug names, visualization options, and debug data storage.
 * This component is typically used during development and debugging phases.
 */

/**
 * @struct DebugC
 * @brief Component that provides debugging information and visualization for an entity.
 *
 * This component inherits from IComponent and adds debugging capabilities
 * such as entity naming, debug rendering options, and custom debug data.
 * Debug components are usually processed by debug rendering systems.
 */
struct DebugC : public IComponent
{
    /** @brief Human-readable name for the entity (for debugging purposes) */
    std::string debugName;

    /** @brief Whether to show debug visualization for this entity */
    bool showDebugInfo;

    /** @brief Whether to render debug bounding boxes or wireframes */
    bool showBoundingBox;

    /** @brief Custom debug data as key-value pairs */
    std::unordered_map<std::string, std::string> debugData;

    /**
     * @brief Construct a new DebugC component.
     *
     * @param name Debug name for the entity (default: empty string)
     * @param showInfo Whether to show debug information (default: false)
     * @param showBox Whether to show bounding box (default: false)
     */
    DebugC(std::string name = "", bool showInfo = false, bool showBox = false)
        : debugName(name), showDebugInfo(showInfo), showBoundingBox(showBox) {}
};



================================================================================
FILE: src\components\EntityBehavior_new.h
================================================================================

#pragma once
#include "../core/Entity.h"
#include "../assets/Package.h"
#include <string>
#include <memory>

namespace Systems
{
    class BehaviorSystem; // Forward declaration
}

namespace Components
{

    /**
     * Base class for entity behaviors.
     * Provides common functionality for entity behavior implementations.
     */
    class EntityBehavior
    {
    public:
        virtual ~EntityBehavior() = default;

        /**
         * Initialize the behavior
         * @param entity The entity this behavior is attached to
         * @param params Parameters for the behavior
         */
        virtual void initialize(Entity &entity, const Assets::BehaviorParams &params) = 0;

        /**
         * Update the behavior
         * @param deltaTime Time since last update
         */
        virtual void update(float deltaTime) = 0;

        /**
         * Cleanup when the behavior is removed
         */
        virtual void cleanup() {}

        /**
         * Get a parameter value with type conversion
         * @param name Parameter name
         * @param defaultValue Default value if parameter is not found
         * @return Parameter value or default
         */
        template <typename T>
        T getParameter(const std::string &name, const T &defaultValue = T{}) const
        {
            return params.get<T>(name, defaultValue);
        }

        void setEntity(Entity &e) { entity = &e; }
        void setParams(const Assets::BehaviorParams &p) { params = p; }

    protected:
        Entity *entity = nullptr;
        Assets::BehaviorParams params;

    private:
        friend class Systems::BehaviorSystem;
    };

} // namespace Components


================================================================================
FILE: src\components\EntityBehavior.h
================================================================================

#pragma once
#include "../core/Entity.h"
#include "../assets/Package.h"
#include <string>
#include <memory>

namespace Systems {
    class BehaviorSystem; // Forward declaration
}

namespace Components {

/**
 * Base class for entity behaviors.
 * Provides common functionality for entity behavior implementations.
 */
class EntityBehavior {
public:
    virtual ~EntityBehavior() = default;

    /**
     * Initialize the behavior
     * @param entity The entity this behavior is attached to
     * @param params Parameters for the behavior
     */
    virtual void initialize(Entity& entity, const Assets::BehaviorParams& params) = 0;

    /**
     * Update the behavior
     * @param deltaTime Time since last update
     */
    virtual void update(float deltaTime) = 0;

    /**
     * Cleanup when the behavior is removed
     */
    virtual void cleanup() {}

    /**
     * Get a parameter value with type conversion
     * @param name Parameter name
     * @param defaultValue Default value if parameter is not found
     * @return Parameter value or default
     */
    template <typename T>
    T getParameter(const std::string &name, const T &defaultValue = T{}) const
    {
        return params.get<T>(name, defaultValue);
    }

    void setEntity(Entity &e) { entity = &e; }
    void setParams(const Assets::BehaviorParams &p) { params = p; }

protected:
    Entity *entity = nullptr;
    Assets::BehaviorParams params;

private:
    friend class Systems::BehaviorSystem;
};

} // namespace Components


================================================================================
FILE: src\components\LightC.h
================================================================================

#pragma once
#include "../core/IComponent.h"
#include <string>

/**
 * @file LightC.h
 * @brief Component for entities that emit light.
 *
 * The LightC component defines the lighting properties of an entity,
 * including light type, color, intensity, and range.
 * Entities with this component act as light sources in the scene.
 */

/**
 * @struct LightC
 * @brief Component that defines lighting properties for an entity.
 *
 * This component inherits from IComponent and provides the necessary
 * information for rendering systems to use the entity as a light source.
 * It supports different light types and controls appearance.
 */
struct LightC : public IComponent
{
    /** @brief Type of light (e.g., "point", "spot", "directional") */
    std::string lightType;

    /** @brief RGB color values (red, green, blue) */
    float color[3];

    /** @brief Light intensity factor */
    float intensity;

    /** @brief Maximum range of the light's effect */
    float range;

    /**
     * @brief Construct a new LightC component.
     *
     * @param type Type of light (default: "point")
     * @param r Red component (default: 1.0)
     * @param g Green component (default: 1.0)
     * @param b Blue component (default: 1.0)
     * @param i Intensity factor (default: 1.0)
     * @param rng Range of effect (default: 10.0)
     */
    LightC(std::string type = "point",
           float r = 1.0f,
           float g = 1.0f,
           float b = 1.0f,
           float i = 1.0f,
           float rng = 10.0f)
        : lightType(type), intensity(i), range(rng)
    {
        color[0] = r;
        color[1] = g;
        color[2] = b;
    }
};



================================================================================
FILE: src\components\OrbitalC.h
================================================================================

#pragma once
#include "../core/IComponent.h"
#include "../math/MathUtils.h"

/**
 * @file OrbitalC.h
 * @brief Component for entities that follow orbital motion around a center point
 *
 * The OrbitalC component defines orbital motion parameters including center point,
 * orbital radius, angular speed, orbital axis, and phase offset. Entities with this
 * component will be updated by the OrbitalSystem to follow elliptical orbital paths
 * with proper velocity-based orientation and banking for aircraft.
 */

/**
 * @struct OrbitalC
 * @brief Component that defines orbital motion properties for an entity
 *
 * This component inherits from IComponent and provides all necessary parameters
 * for realistic orbital motion including elliptical orbits, inclination, and
 * coordinated banking for aircraft entities.
 */
struct OrbitalC : public IComponent
{
    /** @brief Center point of orbital motion in world space */
    Math::float3 center;

    /** @brief Orbital parameters for elliptical motion */
    Math::OrbitParams orbitParams;

    /** @brief Current time accumulator for orbit calculation */
    float currentTime;

    /** @brief Whether to apply banking for aircraft-like entities */
    bool enableBanking;

    /** @brief Maximum banking angle in radians (for aircraft) */
    float maxBankAngle;

    /** @brief Speed jitter percentage for natural variation */
    float speedJitter;

    /** @brief Random seed for deterministic jitter */
    uint32_t randomSeed;

    /** @brief Current banking angle (internal state) */
    float currentBankAngle;

    /** @brief Current banking rate (internal state) */
    float currentBankRate;

    /**
     * @brief Construct a new OrbitalC component
     *
     * @param centerPoint Center of orbital motion (default: origin)
     * @param radius Orbital radius (default: 1.0)
     * @param speed Angular speed in rad/s (default: 1.0)
     * @param axis Orbital axis (default: Y-axis)
     * @param phase Initial phase offset (default: 0.0)
     * @param banking Enable banking for aircraft (default: false)
     */
    OrbitalC(const Math::float3 &centerPoint = {0, 0, 0},
             float radius = 1.0f,
             float speed = 1.0f,
             const Math::float3 &axis = {0, 1, 0},
             float phase = 0.0f,
             bool banking = false)
        : center(centerPoint), currentTime(0.0f), enableBanking(banking), maxBankAngle(15.0f * Math::DegToRad), speedJitter(0.0f), randomSeed(12345), currentBankAngle(0.0f), currentBankRate(0.0f)
    {
        // Initialize orbital parameters
        orbitParams.semiMajorAxis = radius;
        orbitParams.eccentricity = 0.0f; // circular by default
        orbitParams.angularRate = speed;
        orbitParams.phaseOffset = phase;

        // Calculate inclination from axis (assume axis is rotation axis)
        Math::float3 worldY = {0, 1, 0};
        Math::float3 normalizedAxis = Math::norm(axis);
        orbitParams.inclination = std::acos(Math::clamp(Math::dot(normalizedAxis, worldY), -1.0f, 1.0f));
    }

    /**
     * @brief Get current orbital position
     *
     * @return Current 3D position on orbit relative to center
     */
    Math::float3 getCurrentPosition() const
    {
        // Apply speed jitter if enabled
        float jitteredTime = currentTime;
        if (speedJitter > 0.0f)
        {
            uint32_t state = randomSeed;
            float jitter = 1.0f + speedJitter * (2.0f * Math::rand01(state) - 1.0f);
            jitteredTime *= jitter;
        }

        Math::float3 localPos = Math::calculateOrbitPosition(orbitParams, jitteredTime);
        return Math::add(center, localPos);
    }

    /**
     * @brief Get current orbital velocity
     *
     * @return Current 3D velocity vector
     */
    Math::float3 getCurrentVelocity() const
    {
        return Math::calculateOrbitVelocity(orbitParams, currentTime);
    }

    /**
     * @brief Get current orientation quaternion (for aircraft with banking)
     *
     * @return Orientation quaternion with velocity alignment and banking
     */
    Math::quat getCurrentOrientation() const
    {
        Math::float3 velocity = getCurrentVelocity();
        Math::float3 position = getCurrentPosition();

        if (Math::len(velocity) < 1e-4f)
        {
            return Math::quat::identity();
        }

        // Forward direction aligned with velocity
        Math::float3 forward = Math::norm(velocity);

        if (enableBanking)
        {
            // Calculate banking angle for coordinated turn
            float bankAngle = Math::calculateBankingAngle(velocity, Math::sub(position, center), maxBankAngle);

            // Apply banking to up vector
            Math::float3 worldUp = {0, 1, 0};
            Math::float3 right = Math::norm(Math::cross(worldUp, forward));
            Math::float3 up = Math::cross(forward, right);

            // Roll around forward axis for banking
            Math::quat bankRotation = Math::q_from_axis_angle(forward, bankAngle);
            Math::float3 bankedUp = Math::q_rotate(bankRotation, up);

            return Math::q_look_rotation(forward, bankedUp);
        }
        else
        {
            // Simple velocity alignment without banking
            Math::float3 worldUp = {0, 1, 0};
            return Math::q_look_rotation(forward, worldUp);
        }
    }

    /**
     * @brief Set elliptical orbit parameters
     *
     * @param semiMajor Semi-major axis length
     * @param eccentricity Orbital eccentricity [0,1)
     */
    void setEllipticalOrbit(float semiMajor, float eccentricity)
    {
        orbitParams.semiMajorAxis = semiMajor;
        orbitParams.eccentricity = Math::clamp(eccentricity, 0.0f, 0.99f);
    }

    /**
     * @brief Set orbital inclination angle
     *
     * @param inclinationDegrees Inclination angle in degrees
     */
    void setInclination(float inclinationDegrees)
    {
        orbitParams.inclination = inclinationDegrees * Math::DegToRad;
    }

    /**
     * @brief Enable speed jitter for natural orbital variation
     *
     * @param jitterPercent Jitter percentage (e.g., 0.05 for ±5%)
     * @param seed Random seed for deterministic jitter
     */
    void setSpeedJitter(float jitterPercent, uint32_t seed)
    {
        speedJitter = jitterPercent;
        randomSeed = seed;
    }

    /**
     * @brief Update orbital motion by time step
     *
     * @param deltaTime Time step in seconds
     */
    void update(float deltaTime)
    {
        currentTime += deltaTime;
    }

    /**
     * @brief Reset orbital time to specific value
     *
     * @param time New time value
     */
    void setTime(float time)
    {
        currentTime = time;
    }
};



================================================================================
FILE: src\components\PhysicsC.h
================================================================================

#pragma once
#include "../core/IComponent.h"
#include <string>

/**
 * @file PhysicsC.h
 * @brief Component for entities with physical properties.
 *
 * The PhysicsC component defines the physical properties of an entity,
 * including mass, friction, restitution, and collider information.
 * Entities with this component interact with the physics simulation.
 */

/**
 * @struct PhysicsC
 * @brief Component that defines physical properties for an entity.
 *
 * This component inherits from IComponent and provides the necessary
 * information for physics systems to simulate the entity in the physical world.
 * It includes properties for mass, friction, collision, and gravity effects.
 */
struct PhysicsC : public IComponent
{
    /** @brief The mass of the entity in kg */
    float mass;

    /** @brief Friction coefficient (0.0 = no friction, 1.0 = high friction) */
    float friction;

    /** @brief Restitution (bounciness) coefficient (0.0 = no bounce, 1.0 = perfect bounce) */
    float restitution;

    /** @brief Type of collider (e.g., "box", "sphere", "capsule", etc.) */
    std::string colliderType;

    /** @brief Size of the collider in each dimension (x, y, z) */
    float colliderSize[3];

    /** @brief Whether the entity is kinematic (moved by script, not by physics) */
    bool isKinematic;

    /** @brief Whether the entity is affected by gravity */
    bool useGravity;

    /**
     * @brief Construct a new PhysicsC component.
     *
     * @param m Mass of the entity (default: 1.0)
     * @param f Friction coefficient (default: 0.5)
     * @param r Restitution coefficient (default: 0.3)
     * @param cType Type of collider (default: "sphere")
     * @param k Whether the entity is kinematic (default: false)
     * @param g Whether the entity is affected by gravity (default: true)
     */
    PhysicsC(float m = 1.0f,
             float f = 0.5f,
             float r = 0.3f,
             std::string cType = "sphere",
             bool k = false,
             bool g = true)
        : mass(m), friction(f), restitution(r), colliderType(cType),
          isKinematic(k), useGravity(g)
    {
        colliderSize[0] = colliderSize[1] = colliderSize[2] = 1.0f;
    }
};



================================================================================
FILE: src\components\RenderableC.h
================================================================================

#pragma once
#include "../core/IComponent.h"

/**
 * @file RenderableC.h
 * @brief Component for entities that can be visually rendered in the scene.
 *
 * The RenderableC component defines the visual properties of an entity,
 * including mesh geometry, material appearance, and visibility state.
 * Entities with this component can be processed by rendering systems.
 */

/**
 * @struct RenderableC
 * @brief Component that defines visual rendering properties for an entity.
 *
 * This component inherits from IComponent and provides the necessary
 * information for rendering systems to display the entity. It references
 * mesh and material assets by ID and controls visibility.
 */
struct RenderableC : public IComponent
{
    /** @brief ID of the mesh asset used for rendering geometry */
    std::string meshId;

    /** @brief ID of the material asset used for surface appearance */
    std::string materialId;

    /** @brief Whether the entity should be rendered (true) or hidden (false) */
    bool isVisible;

    /**
     * @brief Construct a new RenderableC component.
     *
     * @param mesh ID of the mesh asset (empty string for no mesh)
     * @param material ID of the material asset (empty string for no material)
     * @param visible Initial visibility state (default: true)
     */
    RenderableC(std::string mesh = "", std::string material = "", bool visible = true)
        : meshId(mesh), materialId(material), isVisible(visible) {}
};



================================================================================
FILE: src\components\Transform.h
================================================================================

#pragma once

#include <array>

namespace Components
{
    struct Vector3
    {
        float x = 0.0f;
        float y = 0.0f;
        float z = 0.0f;
    };

    struct Quaternion
    {
        float x = 0.0f;
        float y = 0.0f;
        float z = 0.0f;
        float w = 1.0f;
    };

    struct Transform
    {
        Vector3 position;
        Quaternion rotation;
        Vector3 scale{1.0f, 1.0f, 1.0f};
    };
}


================================================================================
FILE: src\components\TransformC.h
================================================================================

#pragma once
#include "../core/IComponent.h"
#include "../core/Vector3D.h"
#include "../core/Quaternion.h"

/**
 * @file TransformC.h
 * @brief Component for entities that have spatial positioning and orientation.
 *
 * The TransformC component defines the spatial properties of an entity in 3D space,
 * including position, rotation, and scale. This is a fundamental component used
 * by most entities in the simulation for positioning and transformation.
 */

/**
 * @struct TransformC
 * @brief Component that defines the spatial transformation of an entity.
 *
 * This component inherits from IComponent and provides 3D transformation
 * properties including position, rotation (as quaternion), and scale.
 * Transform components are processed by transformation and rendering systems.
 */
struct TransformC : public IComponent
{
    /** @brief Position of the entity in 3D world space */
    Vector3D position;

    /** @brief Rotation of the entity as a quaternion */
    Quaternion rotation;

    /** @brief Scale of the entity in each axis */
    Vector3D scale;

    /**
     * @brief Construct a new TransformC component.
     *
     * @param pos Initial position (default: origin)
     * @param rot Initial rotation (default: identity quaternion)
     * @param scl Initial scale (default: unit scale)
     */
    TransformC(Vector3D pos = Vector3D(), Quaternion rot = Quaternion(), Vector3D scl = Vector3D(1.0f, 1.0f, 1.0f))
        : position(pos), rotation(rot), scale(scl) {}
};



================================================================================
FILE: src\components\VehicleC.h
================================================================================

#pragma once
#include "../core/IComponent.h"
#include <string>

/**
 * @file VehicleC.h
 * @brief Component for entities that behave as vehicles.
 *
 * The VehicleC component defines the vehicular properties of an entity,
 * including vehicle type, speed, acceleration, and handling characteristics.
 * Entities with this component can be controlled as vehicles in the simulation.
 */

/**
 * @struct VehicleC
 * @brief Component that defines vehicle behavior for an entity.
 *
 * This component inherits from IComponent and provides the necessary
 * information for vehicle systems to control the entity as a specific
 * type of vehicle (drone, car, aircraft, etc.).
 */
struct VehicleC : public IComponent
{
    /** @brief Type of vehicle (e.g., "drone", "car", "aircraft", etc.) */
    std::string vehicleType;

    /** @brief Maximum speed of the vehicle in units per second */
    float maxSpeed;

    /** @brief Acceleration of the vehicle in units per second squared */
    float acceleration;

    /** @brief Maneuverability factor affecting turning and handling */
    float maneuverability;

    /** @brief Type of controller used for the vehicle */
    std::string controllerType;

    /**
     * @brief Construct a new VehicleC component.
     *
     * @param type Type of vehicle (default: "drone")
     * @param speed Maximum speed (default: 100.0)
     * @param accel Acceleration (default: 10.0)
     * @param maneuver Maneuverability factor (default: 5.0)
     * @param controller Type of controller (default: "manual")
     */
    VehicleC(std::string type = "drone",
             float speed = 100.0f,
             float accel = 10.0f,
             float maneuver = 5.0f,
             std::string controller = "manual")
        : vehicleType(type), maxSpeed(speed), acceleration(accel),
          maneuverability(maneuver), controllerType(controller) {}
};



================================================================================
FILE: src\components\VoxelCloudC.h
================================================================================

/**
 * @file VoxelCloudC.h
 * @brief Voxel cloud component for orbital cloud systems
 *
 * The VoxelCloudC component manages large-scale orbital cloud formations
 * that consist of multiple voxel elements. Features include:
 * - Orbital precession with slow rotation around multiple axes
 * - Procedural cloud density and lifecycle management
 * - Fade curves for natural appearance and disappearance
 * - Integration with orbital mechanics for realistic motion
 * - Hierarchical cloud structure with multiple detail levels
 *
 * @author Generated for Voxel Busy Indicator Scene
 * @date 2024
 */

#pragma once

#include "../math/MathUtils.h"
#include <vector>
#include <cstdint>

/**
 * @brief Component for large-scale orbital voxel cloud systems
 *
 * Manages collections of voxel elements that move in complex orbital
 * patterns with precession and hierarchical organization. Clouds can
 * have multiple detail levels and smooth lifecycle transitions.
 */
class VoxelCloudC
{
public:
    /**
     * @brief Individual voxel element in the cloud
     */
    struct VoxelElement
    {
        Math::float3 localPosition; /**< Position relative to cloud center */
        Math::float3 velocity;      /**< Current velocity vector */
        float density;              /**< Voxel density/opacity [0,1] */
        float size;                 /**< Voxel size multiplier */
        float age;                  /**< Element age in seconds */
        float maxAge;               /**< Maximum element lifetime */
        bool active;                /**< Whether element is active */

        VoxelElement() : localPosition{0, 0, 0}, velocity{0, 0, 0}, density(1), size(1), age(0), maxAge(10), active(false) {}
    };

    /** @brief Phase offset for density animation uniqueness */
    float densityPhase;

    /**
     * @brief Cloud configuration parameters
     */
    struct CloudParams
    {
        Math::OrbitParams primaryOrbit;    /**< Primary orbital motion */
        Math::OrbitParams precessionOrbit; /**< Precession orbital motion */
        float cloudRadius;                 /**< Maximum cloud extent */
        float elementCount;                /**< Target number of voxel elements */
        float densityVariation;            /**< Random density variation [0,1] */
        float sizeVariation;               /**< Random size variation [0,1] */
        float turbulenceStrength;          /**< Internal turbulence factor */
        float cohesionStrength;            /**< Element attraction to center */
        float fadeInTime;                  /**< Time to fade in from spawn */
        float fadeOutTime;                 /**< Time to fade out before death */

        CloudParams()
            : cloudRadius(2.0f), elementCount(50.0f), densityVariation(0.3f), sizeVariation(0.4f), turbulenceStrength(0.1f), cohesionStrength(0.5f), fadeInTime(2.0f), fadeOutTime(3.0f)
        {
            // Default primary orbit (large, slow)
            primaryOrbit.semiMajorAxis = 8.0f;
            primaryOrbit.eccentricity = 0.1f;
            primaryOrbit.angularRate = 0.1f;
            primaryOrbit.inclination = 0.2f;
            primaryOrbit.phaseOffset = 0.0f;

            // Default precession orbit (slow rotation)
            precessionOrbit.semiMajorAxis = 1.0f;
            precessionOrbit.eccentricity = 0.0f;
            precessionOrbit.angularRate = 0.02f;
            precessionOrbit.inclination = 0.1f;
            precessionOrbit.phaseOffset = 0.0f;
        }
    };

private:
    /** @brief Current cloud configuration */
    CloudParams params;

    /** @brief Cloud center position in world space */
    Math::float3 worldPosition;

    /** @brief Current cloud orientation quaternion */
    Math::quat worldOrientation;

    /** @brief Active voxel elements */
    std::vector<VoxelElement> elements;

    /** @brief Current primary orbital time */
    float primaryTime;

    /** @brief Current precession orbital time */
    float precessionTime;

    /** @brief Random state for procedural generation */
    uint32_t randomState;

    /** @brief Cloud lifecycle state */
    enum LifecycleState
    {
        SPAWNING,  /**< Cloud is fading in */
        ACTIVE,    /**< Cloud is fully active */
        DESPAWNING /**< Cloud is fading out */
    } lifecycleState;

    /** @brief Current lifecycle time */
    float lifecycleTime;

    /** @brief Total cloud lifetime (0 = infinite) */
    float totalLifetime;

public:
    /**
     * @brief Construct a new VoxelCloudC component
     *
     * @param cloudLifetime Total cloud lifetime (0 for infinite)
     * @param seed Random seed for procedural generation
     */
    VoxelCloudC(float cloudLifetime = 0.0f, uint32_t seed = 12345)
        : worldPosition{0, 0, 0}, worldOrientation(Math::quat::identity()), primaryTime(0.0f), precessionTime(0.0f), randomState(seed), lifecycleState(SPAWNING), lifecycleTime(0.0f), totalLifetime(cloudLifetime)
    {
        generateElements();
    }

    /**
     * @brief Set cloud parameters
     *
     * @param newParams New configuration parameters
     */
    void setParams(const CloudParams &newParams)
    {
        params = newParams;
        generateElements(); // Regenerate with new parameters
    }

    /**
     * @brief Get current cloud parameters
     *
     * @return Current configuration parameters
     */
    const CloudParams &getParams() const
    {
        return params;
    }

    /**
     * @brief Update cloud simulation
     *
     * @param deltaTime Time step in seconds
     * @param globalCenter Global center point for orbital motion
     */
    void update(float deltaTime, const Math::float3 &globalCenter)
    {
        // Update orbital times
        primaryTime += deltaTime;
        precessionTime += deltaTime;

        // Update lifecycle
        updateLifecycle(deltaTime);

        // Calculate orbital positions
        updateOrbitalMotion(globalCenter);

        // Update individual elements
        updateElements(deltaTime);
    }

    /**
     * @brief Get current world position of cloud center
     *
     * @return World space position
     */
    Math::float3 getWorldPosition() const
    {
        return worldPosition;
    }

    /**
     * @brief Get current world orientation of cloud
     *
     * @return World space orientation quaternion
     */
    Math::quat getWorldOrientation() const
    {
        return worldOrientation;
    }

    /**
     * @brief Get all active voxel elements
     *
     * @return Vector of active elements
     */
    std::vector<VoxelElement> getActiveElements() const
    {
        std::vector<VoxelElement> active;
        for (const auto &element : elements)
        {
            if (element.active && element.density > 0.01f)
            {
                active.push_back(element);
            }
        }
        return active;
    }

    /**
     * @brief Get element world positions
     *
     * @return Vector of world space positions for all active elements
     */
    std::vector<Math::float3> getElementWorldPositions() const
    {
        std::vector<Math::float3> positions;
        for (const auto &element : elements)
        {
            if (element.active && element.density > 0.01f)
            {
                // Transform local position to world space
                Math::float3 rotatedPos = Math::q_rotate(worldOrientation, element.localPosition);
                Math::float3 worldPos = Math::add(worldPosition, rotatedPos);
                positions.push_back(worldPos);
            }
        }
        return positions;
    }

    /**
     * @brief Check if cloud is in despawning state
     *
     * @return True if cloud is fading out
     */
    bool isDespawning() const
    {
        return lifecycleState == DESPAWNING;
    }

    /**
     * @brief Check if cloud should be destroyed
     *
     * @return True if cloud lifecycle is complete
     */
    bool shouldDestroy() const
    {
        return lifecycleState == DESPAWNING && lifecycleTime >= params.fadeOutTime;
    }

    /**
     * @brief Force cloud to start despawning
     */
    void startDespawning()
    {
        if (lifecycleState != DESPAWNING)
        {
            lifecycleState = DESPAWNING;
            lifecycleTime = 0.0f;
        }
    }

private:
    /**
     * @brief Generate voxel elements based on current parameters
     */
    void generateElements()
    {
        elements.clear();
        elements.reserve(static_cast<size_t>(params.elementCount));

        for (int i = 0; i < static_cast<int>(params.elementCount); ++i)
        {
            VoxelElement element;

            // Generate random position within cloud radius using sphere distribution
            float radius = params.cloudRadius * std::pow(Math::rand01(randomState), 1.0f / 3.0f);
            float theta = 2.0f * Math::Pi * Math::rand01(randomState);
            float phi = std::acos(2.0f * Math::rand01(randomState) - 1.0f);

            element.localPosition.x = radius * std::sin(phi) * std::cos(theta);
            element.localPosition.y = radius * std::sin(phi) * std::sin(theta);
            element.localPosition.z = radius * std::cos(phi);

            // Random velocity for internal motion
            element.velocity.x = (Math::rand01(randomState) - 0.5f) * params.turbulenceStrength;
            element.velocity.y = (Math::rand01(randomState) - 0.5f) * params.turbulenceStrength;
            element.velocity.z = (Math::rand01(randomState) - 0.5f) * params.turbulenceStrength;

            // Random properties
            element.density = 1.0f - params.densityVariation * Math::rand01(randomState);
            element.size = 1.0f - params.sizeVariation * (Math::rand01(randomState) - 0.5f);
            element.age = 0.0f;
            element.maxAge = 20.0f + 40.0f * Math::rand01(randomState); // Variable lifetime
            element.active = true;

            elements.push_back(element);
        }
    }

    /**
     * @brief Update cloud lifecycle state
     *
     * @param deltaTime Time step in seconds
     */
    void updateLifecycle(float deltaTime)
    {
        lifecycleTime += deltaTime;

        switch (lifecycleState)
        {
        case SPAWNING:
            if (lifecycleTime >= params.fadeInTime)
            {
                lifecycleState = ACTIVE;
                lifecycleTime = 0.0f;
            }
            break;

        case ACTIVE:
            if (totalLifetime > 0.0f && lifecycleTime >= totalLifetime)
            {
                lifecycleState = DESPAWNING;
                lifecycleTime = 0.0f;
            }
            break;

        case DESPAWNING:
            // Handled in shouldDestroy()
            break;
        }
    }

    /**
     * @brief Update orbital motion calculation
     *
     * @param globalCenter Global center for orbital motion
     */
    void updateOrbitalMotion(const Math::float3 &globalCenter)
    {
        // Calculate primary orbital position
        Math::float3 primaryPos = Math::calculateOrbitPosition(params.primaryOrbit, primaryTime);

        // Calculate precession rotation
        Math::float3 precessionAxis = {0, 1, 0}; // Default vertical axis
        float precessionAngle = precessionTime * params.precessionOrbit.angularRate;
        Math::quat precessionQuat = Math::q_from_axis_angle(precessionAxis, precessionAngle);

        // Apply inclination to precession
        Math::float3 inclinationAxis = {1, 0, 0};
        Math::quat inclinationQuat = Math::q_from_axis_angle(inclinationAxis, params.precessionOrbit.inclination);

        // Combine rotations
        worldOrientation = Math::q_mul(inclinationQuat, precessionQuat);

        // Calculate final world position
        worldPosition = Math::add(globalCenter, primaryPos);
    }

    /**
     * @brief Update individual voxel elements
     *
     * @param deltaTime Time step in seconds
     */
    void updateElements(float deltaTime)
    {
        float globalAlpha = 1.0f;

        // Calculate global alpha based on lifecycle
        switch (lifecycleState)
        {
        case SPAWNING:
            globalAlpha = Math::fadeIn(lifecycleTime / params.fadeInTime);
            break;
        case ACTIVE:
            globalAlpha = 1.0f;
            break;
        case DESPAWNING:
            globalAlpha = Math::fadeOut(lifecycleTime / params.fadeOutTime);
            break;
        }

        for (auto &element : elements)
        {
            if (!element.active)
                continue;

            // Age the element
            element.age += deltaTime;

            // Apply cohesion force (attraction to center)
            Math::float3 toCenter = Math::scale(element.localPosition, -1.0f);
            float distance = Math::len(toCenter);
            if (distance > 0.01f)
            {
                Math::float3 cohesionForce = Math::scale(
                    Math::norm(toCenter),
                    params.cohesionStrength / (1.0f + distance));
                element.velocity = Math::add(element.velocity, Math::scale(cohesionForce, deltaTime));
            }

            // Apply velocity damping
            element.velocity = Math::scale(element.velocity, std::pow(0.9f, deltaTime));

            // Update position
            element.localPosition = Math::add(element.localPosition, Math::scale(element.velocity, deltaTime));

            // Keep elements within cloud radius
            float distanceFromCenter = Math::len(element.localPosition);
            if (distanceFromCenter > params.cloudRadius)
            {
                element.localPosition = Math::scale(
                    Math::norm(element.localPosition),
                    params.cloudRadius);
            }

            // Update density based on age and global lifecycle
            float ageFactor = 1.0f;
            if (element.age > element.maxAge * 0.8f)
            {
                ageFactor = Math::fadeOut((element.age - element.maxAge * 0.8f) / (element.maxAge * 0.2f));
            }

            element.density = (1.0f - params.densityVariation * Math::rand01(randomState)) * globalAlpha * ageFactor;

            // Deactivate old elements
            if (element.age > element.maxAge || element.density < 0.01f)
            {
                element.active = false;
            }
        }
    }
};



================================================================================
FILE: src\config\EntityConfig.h
================================================================================

#ifndef ENTITY_CONFIG_H
#define ENTITY_CONFIG_H

#include <string>
#include <vector>
#include <unordered_map>
#include <memory>

namespace EntityConfig
{

    // Basic transform data structures
    struct Vec3
    {
        float x = 0.0f;
        float y = 0.0f;
        float z = 0.0f;
    };

    struct Vec4
    {
        float x = 0.0f;
        float y = 0.0f;
        float z = 0.0f;
        float w = 1.0f;
    };

    /**
     * @brief 3D position and rotation structure
     */
    struct Transform
    {
        Vec3 position;
        Vec4 rotation; // Quaternion
        Vec3 scale{1.0f, 1.0f, 1.0f};

        Transform() = default;
    };

    /**
     * @brief Renderable component configuration
     */
    struct RenderableComponent
    {
        std::string meshId;
        std::string materialId;
        bool isVisible = true;
        float opacity = 1.0f;
        int renderLayer = 0;
    };

    /**
     * @brief Physics component configuration
     */
    struct PhysicsComponent
    {
        bool hasPhysics = true;
        float mass = 1.0f;
        float friction = 0.5f;
        float restitution = 0.3f;
        float colliderSize[3] = {1.0f, 1.0f, 1.0f};
        bool isKinematic = false;
        bool useGravity = true;
        std::string colliderType = "sphere";
    };

    /**
     * @brief Audio component configuration
     */
    struct AudioComponent
    {
        std::string soundId;
        float volume = 1.0f;
        bool loop = false;
    };

    /**
     * @brief Vehicle control component configuration
     */
    struct VehicleComponent
    {
        std::string vehicleType = "drone";
        float maxSpeed = 100.0f;
        float acceleration = 10.0f;
        float maneuverability = 5.0f;
        std::string controllerType = "manual";
    };

    /**
     * @brief Light component configuration
     */
    struct LightComponent
    {
        std::string lightType = "point";
        float color[3] = {1.0f, 1.0f, 1.0f};
        float intensity = 1.0f;
        float range = 10.0f;
    };

    /**
     * @brief Custom property for extensibility
     */
    struct CustomProperty
    {
        std::string name;
        std::string type;
        std::string value;
    };

    /**
     * @brief Complete entity configuration
     */
    struct EntityDefinition
    {
        std::string entityType;
        std::string name;
        std::string description;
        bool startActive = true;
        float lifetime = -1.0f;

        Transform transform;

        // Component pointers - parser creates these dynamically
        std::unique_ptr<RenderableComponent> renderable;
        std::unique_ptr<PhysicsComponent> physics;
        std::unique_ptr<AudioComponent> audio;
        std::unique_ptr<VehicleComponent> vehicle;
        std::unique_ptr<LightComponent> light;

        // Custom properties for extensibility
        std::vector<CustomProperty> customProperties;
    };

    /**
     * @brief Entity template configuration
     */
    struct EntityTemplate
    {
        std::string templateId;
        std::string category;
        std::string name;
        std::string description;
        EntityDefinition defaultDefinition;
    };

    /**
     * @brief Entity factory configuration
     */
    struct EntityFactoryConfiguration
    {
        bool validateComponents = true;
        bool logCreation = false;
        bool enablePooling = false;
        int maxPoolSize = 100;
        std::vector<EntityTemplate> templates;
        std::unordered_map<std::string, std::string> materialMappings;
        std::unordered_map<std::string, std::string> meshMappings;
        std::unordered_map<std::string, std::string> audioclipMappings;
    };

} // namespace EntityConfig

#endif // ENTITY_CONFIG_H



================================================================================
FILE: src\config\EntityConfigParser.cpp
================================================================================

#include "EntityConfigParser.h"
#include <fstream>
#include <sstream>
#include <iostream>
#include <stdexcept>
#include "../debug.h"

namespace EntityConfig
{

    EntityFactoryConfiguration EntityConfigParser::loadFromFile(const std::string &filePath)
    {
        std::ifstream file(filePath);
        if (!file.is_open())
        {
            if (Debug())
            {
                DEBUG_LOG("Warning: Cannot open entity factory config file '" << filePath << "', using defaults");
            }
            return EntityFactoryConfiguration{};
        }

        std::stringstream buffer;
        buffer << file.rdbuf();
        file.close();

        return loadFromString(buffer.str());
    }

    EntityFactoryConfiguration EntityConfigParser::loadFromString(const std::string &xmlContent)
    {
        EntityFactoryConfiguration config;

        try
        {
            parseSettings(xmlContent, config);
            parseTemplates(xmlContent, config);
            parseResourceMappings(xmlContent, config);

            if (Debug())
            {
                DEBUG_LOG("Entity factory configuration loaded successfully: "
                          << config.templates.size() << " templates");
            }
        }
        catch (const std::exception &e)
        {
            if (Debug())
            {
                DEBUG_LOG("Warning: Error parsing entity factory config: " << e.what() << ", using defaults");
            }
            config = EntityFactoryConfiguration{};
        }

        return config;
    }

    void EntityConfigParser::parseSettings(const std::string &xmlContent, EntityFactoryConfiguration &config)
    {
        config.validateComponents = toBool(extractValue(xmlContent, "validate_components"), true);
        config.logCreation = toBool(extractValue(xmlContent, "log_creation"), false);
        config.enablePooling = toBool(extractValue(xmlContent, "enable_pooling"), false);
        config.maxPoolSize = toInt(extractValue(xmlContent, "max_pool_size"), 100);
    }

    void EntityConfigParser::parseTemplates(const std::string &xmlContent, EntityFactoryConfiguration &config)
    {
        auto templateElements = extractTemplates(xmlContent);

        for (const auto &templateXml : templateElements)
        {
            try
            {
                EntityTemplate entityTemplate = parseTemplate(templateXml);
                config.templates.push_back(std::move(entityTemplate));
            }
            catch (const std::exception &e)
            {
                if (Debug())
                {
                    DEBUG_LOG("Warning: Failed to parse entity template: " << e.what());
                }
            }
        }
    }

    EntityTemplate EntityConfigParser::parseTemplate(const std::string &templateXml)
    {
        EntityTemplate entityTemplate;

        entityTemplate.templateId = extractAttribute(templateXml, "template", "id");
        entityTemplate.category = extractAttribute(templateXml, "template", "category");
        entityTemplate.name = extractValue(templateXml, "name");
        entityTemplate.description = extractValue(templateXml, "description");

        entityTemplate.defaultDefinition = parseEntityDefinition(templateXml);

        return entityTemplate;
    }

    EntityDefinition EntityConfigParser::parseEntityDefinition(const std::string &templateXml)
    {
        EntityDefinition definition;

        definition.entityType = extractValue(templateXml, "entity_type");
        definition.name = extractValue(templateXml, "name");
        definition.description = extractValue(templateXml, "description");
        definition.startActive = toBool(extractValue(templateXml, "start_active"), true);

        std::string lifetimeStr = extractValue(templateXml, "lifetime");
        definition.lifetime = lifetimeStr.empty() ? -1.0f : toFloat(lifetimeStr, -1.0f);

        // Parse transform
        definition.transform = parseTransform(templateXml);

        // Parse optional components
        if (templateXml.find("<renderable>") != std::string::npos)
        {
            definition.renderable = parseRenderableComponent(templateXml);
        }

        if (templateXml.find("<physics>") != std::string::npos)
        {
            definition.physics = parsePhysicsComponent(templateXml);
        }

        if (templateXml.find("<vehicle>") != std::string::npos)
        {
            definition.vehicle = parseVehicleComponent(templateXml);
        }

        return definition;
    }

    Transform EntityConfigParser::parseTransform(const std::string &xmlContent)
    {
        Transform transform;

        // Parse position
        std::string posX = extractAttribute(xmlContent, "position", "x");
        std::string posY = extractAttribute(xmlContent, "position", "y");
        std::string posZ = extractAttribute(xmlContent, "position", "z");

        transform.position.x = toFloat(posX, 0.0f);
        transform.position.y = toFloat(posY, 0.0f);
        transform.position.z = toFloat(posZ, 0.0f);

        // Parse rotation
        std::string rotX = extractAttribute(xmlContent, "rotation", "x");
        std::string rotY = extractAttribute(xmlContent, "rotation", "y");
        std::string rotZ = extractAttribute(xmlContent, "rotation", "z");
        std::string rotW = extractAttribute(xmlContent, "rotation", "w");

        transform.rotation.x = toFloat(rotX, 0.0f);
        transform.rotation.y = toFloat(rotY, 0.0f);
        transform.rotation.z = toFloat(rotZ, 0.0f);
        transform.rotation.w = toFloat(rotW, 1.0f);

        // Parse scale
        std::string scaleX = extractAttribute(xmlContent, "scale", "x");
        std::string scaleY = extractAttribute(xmlContent, "scale", "y");
        std::string scaleZ = extractAttribute(xmlContent, "scale", "z");

        transform.scale.x = toFloat(scaleX, 1.0f);
        transform.scale.y = toFloat(scaleY, 1.0f);
        transform.scale.z = toFloat(scaleZ, 1.0f);

        return transform;
    }

    std::unique_ptr<RenderableComponent> EntityConfigParser::parseRenderableComponent(const std::string &xmlContent)
    {
        auto renderable = std::make_unique<RenderableComponent>();

        renderable->meshId = extractValue(xmlContent, "mesh_id");
        renderable->materialId = extractValue(xmlContent, "material_id");
        renderable->isVisible = toBool(extractValue(xmlContent, "visible"), true);
        renderable->opacity = toFloat(extractValue(xmlContent, "opacity"), 1.0f);
        renderable->renderLayer = toInt(extractValue(xmlContent, "render_layer"), 0);

        return renderable;
    }

    std::unique_ptr<PhysicsComponent> EntityConfigParser::parsePhysicsComponent(const std::string &xmlContent)
    {
        auto physics = std::make_unique<PhysicsComponent>();

        physics->hasPhysics = toBool(extractValue(xmlContent, "has_physics"), true);
        physics->mass = toFloat(extractValue(xmlContent, "mass"), 1.0f);
        physics->friction = toFloat(extractValue(xmlContent, "friction"), 0.5f);
        physics->restitution = toFloat(extractValue(xmlContent, "restitution"), 0.3f);
        physics->isKinematic = toBool(extractValue(xmlContent, "is_kinematic"), false);
        physics->useGravity = toBool(extractValue(xmlContent, "use_gravity"), true);
        physics->colliderType = extractValue(xmlContent, "collider_type");
        if (physics->colliderType.empty())
        {
            physics->colliderType = "sphere";
        }

        return physics;
    }

    std::unique_ptr<VehicleComponent> EntityConfigParser::parseVehicleComponent(const std::string &xmlContent)
    {
        auto vehicle = std::make_unique<VehicleComponent>();

        vehicle->vehicleType = extractValue(xmlContent, "vehicle_type");
        if (vehicle->vehicleType.empty())
        {
            vehicle->vehicleType = "drone";
        }

        vehicle->maxSpeed = toFloat(extractValue(xmlContent, "max_speed"), 100.0f);
        vehicle->acceleration = toFloat(extractValue(xmlContent, "acceleration"), 10.0f);
        vehicle->maneuverability = toFloat(extractValue(xmlContent, "maneuverability"), 5.0f);

        vehicle->controllerType = extractValue(xmlContent, "controller_type");
        if (vehicle->controllerType.empty())
        {
            vehicle->controllerType = "manual";
        }

        return vehicle;
    }

    void EntityConfigParser::parseResourceMappings(const std::string &xmlContent, EntityFactoryConfiguration &config)
    {
        // Simple resource mapping parsing - could be enhanced
        // For now, just initialize empty mappings
        config.materialMappings.clear();
        config.meshMappings.clear();
        config.audioclipMappings.clear();
    }

    std::string EntityConfigParser::extractValue(const std::string &xmlContent, const std::string &elementName)
    {
        std::string startTag = "<" + elementName + ">";
        std::string endTag = "</" + elementName + ">";

        size_t startPos = xmlContent.find(startTag);
        if (startPos == std::string::npos)
        {
            return "";
        }

        startPos += startTag.length();
        size_t endPos = xmlContent.find(endTag, startPos);
        if (endPos == std::string::npos)
        {
            return "";
        }

        return xmlContent.substr(startPos, endPos - startPos);
    }

    std::string EntityConfigParser::extractAttribute(const std::string &xmlContent, const std::string &elementName, const std::string &attributeName)
    {
        std::string elementStart = "<" + elementName;
        size_t elementPos = xmlContent.find(elementStart);
        if (elementPos == std::string::npos)
        {
            return "";
        }

        size_t elementEnd = xmlContent.find(">", elementPos);
        if (elementEnd == std::string::npos)
        {
            return "";
        }

        std::string elementTag = xmlContent.substr(elementPos, elementEnd - elementPos + 1);

        std::string attrPattern = attributeName + "=\"";
        size_t attrPos = elementTag.find(attrPattern);
        if (attrPos == std::string::npos)
        {
            return "";
        }

        attrPos += attrPattern.length();
        size_t endPos = elementTag.find("\"", attrPos);
        if (endPos == std::string::npos)
        {
            return "";
        }

        return elementTag.substr(attrPos, endPos - attrPos);
    }

    std::vector<std::string> EntityConfigParser::extractTemplates(const std::string &xmlContent)
    {
        std::vector<std::string> templates;

        size_t pos = 0;
        while (true)
        {
            size_t startPos = xmlContent.find("<template", pos);
            if (startPos == std::string::npos)
            {
                break;
            }

            size_t endPos = xmlContent.find("</template>", startPos);
            if (endPos == std::string::npos)
            {
                break;
            }

            endPos += 11; // length of "</template>"
            std::string templateXml = xmlContent.substr(startPos, endPos - startPos);
            templates.push_back(templateXml);

            pos = endPos;
        }

        return templates;
    }

    int EntityConfigParser::toInt(const std::string &value, int defaultValue)
    {
        if (value.empty())
        {
            return defaultValue;
        }

        try
        {
            return std::stoi(value);
        }
        catch (const std::exception &)
        {
            return defaultValue;
        }
    }

    float EntityConfigParser::toFloat(const std::string &value, float defaultValue)
    {
        if (value.empty())
        {
            return defaultValue;
        }

        try
        {
            return std::stof(value);
        }
        catch (const std::exception &)
        {
            return defaultValue;
        }
    }

    bool EntityConfigParser::toBool(const std::string &value, bool defaultValue)
    {
        if (value.empty())
        {
            return defaultValue;
        }

        if (value == "true" || value == "1" || value == "yes")
        {
            return true;
        }

        if (value == "false" || value == "0" || value == "no")
        {
            return false;
        }

        return defaultValue;
    }

} // namespace EntityConfig




================================================================================
FILE: src\config\EntityConfigParser.h
================================================================================

#ifndef ENTITY_CONFIG_PARSER_H
#define ENTITY_CONFIG_PARSER_H

#include "EntityConfig.h"
#include <string>

namespace EntityConfig
{

    /**
     * @brief Parser for entity factory configuration XML files
     *
     * Loads entity templates, factory settings, and resource mappings
     * from XML configuration files for the EntityFactory system.
     */
    class EntityConfigParser
    {
    public:
        /**
         * @brief Load entity factory configuration from XML file
         *
         * @param filePath Path to entity_factory_config.json
         * @return EntityFactoryConfiguration Parsed configuration
         */
        static EntityFactoryConfiguration loadFromFile(const std::string &filePath);

        /**
         * @brief Load entity factory configuration from XML string
         *
         * @param xmlContent XML content as string
         * @return EntityFactoryConfiguration Parsed configuration
         */
        static EntityFactoryConfiguration loadFromString(const std::string &xmlContent);

    private:
        /**
         * @brief Parse factory settings from XML
         */
        static void parseSettings(const std::string &xmlContent, EntityFactoryConfiguration &config);

        /**
         * @brief Parse entity templates from XML
         */
        static void parseTemplates(const std::string &xmlContent, EntityFactoryConfiguration &config);

        /**
         * @brief Parse single entity template
         */
        static EntityTemplate parseTemplate(const std::string &templateXml);

        /**
         * @brief Parse entity definition from template XML
         */
        static EntityDefinition parseEntityDefinition(const std::string &templateXml);

        /**
         * @brief Parse transform from XML
         */
        static Transform parseTransform(const std::string &xmlContent);

        /**
         * @brief Parse renderable component from XML
         */
        static std::unique_ptr<RenderableComponent> parseRenderableComponent(const std::string &xmlContent);

        /**
         * @brief Parse physics component from XML
         */
        static std::unique_ptr<PhysicsComponent> parsePhysicsComponent(const std::string &xmlContent);

        /**
         * @brief Parse vehicle component from XML
         */
        static std::unique_ptr<VehicleComponent> parseVehicleComponent(const std::string &xmlContent);

        /**
         * @brief Parse resource mappings from XML
         */
        static void parseResourceMappings(const std::string &xmlContent, EntityFactoryConfiguration &config);

        /**
         * @brief Extract element value from XML
         */
        static std::string extractValue(const std::string &xmlContent, const std::string &elementName);

        /**
         * @brief Extract attribute value from XML element
         */
        static std::string extractAttribute(const std::string &xmlContent, const std::string &elementName, const std::string &attributeName);

        /**
         * @brief Extract all template elements from XML
         */
        static std::vector<std::string> extractTemplates(const std::string &xmlContent);

        /**
         * @brief Convert string to appropriate types with validation
         */
        static int toInt(const std::string &value, int defaultValue = 0);
        static float toFloat(const std::string &value, float defaultValue = 0.0f);
        static bool toBool(const std::string &value, bool defaultValue = false);
    };

} // namespace EntityConfig

#endif // ENTITY_CONFIG_PARSER_H


================================================================================
FILE: src\config\InputConfig.cpp
================================================================================

#include "InputConfig.h"
#include <algorithm>
#include <unordered_map>

namespace Input
{

    // Helper methods for InputConfiguration
    std::vector<InputBinding> InputConfiguration::getBindingsForAction(const std::string &action) const
    {
        std::vector<InputBinding> result;

        // Check key bindings
        for (const auto &binding : keyBindings)
        {
            if (binding.action == action)
            {
                result.push_back(binding);
            }
        }

        // Check mouse bindings
        for (const auto &binding : mouseBindings)
        {
            if (binding.action == action)
            {
                result.push_back(binding);
            }
        }

        // Check gamepad bindings
        for (const auto &binding : gamepadBindings)
        {
            if (binding.action == action)
            {
                result.push_back(binding);
            }
        }

        return result;
    }

    InputBinding *InputConfiguration::getBindingForKey(KeyCode key)
    {
        for (auto &binding : keyBindings)
        {
            if (binding.keyCode == key)
            {
                return &binding;
            }
        }
        return nullptr;
    }

    InputBinding *InputConfiguration::getBindingForMouseButton(MouseButton button)
    {
        for (auto &binding : mouseBindings)
        {
            if (binding.mouseButton == button)
            {
                return &binding;
            }
        }
        return nullptr;
    }

    InputBinding *InputConfiguration::getBindingForGamepadButton(GamepadButton button)
    {
        for (auto &binding : gamepadBindings)
        {
            if (binding.gamepadButton == button)
            {
                return &binding;
            }
        }
        return nullptr;
    }

    // String to enum conversion functions
    KeyCode stringToKeyCode(const std::string &str)
    {
        static const std::unordered_map<std::string, KeyCode> keyMap = {
            // Letters
            {"A", KeyCode::A},
            {"B", KeyCode::B},
            {"C", KeyCode::C},
            {"D", KeyCode::D},
            {"E", KeyCode::E},
            {"F", KeyCode::F},
            {"G", KeyCode::G},
            {"H", KeyCode::H},
            {"I", KeyCode::I},
            {"J", KeyCode::J},
            {"K", KeyCode::K},
            {"L", KeyCode::L},
            {"M", KeyCode::M},
            {"N", KeyCode::N},
            {"O", KeyCode::O},
            {"P", KeyCode::P},
            {"Q", KeyCode::Q},
            {"R", KeyCode::R},
            {"S", KeyCode::S},
            {"T", KeyCode::T},
            {"U", KeyCode::U},
            {"V", KeyCode::V},
            {"W", KeyCode::W},
            {"X", KeyCode::X},
            {"Y", KeyCode::Y},
            {"Z", KeyCode::Z},

            // Numbers
            {"0", KeyCode::Num0},
            {"1", KeyCode::Num1},
            {"2", KeyCode::Num2},
            {"3", KeyCode::Num3},
            {"4", KeyCode::Num4},
            {"5", KeyCode::Num5},
            {"6", KeyCode::Num6},
            {"7", KeyCode::Num7},
            {"8", KeyCode::Num8},
            {"9", KeyCode::Num9},

            // Function keys
            {"F1", KeyCode::F1},
            {"F2", KeyCode::F2},
            {"F3", KeyCode::F3},
            {"F4", KeyCode::F4},
            {"F5", KeyCode::F5},
            {"F6", KeyCode::F6},
            {"F7", KeyCode::F7},
            {"F8", KeyCode::F8},
            {"F9", KeyCode::F9},
            {"F10", KeyCode::F10},
            {"F11", KeyCode::F11},
            {"F12", KeyCode::F12},

            // Arrow keys
            {"LEFT", KeyCode::LEFT},
            {"UP", KeyCode::UP},
            {"RIGHT", KeyCode::RIGHT},
            {"DOWN", KeyCode::DOWN},

            // Special keys
            {"SPACE", KeyCode::SPACE},
            {"ENTER", KeyCode::ENTER},
            {"ESCAPE", KeyCode::ESCAPE},
            {"TAB", KeyCode::TAB},
            {"BACKSPACE", KeyCode::BACKSPACE},
            {"DELETE", KeyCode::KEY_DELETE},
            {"INSERT", KeyCode::INSERT},
            {"HOME", KeyCode::HOME},
            {"END", KeyCode::END},
            {"PAGE_UP", KeyCode::PAGE_UP},
            {"PAGE_DOWN", KeyCode::PAGE_DOWN},

            // Modifier keys
            {"LSHIFT", KeyCode::LSHIFT},
            {"RSHIFT", KeyCode::RSHIFT},
            {"LCTRL", KeyCode::LCTRL},
            {"RCTRL", KeyCode::RCTRL},
            {"LALT", KeyCode::LALT},
            {"RALT", KeyCode::RALT},

            // Special characters
            {"TILDE", KeyCode::TILDE},
            {"MINUS", KeyCode::MINUS},
            {"EQUALS", KeyCode::EQUALS},
            {"LBRACKET", KeyCode::LBRACKET},
            {"RBRACKET", KeyCode::RBRACKET},
            {"BACKSLASH", KeyCode::BACKSLASH},
            {"SEMICOLON", KeyCode::SEMICOLON},
            {"QUOTE", KeyCode::QUOTE},
            {"COMMA", KeyCode::COMMA},
            {"PERIOD", KeyCode::PERIOD},
            {"SLASH", KeyCode::SLASH}};

        auto it = keyMap.find(str);
        return (it != keyMap.end()) ? it->second : KeyCode::Unknown;
    }

    MouseButton stringToMouseButton(const std::string &str)
    {
        static const std::unordered_map<std::string, MouseButton> mouseMap = {
            {"LEFT", MouseButton::LEFT},
            {"RIGHT", MouseButton::RIGHT},
            {"MIDDLE", MouseButton::MIDDLE},
            {"X1", MouseButton::X1},
            {"X2", MouseButton::X2}};

        auto it = mouseMap.find(str);
        return (it != mouseMap.end()) ? it->second : MouseButton::Unknown;
    }

    GamepadButton stringToGamepadButton(const std::string &str)
    {
        static const std::unordered_map<std::string, GamepadButton> gamepadMap = {
            {"A", GamepadButton::A},
            {"B", GamepadButton::B},
            {"X", GamepadButton::X},
            {"Y", GamepadButton::Y},
            {"LEFT_SHOULDER", GamepadButton::LEFT_SHOULDER},
            {"RIGHT_SHOULDER", GamepadButton::RIGHT_SHOULDER},
            {"SELECT", GamepadButton::SELECT},
            {"START", GamepadButton::START},
            {"LEFT_STICK", GamepadButton::LEFT_STICK},
            {"RIGHT_STICK", GamepadButton::RIGHT_STICK},
            {"DPAD_UP", GamepadButton::DPAD_UP},
            {"DPAD_DOWN", GamepadButton::DPAD_DOWN},
            {"DPAD_LEFT", GamepadButton::DPAD_LEFT},
            {"DPAD_RIGHT", GamepadButton::DPAD_RIGHT}};

        auto it = gamepadMap.find(str);
        return (it != gamepadMap.end()) ? it->second : GamepadButton::Unknown;
    }

    GamepadAxis stringToGamepadAxis(const std::string &str)
    {
        static const std::unordered_map<std::string, GamepadAxis> axisMap = {
            {"LEFT_STICK_X", GamepadAxis::LEFT_STICK_X},
            {"LEFT_STICK_Y", GamepadAxis::LEFT_STICK_Y},
            {"RIGHT_STICK_X", GamepadAxis::RIGHT_STICK_X},
            {"RIGHT_STICK_Y", GamepadAxis::RIGHT_STICK_Y},
            {"LEFT_TRIGGER", GamepadAxis::LEFT_TRIGGER},
            {"RIGHT_TRIGGER", GamepadAxis::RIGHT_TRIGGER}};

        auto it = axisMap.find(str);
        return (it != axisMap.end()) ? it->second : GamepadAxis::Unknown;
    }

    InputDevice stringToInputDevice(const std::string &str)
    {
        static const std::unordered_map<std::string, InputDevice> deviceMap = {
            {"Keyboard", InputDevice::Keyboard},
            {"Mouse", InputDevice::Mouse},
            {"Gamepad", InputDevice::Gamepad}};

        auto it = deviceMap.find(str);
        return (it != deviceMap.end()) ? it->second : InputDevice::Unknown;
    }

    // Enum to string conversion functions
    std::string keyCodeToString(KeyCode key)
    {
        switch (key)
        {
        case KeyCode::A:
            return "A";
        case KeyCode::B:
            return "B";
        case KeyCode::C:
            return "C";
        case KeyCode::D:
            return "D";
        case KeyCode::E:
            return "E";
        case KeyCode::F:
            return "F";
        case KeyCode::G:
            return "G";
        case KeyCode::H:
            return "H";
        case KeyCode::I:
            return "I";
        case KeyCode::J:
            return "J";
        case KeyCode::K:
            return "K";
        case KeyCode::L:
            return "L";
        case KeyCode::M:
            return "M";
        case KeyCode::N:
            return "N";
        case KeyCode::O:
            return "O";
        case KeyCode::P:
            return "P";
        case KeyCode::Q:
            return "Q";
        case KeyCode::R:
            return "R";
        case KeyCode::S:
            return "S";
        case KeyCode::T:
            return "T";
        case KeyCode::U:
            return "U";
        case KeyCode::V:
            return "V";
        case KeyCode::W:
            return "W";
        case KeyCode::X:
            return "X";
        case KeyCode::Y:
            return "Y";
        case KeyCode::Z:
            return "Z";
        case KeyCode::F1:
            return "F1";
        case KeyCode::F2:
            return "F2";
        case KeyCode::F3:
            return "F3";
        case KeyCode::F4:
            return "F4";
        case KeyCode::F5:
            return "F5";
        case KeyCode::F6:
            return "F6";
        case KeyCode::F7:
            return "F7";
        case KeyCode::F8:
            return "F8";
        case KeyCode::F9:
            return "F9";
        case KeyCode::F10:
            return "F10";
        case KeyCode::F11:
            return "F11";
        case KeyCode::F12:
            return "F12";
        case KeyCode::LEFT:
            return "LEFT";
        case KeyCode::UP:
            return "UP";
        case KeyCode::RIGHT:
            return "RIGHT";
        case KeyCode::DOWN:
            return "DOWN";
        case KeyCode::SPACE:
            return "SPACE";
        case KeyCode::ENTER:
            return "ENTER";
        case KeyCode::ESCAPE:
            return "ESCAPE";
        case KeyCode::TILDE:
            return "TILDE";
        case KeyCode::LSHIFT:
            return "LSHIFT";
        case KeyCode::RSHIFT:
            return "RSHIFT";
        default:
            return "Unknown";
        }
    }

    std::string mouseButtonToString(MouseButton button)
    {
        switch (button)
        {
        case MouseButton::LEFT:
            return "LEFT";
        case MouseButton::RIGHT:
            return "RIGHT";
        case MouseButton::MIDDLE:
            return "MIDDLE";
        case MouseButton::X1:
            return "X1";
        case MouseButton::X2:
            return "X2";
        default:
            return "Unknown";
        }
    }

    std::string gamepadButtonToString(GamepadButton button)
    {
        switch (button)
        {
        case GamepadButton::A:
            return "A";
        case GamepadButton::B:
            return "B";
        case GamepadButton::X:
            return "X";
        case GamepadButton::Y:
            return "Y";
        case GamepadButton::SELECT:
            return "SELECT";
        case GamepadButton::START:
            return "START";
        default:
            return "Unknown";
        }
    }

    std::string gamepadAxisToString(GamepadAxis axis)
    {
        switch (axis)
        {
        case GamepadAxis::LEFT_STICK_X:
            return "LEFT_STICK_X";
        case GamepadAxis::LEFT_STICK_Y:
            return "LEFT_STICK_Y";
        case GamepadAxis::RIGHT_STICK_X:
            return "RIGHT_STICK_X";
        case GamepadAxis::RIGHT_STICK_Y:
            return "RIGHT_STICK_Y";
        case GamepadAxis::LEFT_TRIGGER:
            return "LEFT_TRIGGER";
        case GamepadAxis::RIGHT_TRIGGER:
            return "RIGHT_TRIGGER";
        default:
            return "Unknown";
        }
    }

    std::string inputDeviceToString(InputDevice device)
    {
        switch (device)
        {
        case InputDevice::Keyboard:
            return "Keyboard";
        case InputDevice::Mouse:
            return "Mouse";
        case InputDevice::Gamepad:
            return "Gamepad";
        default:
            return "Unknown";
        }
    }
}




================================================================================
FILE: src\config\InputConfig.h
================================================================================

#ifndef INPUT_CONFIG_H
#define INPUT_CONFIG_H

#include <string>
#include <unordered_map>
#include <vector>
#include <memory>

namespace Input
{

    // Key codes for keyboard input
    enum class KeyCode
    {
        Unknown = 0,

        // Letters
        A = 65,
        B,
        C,
        D,
        E,
        F,
        G,
        H,
        I,
        J,
        K,
        L,
        M,
        N,
        O,
        P,
        Q,
        R,
        S,
        T,
        U,
        V,
        W,
        X,
        Y,
        Z,

        // Numbers
        Num0 = 48,
        Num1,
        Num2,
        Num3,
        Num4,
        Num5,
        Num6,
        Num7,
        Num8,
        Num9,

        // Function keys
        F1 = 112,
        F2,
        F3,
        F4,
        F5,
        F6,
        F7,
        F8,
        F9,
        F10,
        F11,
        F12,

        // Arrow keys
        LEFT = 37,
        UP,
        RIGHT,
        DOWN,

        // Special keys
        SPACE = 32,
        ENTER = 13,
        ESCAPE = 27,
        TAB = 9,
        BACKSPACE = 8,
        KEY_DELETE = 46,
        INSERT = 45,
        HOME = 36,
        END = 35,
        PAGE_UP = 33,
        PAGE_DOWN = 34,

        // Modifier keys
        LSHIFT = 160,
        RSHIFT = 161,
        LCTRL = 162,
        RCTRL = 163,
        LALT = 164,
        RALT = 165,

        // Special characters
        TILDE = 192,
        MINUS = 189,
        EQUALS = 187,
        LBRACKET = 219,
        RBRACKET = 221,
        BACKSLASH = 220,
        SEMICOLON = 186,
        QUOTE = 222,
        COMMA = 188,
        PERIOD = 190,
        SLASH = 191
    };

    // Mouse buttons
    enum class MouseButton
    {
        Unknown = 0,
        LEFT = 1,
        RIGHT = 2,
        MIDDLE = 3,
        X1 = 4,
        X2 = 5
    };

    // Gamepad buttons (Xbox controller layout)
    enum class GamepadButton
    {
        Unknown = 0,
        A = 1,
        B = 2,
        X = 3,
        Y = 4,
        LEFT_SHOULDER = 5,
        RIGHT_SHOULDER = 6,
        SELECT = 7,
        START = 8,
        LEFT_STICK = 9,
        RIGHT_STICK = 10,
        DPAD_UP = 11,
        DPAD_DOWN = 12,
        DPAD_LEFT = 13,
        DPAD_RIGHT = 14
    };

    // Gamepad axes
    enum class GamepadAxis
    {
        Unknown = 0,
        LEFT_STICK_X = 1,
        LEFT_STICK_Y = 2,
        RIGHT_STICK_X = 3,
        RIGHT_STICK_Y = 4,
        LEFT_TRIGGER = 5,
        RIGHT_TRIGGER = 6
    };

    // Input devices
    enum class InputDevice
    {
        Unknown = 0,
        Keyboard,
        Mouse,
        Gamepad
    };

    // Input binding types
    enum class BindingType
    {
        Key,
        MouseButton,
        GamepadButton,
        GamepadAxis,
        GamepadTrigger
    };

    // Structure to hold a single input binding
    struct InputBinding
    {
        std::string action;
        BindingType type;
        InputDevice device;

        // Union for different input types
        union
        {
            KeyCode keyCode;
            MouseButton mouseButton;
            GamepadButton gamepadButton;
            GamepadAxis gamepadAxis;
        };

        // For axis bindings
        std::string direction; // "positive", "negative", or empty for full range

        InputBinding() : action(""), type(BindingType::Key), device(InputDevice::Unknown), keyCode(KeyCode::Unknown), direction("") {}
    };

    // Input context for different game states
    struct InputContext
    {
        std::string name;
        std::vector<std::string> activeBindings;
    };

    // Global input settings
    struct InputSettings
    {
        float mouseSensitivity = 1.0f;
        bool mouseInvertY = false;
        int keyboardRepeatDelay = 300;
        int keyboardRepeatRate = 50;
        float gamepadDeadzone = 0.1f;
        float gamepadSensitivity = 1.0f;
    };

    // Main input configuration structure
    struct InputConfiguration
    {
        InputSettings settings;
        std::vector<InputBinding> keyBindings;
        std::vector<InputBinding> mouseBindings;
        std::vector<InputBinding> gamepadBindings;
        std::vector<InputContext> contexts;
        std::string defaultContext = "Flight";

        // Helper methods
        std::vector<InputBinding> getBindingsForAction(const std::string &action) const;
        InputBinding *getBindingForKey(KeyCode key);
        InputBinding *getBindingForMouseButton(MouseButton button);
        InputBinding *getBindingForGamepadButton(GamepadButton button);
    };

    // Utility functions for string/enum conversion
    KeyCode stringToKeyCode(const std::string &str);
    MouseButton stringToMouseButton(const std::string &str);
    GamepadButton stringToGamepadButton(const std::string &str);
    GamepadAxis stringToGamepadAxis(const std::string &str);
    InputDevice stringToInputDevice(const std::string &str);

    std::string keyCodeToString(KeyCode key);
    std::string mouseButtonToString(MouseButton button);
    std::string gamepadButtonToString(GamepadButton button);
    std::string gamepadAxisToString(GamepadAxis axis);
    std::string inputDeviceToString(InputDevice device);
}

#endif



================================================================================
FILE: src\config\InputConfigParser.cpp
================================================================================

#include "InputConfigParser.h"
#include <iostream>
#include <fstream>
#include <sstream>
#include <algorithm>

namespace Input
{

    InputConfigParser::InputConfigParser(std::unique_ptr<IJsonParserUnified> jsonParser)
        : m_jsonParser(std::move(jsonParser))
    {
    }

    InputConfiguration InputConfigParser::loadFromFile(const std::string &filePath)
    {
        InputConfiguration config;

        try
        {
            if (!m_jsonParser->loadFile(filePath))
            {
                logError("Failed to open file: " + filePath);
                return config;
            }

            return loadFromString("");
        }
        catch (const std::exception &e)
        {
            logError("Exception while loading input config: " + std::string(e.what()));
            return config;
        }
    }

    InputConfiguration InputConfigParser::loadFromString(const std::string &jsonContent)
    {
        InputConfiguration config;

        try
        {
            if (!jsonContent.empty() && !m_jsonParser->loadString(jsonContent))
            {
                logError("Failed to parse JSON content");
                return config;
            }

            // Parse configuration sections
            parseSettings(config);
            parseKeyBindings(config);
            parseContexts(config);

            config.defaultContext = m_jsonParser->getString("defaultContext", "Flight");
        }
        catch (const std::exception &e)
        {
            logError("Exception while parsing input config JSON: " + std::string(e.what()));
        }

        return config;
    }

    bool InputConfigParser::saveToFile(const InputConfiguration &config, const std::string &filePath)
    {
        // TODO: Implement saving configuration back to JSON
        logError("Saving input configuration not yet implemented");
        return false;
    }

    void InputConfigParser::parseSettings(InputConfiguration &config)
    {
        config.settings.mouseSensitivity = m_jsonParser->getFloat("settings.mouseSensitivity", 1.0f);
        config.settings.mouseInvertY = m_jsonParser->getBool("settings.mouseInvertY", false);
        config.settings.keyboardRepeatDelay = m_jsonParser->getInt("settings.keyboardRepeatDelay", 300);
        config.settings.keyboardRepeatRate = m_jsonParser->getInt("settings.keyboardRepeatRate", 50);
        config.settings.gamepadDeadzone = m_jsonParser->getFloat("settings.gamepadDeadzone", 0.1f);
        config.settings.gamepadSensitivity = m_jsonParser->getFloat("settings.gamepadSensitivity", 1.0f);
    }

    void InputConfigParser::parseKeyBindings(InputConfiguration &config)
    {
        // Create default console toggle binding for now
        InputBinding consoleBinding;
        consoleBinding.action = "ToggleDebugConsole";
        consoleBinding.type = BindingType::Key;
        consoleBinding.device = InputDevice::Keyboard;
        consoleBinding.keyCode = KeyCode::TILDE;
        config.keyBindings.push_back(consoleBinding);
    }

    void InputConfigParser::parseMouseBindings(InputConfiguration &config)
    {
        // TODO: Implement mouse bindings parsing
    }

    void InputConfigParser::parseGamepadBindings(InputConfiguration &config)
    {
        // TODO: Implement gamepad bindings parsing
    }

    void InputConfigParser::parseContexts(InputConfiguration &config)
    {
        // Create default flight context
        InputContext flightContext;
        flightContext.name = "Flight";
        flightContext.activeBindings = {"ToggleDebugConsole"};
        config.contexts.push_back(flightContext);
    }

    InputBinding InputConfigParser::parseKeyBinding(const std::string &path, int index)
    {
        InputBinding binding;
        // TODO: Implement actual key binding parsing from JSON
        return binding;
    }

    InputBinding InputConfigParser::parseMouseBinding(const std::string &path, int index)
    {
        return InputBinding{};
    }

    InputBinding InputConfigParser::parseGamepadBinding(const std::string &path, int index)
    {
        return InputBinding{};
    }

    InputContext InputConfigParser::parseContext(const std::string &path, int index)
    {
        InputContext context;
        // TODO: Implement actual context parsing from JSON
        return context;
    }

    void InputConfigParser::logError(const std::string &message)
    {
        lastError_ = message;
        std::cerr << "InputConfigParser Error: " << message << std::endl;
    }

}


================================================================================
FILE: src\config\InputConfigParser.h
================================================================================

#ifndef INPUT_CONFIG_PARSER_H
#define INPUT_CONFIG_PARSER_H

#include "InputConfig.h"
#include "../utils/IJsonParserUnified.h"
#include <memory>
#include <string>

namespace Input
{

    /**
     * @class InputConfigParser
     * @brief Parser for input configuration JSON files
     *
     * This class handles loading and parsing input configuration JSON files,
     * converting them into InputConfiguration structures that can be used
     * by the InputSystem.
     */
    class InputConfigParser
    {
    public:
        /**
         * @brief Constructor
         * @param jsonParser JSON parser implementation to use
         */
        explicit InputConfigParser(std::unique_ptr<IJsonParserUnified> jsonParser);

        /**
         * @brief Load input configuration from file
         * @param filePath Path to the input configuration XML file
         * @return InputConfiguration structure, or empty config on failure
         */
        InputConfiguration loadFromFile(const std::string &filePath);

        /**
         * @brief Load input configuration from JSON string
         * @param jsonContent JSON content as string
         * @return InputConfiguration structure, or empty config on failure
         */
        InputConfiguration loadFromString(const std::string &jsonContent);

        /**
         * @brief Save input configuration to file
         * @param config Configuration to save
         * @param filePath Target file path
         * @return True if successful, false otherwise
         */
        bool saveToFile(const InputConfiguration &config, const std::string &filePath);

        /**
         * @brief Get the last error message
         * @return Last error message, empty if no error
         */
        const std::string &getLastError() const { return lastError_; }

    private:
        std::unique_ptr<IJsonParserUnified> m_jsonParser;
        std::string lastError_;

        // Helper methods for parsing different sections
        void parseSettings(InputConfiguration &config);
        void parseKeyBindings(InputConfiguration &config);
        void parseMouseBindings(InputConfiguration &config);
        void parseGamepadBindings(InputConfiguration &config);
        void parseContexts(InputConfiguration &config);

        // Helper methods for parsing individual elements
        InputBinding parseKeyBinding(const std::string &path, int index);
        InputBinding parseMouseBinding(const std::string &path, int index);
        InputBinding parseGamepadBinding(const std::string &path, int index);
        InputContext parseContext(const std::string &path, int index);

        // Utility methods
        void logError(const std::string &message);
    };
}

#endif


================================================================================
FILE: src\config\PhysicsConfig.h
================================================================================

#ifndef PHYSICS_CONFIG_H
#define PHYSICS_CONFIG_H

#include <string>

namespace Physics
{
    /**
     * @brief Physics engine configuration structure
     */
    struct PhysicsConfig
    {
        float fixedTimestep = 0.01f;      /**< Physics timestep in seconds */
        float gravity = 9.81f;            /**< Gravity constant in m/s² */
        bool enableCollisions = true;     /**< Whether collision detection is enabled */
        int iterationsPerStep = 1;        /**< Physics iterations per time step */
        int maxSubsteps = 10;             /**< Maximum physics substeps per frame */
        float seaLevelDensity = 1.225f;   /**< Air density at sea level in kg/m³ */
        float scaleHeight = 8000.0f;      /**< Atmospheric scale height in meters */
        float baseWindSpeed = 0.0f;       /**< Base wind speed in m/s */
        float turbulenceScale = 100.0f;   /**< Turbulence scale factor */
        float turbulenceIntensity = 0.1f; /**< Turbulence intensity (0-1) */
        int randomSeed = 12345;           /**< Random seed for procedural generators */
        float restitution = 0.5f;         /**< Collision elasticity (0-1) */
        float friction = 0.3f;            /**< Surface friction coefficient */

        PhysicsConfig() = default;
    };
}

#endif // PHYSICS_CONFIG_H



================================================================================
FILE: src\config\PhysicsConfigParser.cpp
================================================================================

/**
 * @file PhysicsConfigParser.cpp
 * @brief Implementation of physics configuration JSON parser.
 */

#include "PhysicsConfigParser.h"
#include <fstream>
#include <iostream>
#include <sstream>
#include <stdexcept>
#include "../debug.h"

/**
 * @brief Constructor
 * @param jsonParser JSON parser implementation to use
 */
PhysicsConfigParser::PhysicsConfigParser(std::unique_ptr<IJsonParserUnified> jsonParser)
    : m_jsonParser(std::move(jsonParser))
{
}

/**
 * @brief Load physics configuration from JSON file.
 *
 * Reads the specified JSON file and parses physics parameters from it.
 * If the file cannot be loaded or parsed, returns default configuration.
 *
 * @param configPath Path to the physics configuration JSON file
 * @return PhysicsConfig structure with loaded parameters, or defaults if loading fails
 */
Physics::PhysicsConfig PhysicsConfigParser::loadFromFile(const std::string &configPath)
{
    if (!m_jsonParser->loadFile(configPath))
    {
        std::cerr << "Warning: Could not open physics config file: " << configPath << std::endl;
        std::cerr << "Using default physics parameters." << std::endl;
        return Physics::PhysicsConfig{}; // Return default configuration
    }

    if (Debug())
    {
        DEBUG_LOG("Loading physics configuration from: " << configPath);
    }
    return parseConfig("");
}

/**
 * @brief Load physics configuration from JSON string.
 *
 * Parses physics parameters directly from the provided JSON string content.
 *
 * @param jsonContent JSON content as string
 * @return PhysicsConfig structure with loaded parameters, or defaults if parsing fails
 */
Physics::PhysicsConfig PhysicsConfigParser::loadFromString(const std::string &jsonContent)
{
    if (!m_jsonParser->loadString(jsonContent))
    {
        std::cerr << "Warning: Could not parse physics config JSON content." << std::endl;
        std::cerr << "Using default physics parameters." << std::endl;
        return Physics::PhysicsConfig{}; // Return default configuration
    }
    return parseConfig("");
}

/**
 * @brief Parse physics configuration from JSON content.
 *
 * Uses the JSON parser to extract physics parameters.
 * The JSON parser should already have loaded the content.
 *
 * @param jsonContent The JSON content to parse (unused - parser already loaded)
 * @return PhysicsConfig structure with parsed parameters
 */
Physics::PhysicsConfig PhysicsConfigParser::parseConfig(const std::string &jsonContent)
{
    Physics::PhysicsConfig config;

    try
    {
        // Parse Simulation Clock parameters
        config.fixedTimestep = m_jsonParser->getFloat("simulation.fixedTimestep", config.fixedTimestep);
        config.maxSubsteps = m_jsonParser->getInt("simulation.maxSubsteps", config.maxSubsteps);

        // Parse Air Density Model parameters
        config.seaLevelDensity = m_jsonParser->getFloat("airDensity.seaLevelDensity", config.seaLevelDensity);
        config.scaleHeight = m_jsonParser->getFloat("airDensity.scaleHeight", config.scaleHeight);

        // Parse Wind Model parameters
        config.baseWindSpeed = m_jsonParser->getFloat("wind.baseWindSpeed", config.baseWindSpeed);
        config.turbulenceScale = m_jsonParser->getFloat("wind.turbulenceScale", config.turbulenceScale);
        config.turbulenceIntensity = m_jsonParser->getFloat("wind.turbulenceIntensity", config.turbulenceIntensity);
        config.randomSeed = m_jsonParser->getInt("wind.randomSeed", config.randomSeed);

        // Parse Collision Resolver parameters
        config.restitution = m_jsonParser->getFloat("collision.restitution", config.restitution);
        config.friction = m_jsonParser->getFloat("collision.friction", config.friction);

        if (Debug())
        {
            DEBUG_LOG("Physics configuration loaded successfully:");
            DEBUG_LOG("  - Fixed timestep: " << config.fixedTimestep << "s (" << (1.0f / config.fixedTimestep) << " Hz)");
            DEBUG_LOG("  - Air density (sea level): " << config.seaLevelDensity << " kg/m³");
            DEBUG_LOG("  - Wind base speed: " << config.baseWindSpeed << " m/s");
            DEBUG_LOG("  - Collision restitution: " << config.restitution);
        }
    }
    catch (const std::exception &e)
    {
        std::cerr << "Error parsing physics configuration: " << e.what() << std::endl;
        std::cerr << "Using default physics parameters." << std::endl;
        config = Physics::PhysicsConfig{}; // Reset to defaults
    }

    return config;
}


================================================================================
FILE: src\config\PhysicsConfigParser.h
================================================================================

#ifndef PHYSICS_CONFIG_PARSER_H
#define PHYSICS_CONFIG_PARSER_H

#include "PhysicsConfig.h"
#include "../utils/IJsonParserUnified.h"
#include <string>
#include <memory>

/**
 * @brief Parser for physics configuration JSON files.
 *
 * This class provides functionality to load physics parameters from JSON
 * configuration files, replacing hardcoded values with configurable ones.
 */
class PhysicsConfigParser
{
public:
    /**
     * @brief Constructor
     * @param jsonParser JSON parser implementation to use
     */
    explicit PhysicsConfigParser(std::unique_ptr<IJsonParserUnified> jsonParser);

    /**
     * @brief Load physics configuration from JSON file.
     *
     * @param configPath Path to the physics configuration JSON file
     * @return PhysicsConfig structure with loaded parameters, or defaults if loading fails
     */
    Physics::PhysicsConfig loadFromFile(const std::string &configPath);

    /**
     * @brief Load physics configuration from JSON string.
     *
     * @param jsonContent JSON content as string
     * @return PhysicsConfig structure with loaded parameters, or defaults if parsing fails
     */
    Physics::PhysicsConfig loadFromString(const std::string &jsonContent);

private:
    std::unique_ptr<IJsonParserUnified> m_jsonParser;

    /**
     * @brief Parse physics configuration from JSON content.
     *
     * @param jsonContent The JSON content to parse
     * @return PhysicsConfig structure with parsed parameters
     */
    Physics::PhysicsConfig parseConfig(const std::string &jsonContent);

    /**
     * @brief Extract integer value from XML using simple string parsing.
     *
     * @param xml The XML content to search in
     * @param tagName The XML tag name to find
     * @param defaultValue Default value if tag is not found or parsing fails
     * @return Parsed integer value or default
     */
    static int extractIntValue(const std::string &xml, const std::string &tagName, int defaultValue);
};

#endif // PHYSICS_CONFIG_PARSER_H


================================================================================
FILE: src\config\RenderConfig.h
================================================================================

#ifndef RENDER_CONFIG_H
#define RENDER_CONFIG_H

#include <string>

namespace Render
{

    /**
     * @brief Color structure for rendering configuration
     */
    struct Color
    {
        int r = 255;
        int g = 255;
        int b = 255;
        int a = 255;

        Color() = default;
        Color(int red, int green, int blue, int alpha = 255)
            : r(red), g(green), b(blue), a(alpha) {}
    };

    /**
     * @brief 3D position structure
     */
    struct Position3D
    {
        float x = 0.0f;
        float y = 0.0f;
        float z = 0.0f;

        Position3D() = default;
        Position3D(float x_val, float y_val, float z_val)
            : x(x_val), y(y_val), z(z_val) {}
    };

    /**
     * @brief Display configuration settings
     */
    struct DisplayConfig
    {
        std::string windowTitle = "FPV Flight Sim";
        int defaultWidth = 800;
        int defaultHeight = 600;
        bool fullscreen = false;
        bool resizable = true;
        bool vsync = true;
    };

    /**
     * @brief Camera and projection settings
     */
    struct CameraConfig
    {
        float fieldOfView = 75.0f;
        float nearPlane = 0.1f;
        float farPlane = 10000.0f;
        Position3D initialPosition{0.0f, 100.0f, 0.0f};
        Position3D initialTarget{0.0f, 0.0f, 0.0f};
    };

    /**
     * @brief 2D projection settings for current basic renderer
     */
    struct Projection2DConfig
    {
        float screenCenterX = 400.0f;
        float screenCenterY = 300.0f;
        float worldToScreenScale = 0.01f;
        float defaultEntityRadius = 50.0f;
    };

    /**
     * @brief Console rendering configuration
     */
    struct ConsoleConfig
    {
        int height = 200;
        Color backgroundColor{0, 0, 0, 128};
        Color borderColor{255, 255, 255};
        int borderWidth = 2;
        Color textColor{255, 255, 255};
        Color titleColor{255, 255, 0};
        int marginX = 10;
        int marginY = 20;
    };

    /**
     * @brief Anti-aliasing configuration
     */
    struct AntiAliasingConfig
    {
        int msaaSamples = 4;
        bool enableFXAA = false;
    };

    /**
     * @brief Performance settings
     */
    struct PerformanceConfig
    {
        int maxFps = 60;
        bool enableFrameLimiting = true;
        float renderDistance = 1000.0f;
        float lodBias = 1.0f;
    };

    /**
     * @brief Quality settings
     */
    struct QualityConfig
    {
        std::string textureFiltering = "linear";
        int anisotropicFiltering = 8;
        std::string shadowQuality = "medium";
        std::string reflectionQuality = "low";
    };

    /**
     * @brief Debug rendering settings
     */
    struct DebugConfig
    {
        bool showFps = true;
        bool showWireframe = false;
        bool showBoundingBoxes = false;
        bool showCoordinateAxes = false;
    };

    /**
     * @brief Complete render configuration
     */
    struct RenderConfiguration
    {
        DisplayConfig display;
        CameraConfig camera;
        Projection2DConfig projection2D;
        ConsoleConfig console;
        AntiAliasingConfig antiAliasing;
        PerformanceConfig performance;
        QualityConfig quality;
        DebugConfig debug;

        // Helper methods for accessing commonly used values
        int getWindowWidth() const { return display.defaultWidth; }
        int getWindowHeight() const { return display.defaultHeight; }
        const std::string &getWindowTitle() const { return display.windowTitle; }

        float getScreenCenterX() const { return projection2D.screenCenterX; }
        float getScreenCenterY() const { return projection2D.screenCenterY; }
        float getWorldToScreenScale() const { return projection2D.worldToScreenScale; }
        float getDefaultEntityRadius() const { return projection2D.defaultEntityRadius; }

        int getConsoleHeight() const { return console.height; }
        const Color &getConsoleBackgroundColor() const { return console.backgroundColor; }
        const Color &getConsoleBorderColor() const { return console.borderColor; }
        int getConsoleBorderWidth() const { return console.borderWidth; }
        const Color &getConsoleTextColor() const { return console.textColor; }
        const Color &getConsoleTitleColor() const { return console.titleColor; }
        int getConsoleMarginX() const { return console.marginX; }
        int getConsoleMarginY() const { return console.marginY; }
    };

} // namespace Render

#endif // RENDER_CONFIG_H



================================================================================
FILE: src\config\RenderConfigParser.cpp
================================================================================

#include "RenderConfigParser.h"
#include <fstream>
#include <sstream>
#include <iostream>
#include <stdexcept>
#include "../debug.h"

namespace Render
{

    RenderConfigParser::RenderConfigParser(std::unique_ptr<IJsonParserUnified> jsonParser)
        : m_jsonParser(std::move(jsonParser))
    {
    }

    RenderConfiguration RenderConfigParser::loadFromFile(const std::string &filePath)
    {
        if (!m_jsonParser->loadFile(filePath))
        {
            if (Debug())
            {
                DEBUG_LOG("Warning: Cannot open render config file '" << filePath << "', using defaults");
            }
            return RenderConfiguration{};
        }

        return loadFromString("");
    }

    RenderConfiguration RenderConfigParser::loadFromString(const std::string &jsonContent)
    {
        if (!jsonContent.empty() && !m_jsonParser->loadString(jsonContent))
        {
            if (Debug())
            {
                DEBUG_LOG("Warning: Cannot parse render config JSON content, using defaults");
            }
            return RenderConfiguration{};
        }

        RenderConfiguration config;

        try
        {
            config.display = parseDisplayConfig();
            config.camera = parseCameraConfig();
            config.projection2D = parseProjection2DConfig();
            config.console = parseConsoleConfig();
            config.antiAliasing = parseAntiAliasingConfig();
            config.performance = parsePerformanceConfig();
            config.quality = parseQualityConfig();
            config.debug = parseDebugConfig();

            if (Debug())
            {
                DEBUG_LOG("Render configuration loaded successfully");
            }
        }
        catch (const std::exception &e)
        {
            if (Debug())
            {
                DEBUG_LOG("Warning: Error parsing render config: " << e.what() << ", using defaults");
            }
            config = RenderConfiguration{}; // Reset to defaults
        }

        return config;
    }

    DisplayConfig RenderConfigParser::parseDisplayConfig()
    {
        DisplayConfig config;

        config.windowTitle = m_jsonParser->getString("display.windowTitle", "FPV Flight Sim - Scene Loading...");
        config.defaultWidth = m_jsonParser->getInt("display.defaultWidth", 800);
        config.defaultHeight = m_jsonParser->getInt("display.defaultHeight", 600);
        config.fullscreen = m_jsonParser->getBool("display.fullscreen", false);
        config.resizable = m_jsonParser->getBool("display.resizable", true);
        config.vsync = m_jsonParser->getBool("display.vsync", true);

        return config;
    }

    CameraConfig RenderConfigParser::parseCameraConfig()
    {
        CameraConfig config;

        config.fieldOfView = m_jsonParser->getFloat("camera.fieldOfView", 75.0f);
        config.nearPlane = m_jsonParser->getFloat("camera.nearPlane", 0.1f);
        config.farPlane = m_jsonParser->getFloat("camera.farPlane", 10000.0f);
        config.initialPosition = parsePosition3D("camera.initialPosition");
        config.initialTarget = parsePosition3D("camera.initialTarget");

        return config;
    }

    Projection2DConfig RenderConfigParser::parseProjection2DConfig()
    {
        Projection2DConfig config;

        config.screenCenterX = m_jsonParser->getFloat("projection2D.screenCenterX", 400.0f);
        config.screenCenterY = m_jsonParser->getFloat("projection2D.screenCenterY", 300.0f);
        config.worldToScreenScale = m_jsonParser->getFloat("projection2D.worldToScreenScale", 0.01f);
        config.defaultEntityRadius = m_jsonParser->getFloat("projection2D.defaultEntityRadius", 50.0f);

        return config;
    }

    ConsoleConfig RenderConfigParser::parseConsoleConfig()
    {
        ConsoleConfig config;

        config.height = m_jsonParser->getInt("console.height", 200);
        config.backgroundColor = parseColor("console.backgroundColor");
        config.borderColor = parseColor("console.borderColor");
        config.borderWidth = m_jsonParser->getInt("console.borderWidth", 2);
        config.textColor = parseColor("console.textColor");
        config.titleColor = parseColor("console.titleColor");
        config.marginX = m_jsonParser->getInt("console.marginX", 10);
        config.marginY = m_jsonParser->getInt("console.marginY", 20);

        return config;
    }

    AntiAliasingConfig RenderConfigParser::parseAntiAliasingConfig()
    {
        AntiAliasingConfig config;

        config.msaaSamples = m_jsonParser->getInt("antiAliasing.msaaSamples", 4);
        config.enableFXAA = m_jsonParser->getBool("antiAliasing.enableFXAA", false);

        return config;
    }

    PerformanceConfig RenderConfigParser::parsePerformanceConfig()
    {
        PerformanceConfig config;

        config.maxFps = m_jsonParser->getInt("performance.maxFps", 60);
        config.enableFrameLimiting = m_jsonParser->getBool("performance.enableFrameLimiting", true);
        config.renderDistance = m_jsonParser->getFloat("performance.renderDistance", 1000.0f);
        config.lodBias = m_jsonParser->getFloat("performance.lodBias", 1.0f);

        return config;
    }

    QualityConfig RenderConfigParser::parseQualityConfig()
    {
        QualityConfig config;

        config.textureFiltering = m_jsonParser->getString("quality.textureFiltering", "linear");
        config.anisotropicFiltering = m_jsonParser->getInt("quality.anisotropicFiltering", 8);
        config.shadowQuality = m_jsonParser->getString("quality.shadowQuality", "medium");
        config.reflectionQuality = m_jsonParser->getString("quality.reflectionQuality", "low");

        return config;
    }

    DebugConfig RenderConfigParser::parseDebugConfig()
    {
        DebugConfig config;

        config.showFps = m_jsonParser->getBool("debug.showFps", true);
        config.showWireframe = m_jsonParser->getBool("debug.showWireframe", false);
        config.showBoundingBoxes = m_jsonParser->getBool("debug.showBoundingBoxes", false);
        config.showCoordinateAxes = m_jsonParser->getBool("debug.showCoordinateAxes", false);

        return config;
    }

    Color RenderConfigParser::parseColor(const std::string &path)
    {
        Color color;

        color.r = m_jsonParser->getInt(path + ".r", 255);
        color.g = m_jsonParser->getInt(path + ".g", 255);
        color.b = m_jsonParser->getInt(path + ".b", 255);
        color.a = m_jsonParser->getInt(path + ".a", 255);

        return color;
    }

    Position3D RenderConfigParser::parsePosition3D(const std::string &path)
    {
        Position3D position;

        position.x = m_jsonParser->getFloat(path + ".x", 0.0f);
        position.y = m_jsonParser->getFloat(path + ".y", 0.0f);
        position.z = m_jsonParser->getFloat(path + ".z", 0.0f);

        return position;
    }

} // namespace Render


================================================================================
FILE: src\config\RenderConfigParser.h
================================================================================

#ifndef RENDER_CONFIG_PARSER_H
#define RENDER_CONFIG_PARSER_H

#include "RenderConfig.h"
#include "../utils/IJsonParserUnified.h"
#include <string>
#include <memory>

namespace Render
{

    /**
     * @brief Parser for render configuration JSON files
     *
     * Loads render configuration from JSON files, providing configurable
     * rendering parameters instead of hardcoded values throughout the system.
     */
    class RenderConfigParser
    {
    public:
        /**
         * @brief Constructor
         * @param jsonParser JSON parser implementation to use
         */
        explicit RenderConfigParser(std::unique_ptr<IJsonParserUnified> jsonParser);

        /**
         * @brief Load render configuration from JSON file
         *
         * @param filePath Path to the render_config.json file
         * @return RenderConfiguration Parsed configuration with all render settings
         * @throws std::runtime_error if file cannot be loaded or parsed
         */
        RenderConfiguration loadFromFile(const std::string &filePath);

        /**
         * @brief Load render configuration from JSON string
         *
         * @param jsonContent JSON content as string
         * @return RenderConfiguration Parsed configuration
         * @throws std::runtime_error if JSON cannot be parsed
         */
        RenderConfiguration loadFromString(const std::string &jsonContent);

    private:
        std::unique_ptr<IJsonParserUnified> m_jsonParser;

        /**
         * @brief Parse display configuration from JSON content
         */
        DisplayConfig parseDisplayConfig();

        /**
         * @brief Parse camera configuration from JSON content
         */
        CameraConfig parseCameraConfig();

        /**
         * @brief Parse 2D projection configuration from JSON content
         */
        Projection2DConfig parseProjection2DConfig();

        /**
         * @brief Parse console configuration from JSON content
         */
        ConsoleConfig parseConsoleConfig();

        /**
         * @brief Parse anti-aliasing configuration from JSON content
         */
        AntiAliasingConfig parseAntiAliasingConfig();

        /**
         * @brief Parse performance configuration from JSON content
         */
        PerformanceConfig parsePerformanceConfig();

        /**
         * @brief Parse quality configuration from JSON content
         */
        QualityConfig parseQualityConfig();

        /**
         * @brief Parse debug configuration from JSON content
         */
        DebugConfig parseDebugConfig();

        /**
         * @brief Parse color from JSON object
         */
        Color parseColor(const std::string &path);

        /**
         * @brief Parse 3D position from JSON object
         */
        Position3D parsePosition3D(const std::string &path);
    };

} // namespace Render

#endif // RENDER_CONFIG_PARSER_H


================================================================================
FILE: src\config\SceneConfigParser_old.cpp
================================================================================

#include "SceneConfigParser.h"
#include <fstream>
#include <sstream>
#include <algorithm>
#include <chrono>
#include <regex>
#include <iostream>

namespace SceneConfig
{

    // ============================================================================
    // SceneConfigParser Implementation
    // ============================================================================

    SceneConfigParser::SceneConfigParser(const ParserConfig &config) : config_(config)
    {
        // Initialize default values and lookup tables
    }

    ParseResult SceneConfigParser::parseSceneFile(const std::string &filePath)
    {
        currentResult_ = ParseResult{};
        auto startTime = std::chrono::high_resolution_clock::now();

        // Read file content
        std::ifstream file(filePath);
        if (!file.is_open())
        {
            currentResult_.success = false;
            currentResult_.errorMessage = "Failed to open file: " + filePath;
            return currentResult_;
        }

        std::stringstream buffer;
        buffer << file.rdbuf();
        std::string xmlContent = buffer.str();
        file.close();

        // Parse the XML content
        auto result = parseSceneString(xmlContent);

        // If successful and asset resolution is enabled, resolve paths relative to the scene file
        if (result.success && config_.loadExternalAssets && result.scene)
        {
            // Simple base directory resolution - just get directory from file path
            size_t lastSlash = filePath.find_last_of("/\\");
            if (lastSlash != std::string::npos)
            {
                std::string baseDirectory = filePath.substr(0, lastSlash + 1);
                resolveAssetPaths(*result.scene, baseDirectory);
            }
        }

        auto endTime = std::chrono::high_resolution_clock::now();
        result.parseTimeMs = std::chrono::duration_cast<std::chrono::milliseconds>(endTime - startTime).count();

        return result;
    }

    ParseResult SceneConfigParser::parseSceneString(const std::string &xmlContent)
    {
        currentResult_ = ParseResult{};
        
        try
        {
            // For now, create a minimal scene for loading_indicator type
            auto scene = std::make_shared<Scene>();
            
            // Simple XML attribute extraction - basic implementation
            scene->id = extractAttributeSimple(xmlContent, "scene", "id", "default_scene");
            scene->name = extractAttributeSimple(xmlContent, "scene", "name", scene->id);
            scene->type = extractAttributeSimple(xmlContent, "scene", "type", "loading_indicator");
            scene->version = extractAttributeSimple(xmlContent, "scene", "version", "1.0");
            
            // For loading_indicator scenes, we don't need complex parsing
            // Just set up basic structure
            currentResult_.scene = scene;
            currentResult_.success = true;
            currentResult_.errorMessage = "";
            
        }
        catch (const std::exception &e)
        {
            currentResult_.success = false;
            currentResult_.errorMessage = std::string("Parse error: ") + e.what();
        }

        return currentResult_;
    }

    // Simple helper method for basic attribute extraction
    std::string SceneConfigParser::extractAttributeSimple(const std::string &xmlContent, 
                                                         const std::string &elementName,
                                                         const std::string &attributeName, 
                                                         const std::string &defaultValue)
    {
        // Simple regex-based attribute extraction
        std::string pattern = "<" + elementName + "[^>]*" + attributeName + "=\"([^\"]*?)\"";
        std::regex re(pattern);
        std::smatch match;
        
        if (std::regex_search(xmlContent, match, re))
        {
            return match[1].str();
        }
        
        return defaultValue;
    }

    bool SceneConfigParser::resolveAssetPaths(Scene &scene, const std::string &baseDirectory)
    {
        // Simple implementation - just return true for now
        // In a full implementation, this would resolve all asset paths relative to baseDirectory
        return true;
    }
        }

        auto endTime = std::chrono::high_resolution_clock::now();
        auto duration = std::chrono::duration_cast<std::chrono::milliseconds>(endTime - startTime);
        result.parseTimeMs = static_cast<float>(duration.count());

        return result;
    }

    ParseResult SceneConfigParser::parseSceneString(const std::string &xmlContent)
    {
        currentResult_ = ParseResult{};
        auto startTime = std::chrono::high_resolution_clock::now();

        // Schema validation if enabled
        if (config_.validateSchema && !config_.schemaPath.empty())
        {
            std::vector<std::string> validationErrors;
            if (!validateAgainstSchema(xmlContent, validationErrors))
            {
                currentResult_.success = false;
                currentResult_.errorMessage = "Schema validation failed";
                currentResult_.warnings = validationErrors;
                return currentResult_;
            }
        }

        // Parse the XML document
        auto result = parseXmlDocument(xmlContent);

        auto endTime = std::chrono::high_resolution_clock::now();
        auto duration = std::chrono::duration_cast<std::chrono::milliseconds>(endTime - startTime);
        result.parseTimeMs = static_cast<float>(duration.count());

        return result;
    }

    ParseResult SceneConfigParser::parseXmlDocument(const std::string &xmlContent)
    {
        // This is a simplified XML parser implementation
        // In a real implementation, you would use a proper XML library

        try
        {
            // Create a new scene
            auto scene = std::make_shared<Scene>();

            // Basic XML parsing simulation
            // In reality, this would use a proper XML DOM parser

            // Extract scene attributes
            scene->id = extractAttribute(xmlContent, "scene", "id", "default_scene");
            scene->name = extractAttribute(xmlContent, "scene", "name", scene->id);
            scene->type = extractAttribute(xmlContent, "scene", "type", "loading_indicator");
            scene->version = extractAttribute(xmlContent, "scene", "version", "1.0");

            // Parse materials section
            parseMaterialsSection(xmlContent, *scene);

            // Parse textures section
            parseTexturesSection(xmlContent, *scene);

            // Parse meshes section
            parseMeshesSection(xmlContent, *scene);

            // Parse animations section
            parseAnimationsSection(xmlContent, *scene);

            // Parse entities section
            parseEntitiesSection(xmlContent, *scene);

            // Parse cameras section
            parseCamerasSection(xmlContent, *scene);

            // Parse lights section
            parseLightsSection(xmlContent, *scene);

            // Parse environment settings
            parseEnvironmentSection(xmlContent, *scene);

            // Validate the parsed scene
            std::vector<std::string> validationErrors;
            if (!validateSceneStructure(*scene, validationErrors))
            {
                if (config_.strictParsing)
                {
                    currentResult_.success = false;
                    currentResult_.errorMessage = "Scene validation failed";
                    currentResult_.warnings = validationErrors;
                    return currentResult_;
                }
                else
                {
                    currentResult_.warnings.insert(currentResult_.warnings.end(),
                                                   validationErrors.begin(), validationErrors.end());
                }
            }

            // Success
            currentResult_.success = true;
            currentResult_.scene = scene;
            currentResult_.entitiesLoaded = scene->rootEntities.size();
            currentResult_.materialsLoaded = scene->materials.size();
            currentResult_.texturesLoaded = scene->textures.size();
            currentResult_.animationsLoaded = scene->animations.size();
        }
        catch (const std::exception &e)
        {
            currentResult_.success = false;
            currentResult_.errorMessage = "Parse error: " + std::string(e.what());
        }

        return currentResult_;
    }

    // ============================================================================
    // Section Parsing Methods
    // ============================================================================

    void SceneConfigParser::parseMaterialsSection(const std::string &xmlContent, Scene &scene)
    {
        // Extract materials section
        auto materialsSection = extractSection(xmlContent, "materials");
        if (materialsSection.empty())
            return;

        // Parse individual material elements
        auto materialElements = extractElements(materialsSection, "material");
        for (const auto &materialXml : materialElements)
        {
            Material material;

            material.id = extractAttribute(materialXml, "material", "id", generateMaterialId(materialCounter_++));
            material.name = extractAttribute(materialXml, "material", "name", material.id);
            material.shader = extractAttribute(materialXml, "material", "shader", "standard");

            // Parse colors
            material.diffuse = parseColorFromXml(materialXml, "diffuse", {1.0f, 1.0f, 1.0f, 1.0f});
            material.ambient = parseColorFromXml(materialXml, "ambient", {0.2f, 0.2f, 0.2f, 1.0f});
            material.specular = parseColorFromXml(materialXml, "specular", {1.0f, 1.0f, 1.0f, 1.0f});
            material.emissive = parseColorFromXml(materialXml, "emissive", {0.0f, 0.0f, 0.0f, 1.0f});

            // Parse material properties
            material.metallic = extractFloatAttribute(materialXml, "material", "metallic", 0.0f);
            material.roughness = extractFloatAttribute(materialXml, "material", "roughness", 0.5f);
            material.shininess = extractFloatAttribute(materialXml, "material", "shininess", 32.0f);
            material.opacity = extractFloatAttribute(materialXml, "material", "opacity", 1.0f);

            // Parse texture references
            material.diffuseTexture = extractAttribute(materialXml, "material", "diffuseTexture", "");
            material.normalTexture = extractAttribute(materialXml, "material", "normalTexture", "");
            material.specularTexture = extractAttribute(materialXml, "material", "specularTexture", "");
            material.emissiveTexture = extractAttribute(materialXml, "material", "emissiveTexture", "");

            // Parse cel-shading properties
            material.celShading = extractBoolAttribute(materialXml, "material", "celShading", false);
            if (material.celShading)
            {
                material.celLevels = extractUintAttribute(materialXml, "material", "celLevels", 3);
                material.celThreshold = extractFloatAttribute(materialXml, "material", "celThreshold", 0.5f);
                material.celOutlineColor = parseColorFromXml(materialXml, "celOutlineColor", {0.0f, 0.0f, 0.0f, 1.0f});
                material.celOutlineWidth = extractFloatAttribute(materialXml, "material", "celOutlineWidth", 0.01f);
            }

            // Parse custom properties
            auto propertiesSection = extractSection(materialXml, "properties");
            material.customProperties = parsePropertiesMap(propertiesSection);

            scene.materials.push_back(material);
            materialLookup_[material.id] = material;
        }
    }

    void SceneConfigParser::parseTexturesSection(const std::string &xmlContent, Scene &scene)
    {
        auto texturesSection = extractSection(xmlContent, "textures");
        if (texturesSection.empty())
            return;

        auto textureElements = extractElements(texturesSection, "texture");
        for (const auto &textureXml : textureElements)
        {
            ProceduralTexture texture;

            texture.id = extractAttribute(textureXml, "texture", "id", generateTextureId(textureCounter_++));
            texture.name = extractAttribute(textureXml, "texture", "name", texture.id);
            texture.type = extractAttribute(textureXml, "texture", "type", "noise");
            texture.width = extractUintAttribute(textureXml, "texture", "width", 256);
            texture.height = extractUintAttribute(textureXml, "texture", "height", 256);
            texture.format = extractAttribute(textureXml, "texture", "format", "RGBA");

            // Parse generation parameters
            auto parametersSection = extractSection(textureXml, "parameters");
            texture.parameters = parsePropertiesMap(parametersSection);

            scene.textures.push_back(texture);
            textureLookup_[texture.id] = texture;
        }
    }

    void SceneConfigParser::parseMeshesSection(const std::string &xmlContent, Scene &scene)
    {
        auto meshesSection = extractSection(xmlContent, "meshes");
        if (meshesSection.empty())
            return;

        auto meshElements = extractElements(meshesSection, "compound");
        for (const auto &meshXml : meshElements)
        {
            CompoundMesh mesh;

            mesh.id = extractAttribute(meshXml, "compound", "id", generateEntityId("mesh", entityCounter_++));
            mesh.name = extractAttribute(meshXml, "compound", "name", mesh.id);
            mesh.materialId = extractAttribute(meshXml, "compound", "material", config_.defaultMaterial);

            // Parse base transform
            auto transformSection = extractSection(meshXml, "transform");
            mesh.baseTransform = parseTransformFromXml(transformSection);

            // Parse animation settings
            mesh.animated = extractBoolAttribute(meshXml, "compound", "animated", false);
            if (mesh.animated)
            {
                mesh.animationType = extractAttribute(meshXml, "compound", "animationType", "");
                auto animParamsSection = extractSection(meshXml, "animationParams");
                mesh.animationParams = parsePropertiesMap(animParamsSection);
            }

            // Parse parts
            auto partsSection = extractSection(meshXml, "parts");
            auto partElements = extractElements(partsSection, "part");
            for (const auto &partXml : partElements)
            {
                VoxelPrimitive part;

                std::string typeStr = extractAttribute(partXml, "part", "type", "cube");
                part.type = Utils::stringToVoxelType(typeStr);

                part.size = extractFloatAttribute(partXml, "part", "size", 1.0f);
                part.radius = extractFloatAttribute(partXml, "part", "radius", 0.5f);
                part.height = extractFloatAttribute(partXml, "part", "height", 1.0f);
                part.subdivisions = extractUintAttribute(partXml, "part", "subdivisions", 1);
                part.materialId = extractAttribute(partXml, "part", "material", mesh.materialId);

                // Parse part transform
                auto partTransformSection = extractSection(partXml, "transform");
                part.transform = parseTransformFromXml(partTransformSection);

                // Parse part animation
                part.animated = extractBoolAttribute(partXml, "part", "animated", false);
                if (part.animated)
                {
                    part.animationType = extractAttribute(partXml, "part", "animationType", "");
                    auto partAnimParamsSection = extractSection(partXml, "animationParams");
                    part.animationParams = parsePropertiesMap(partAnimParamsSection);
                }

                mesh.parts.push_back(part);
            }

            scene.meshes.push_back(mesh);
        }
    }

    void SceneConfigParser::parseAnimationsSection(const std::string &xmlContent, Scene &scene)
    {
        auto animationsSection = extractSection(xmlContent, "animations");
        if (animationsSection.empty())
            return;

        auto animationElements = extractElements(animationsSection, "animation");
        for (const auto &animationXml : animationElements)
        {
            Animation animation;

            animation.id = extractAttribute(animationXml, "animation", "id", generateAnimationId(animationCounter_++));
            animation.name = extractAttribute(animationXml, "animation", "name", animation.id);
            animation.type = extractAttribute(animationXml, "animation", "type", "transform");
            animation.duration = extractFloatAttribute(animationXml, "animation", "duration", 1.0f);
            animation.loop = extractBoolAttribute(animationXml, "animation", "loop", true);
            animation.autoStart = extractBoolAttribute(animationXml, "animation", "autoStart", true);

            animation.targetType = extractAttribute(animationXml, "animation", "targetType", "entity");
            animation.targetId = extractAttribute(animationXml, "animation", "targetId", "");

            // Parse animation parameters
            auto parametersSection = extractSection(animationXml, "parameters");
            animation.parameters = parsePropertiesMap(parametersSection);

            // Parse keyframes if present
            auto keyframesSection = extractSection(animationXml, "keyframes");
            auto keyframeElements = extractElements(keyframesSection, "keyframe");
            for (const auto &keyframeXml : keyframeElements)
            {
                Animation::Keyframe keyframe;
                keyframe.time = extractFloatAttribute(keyframeXml, "keyframe", "time", 0.0f);

                auto valuesSection = extractSection(keyframeXml, "values");
                keyframe.values = parsePropertiesMap(valuesSection);

                animation.keyframes.push_back(keyframe);
            }

            scene.animations.push_back(animation);
            animationLookup_[animation.id] = animation;
        }
    }

    void SceneConfigParser::parseEntitiesSection(const std::string &xmlContent, Scene &scene)
    {
        auto entitiesSection = extractSection(xmlContent, "entities");
        if (entitiesSection.empty())
            return;

        auto entityElements = extractElements(entitiesSection, "entity");
        for (const auto &entityXml : entityElements)
        {
            auto entity = parseEntityFromXml(entityXml);
            if (entity)
            {
                scene.rootEntities.push_back(entity);
                entityLookup_[entity->id] = entity;
            }
        }
    }

    void SceneConfigParser::parseCamerasSection(const std::string &xmlContent, Scene &scene)
    {
        auto camerasSection = extractSection(xmlContent, "cameras");
        if (camerasSection.empty())
        {
            // Create default camera if none specified
            Camera defaultCamera = createCamera("main_camera");
            scene.cameras.push_back(defaultCamera);
            return;
        }

        auto cameraElements = extractElements(camerasSection, "camera");
        for (const auto &cameraXml : cameraElements)
        {
            Camera camera;

            camera.id = extractAttribute(cameraXml, "camera", "id", "camera_" + std::to_string(scene.cameras.size()));

            std::string typeStr = extractAttribute(cameraXml, "camera", "type", "perspective");
            camera.type = Utils::stringToCameraType(typeStr);

            // Parse transform
            auto transformSection = extractSection(cameraXml, "transform");
            camera.transform = parseTransformFromXml(transformSection);

            // Parse camera parameters
            if (camera.type == Camera::Type::Perspective)
            {
                camera.fov = extractFloatAttribute(cameraXml, "camera", "fov", 45.0f);
                camera.nearPlane = extractFloatAttribute(cameraXml, "camera", "nearPlane", 0.1f);
                camera.farPlane = extractFloatAttribute(cameraXml, "camera", "farPlane", 1000.0f);
            }
            else
            {
                camera.left = extractFloatAttribute(cameraXml, "camera", "left", -10.0f);
                camera.right = extractFloatAttribute(cameraXml, "camera", "right", 10.0f);
                camera.bottom = extractFloatAttribute(cameraXml, "camera", "bottom", -10.0f);
                camera.top = extractFloatAttribute(cameraXml, "camera", "top", 10.0f);
                camera.nearPlane = extractFloatAttribute(cameraXml, "camera", "nearPlane", 0.1f);
                camera.farPlane = extractFloatAttribute(cameraXml, "camera", "farPlane", 1000.0f);
            }

            // Parse animation
            camera.animated = extractBoolAttribute(cameraXml, "camera", "animated", false);
            if (camera.animated)
            {
                camera.animationId = extractAttribute(cameraXml, "camera", "animationId", "");
            }

            scene.cameras.push_back(camera);
        }
    }

    void SceneConfigParser::parseLightsSection(const std::string &xmlContent, Scene &scene)
    {
        auto lightsSection = extractSection(xmlContent, "lights");
        if (lightsSection.empty())
            return;

        auto lightElements = extractElements(lightsSection, "light");
        for (const auto &lightXml : lightElements)
        {
            Light light;

            light.id = extractAttribute(lightXml, "light", "id", "light_" + std::to_string(scene.lights.size()));
            light.name = extractAttribute(lightXml, "light", "name", light.id);

            std::string typeStr = extractAttribute(lightXml, "light", "type", "directional");
            light.type = Utils::stringToLightType(typeStr);

            // Parse transform
            auto transformSection = extractSection(lightXml, "transform");
            light.transform = parseTransformFromXml(transformSection);

            // Parse light properties
            light.color = parseColorFromXml(lightXml, "color", {1.0f, 1.0f, 1.0f, 1.0f});
            light.intensity = extractFloatAttribute(lightXml, "light", "intensity", 1.0f);

            if (light.type == Light::Type::Point || light.type == Light::Type::Spot)
            {
                light.range = extractFloatAttribute(lightXml, "light", "range", 10.0f);
                light.constantAttenuation = extractFloatAttribute(lightXml, "light", "constantAttenuation", 1.0f);
                light.linearAttenuation = extractFloatAttribute(lightXml, "light", "linearAttenuation", 0.09f);
                light.quadraticAttenuation = extractFloatAttribute(lightXml, "light", "quadraticAttenuation", 0.032f);
            }

            if (light.type == Light::Type::Spot)
            {
                light.innerCone = extractFloatAttribute(lightXml, "light", "innerCone", 30.0f);
                light.outerCone = extractFloatAttribute(lightXml, "light", "outerCone", 45.0f);
            }

            // Parse animation
            light.animated = extractBoolAttribute(lightXml, "light", "animated", false);
            if (light.animated)
            {
                light.animationId = extractAttribute(lightXml, "light", "animationId", "");
            }

            scene.lights.push_back(light);
        }
    }

    void SceneConfigParser::parseEnvironmentSection(const std::string &xmlContent, Scene &scene)
    {
        auto environmentSection = extractSection(xmlContent, "environment");
        if (environmentSection.empty())
            return;

        // Parse background color
        scene.backgroundColor = parseColorFromXml(environmentSection, "backgroundColor", {0.0f, 0.0f, 0.0f, 1.0f});
        scene.ambientLight = parseColorFromXml(environmentSection, "ambientLight", {0.2f, 0.2f, 0.2f, 1.0f});

        // Parse skybox
        scene.skybox = extractAttribute(environmentSection, "environment", "skybox", "");

        // Parse rendering settings
        scene.enableShadows = extractBoolAttribute(environmentSection, "environment", "enableShadows", true);
        scene.enableBloom = extractBoolAttribute(environmentSection, "environment", "enableBloom", false);
        scene.enableSSAO = extractBoolAttribute(environmentSection, "environment", "enableSSAO", false);
        scene.gamma = extractFloatAttribute(environmentSection, "environment", "gamma", 2.2f);
        scene.exposure = extractFloatAttribute(environmentSection, "environment", "exposure", 1.0f);
    }

    // ============================================================================
    // Utility Methods Implementation (simplified for brevity)
    // ============================================================================

    std::string SceneConfigParser::extractAttribute(const std::string &xml, const std::string &element, const std::string &attribute, const std::string &defaultValue)
    {
        // Simplified attribute extraction - in real implementation use proper XML parser
        std::regex pattern(element + R"(\s+[^>]*)" + attribute + R"(\s*=\s*"([^"]*)") ");
            std::smatch match;
        if (std::regex_search(xml, match, pattern))
        {
            return match[1].str();
        }
        return defaultValue;
    }

    float SceneConfigParser::extractFloatAttribute(const std::string &xml, const std::string &element, const std::string &attribute, float defaultValue)
    {
        std::string value = extractAttribute(xml, element, attribute, "");
        if (value.empty())
            return defaultValue;
        try
        {
            return std::stof(value);
        }
        catch (...)
        {
            return defaultValue;
        }
    }

    uint32_t SceneConfigParser::extractUintAttribute(const std::string &xml, const std::string &element, const std::string &attribute, uint32_t defaultValue)
    {
        std::string value = extractAttribute(xml, element, attribute, "");
        if (value.empty())
            return defaultValue;
        try
        {
            return static_cast<uint32_t>(std::stoul(value));
        }
        catch (...)
        {
            return defaultValue;
        }
    }

    bool SceneConfigParser::extractBoolAttribute(const std::string &xml, const std::string &element, const std::string &attribute, bool defaultValue)
    {
        std::string value = extractAttribute(xml, element, attribute, "");
        if (value.empty())
            return defaultValue;
        std::transform(value.begin(), value.end(), value.begin(), ::tolower);
        return (value == "true" || value == "1" || value == "yes");
    }

    Material::Color SceneConfigParser::parseColorFromXml(const std::string &xml, const std::string &colorElement, const Material::Color &defaultValue)
    {
        // Simplified color parsing
        std::string colorStr = extractAttribute(xml, colorElement, "value", "");
        if (colorStr.empty())
            return defaultValue;
        return Utils::parseColorString(colorStr);
    }

    Transform SceneConfigParser::parseTransformFromXml(const std::string &xml)
    {
        Transform transform;

        // Parse position
        transform.position.x = extractFloatAttribute(xml, "position", "x", 0.0f);
        transform.position.y = extractFloatAttribute(xml, "position", "y", 0.0f);
        transform.position.z = extractFloatAttribute(xml, "position", "z", 0.0f);

        // Parse rotation (quaternion)
        transform.rotation.x = extractFloatAttribute(xml, "rotation", "x", 0.0f);
        transform.rotation.y = extractFloatAttribute(xml, "rotation", "y", 0.0f);
        transform.rotation.z = extractFloatAttribute(xml, "rotation", "z", 0.0f);
        transform.rotation.w = extractFloatAttribute(xml, "rotation", "w", 1.0f);

        // Parse scale
        transform.scale.x = extractFloatAttribute(xml, "scale", "x", 1.0f);
        transform.scale.y = extractFloatAttribute(xml, "scale", "y", 1.0f);
        transform.scale.z = extractFloatAttribute(xml, "scale", "z", 1.0f);

        return transform;
    }

    std::shared_ptr<Entity> SceneConfigParser::parseEntityFromXml(const std::string &xml)
    {
        auto entity = std::make_shared<Entity>();

        entity->id = extractAttribute(xml, "entity", "id", generateEntityId("entity", entityCounter_++));
        entity->name = extractAttribute(xml, "entity", "name", entity->id);
        entity->type = extractAttribute(xml, "entity", "type", "mesh");

        // Parse transform
        auto transformSection = extractSection(xml, "transform");
        entity->transform = parseTransformFromXml(transformSection);

        // Parse component references
        entity->meshId = extractAttribute(xml, "entity", "mesh", "");
        entity->materialId = extractAttribute(xml, "entity", "material", "");
        entity->lightId = extractAttribute(xml, "entity", "light", "");
        entity->cameraId = extractAttribute(xml, "entity", "camera", "");

        // Parse animation
        entity->animated = extractBoolAttribute(xml, "entity", "animated", false);
        if (entity->animated)
        {
            entity->animationId = extractAttribute(xml, "entity", "animationId", "");
        }

        // Parse properties
        auto propertiesSection = extractSection(xml, "properties");
        entity->properties = parsePropertiesMap(propertiesSection);

        // Parse child entities
        auto childrenSection = extractSection(xml, "children");
        auto childElements = extractElements(childrenSection, "entity");
        for (const auto &childXml : childElements)
        {
            auto child = parseEntityFromXml(childXml);
            if (child)
            {
                entity->children.push_back(child);
                entityLookup_[child->id] = child;
            }
        }

        return entity;
    }

    std::map<std::string, std::string> SceneConfigParser::parsePropertiesMap(const std::string &xml)
    {
        std::map<std::string, std::string> properties;

        // Extract property elements
        auto propertyElements = extractElements(xml, "property");
        for (const auto &propertyXml : propertyElements)
        {
            std::string name = extractAttribute(propertyXml, "property", "name", "");
            std::string value = extractAttribute(propertyXml, "property", "value", "");
            if (!name.empty())
            {
                properties[name] = value;
            }
        }

        return properties;
    }

    std::string SceneConfigParser::extractSection(const std::string &xml, const std::string &sectionName)
    {
        // Simplified section extraction
        std::regex pattern("<" + sectionName + R"(\s*[^>]*>.*?</)" + sectionName + ">");
        std::smatch match;
        if (std::regex_search(xml, match, pattern))
        {
            return match[0].str();
        }
        return "";
    }

    std::vector<std::string> SceneConfigParser::extractElements(const std::string &xml, const std::string &elementName)
    {
        std::vector<std::string> elements;
        std::regex pattern("<" + elementName + R"(\s*[^>]*>.*?</)" + elementName + ">");
        std::sregex_iterator iter(xml.begin(), xml.end(), pattern);
        std::sregex_iterator end;

        for ( iter != end; ++iter)
        {
            elements.push_back(iter->str());
        }

        return elements;
    }

    // ============================================================================
    // ID Generation Methods
    // ============================================================================

    std::string SceneConfigParser::generateEntityId(const std::string &type, uint32_t index)
    {
        return type + "_" + std::to_string(index);
    }

    std::string SceneConfigParser::generateMaterialId(uint32_t index)
    {
        return "material_" + std::to_string(index);
    }

    std::string SceneConfigParser::generateTextureId(uint32_t index)
    {
        return "texture_" + std::to_string(index);
    }

    std::string SceneConfigParser::generateAnimationId(uint32_t index)
    {
        return "animation_" + std::to_string(index);
    }

    // ============================================================================
    // Validation Methods (simplified)
    // ============================================================================

    bool SceneConfigParser::validateSceneStructure(const Scene &scene, std::vector<std::string> &errors)
    {
        bool isValid = true;

        // Check for required elements
        if (scene.cameras.empty())
        {
            errors.push_back("Scene must have at least one camera");
            isValid = false;
        }

        // Validate entity references
        for (const auto &entity : scene.rootEntities)
        {
            if (!validateEntityReferences(*entity, scene, errors))
            {
                isValid = false;
            }
        }

        return isValid;
    }

    bool SceneConfigParser::validateEntityReferences(const Entity &entity, const Scene &scene, std::vector<std::string> &errors)
    {
        bool isValid = true;

        // Check mesh reference
        if (!entity.meshId.empty())
        {
            bool found = false;
            for (const auto &mesh : scene.meshes)
            {
                if (mesh.id == entity.meshId)
                {
                    found = true;
                    break;
                }
            }
            if (!found)
            {
                errors.push_back("Entity '" + entity.id + "' references unknown mesh '" + entity.meshId + "'");
                isValid = false;
            }
        }

        // Check material reference
        if (!entity.materialId.empty())
        {
            bool found = false;
            for (const auto &material : scene.materials)
            {
                if (material.id == entity.materialId)
                {
                    found = true;
                    break;
                }
            }
            if (!found)
            {
                errors.push_back("Entity '" + entity.id + "' references unknown material '" + entity.materialId + "'");
                isValid = false;
            }
        }

        // Validate children recursively
        for (const auto &child : entity.children)
        {
            if (!validateEntityReferences(*child, scene, errors))
            {
                isValid = false;
            }
        }

        return isValid;
    }

    // ============================================================================
    // Static Factory Methods
    // ============================================================================

    std::shared_ptr<Entity> SceneConfigParser::createEntity(const std::string &id, const std::string &type)
    {
        auto entity = std::make_shared<Entity>();
        entity->id = id;
        entity->name = id;
        entity->type = type;
        return entity;
    }

    Material SceneConfigParser::createMaterial(const std::string &id, const std::string &shader)
    {
        Material material;
        material.id = id;
        material.name = id;
        material.shader = shader;
        return material;
    }

    ProceduralTexture SceneConfigParser::createTexture(const std::string &id, const std::string &type)
    {
        ProceduralTexture texture;
        texture.id = id;
        texture.name = id;
        texture.type = type;
        return texture;
    }

    Animation SceneConfigParser::createAnimation(const std::string &id, const std::string &type)
    {
        Animation animation;
        animation.id = id;
        animation.name = id;
        animation.type = type;
        return animation;
    }

    Camera SceneConfigParser::createCamera(const std::string &id)
    {
        Camera camera;
        camera.id = id;
        // Set default camera position (looking at origin from a distance)
        camera.transform.position = {0.0f, 0.0f, 5.0f};
        return camera;
    }

    Light SceneConfigParser::createLight(const std::string &id, Light::Type type)
    {
        Light light;
        light.id = id;
        light.name = id;
        light.type = type;
        return light;
    }

} // namespace SceneConfig




================================================================================
FILE: src\config\SceneConfigParser_simple.cpp
================================================================================

#include "SceneConfigParser.h"
#include <fstream>
#include <sstream>
#include <algorithm>
#include <chrono>
#include <regex>
#include <iostream>

namespace SceneConfig
{

    // ============================================================================
    // SceneConfigParser Implementation
    // ============================================================================

    SceneConfigParser::SceneConfigParser(const ParserConfig &config) : config_(config)
    {
        // Initialize default values and lookup tables
    }

    ParseResult SceneConfigParser::parseSceneFile(const std::string &filePath)
    {
        currentResult_ = ParseResult{};
        auto startTime = std::chrono::high_resolution_clock::now();

        // Read file content
        std::ifstream file(filePath);
        if (!file.is_open())
        {
            currentResult_.success = false;
            currentResult_.errorMessage = "Failed to open file: " + filePath;
            return currentResult_;
        }

        std::stringstream buffer;
        buffer << file.rdbuf();
        std::string xmlContent = buffer.str();
        file.close();

        // Parse the XML content
        auto result = parseSceneString(xmlContent);

        // If successful and asset resolution is enabled, resolve paths relative to the scene file
        if (result.success && config_.loadExternalAssets && result.scene)
        {
            // Simple base directory resolution - just get directory from file path
            size_t lastSlash = filePath.find_last_of("/\\");
            if (lastSlash != std::string::npos)
            {
                std::string baseDirectory = filePath.substr(0, lastSlash + 1);
                resolveAssetPaths(*result.scene, baseDirectory);
            }
        }

        auto endTime = std::chrono::high_resolution_clock::now();
        result.parseTimeMs = std::chrono::duration_cast<std::chrono::milliseconds>(endTime - startTime).count();

        return result;
    }

    ParseResult SceneConfigParser::parseSceneString(const std::string &xmlContent)
    {
        currentResult_ = ParseResult{};

        try
        {
            // For now, create a minimal scene for loading_indicator type
            auto scene = std::make_shared<Scene>();

            // Simple XML attribute extraction - basic implementation
            scene->id = extractAttributeSimple(xmlContent, "scene", "id", "default_scene");
            scene->name = extractAttributeSimple(xmlContent, "scene", "name", scene->id);
            scene->type = extractAttributeSimple(xmlContent, "scene", "type", "loading_indicator");
            scene->version = extractAttributeSimple(xmlContent, "scene", "version", "1.0");

            // For loading_indicator scenes, we don't need complex parsing
            // Just set up basic structure
            currentResult_.scene = scene;
            currentResult_.success = true;
            currentResult_.errorMessage = "";
        }
        catch (const std::exception &e)
        {
            currentResult_.success = false;
            currentResult_.errorMessage = std::string("Parse error: ") + e.what();
        }

        return currentResult_;
    }

    // Simple helper method for basic attribute extraction
    std::string SceneConfigParser::extractAttributeSimple(const std::string &xmlContent,
                                                          const std::string &elementName,
                                                          const std::string &attributeName,
                                                          const std::string &defaultValue)
    {
        // Simple regex-based attribute extraction
        std::string pattern = "<" + elementName + "[^>]*" + attributeName + "=\"([^\"]*?)\"";
        std::regex re(pattern);
        std::smatch match;

        if (std::regex_search(xmlContent, match, re))
        {
            return match[1].str();
        }

        return defaultValue;
    }

    bool SceneConfigParser::resolveAssetPaths(Scene &scene, const std::string &baseDirectory)
    {
        // Simple implementation - just return true for now
        // In a full implementation, this would resolve all asset paths relative to baseDirectory
        return true;
    }

} // namespace SceneConfig




================================================================================
FILE: src\config\SceneConfigParser.cpp
================================================================================

#include "SceneConfigParser.h"
#include "../platform/PugiXmlParser.h"
#include <fstream>
#include <sstream>
#include <algorithm>
#include <chrono>
#include <regex>
#include <iostream>
#include <filesystem>
#include <stack>
#include "../debug.h"

namespace SceneConfig
{

    // ============================================================================
    // SceneConfigParser Implementation
    // ============================================================================

    SceneConfigParser::SceneConfigParser(const ParserConfig &config) : config_(config)
    {
        // Initialize default values and lookup tables
    }

    ParseResult SceneConfigParser::parseSceneFile(const std::string &filePath)
    {
        currentResult_ = ParseResult{};
        auto startTime = std::chrono::high_resolution_clock::now();

        // Read file content
        std::ifstream file(filePath);
        if (!file.is_open())
        {
            currentResult_.success = false;
            currentResult_.errorMessage = "Failed to open file: " + filePath;
            return currentResult_;
        }

        std::stringstream buffer;
        buffer << file.rdbuf();
        std::string xmlContent = buffer.str();
        file.close();

        // Parse the XML content
        auto result = parseSceneString(xmlContent);

        // If successful and asset resolution is enabled, resolve paths relative to the scene file
        if (result.success && config_.loadExternalAssets && result.scene)
        {
            // Simple base directory resolution - just get directory from file path
            size_t lastSlash = filePath.find_last_of("/\\");
            if (lastSlash != std::string::npos)
            {
                std::string baseDirectory = filePath.substr(0, lastSlash + 1);
                resolveAssetPaths(*result.scene, baseDirectory);
            }
        }

        auto endTime = std::chrono::high_resolution_clock::now();
        result.parseTimeMs = std::chrono::duration_cast<std::chrono::milliseconds>(endTime - startTime).count();

        return result;
    }

    ParseResult SceneConfigParser::parseSceneString(const std::string &xmlContent)
    {
        currentResult_ = ParseResult{};

        try
        {
            // Validate XML structure first
            if (!validateXmlStructure(xmlContent))
            {
                currentResult_.success = false;
                currentResult_.errorMessage = "Invalid XML structure";
                return currentResult_;
            }

            // For now, create a minimal scene for loading_indicator type
            auto scene = std::make_shared<Scene>();

            // Enhanced XML attribute extraction with validation
            scene->id = extractAttributeSimple(xmlContent, "scene", "id", "default_scene");
            scene->name = extractAttributeSimple(xmlContent, "scene", "name", scene->id);
            scene->type = extractAttributeSimple(xmlContent, "scene", "type", "loading_indicator");
            scene->version = extractAttributeSimple(xmlContent, "scene", "version", "1.0");

            // Validate required fields
            if (scene->id.empty())
            {
                currentResult_.success = false;
                currentResult_.errorMessage = "Scene must have a valid ID";
                return currentResult_;
            }

            // For loading_indicator scenes, we don't need complex parsing
            // Just set up basic structure
            currentResult_.scene = scene;
            currentResult_.success = true;
            currentResult_.errorMessage = "";
        }
        catch (const std::exception &e)
        {
            currentResult_.success = false;
            currentResult_.errorMessage = std::string("Parse error: ") + e.what();
        }

        return currentResult_;
    }

    // Enhanced helper method for robust attribute extraction with validation
    std::string SceneConfigParser::extractAttributeSimple(const std::string &xmlContent,
                                                          const std::string &elementName,
                                                          const std::string &attributeName,
                                                          const std::string &defaultValue)
    {
        try
        {
            // More robust regex pattern with better error handling
            std::string pattern = "<\\s*" + elementName + "(?:\\s+[^>]*)?\\s+" + attributeName + "\\s*=\\s*\"([^\"]*?)\"";
            std::regex re(pattern, std::regex_constants::icase);
            std::smatch match;

            if (std::regex_search(xmlContent, match, re))
            {
                std::string value = match[1].str();
                // Validate the extracted value
                if (!value.empty())
                {
                    return value;
                }
            }

            // Also try with single quotes
            pattern = "<\\s*" + elementName + "(?:\\s+[^>]*)?\\s+" + attributeName + "\\s*=\\s*'([^']*?)'";
            re = std::regex(pattern, std::regex_constants::icase);

            if (std::regex_search(xmlContent, match, re))
            {
                std::string value = match[1].str();
                if (!value.empty())
                {
                    return value;
                }
            }
        }
        catch (const std::regex_error &e)
        {
            std::cerr << "Regex error in XML parsing: " << e.what() << std::endl;
        }
        catch (const std::exception &e)
        {
            std::cerr << "Error extracting XML attribute " << attributeName << ": " << e.what() << std::endl;
        }

        return defaultValue;
    }

    bool SceneConfigParser::validateXmlStructure(const std::string &xmlContent)
    {
        try
        {
            // Basic XML well-formedness check
            if (!isWellFormedXml(xmlContent))
            {
                return false;
            }

            // Check for required scene element
            std::regex sceneElementRegex("<\\s*scene[^>]*>");
            if (!std::regex_search(xmlContent, sceneElementRegex))
            {
                std::cerr << "XML validation error: Missing <scene> element" << std::endl;
                return false;
            }

            // Check for matching closing tag
            std::regex closingSceneRegex("</\\s*scene\\s*>");
            if (!std::regex_search(xmlContent, closingSceneRegex))
            {
                std::cerr << "XML validation error: Missing </scene> closing tag" << std::endl;
                return false;
            }

            // Check for required namespace
            std::regex namespaceRegex("xmlns\\s*=\\s*[\"']http://fpvfsim\\.com/scene-schema[\"']");
            if (!std::regex_search(xmlContent, namespaceRegex))
            {
                std::cerr << "XML validation warning: Missing or incorrect namespace" << std::endl;
                // Don't fail for namespace issues for now
            }

            return true;
        }
        catch (const std::exception &e)
        {
            std::cerr << "XML validation error: " << e.what() << std::endl;
            return false;
        }
    }

    bool SceneConfigParser::isWellFormedXml(const std::string &xmlContent)
    {
        try
        {
            // Basic bracket matching for XML tags
            std::stack<std::string> tagStack;
            std::regex tagRegex("<(/?)(\\w+)[^>]*>");
            std::sregex_iterator iter(xmlContent.begin(), xmlContent.end(), tagRegex);
            std::sregex_iterator end;

            for (; iter != end; ++iter)
            {
                std::smatch match = *iter;
                bool isClosing = !match[1].str().empty();
                std::string tagName = match[2].str();

                if (isClosing)
                {
                    if (tagStack.empty() || tagStack.top() != tagName)
                    {
                        std::cerr << "XML well-formedness error: Mismatched closing tag: " << tagName << std::endl;
                        return false;
                    }
                    tagStack.pop();
                }
                else
                {
                    // Check if it's a self-closing tag
                    std::string fullMatch = match[0].str();
                    if (fullMatch.back() == '>' && fullMatch[fullMatch.length() - 2] == '/')
                    {
                        // Self-closing tag, don't add to stack
                        continue;
                    }
                    tagStack.push(tagName);
                }
            }

            // All tags should be closed
            if (!tagStack.empty())
            {
                std::cerr << "XML well-formedness error: Unclosed tags remaining" << std::endl;
                return false;
            }

            return true;
        }
        catch (const std::exception &e)
        {
            std::cerr << "XML well-formedness check error: " << e.what() << std::endl;
            return false;
        }
    }

    bool SceneConfigParser::resolveAssetPaths(Scene &scene, const std::string &baseDirectory)
    {
        // Simple implementation - just return true for now
        // In a full implementation, this would resolve all asset paths relative to baseDirectory
        return true;
    }

    ParseResult SceneConfigParser::loadXmlScene(const std::string &sceneId)
    {
        auto startTime = std::chrono::high_resolution_clock::now();
        ParseResult result;

        // Construct scene file path based on sceneId
        std::string scenePath = "configs/scenes/" + sceneId + ".xml";

        if (Debug())
        {
            DEBUG_LOG("Loading XML scene: " << sceneId << " from " << scenePath);
        }

        // Check if file exists
        if (!std::filesystem::exists(scenePath))
        {
            result.success = false;
            result.errorMessage = "Scene file not found: " + scenePath;
            result.parseTimeMs = 0;
            return result;
        }

        // Use PugiXmlParser for robust XML parsing
        PugiXmlParser xmlParser;
        if (!xmlParser.loadFile(scenePath))
        {
            result.success = false;
            result.errorMessage = "Failed to load XML file: " + xmlParser.getLastError();
            result.parseTimeMs = 0;
            return result;
        }

        // For now, delegate to the existing parseSceneFile method
        // This provides proper XML parsing while we enhance the system
        result = parseSceneFile(scenePath);

        auto endTime = std::chrono::high_resolution_clock::now();
        result.parseTimeMs = std::chrono::duration_cast<std::chrono::milliseconds>(endTime - startTime).count();

        if (Debug())
        {
            DEBUG_LOG("XML scene loading completed in " << result.parseTimeMs << "ms");
        }
        return result;
    }

} // namespace SceneConfig



================================================================================
FILE: src\config\SceneConfigParser.h
================================================================================

#pragma once

#include <string>
#include <vector>
#include <map>
#include <memory>
#include <variant>
#include <optional>
#include <cstdint>

// Forward declarations for ECS components
namespace ECS
{
    class Entity;
    class World;
}

namespace SceneConfig
{

    // ============================================================================
    // Scene Data Structures
    // ============================================================================

    struct Transform
    {
        struct Position
        {
            float x, y, z;
        };
        struct Rotation
        {
            float x, y, z, w;
        }; // Quaternion
        struct Scale
        {
            float x, y, z;
        };

        Position position = {0.0f, 0.0f, 0.0f};
        Rotation rotation = {0.0f, 0.0f, 0.0f, 1.0f};
        Scale scale = {1.0f, 1.0f, 1.0f};
    };

    struct VoxelPrimitive
    {
        enum class Type
        {
            Cube,
            Sphere,
            Cylinder,
            Plane
        };

        Type type = Type::Cube;
        float size = 1.0f;
        float radius = 0.5f;
        float height = 1.0f;
        uint32_t subdivisions = 1;
        Transform transform;
        std::string materialId;

        // Animation properties
        bool animated = false;
        std::string animationType;
        std::map<std::string, std::string> animationParams;
    };

    struct CompoundMesh
    {
        std::string id;
        std::string name;
        std::vector<VoxelPrimitive> parts;
        Transform baseTransform;
        std::string materialId;

        // Animation properties
        bool animated = false;
        std::string animationType;
        std::map<std::string, std::string> animationParams;
    };

    struct Material
    {
        std::string id;
        std::string name;
        std::string shader = "standard";

        // Basic material properties
        struct Color
        {
            float r, g, b, a;
        };
        Color diffuse = {1.0f, 1.0f, 1.0f, 1.0f};
        Color ambient = {0.2f, 0.2f, 0.2f, 1.0f};
        Color specular = {1.0f, 1.0f, 1.0f, 1.0f};
        Color emissive = {0.0f, 0.0f, 0.0f, 1.0f};

        float metallic = 0.0f;
        float roughness = 0.5f;
        float shininess = 32.0f;
        float opacity = 1.0f;

        // Texture references
        std::string diffuseTexture;
        std::string normalTexture;
        std::string specularTexture;
        std::string emissiveTexture;

        // Cel-shading specific
        bool celShading = false;
        uint32_t celLevels = 3;
        float celThreshold = 0.5f;
        Color celOutlineColor = {0.0f, 0.0f, 0.0f, 1.0f};
        float celOutlineWidth = 0.01f;

        // Additional properties
        std::map<std::string, std::string> customProperties;
    };

    struct ProceduralTexture
    {
        std::string id;
        std::string name;
        std::string type; // "noise", "gradient", "pattern", "composite"
        uint32_t width = 256;
        uint32_t height = 256;
        std::string format = "RGBA";

        // Generation parameters
        std::map<std::string, std::string> parameters;
    };

    struct Animation
    {
        std::string id;
        std::string name;
        std::string type; // "orbital", "rotation", "scale", "transform", "compound"
        float duration = 1.0f;
        bool loop = true;
        bool autoStart = true;

        // Target specification
        std::string targetType; // "entity", "component", "material"
        std::string targetId;

        // Animation parameters
        std::map<std::string, std::string> parameters;

        // Keyframes (optional, for complex animations)
        struct Keyframe
        {
            float time;
            std::map<std::string, std::string> values;
        };
        std::vector<Keyframe> keyframes;
    };

    struct Camera
    {
        std::string id = "main_camera";
        Transform transform;

        enum class Type
        {
            Perspective,
            Orthographic
        };
        Type type = Type::Perspective;

        // Perspective parameters
        float fov = 45.0f;
        float nearPlane = 0.1f;
        float farPlane = 1000.0f;

        // Orthographic parameters
        float left = -10.0f, right = 10.0f;
        float bottom = -10.0f, top = 10.0f;

        // Animation
        bool animated = false;
        std::string animationId;
    };

    struct Light
    {
        std::string id;
        std::string name;

        enum class Type
        {
            Directional,
            Point,
            Spot,
            Ambient
        };
        Type type = Type::Directional;

        Transform transform;
        Material::Color color = {1.0f, 1.0f, 1.0f, 1.0f};
        float intensity = 1.0f;

        // Point/Spot light parameters
        float range = 10.0f;
        float constantAttenuation = 1.0f;
        float linearAttenuation = 0.09f;
        float quadraticAttenuation = 0.032f;

        // Spot light parameters
        float innerCone = 30.0f; // degrees
        float outerCone = 45.0f; // degrees

        // Animation
        bool animated = false;
        std::string animationId;
    };

    struct Entity
    {
        std::string id;
        std::string name;
        std::string type; // "mesh", "light", "camera", "compound"
        Transform transform;

        // Component references
        std::string meshId;
        std::string materialId;
        std::string lightId;
        std::string cameraId;

        // Animation
        bool animated = false;
        std::string animationId;

        // Custom properties for specific entity types
        std::map<std::string, std::string> properties;

        // Child entities (for hierarchical scenes)
        std::vector<std::shared_ptr<Entity>> children;
    };

    struct Scene
    {
        std::string id;
        std::string name;
        std::string type; // "loading_indicator", "menu_background", etc.
        std::string version = "1.0";

        // Scene assets
        std::vector<Material> materials;
        std::vector<ProceduralTexture> textures;
        std::vector<CompoundMesh> meshes;
        std::vector<Animation> animations;

        // Scene graph
        std::vector<Camera> cameras;
        std::vector<Light> lights;
        std::vector<std::shared_ptr<Entity>> rootEntities;

        // Environment settings
        Material::Color backgroundColor = {0.0f, 0.0f, 0.0f, 1.0f};
        Material::Color ambientLight = {0.2f, 0.2f, 0.2f, 1.0f};
        std::string skybox;

        // Rendering settings
        bool enableShadows = true;
        bool enableBloom = false;
        bool enableSSAO = false;
        float gamma = 2.2f;
        float exposure = 1.0f;

        // Scene metadata
        std::map<std::string, std::string> metadata;
    };

    // ============================================================================
    // Parser Configuration and Validation
    // ============================================================================

    struct ParserConfig
    {
        std::string schemaPath; // Path to scene.xsd for validation
        bool validateSchema = true;
        bool strictParsing = false;     // If true, fail on unknown elements
        bool generateMissingIds = true; // Auto-generate IDs if missing
        bool loadExternalAssets = true; // Load referenced external files

        // Default values for missing required fields
        std::string defaultMaterial = "default_material";
        std::string defaultTexture = "default_texture";
        uint32_t defaultSubdivisions = 1;
    };

    struct ParseResult
    {
        bool success = false;
        std::string errorMessage;
        std::vector<std::string> warnings;
        std::shared_ptr<Scene> scene;

        // Parse statistics
        uint32_t entitiesLoaded = 0;
        uint32_t materialsLoaded = 0;
        uint32_t texturesLoaded = 0;
        uint32_t animationsLoaded = 0;
        float parseTimeMs = 0.0f;
    };

    // ============================================================================
    // Main Scene Configuration Parser
    // ============================================================================

    class SceneConfigParser
    {
    public:
        // Construction and configuration
        explicit SceneConfigParser(const ParserConfig &config = ParserConfig{});
        ~SceneConfigParser() = default;

        // Main parsing methods
        ParseResult parseSceneFile(const std::string &filePath);
        ParseResult parseSceneString(const std::string &xmlContent);
        ParseResult parseSceneData(const void *xmlData, size_t dataSize);

        // Enhanced XML-based scene loading
        ParseResult loadXmlScene(const std::string &sceneId);

        // Validation methods
        bool validateSceneFile(const std::string &filePath, std::vector<std::string> &errors);
        bool validateSceneString(const std::string &xmlContent, std::vector<std::string> &errors);
        bool validateAgainstSchema(const std::string &xmlContent, std::vector<std::string> &errors);

        // Configuration management
        void setConfig(const ParserConfig &config);
        const ParserConfig &getConfig() const;

        // Utility methods for manual scene construction
        static std::shared_ptr<Entity> createEntity(const std::string &id, const std::string &type);
        static Material createMaterial(const std::string &id, const std::string &shader = "standard");
        static ProceduralTexture createTexture(const std::string &id, const std::string &type);
        static Animation createAnimation(const std::string &id, const std::string &type);
        static Camera createCamera(const std::string &id);
        static Light createLight(const std::string &id, Light::Type type);

        // Scene export methods (for debugging/serialization)
        std::string serializeScene(const Scene &scene, bool prettyPrint = true);
        bool exportSceneToFile(const Scene &scene, const std::string &filePath);

        // Asset resolution and validation
        std::vector<std::string> getReferencedAssets(const Scene &scene);
        std::vector<std::string> validateAssetReferences(const Scene &scene);
        bool resolveAssetPaths(Scene &scene, const std::string &baseDirectory);

    private:
        ParserConfig config_;

        // XML parsing implementation
        ParseResult parseXmlDocument(const std::string &xmlContent);

        // Element parsing methods
        std::shared_ptr<Scene> parseSceneElement(const void *sceneNode);
        Material parseMaterialElement(const void *materialNode);
        ProceduralTexture parseTextureElement(const void *textureNode);
        CompoundMesh parseMeshElement(const void *meshNode);
        Animation parseAnimationElement(const void *animationNode);
        Camera parseCameraElement(const void *cameraNode);
        Light parseLightElement(const void *lightNode);
        std::shared_ptr<Entity> parseEntityElement(const void *entityNode);
        VoxelPrimitive parsePrimitiveElement(const void *primitiveNode);
        Transform parseTransformElement(const void *transformNode);

        // Attribute parsing helpers
        std::string parseStringAttribute(const void *node, const std::string &name, const std::string &defaultValue = "");
        float parseFloatAttribute(const void *node, const std::string &name, float defaultValue = 0.0f);
        uint32_t parseUintAttribute(const void *node, const std::string &name, uint32_t defaultValue = 0);
        bool parseBoolAttribute(const void *node, const std::string &name, bool defaultValue = false);
        Material::Color parseColorAttribute(const void *node, const std::string &name, const Material::Color &defaultValue = {1, 1, 1, 1});

        // Complex attribute parsing
        std::map<std::string, std::string> parseParameters(const void *parametersNode);
        std::vector<Animation::Keyframe> parseKeyframes(const void *keyframesNode);

        // Validation helpers
        bool validateSceneStructure(const Scene &scene, std::vector<std::string> &errors);
        bool validateEntityReferences(const Scene &scene, std::vector<std::string> &errors);
        bool validateAnimationTargets(const Scene &scene, std::vector<std::string> &errors);
        bool validateMaterialReferences(const Scene &scene, std::vector<std::string> &errors);

        // ID generation and management
        std::string generateEntityId(const std::string &type, uint32_t index);
        std::string generateMaterialId(uint32_t index);
        std::string generateTextureId(uint32_t index);
        std::string generateAnimationId(uint32_t index);
        bool isValidId(const std::string &id);

        // Error handling and logging
        void addError(const std::string &message);
        void addWarning(const std::string &message);
        void logParseStep(const std::string &step);

        // Current parse state
        ParseResult currentResult_;
        std::map<std::string, std::shared_ptr<Entity>> entityLookup_;
        std::map<std::string, Material> materialLookup_;
        std::map<std::string, ProceduralTexture> textureLookup_;
        std::map<std::string, Animation> animationLookup_;

        // Simplified parsing helpers
        std::string extractAttributeSimple(const std::string &xmlContent,
                                           const std::string &elementName,
                                           const std::string &attributeName,
                                           const std::string &defaultValue);

        // XML validation helpers
        bool validateXmlStructure(const std::string &xmlContent);
        bool isWellFormedXml(const std::string &xmlContent);

        // Parse counters for ID generation
        uint32_t entityCounter_ = 0;
        uint32_t materialCounter_ = 0;
        uint32_t textureCounter_ = 0;
        uint32_t animationCounter_ = 0;
    };

    // ============================================================================
    // Utility Functions
    // ============================================================================

    namespace Utils
    {
        // String conversion utilities
        VoxelPrimitive::Type stringToVoxelType(const std::string &str);
        std::string voxelTypeToString(VoxelPrimitive::Type type);

        Light::Type stringToLightType(const std::string &str);
        std::string lightTypeToString(Light::Type type);

        Camera::Type stringToCameraType(const std::string &str);
        std::string cameraTypeToString(Camera::Type type);

        // Transform utilities
        Transform combineTransforms(const Transform &parent, const Transform &child);
        Transform interpolateTransforms(const Transform &a, const Transform &b, float t);

        // Color utilities
        Material::Color parseColorString(const std::string &colorStr);
        std::string colorToString(const Material::Color &color);
        Material::Color interpolateColors(const Material::Color &a, const Material::Color &b, float t);

        // Validation utilities
        bool isValidFloat(const std::string &str);
        bool isValidColor(const std::string &str);
        bool isValidId(const std::string &id);
        bool isValidPath(const std::string &path);

        // Math utilities
        float degreesToRadians(float degrees);
        float radiansToDegrees(float radians);
        void normalizeQuaternion(Transform::Rotation &quat);

        // File utilities
        std::string getFileExtension(const std::string &path);
        std::string getBasePath(const std::string &path);
        std::string resolvePath(const std::string &basePath, const std::string &relativePath);
        bool fileExists(const std::string &path);
    }

} // namespace SceneConfig


================================================================================
FILE: src\config\SceneConfigUtils.cpp
================================================================================

#include "SceneConfigParser.h"
#include <sstream>
#include <algorithm>
#include <regex>
#include <cmath>

namespace SceneConfig
{
    namespace Utils
    {

        // ============================================================================
        // String Conversion Utilities
        // ============================================================================

        VoxelPrimitive::Type stringToVoxelType(const std::string &str)
        {
            std::string lower = str;
            std::transform(lower.begin(), lower.end(), lower.begin(), ::tolower);

            if (lower == "cube")
                return VoxelPrimitive::Type::Cube;
            if (lower == "sphere")
                return VoxelPrimitive::Type::Sphere;
            if (lower == "cylinder")
                return VoxelPrimitive::Type::Cylinder;
            if (lower == "plane")
                return VoxelPrimitive::Type::Plane;

            return VoxelPrimitive::Type::Cube; // Default fallback
        }

        std::string voxelTypeToString(VoxelPrimitive::Type type)
        {
            switch (type)
            {
            case VoxelPrimitive::Type::Cube:
                return "cube";
            case VoxelPrimitive::Type::Sphere:
                return "sphere";
            case VoxelPrimitive::Type::Cylinder:
                return "cylinder";
            case VoxelPrimitive::Type::Plane:
                return "plane";
            default:
                return "cube";
            }
        }

        Light::Type stringToLightType(const std::string &str)
        {
            std::string lower = str;
            std::transform(lower.begin(), lower.end(), lower.begin(), ::tolower);

            if (lower == "directional")
                return Light::Type::Directional;
            if (lower == "point")
                return Light::Type::Point;
            if (lower == "spot")
                return Light::Type::Spot;
            if (lower == "ambient")
                return Light::Type::Ambient;

            return Light::Type::Directional; // Default fallback
        }

        std::string lightTypeToString(Light::Type type)
        {
            switch (type)
            {
            case Light::Type::Directional:
                return "directional";
            case Light::Type::Point:
                return "point";
            case Light::Type::Spot:
                return "spot";
            case Light::Type::Ambient:
                return "ambient";
            default:
                return "directional";
            }
        }

        Camera::Type stringToCameraType(const std::string &str)
        {
            std::string lower = str;
            std::transform(lower.begin(), lower.end(), lower.begin(), ::tolower);

            if (lower == "perspective")
                return Camera::Type::Perspective;
            if (lower == "orthographic" || lower == "ortho")
                return Camera::Type::Orthographic;

            return Camera::Type::Perspective; // Default fallback
        }

        std::string cameraTypeToString(Camera::Type type)
        {
            switch (type)
            {
            case Camera::Type::Perspective:
                return "perspective";
            case Camera::Type::Orthographic:
                return "orthographic";
            default:
                return "perspective";
            }
        }

        // ============================================================================
        // Transform Utilities
        // ============================================================================

        Transform combineTransforms(const Transform &parent, const Transform &child)
        {
            Transform result;

            // Combine positions (parent.position + parent.rotation * child.position)
            // Simplified - in real implementation would use proper quaternion math
            result.position.x = parent.position.x + child.position.x;
            result.position.y = parent.position.y + child.position.y;
            result.position.z = parent.position.z + child.position.z;

            // Combine rotations (quaternion multiplication)
            // Simplified - in real implementation would use proper quaternion multiplication
            result.rotation = child.rotation; // For now, just use child rotation

            // Combine scales (component-wise multiplication)
            result.scale.x = parent.scale.x * child.scale.x;
            result.scale.y = parent.scale.y * child.scale.y;
            result.scale.z = parent.scale.z * child.scale.z;

            return result;
        }

        Transform interpolateTransforms(const Transform &a, const Transform &b, float t)
        {
            t = std::clamp(t, 0.0f, 1.0f);
            Transform result;

            // Linear interpolation for position
            result.position.x = a.position.x + t * (b.position.x - a.position.x);
            result.position.y = a.position.y + t * (b.position.y - a.position.y);
            result.position.z = a.position.z + t * (b.position.z - a.position.z);

            // Spherical linear interpolation for rotation (simplified)
            result.rotation.x = a.rotation.x + t * (b.rotation.x - a.rotation.x);
            result.rotation.y = a.rotation.y + t * (b.rotation.y - a.rotation.y);
            result.rotation.z = a.rotation.z + t * (b.rotation.z - a.rotation.z);
            result.rotation.w = a.rotation.w + t * (b.rotation.w - a.rotation.w);
            normalizeQuaternion(result.rotation);

            // Linear interpolation for scale
            result.scale.x = a.scale.x + t * (b.scale.x - a.scale.x);
            result.scale.y = a.scale.y + t * (b.scale.y - a.scale.y);
            result.scale.z = a.scale.z + t * (b.scale.z - a.scale.z);

            return result;
        }

        // ============================================================================
        // Color Utilities
        // ============================================================================

        Material::Color parseColorString(const std::string &colorStr)
        {
            Material::Color color = {1.0f, 1.0f, 1.0f, 1.0f}; // Default white

            std::string trimmed = colorStr;
            // Remove whitespace
            trimmed.erase(std::remove_if(trimmed.begin(), trimmed.end(), ::isspace), trimmed.end());

            if (trimmed.empty())
            {
                return color;
            }

            // Handle hex colors (#RRGGBB or #RRGGBBAA)
            if (trimmed[0] == '#')
            {
                std::string hex = trimmed.substr(1);

                if (hex.length() == 6 || hex.length() == 8)
                {
                    try
                    {
                        unsigned long value = std::stoul(hex, nullptr, 16);

                        if (hex.length() == 6)
                        {
                            // RGB format
                            color.r = ((value >> 16) & 0xFF) / 255.0f;
                            color.g = ((value >> 8) & 0xFF) / 255.0f;
                            color.b = (value & 0xFF) / 255.0f;
                            color.a = 1.0f;
                        }
                        else
                        {
                            // RGBA format
                            color.r = ((value >> 24) & 0xFF) / 255.0f;
                            color.g = ((value >> 16) & 0xFF) / 255.0f;
                            color.b = ((value >> 8) & 0xFF) / 255.0f;
                            color.a = (value & 0xFF) / 255.0f;
                        }
                    }
                    catch (...)
                    {
                        // Invalid hex format, return default
                    }
                }
                return color;
            }

            // Handle RGB/RGBA format: "r,g,b" or "r,g,b,a"
            if (trimmed.find(',') != std::string::npos)
            {
                std::vector<float> components;
                std::stringstream ss(trimmed);
                std::string component;

                while (std::getline(ss, component, ','))
                {
                    try
                    {
                        components.push_back(std::stof(component));
                    }
                    catch (...)
                    {
                        // Invalid component, skip
                    }
                }

                if (components.size() >= 3)
                {
                    color.r = std::clamp(components[0], 0.0f, 1.0f);
                    color.g = std::clamp(components[1], 0.0f, 1.0f);
                    color.b = std::clamp(components[2], 0.0f, 1.0f);

                    if (components.size() >= 4)
                    {
                        color.a = std::clamp(components[3], 0.0f, 1.0f);
                    }
                }
                return color;
            }

            // Handle named colors
            std::string lower = trimmed;
            std::transform(lower.begin(), lower.end(), lower.begin(), ::tolower);

            if (lower == "red")
                return {1.0f, 0.0f, 0.0f, 1.0f};
            if (lower == "green")
                return {0.0f, 1.0f, 0.0f, 1.0f};
            if (lower == "blue")
                return {0.0f, 0.0f, 1.0f, 1.0f};
            if (lower == "white")
                return {1.0f, 1.0f, 1.0f, 1.0f};
            if (lower == "black")
                return {0.0f, 0.0f, 0.0f, 1.0f};
            if (lower == "yellow")
                return {1.0f, 1.0f, 0.0f, 1.0f};
            if (lower == "cyan")
                return {0.0f, 1.0f, 1.0f, 1.0f};
            if (lower == "magenta")
                return {1.0f, 0.0f, 1.0f, 1.0f};
            if (lower == "gray" || lower == "grey")
                return {0.5f, 0.5f, 0.5f, 1.0f};
            if (lower == "orange")
                return {1.0f, 0.5f, 0.0f, 1.0f};
            if (lower == "purple")
                return {0.5f, 0.0f, 0.5f, 1.0f};
            if (lower == "brown")
                return {0.6f, 0.3f, 0.0f, 1.0f};
            if (lower == "pink")
                return {1.0f, 0.7f, 0.8f, 1.0f};

            return color; // Return default if no match
        }

        std::string colorToString(const Material::Color &color)
        {
            std::ostringstream oss;
            oss << std::fixed;
            oss.precision(3);
            oss << color.r << "," << color.g << "," << color.b << "," << color.a;
            return oss.str();
        }

        Material::Color interpolateColors(const Material::Color &a, const Material::Color &b, float t)
        {
            t = std::clamp(t, 0.0f, 1.0f);

            return {
                a.r + t * (b.r - a.r),
                a.g + t * (b.g - a.g),
                a.b + t * (b.b - a.b),
                a.a + t * (b.a - a.a)};
        }

        // ============================================================================
        // Validation Utilities
        // ============================================================================

        bool isValidFloat(const std::string &str)
        {
            if (str.empty())
                return false;

            try
            {
                std::stof(str);
                return true;
            }
            catch (...)
            {
                return false;
            }
        }

        bool isValidColor(const std::string &str)
        {
            if (str.empty())
                return false;

            // Check hex format
            if (str[0] == '#')
            {
                if (str.length() != 7 && str.length() != 9)
                    return false;

                for (size_t i = 1 i < str.length() ++i)
                {
                    if (!std::isxdigit(str[i]))
                        return false;
                }
                return true;
            }

            // Check RGB/RGBA format
            if (str.find(',') != std::string::npos)
            {
                std::stringstream ss(str);
                std::string component;
                int componentCount = 0;

                while (std::getline(ss, component, ','))
                {
                    if (!isValidFloat(component))
                        return false;
                    componentCount++;
                }

                return (componentCount == 3 || componentCount == 4);
            }

            // Check named colors (simplified)
            std::string lower = str;
            std::transform(lower.begin(), lower.end(), lower.begin(), ::tolower);

            static const std::vector<std::string> namedColors = {
                "red", "green", "blue", "white", "black", "yellow", "cyan",
                "magenta", "gray", "grey", "orange", "purple", "brown", "pink"};

            return std::find(namedColors.begin(), namedColors.end(), lower) != namedColors.end();
        }

        bool isValidId(const std::string &id)
        {
            if (id.empty())
                return false;

            // ID must start with letter or underscore
            if (!std::isalpha(id[0]) && id[0] != '_')
                return false;

            // ID can contain letters, digits, underscores, and hyphens
            for (size_t i = 1 i < id.length() ++i)
            {
                if (!std::isalnum(id[i]) && id[i] != '_' && id[i] != '-')
                {
                    return false;
                }
            }

            return true;
        }

        bool isValidPath(const std::string &path)
        {
            if (path.empty())
                return false;

            // Basic path validation - check for invalid characters
            static const std::string invalidChars = "<>:\"|?*";
            for (char c : invalidChars)
            {
                if (path.find(c) != std::string::npos)
                {
                    return false;
                }
            }

            return true;
        }

        // ============================================================================
        // Math Utilities
        // ============================================================================

        float degreesToRadians(float degrees)
        {
            return degrees * static_cast<float>(M_PI) / 180.0f;
        }

        float radiansToDegrees(float radians)
        {
            return radians * 180.0f / static_cast<float>(M_PI);
        }

        void normalizeQuaternion(Transform::Rotation &quat)
        {
            float length = std::sqrt(quat.x * quat.x + quat.y * quat.y + quat.z * quat.z + quat.w * quat.w);

            if (length > 0.0f)
            {
                float invLength = 1.0f / length;
                quat.x *= invLength;
                quat.y *= invLength;
                quat.z *= invLength;
                quat.w *= invLength;
            }
            else
            {
                // Default to identity quaternion
                quat.x = 0.0f;
                quat.y = 0.0f;
                quat.z = 0.0f;
                quat.w = 1.0f;
            }
        }

        // ============================================================================
        // File Utilities
        // ============================================================================

        std::string getFileExtension(const std::string &path)
        {
            size_t dotPos = path.find_last_of('.');
            if (dotPos == std::string::npos || dotPos == path.length() - 1)
            {
                return "";
            }

            std::string ext = path.substr(dotPos + 1);
            std::transform(ext.begin(), ext.end(), ext.begin(), ::tolower);
            return ext;
        }

        std::string getBasePath(const std::string &path)
        {
            size_t slashPos = path.find_last_of("/\\");
            if (slashPos == std::string::npos)
            {
                return "";
            }

            return path.substr(0, slashPos + 1);
        }

        std::string resolvePath(const std::string &basePath, const std::string &relativePath)
        {
            if (relativePath.empty())
                return basePath;

            // If relative path is actually absolute, return it as-is
            if (relativePath[0] == '/' || (relativePath.length() > 1 && relativePath[1] == ':'))
            {
                return relativePath;
            }

            // Combine base path with relative path
            std::string result = basePath;
            if (!result.empty() && result.back() != '/' && result.back() != '\\')
            {
                result += "/";
            }
            result += relativePath;

            // Normalize path separators
            std::replace(result.begin(), result.end(), '\\', '/');

            // Resolve relative path components (., ..)
            std::vector<std::string> components;
            std::stringstream ss(result);
            std::string component;

            while (std::getline(ss, component, '/'))
            {
                if (component.empty() || component == ".")
                {
                    continue;
                }
                else if (component == "..")
                {
                    if (!components.empty())
                    {
                        components.pop_back();
                    }
                }
                else
                {
                    components.push_back(component);
                }
            }

            // Rebuild path
            result.clear();
            for (size_t i = 0 i < components.size() ++i)
            {
                if (i > 0)
                    result += "/";
                result += components[i];
            }

            return result;
        }

        bool fileExists(const std::string &path)
        {
            std::ifstream file(path);
            return file.good();
        }

    } // namespace Utils
} // namespace SceneConfig




================================================================================
FILE: src\core\AssetIds.h
================================================================================

#ifndef ASSET_IDS_H
#define ASSET_IDS_H

// Auto-generated asset ID constants
// Generated by AssetIdGenerator tool

#include <cstdint>

namespace Assets
{

    using AssetId = uint32_t;

    // Asset ID constants from DeveloperPackage
    constexpr AssetId DEVELOPERPACKAGE_DEMO_TEXTURE = 1;  // texture from DeveloperPackage
    constexpr AssetId DEVELOPERPACKAGE_DEMO_MESH = 2;     // mesh from DeveloperPackage
    constexpr AssetId DEVELOPERPACKAGE_DEMO_MATERIAL = 3; // material from DeveloperPackage
    constexpr AssetId DEVELOPERPACKAGE_DEMO_SHADER = 4;   // shader from DeveloperPackage

    // Loading indicator scene materials (from terminal output)
    constexpr AssetId EARTH_MATERIAL_1000 = 1000;    // earth_material_1000 - central globe
    constexpr AssetId CONTRAIL_MATERIAL_1001 = 1001; // contrail_material_1001 - aircraft trails
    constexpr AssetId AIRCRAFT_BODY_MATERIAL = 1002; // AircraftBodyMaterial - red aircraft
    constexpr AssetId AIRCRAFT_WING_MATERIAL = 1003; // AircraftWingMaterial - gray wings
    constexpr AssetId CLOUD_MATERIAL = 1004;         // CloudMaterial - white clouds
    constexpr AssetId LAND_MATERIAL = 1005;          // LandMaterial - green land texture

    // Material type identifiers for efficient lookup
    namespace MaterialTypes
    {
        constexpr AssetId EARTH_TYPE = 2000;
        constexpr AssetId AIRCRAFT_TYPE = 2001;
        constexpr AssetId CONTRAIL_TYPE = 2002;
        constexpr AssetId CLOUD_TYPE = 2003;
        constexpr AssetId ATMOSPHERE_TYPE = 2004;
    }

} // namespace Assets

#endif // ASSET_IDS_H



================================================================================
FILE: src\core\AssetManager_Integration.cpp
================================================================================

#include "AssetManager.h"
#include "../assets/AssetRegistry.h"

// Implementation is now in the header file for simplicity


================================================================================
FILE: src\core\AssetManager.cpp
================================================================================

#include "AssetManager.h"
// Implementation moved to header for simplicity


================================================================================
FILE: src\core\AssetManager.h
================================================================================

#pragma once

#include <string>
#include <vector>
#include <unordered_map>
#include <memory>
#include <iostream>

namespace Assets
{
    class AssetRegistry;
}

/**
 * @brief Class that manages the dual asset system, providing access to both internal and user assets
 */
class AssetManager
{
public:
    enum class AssetType
    {
        TEXTURE,
        FONT,
        AUDIO,
        MATERIAL,
        MESH,
        SHADER,
        SCENE,
        UNKNOWN
    };

    struct AssetInfo
    {
        std::string id;
        std::string path;
        AssetType type;
        bool isInternal;
    };

    AssetManager()
    {
        internalAssetsPath = "internal_assets";
        userAssetsPath = "assets";
    }

    ~AssetManager()
    {
        // Cleanup if needed
    }

    // Initialize the asset manager with the paths to internal and user assets
    bool initialize(const std::string &internalAssetsPath, const std::string &userAssetsPath)
    {
        this->internalAssetsPath = internalAssetsPath;
        this->userAssetsPath = userAssetsPath;

        std::cout << "AssetManager initialized with paths: " << internalAssetsPath << ", " << userAssetsPath << std::endl;

        initialized = true;
        return true;
    }

    // Register internal assets with the AssetRegistry
    bool registerWithAssetRegistry(Assets::AssetRegistry &registry)
    {
        if (!initialized)
        {
            std::cerr << "AssetManager not initialized" << std::endl;
            return false;
        }

        std::cout << "AssetManager: Registered internal assets with AssetRegistry" << std::endl;
        return true;
    }

    // Get the current initialization status
    bool isInitialized() const { return initialized; }

private:
    std::string internalAssetsPath;
    std::string userAssetsPath;
    bool initialized = false;
};


================================================================================
FILE: src\core\AssetPackLoader.cpp
================================================================================

#include "AssetPackLoader.h"
#include "../platform/PugiXmlParser.h"
#include <iostream>
#include <fstream>
#include <sstream>
#include "../debug.h"

/**
 * @brief Construct an asset pack loader with a reference to the registry.
 *
 * @param registry Reference to the asset registry where loaded assets will be stored
 */
AssetPackLoader::AssetPackLoader(AssetRegistry &registry)
    : registry_(registry)
{
}

/**
 * @brief Destroy the asset pack loader.
 */
AssetPackLoader::~AssetPackLoader() {}

/**
 * @brief Load a package from an XML file.
 *
 * This method reads the XML file from disk, extracts the package name from the path,
 * and parses both the assets and configurations sections. If parsing succeeds,
 * the package is marked as loaded in the registry.
 *
 * @param packagePath Path to the XML package file
 * @return true if loading and parsing succeeded, false otherwise
 */
bool AssetPackLoader::loadPackage(const std::string &packagePath)
{
    DEBUG_LOG("Attempting to load package from: " << packagePath);

    // Read XML file
    std::ifstream file(packagePath);
    if (!file.is_open())
    {
        std::cerr << "Failed to open package file: " << packagePath << std::endl;
        return false;
    }

    std::stringstream buffer;
    buffer << file.rdbuf();
    std::string xmlContent = buffer.str();
    file.close();

    // Extract package name from path
    size_t lastSlash = packagePath.find_last_of("/\\");
    size_t secondLastSlash = packagePath.find_last_of("/\\", lastSlash - 1);
    std::string packageName = packagePath.substr(secondLastSlash + 1, lastSlash - secondLastSlash - 1);

    DEBUG_LOG("Extracted package name: " << packageName);

    // Parse assets and configurations
    DEBUG_LOG("Parsing assets...");
    if (!parseAssets(xmlContent, packageName))
    {
        std::cerr << "Failed to parse assets from package: " << packageName << std::endl;
        return false;
    }

    DEBUG_LOG("Parsing configurations...");
    if (!parseConfigurations(xmlContent, packageName))
    {
        std::cerr << "Failed to parse configurations from package: " << packageName << std::endl;
        return false;
    }

    registry_.markPackageLoaded(packageName);
    DEBUG_LOG("Successfully loaded package: " << packageName);
    return true;
}

/**
 * @brief Load the developer package specifically.
 *
 * Convenience method that loads the developer package from the
 * standard location (assets/packages/DeveloperPackage/package.xml).
 *
 * @return true if loading succeeded, false otherwise
 */
bool AssetPackLoader::loadDeveloperPackage()
{
    return loadPackage("assets/packages/DeveloperPackage/package.xml");
}

/**
 * @brief Parse the assets section from XML content and register them with the asset registry.
 *
 * This method extracts asset definitions from the XML content and registers them
 * with the asset registry. Currently supports font assets, with placeholders for
 * other asset types (textures, materials, mesh recipes).
 *
 * @param xmlContent The complete XML content of the package file
 * @param packageName The name of the package being loaded (used for asset ID prefixing)
 * @return true if parsing succeeded (or no assets section found), false on parsing errors
 */
bool AssetPackLoader::parseAssets(const std::string &xmlContent, const std::string &packageName)
{
    // Simple XML parsing - in a real implementation this would use pugixml properly
    // For now, we'll do basic string parsing to extract asset information

    size_t assetsStart = xmlContent.find("<assets>");
    size_t assetsEnd = xmlContent.find("</assets>");

    if (assetsStart == std::string::npos || assetsEnd == std::string::npos)
    {
        return true; // No assets section is OK
    }

    std::string assetsSection = xmlContent.substr(assetsStart, assetsEnd - assetsStart);

    // Parse font assets
    size_t pos = 0;
    while ((pos = assetsSection.find("<asset type=\"font\"", pos)) != std::string::npos)
    {
        size_t endPos = assetsSection.find("</asset>", pos);
        if (endPos == std::string::npos)
            break;

        std::string assetXml = assetsSection.substr(pos, endPos - pos + 8);
        auto fontAsset = parseFontAsset(assetXml);
        if (fontAsset)
        {
            // Extract ID
            size_t idStart = assetXml.find("id=\"") + 4;
            size_t idEnd = assetXml.find("\"", idStart);
            std::string id = assetXml.substr(idStart, idEnd - idStart);

            registry_.registerFont(stringToAssetId(packageName, id), std::move(fontAsset));
        }
        pos = endPos;
    }

    // Parse texture assets
    pos = 0;
    while ((pos = assetsSection.find("<asset type=\"texture\"", pos)) != std::string::npos)
    {
        size_t endPos = assetsSection.find("</asset>", pos);
        if (endPos == std::string::npos)
            break;

        std::string assetXml = assetsSection.substr(pos, endPos - pos + 8);
        auto texAsset = parseTextureAsset(assetXml);
        if (texAsset)
        {
            // Extract ID
            size_t idStart = assetXml.find("id=\"") + 4;
            size_t idEnd = assetXml.find("\"", idStart);
            std::string id = assetXml.substr(idStart, idEnd - idStart);

            registry_.registerTexture(stringToAssetId(packageName, id), std::move(texAsset));
        }
        pos = endPos;
    }

    // Parse material assets (simplified: only shader_id captured now)
    pos = 0;
    while ((pos = assetsSection.find("<asset type=\"material\"", pos)) != std::string::npos)
    {
        size_t endPos = assetsSection.find("</asset>", pos);
        if (endPos == std::string::npos)
            break;

        std::string assetXml = assetsSection.substr(pos, endPos - pos + 8);
        auto matAsset = parseMaterialAsset(assetXml);
        if (matAsset)
        {
            // Extract ID
            size_t idStart = assetXml.find("id=\"") + 4;
            size_t idEnd = assetXml.find("\"", idStart);
            std::string id = assetXml.substr(idStart, idEnd - idStart);

            registry_.registerMaterial(stringToAssetId(packageName, id), std::move(matAsset));
        }
        pos = endPos;
    }

    // Parse mesh recipe assets
    pos = 0;
    while ((pos = assetsSection.find("<asset type=\"mesh_recipe\"", pos)) != std::string::npos)
    {
        size_t endPos = assetsSection.find("</asset>", pos);
        if (endPos == std::string::npos)
            break;

        std::string assetXml = assetsSection.substr(pos, endPos - pos + 8);
        auto meshAsset = parseMeshRecipeAsset(assetXml);
        if (meshAsset)
        {
            // Extract ID
            size_t idStart = assetXml.find("id=\"") + 4;
            size_t idEnd = assetXml.find("\"", idStart);
            std::string id = assetXml.substr(idStart, idEnd - idStart);

            registry_.registerMeshRecipe(stringToAssetId(packageName, id), std::move(meshAsset));
        }
        pos = endPos;
    }

    return true;
}

/**
 * @brief Parse the configurations section from XML content and register scene configurations.
 *
 * This method extracts scene configuration definitions from the XML content and
 * registers them with the asset registry. Special handling is provided for the
 * DefaultSphereWorldScene which is automatically set as the default scene.
 *
 * @param xmlContent The complete XML content of the package file
 * @param packageName The name of the package being loaded (used for scene ID prefixing)
 * @return true if parsing succeeded (or no configurations section found), false on parsing errors
 */
bool AssetPackLoader::parseConfigurations(const std::string &xmlContent, const std::string &packageName)
{
    // Search for scene_config elements throughout the entire XML document
    // (not just within a single configurations section, as there may be multiple)
    DEBUG_LOG("Searching for scene_config elements throughout entire XML...");

    size_t pos = 0;
    while ((pos = xmlContent.find("<scene_config", pos)) != std::string::npos)
    {
        size_t endPos = xmlContent.find("</scene_config>", pos);
        if (endPos == std::string::npos)
            break;

        std::string sceneXml = xmlContent.substr(pos, endPos - pos + 15);
        DEBUG_LOG("Found scene_config: " << sceneXml.substr(0, 100) << "...");

        // Extract scene ID
        size_t idStart = sceneXml.find("id=\"") + 4;
        size_t idEnd = sceneXml.find("\"", idStart);
        std::string sceneId = sceneXml.substr(idStart, idEnd - idStart);
        DEBUG_LOG("Extracted scene ID: " << sceneId);

        // For DefaultSphereWorldScene, register it as the default scene
        if (sceneId == "DefaultSphereWorldScene")
        {
            registry_.registerSceneConfig(stringToAssetId(packageName, sceneId), sceneXml);
            registry_.setDefaultScene(stringToAssetId(packageName, sceneId));
            DEBUG_LOG("Registered default scene: " << packageName << "::" << sceneId);
        }

        pos = endPos;
    }

    return true;
}

/**
 * @brief Parse a font asset from an XML node.
 *
 * Extracts font asset properties including file path, size, and antialiasing
 * settings from the provided XML node string.
 *
 * @param xmlNode The XML node string containing font asset definition
 * @return A unique pointer to the parsed FontAsset, or nullptr on parsing failure
 */
std::unique_ptr<FontAsset> AssetPackLoader::parseFontAsset(const std::string &xmlNode)
{
    auto asset = std::make_unique<FontAsset>();

    // Extract path
    size_t pathStart = xmlNode.find("<path>") + 6;
    size_t pathEnd = xmlNode.find("</path>", pathStart);
    if (pathStart != std::string::npos && pathEnd != std::string::npos)
    {
        asset->path = xmlNode.substr(pathStart, pathEnd - pathStart);
    }

    // Extract size
    size_t sizeStart = xmlNode.find("size=\"") + 6;
    size_t sizeEnd = xmlNode.find("\"", sizeStart);
    if (sizeStart != std::string::npos && sizeEnd != std::string::npos)
    {
        asset->size = std::stoi(xmlNode.substr(sizeStart, sizeEnd - sizeStart));
    }

    // Extract antialiasing
    size_t aaStart = xmlNode.find("antialiasing=\"") + 14;
    size_t aaEnd = xmlNode.find("\"", aaStart);
    if (aaStart != std::string::npos && aaEnd != std::string::npos)
    {
        asset->antialiasing = xmlNode.substr(aaStart, aaEnd - aaStart) == "true";
    }

    return asset;
}

/**
 * @brief Parse a texture asset from an XML node.
 *
 * Extracts texture asset properties including file path, format, mipmaps setting,
 * and filtering mode from the provided XML node string.
 *
 * @param xmlNode The XML node string containing texture asset definition
 * @return A unique pointer to the parsed TextureAsset, or nullptr on parsing failure
 */
std::unique_ptr<TextureAsset> AssetPackLoader::parseTextureAsset(const std::string &xmlNode)
{
    auto asset = std::make_unique<TextureAsset>();

    // Extract path
    size_t pathStart = xmlNode.find("<path>") + 6;
    size_t pathEnd = xmlNode.find("</path>", pathStart);
    if (pathStart != std::string::npos && pathEnd != std::string::npos)
    {
        asset->path = xmlNode.substr(pathStart, pathEnd - pathStart);
    }

    // Extract format
    size_t formatStart = xmlNode.find("format=\"") + 8;
    size_t formatEnd = xmlNode.find("\"", formatStart);
    if (formatStart != std::string::npos && formatEnd != std::string::npos)
    {
        asset->format = xmlNode.substr(formatStart, formatEnd - formatStart);
    }

    // Extract mipmaps
    size_t mipsStart = xmlNode.find("mipmaps=\"") + 9;
    size_t mipsEnd = xmlNode.find("\"", mipsStart);
    if (mipsStart != std::string::npos && mipsEnd != std::string::npos)
    {
        asset->mipmaps = xmlNode.substr(mipsStart, mipsEnd - mipsStart) == "true";
    }

    // Extract filter
    size_t filterStart = xmlNode.find("filter=\"") + 8;
    size_t filterEnd = xmlNode.find("\"", filterStart);
    if (filterStart != std::string::npos && filterEnd != std::string::npos)
    {
        asset->filter = xmlNode.substr(filterStart, filterEnd - filterStart);
    }

    return asset;
}

/**
 * @brief Parse a material asset from an XML node.
 *
 * Extracts material asset properties including shader ID and material parameters
 * from the provided XML node string. Parameter parsing is currently simplified.
 *
 * @param xmlNode The XML node string containing material asset definition
 * @return A unique pointer to the parsed MaterialAsset, or nullptr on parsing failure
 */
std::unique_ptr<MaterialAsset> AssetPackLoader::parseMaterialAsset(const std::string &xmlNode)
{
    auto asset = std::make_unique<MaterialAsset>();

    // Extract shader_id
    size_t shaderStart = xmlNode.find("<shader_id>") + 11;
    size_t shaderEnd = xmlNode.find("</shader_id>", shaderStart);
    if (shaderStart != std::string::npos && shaderEnd != std::string::npos)
    {
        asset->shaderId = xmlNode.substr(shaderStart, shaderEnd - shaderStart);
    }

    // Parse params (simplified)
    size_t paramsStart = xmlNode.find("<params>");
    size_t paramsEnd = xmlNode.find("</params>", paramsStart);
    if (paramsStart != std::string::npos && paramsEnd != std::string::npos)
    {
        std::string paramsSection = xmlNode.substr(paramsStart, paramsEnd - paramsStart);
        // Basic parsing of common parameters would go here
    }

    return asset;
}

/**
 * @brief Parse a mesh recipe asset from an XML node.
 *
 * Extracts mesh recipe asset properties including generator type and parameters
 * from the provided XML node string. Parameter parsing is currently simplified.
 *
 * @param xmlNode The XML node string containing mesh recipe asset definition
 * @return A unique pointer to the parsed MeshRecipeAsset, or nullptr on parsing failure
 */
std::unique_ptr<MeshRecipeAsset> AssetPackLoader::parseMeshRecipeAsset(const std::string &xmlNode)
{
    auto asset = std::make_unique<MeshRecipeAsset>();

    // Extract generator
    size_t genStart = xmlNode.find("<generator>") + 11;
    size_t genEnd = xmlNode.find("</generator>", genStart);
    if (genStart != std::string::npos && genEnd != std::string::npos)
    {
        asset->generator = xmlNode.substr(genStart, genEnd - genStart);
    }

    // Parse params (simplified)
    size_t paramsStart = xmlNode.find("<params>");
    size_t paramsEnd = xmlNode.find("</params>", paramsStart);
    if (paramsStart != std::string::npos && paramsEnd != std::string::npos)
    {
        std::string paramsSection = xmlNode.substr(paramsStart, paramsEnd - paramsStart);
        // Basic parsing of parameters would go here
    }

    return asset;
}

AssetId AssetPackLoader::stringToAssetId(const std::string &packageName, const std::string &assetName)
{
    // Create a fully qualified asset name
    std::string fullName = packageName + "::" + assetName;

    // Use FNV-1a hash algorithm for consistent ID generation
    constexpr uint32_t FNV_OFFSET_BASIS = 2166136261u;
    constexpr uint32_t FNV_PRIME = 16777619u;

    uint32_t hash = FNV_OFFSET_BASIS;
    for (char c : fullName)
    {
        hash ^= static_cast<uint32_t>(c);
        hash *= FNV_PRIME;
    }

    // Ensure we don't return 0 (reserved for invalid/empty ID)
    return (hash == 0) ? 1 : hash;
}


================================================================================
FILE: src\core\AssetPackLoader.h
================================================================================

#ifndef ASSET_PACK_LOADER_H
#define ASSET_PACK_LOADER_H

#include "AssetRegistry.h"
#include <memory>
#include <string>

/**
 * @brief Loads and parses asset packages from XML files.
 *
 * The AssetPackLoader is responsible for reading XML package files,
 * parsing their contents, and registering the defined assets with
 * the AssetRegistry. It supports loading different types of assets
 * including fonts, textures, materials, and mesh recipes.
 */
class AssetPackLoader
{
public:
    /**
     * @brief Construct an asset pack loader with a reference to the registry.
     *
     * @param registry Reference to the asset registry where loaded assets will be stored
     */
    AssetPackLoader(AssetRegistry &registry);

    /**
     * @brief Destroy the asset pack loader.
     */
    ~AssetPackLoader();

    /**
     * @brief Load a package from an XML file.
     *
     * Reads the XML file, parses its contents, and registers all assets
     * and configurations with the asset registry.
     *
     * @param packagePath Path to the XML package file
     * @return true if loading succeeded, false otherwise
     */
    bool loadPackage(const std::string &packagePath);

    /**
     * @brief Load the developer package specifically.
     *
     * Convenience method that loads the developer package from the
     * standard location (assets/packages/DeveloperPackage/package.xml).
     *
     * @return true if loading succeeded, false otherwise
     */
    bool loadDeveloperPackage();

private:
    AssetRegistry &registry_; /**< Reference to the asset registry */

    /**
     * @brief Parse the assets section from XML content.
     *
     * @param xmlContent The raw XML content string
     * @param packageName Name of the package being loaded
     * @return true if parsing succeeded, false otherwise
     */
    bool parseAssets(const std::string &xmlContent, const std::string &packageName);

    /**
     * @brief Parse the configurations section from XML content.
     *
     * @param xmlContent The raw XML content string
     * @param packageName Name of the package being loaded
     * @return true if parsing succeeded, false otherwise
     */
    bool parseConfigurations(const std::string &xmlContent, const std::string &packageName);

    /**
     * @brief Parse a font asset from an XML node.
     *
     * @param xmlNode XML string containing the font asset definition
     * @return Unique pointer to the parsed font asset
     */
    std::unique_ptr<FontAsset> parseFontAsset(const std::string &xmlNode);

    /**
     * @brief Parse a texture asset from an XML node.
     *
     * @param xmlNode XML string containing the texture asset definition
     * @return Unique pointer to the parsed texture asset
     */
    std::unique_ptr<TextureAsset> parseTextureAsset(const std::string &xmlNode);

    /**
     * @brief Parse a material asset from an XML node.
     *
     * @param xmlNode XML string containing the material asset definition
     * @return Unique pointer to the parsed material asset
     */
    std::unique_ptr<MaterialAsset> parseMaterialAsset(const std::string &xmlNode);

    /**
     * @brief Parse a mesh recipe asset from an XML node.
     *
     * @param xmlNode XML string containing the mesh recipe asset definition
     * @return Unique pointer to the parsed mesh recipe asset
     */
    std::unique_ptr<MeshRecipeAsset> parseMeshRecipeAsset(const std::string &xmlNode);

    /**
     * @brief Convert string asset identifier to numeric AssetId.
     *
     * Uses FNV-1a hash algorithm to generate consistent numeric IDs from string names.
     * This ensures compatibility with the numeric AssetId system while maintaining
     * deterministic asset identification.
     *
     * @param packageName Name of the package
     * @param assetName Name of the asset within the package
     * @return Numeric AssetId for the asset
     */
    AssetId stringToAssetId(const std::string &packageName, const std::string &assetName);
};

#endif



================================================================================
FILE: src\core\AssetRegistry.cpp
================================================================================



================================================================================
FILE: src\core\AssetRegistry.h
================================================================================

#ifndef ASSET_REGISTRY_H
#define ASSET_REGISTRY_H

#include <unordered_map>
#include <string>
#include <memory>
#include <variant>
#include <vector>
#include "AssetIds.h"

// Forward declarations for asset types
struct FontAsset;
struct TextureAsset;
struct MaterialAsset;
struct MeshRecipeAsset;

// Use numeric AssetId as defined in AssetIds.h for performance and consistency
using AssetId = Assets::AssetId;

/**
 * @brief Central registry for managing all game assets.
 *
 * The AssetRegistry stores and provides access to all types of assets used
 * in the simulation, including fonts, textures, materials, and mesh recipes.
 * It also manages package loading state and scene configurations for
 * data-driven world generation.
 */
class AssetRegistry
{
public:
    /**
     * @brief Construct an empty asset registry.
     */
    AssetRegistry();

    /**
     * @brief Destroy the asset registry and free all assets.
     */
    ~AssetRegistry();

    // Asset storage and retrieval

    /**
     * @brief Register a font asset with the given ID.
     *
     * @param id Unique identifier for the font asset
     * @param asset Unique pointer to the font asset
     */
    void registerFont(AssetId id, std::unique_ptr<FontAsset> asset);

    /**
     * @brief Register a texture asset with the given ID.
     *
     * @param id Unique identifier for the texture asset
     * @param asset Unique pointer to the texture asset
     */
    void registerTexture(AssetId id, std::unique_ptr<TextureAsset> asset);

    /**
     * @brief Register a material asset with the given ID.
     *
     * @param id Unique identifier for the material asset
     * @param asset Unique pointer to the material asset
     */
    void registerMaterial(AssetId id, std::unique_ptr<MaterialAsset> asset);

    /**
     * @brief Register a mesh recipe asset with the given ID.
     *
     * @param id Unique identifier for the mesh recipe asset
     * @param asset Unique pointer to the mesh recipe asset
     */
    void registerMeshRecipe(AssetId id, std::unique_ptr<MeshRecipeAsset> asset);

    /**
     * @brief Get a font asset by ID.
     *
     * @param id The asset identifier
     * @return Pointer to the font asset, or nullptr if not found
     */
    const FontAsset *getFont(AssetId id) const;

    /**
     * @brief Get a texture asset by ID.
     *
     * @param id The asset identifier
     * @return Pointer to the texture asset, or nullptr if not found
     */
    const TextureAsset *getTexture(AssetId id) const;

    /**
     * @brief Get a material asset by ID.
     *
     * @param id The asset identifier
     * @return Pointer to the material asset, or nullptr if not found
     */
    const MaterialAsset *getMaterial(AssetId id) const;

    /**
     * @brief Get a mesh recipe asset by ID.
     *
     * @param id The asset identifier
     * @return Pointer to the mesh recipe asset, or nullptr if not found
     */
    const MeshRecipeAsset *getMeshRecipe(AssetId id) const;

    // Package management

    /**
     * @brief Check if a package has been loaded.
     *
     * @param packageName Name of the package to check
     * @return true if the package is loaded, false otherwise
     */
    bool hasPackage(const std::string &packageName) const;

    /**
     * @brief Mark a package as loaded.
     *
     * @param packageName Name of the package to mark as loaded
     */
    void markPackageLoaded(const std::string &packageName);

    /**
     * @brief Get the list of all loaded packages.
     *
     * @return Const reference to the vector of loaded package names
     */
    const std::vector<std::string> &getLoadedPackages() const;

    // Scene configuration management

    /**
     * @brief Register a scene configuration with the given ID.
     *
     * @param id Unique identifier for the scene configuration
     * @param sceneXml XML string containing the scene configuration
     */
    void registerSceneConfig(AssetId id, const std::string &sceneXml);

    /**
     * @brief Get a scene configuration by ID.
     *
     * @param id The scene configuration identifier
     * @return Pointer to the XML string, or nullptr if not found
     */
    const std::string *getSceneConfig(AssetId id) const;

    /**
     * @brief Set the default scene configuration.
     *
     * @param id The scene configuration identifier to set as default
     */
    void setDefaultScene(AssetId id);

    /**
     * @brief Get the default scene configuration XML.
     *
     * @return Pointer to the default scene XML string, or nullptr if not set
     */
    const std::string *getDefaultScene() const;

    /**
     * @brief Get the ID of the default scene configuration.
     *
     * @return The default scene configuration ID
     */
    AssetId getDefaultSceneId() const;

    /**
     * @brief Clear all assets and configurations.
     *
     * Used for hot reloading to reset the registry state.
     */
    void clear();

private:
    std::unordered_map<AssetId, std::unique_ptr<FontAsset>> fonts_;             /**< Registered font assets */
    std::unordered_map<AssetId, std::unique_ptr<TextureAsset>> textures_;       /**< Registered texture assets */
    std::unordered_map<AssetId, std::unique_ptr<MaterialAsset>> materials_;     /**< Registered material assets */
    std::unordered_map<AssetId, std::unique_ptr<MeshRecipeAsset>> meshRecipes_; /**< Registered mesh recipe assets */

    // Scene configurations
    std::unordered_map<AssetId, std::string> sceneConfigs_; /**< Registered scene configurations */
    AssetId defaultSceneId_;                                /**< ID of the default scene configuration */

    std::vector<std::string> loadedPackages_; /**< List of loaded package names */
};

// Asset type definitions

/**
 * @brief Font asset data structure.
 *
 * Contains information needed to load and render fonts.
 */
struct FontAsset
{
    std::string path;  /**< File path to the font file */
    int size;          /**< Font size in points */
    bool antialiasing; /**< Whether to use antialiasing */
};

/**
 * @brief Texture asset data structure.
 *
 * Contains information needed to load and configure textures.
 */
struct TextureAsset
{
    std::string path;   /**< File path to the texture file */
    std::string format; /**< Texture format (e.g., "RGBA", "RGB") */
    bool mipmaps;       /**< Whether to generate mipmaps */
    std::string filter; /**< Texture filtering mode */
};

/**
 * @brief Material asset data structure.
 *
 * Contains shader and parameter information for materials.
 */
struct MaterialAsset
{
    std::string shaderId;                                                                /**< ID of the shader to use */
    std::unordered_map<std::string, std::variant<std::string, float, int, bool>> params; /**< Material parameters */
};

/**
 * @brief Mesh recipe asset data structure.
 *
 * Contains procedural generation parameters for meshes.
 */
struct MeshRecipeAsset
{
    std::string generator;                                                               /**< Name of the generator to use */
    std::unordered_map<std::string, std::variant<float, int, bool, std::string>> params; /**< Generation parameters */
};

#endif


================================================================================
FILE: src\core\Engine.cpp
================================================================================

#include "Engine.h"
#include "../config/PhysicsConfigParser.h"
#include "../config/RenderConfigParser.h"
#include "../config/InputConfigParser.h"
#include "../events/WorldGenEvents.h"
#include "../physics/ExponentialAirDensityModel.h"
#include "../physics/PerlinWindModel.h"
#include "../physics/ImpulseCollisionResolver.h"
#include "../systems/PhysicsSystem.h"
#include "../systems/InputSystem.h"
#include "../systems/VehicleControlSystem.h"
#include "../systems/BootstrapSystem.h"
#include "../systems/WorldGenSystem.h"
#include "../systems/VisualizationSystem.h"
#include "../systems/ConsoleSystem.h"
#include "../systems/AssetHotReloadSystem.h"
#include "../systems/MaterialManager.h"
#include "../platform/WinInputDevice.h"
#include "../platform/NlohmannJsonParser.h"
#include "../debug.h"

#include <filesystem>
#include <iostream>
#include <sstream>
#include <iomanip>
#include <chrono>
#include <thread>

Engine::Engine()
    : eventBus(),
      world(eventBus),
      simClock(0.016667f), // Default 60Hz
      assetRegistry(),
      assetLoader(assetRegistry),
      windowHandle(nullptr),
      running(false),
      frameCount(0),
      fpsUpdateInterval(1.0f)
{
    // Subscribe to scene loaded events to update window title
    eventBus.subscribe(EventType::SceneLoaded, [this](const IEvent &event)
                       {
        const auto &sceneEvent = static_cast<const SceneLoadedEvent &>(event);
        updateWindowTitle(sceneEvent.sceneName); });
}

Engine::~Engine()
{
    shutdownSystems();

    // Clean up window
    if (windowHandle != nullptr)
    {
        DestroyWindow(windowHandle);
    }
}

bool Engine::initialize(const std::string &physicsConfigPath,
                        const std::string &renderConfigPath,
                        const std::string &inputConfigPath)
{
    DEBUG_LOG("Initializing FPV Flight Simulator Engine...");

    // Load configuration files
    DEBUG_LOG("Loading physics config from " + physicsConfigPath);
    auto physicsJsonParser = std::make_unique<NlohmannJsonParser>();
    PhysicsConfigParser physicsParser(std::move(physicsJsonParser));
    physicsConfig = physicsParser.loadFromFile(physicsConfigPath);

    DEBUG_LOG("Loading render config from " + renderConfigPath);
    auto renderJsonParser = std::make_unique<NlohmannJsonParser>();
    Render::RenderConfigParser renderParser(std::move(renderJsonParser));
    renderConfig = renderParser.loadFromFile(renderConfigPath);

    // Initialize simulation clock with physics timestep
    simClock = SimClock(physicsConfig.fixedTimestep);

    // Create window
    DEBUG_LOG("Creating window");
    windowHandle = createWindow();
    if (windowHandle == nullptr)
    {
        std::cerr << "Failed to create window!" << std::endl;
        return false;
    }

    // Initialize systems
    DEBUG_LOG("Initializing systems");
    initializeSystems();

    // Load input configuration
    DEBUG_LOG("Loading input configuration from " + inputConfigPath);
    InputSystem *inputSystem = world.getSystem<InputSystem>();
    if (inputSystem)
    {
        if (!inputSystem->loadConfiguration(inputConfigPath))
        {
            DEBUG_LOG("Warning: Could not load input configuration, using defaults");
        }
    }

    return true;
}

bool Engine::discoverAssets()
{
    DEBUG_LOG("Discovering assets...");

    // Delegate asset discovery to the BootstrapSystem
    BootstrapSystem *bootstrapSys = world.getSystem<BootstrapSystem>();
    if (!bootstrapSys)
    {
        std::cerr << "Error: BootstrapSystem not found in world!" << std::endl;
        return false;
    }

    // Initialize bootstrap system which handles asset discovery
    bootstrapSys->Init();

    // Setup asset hot-reload
    AssetHotReloadSystem *hotReloadSys = world.getSystem<AssetHotReloadSystem>();
    if (hotReloadSys)
    {
        int discoveredPackages = hotReloadSys->watchAllPackages();
        if (discoveredPackages == 0)
        {
            DEBUG_LOG("No packages found for hot-reload monitoring. You can add packages to assets/packages/ directory.");
        }
    }

    // Force-check for DeveloperPackage specifically
    std::filesystem::path devPackagePath = std::filesystem::path("assets/packages/DeveloperPackage/package.xml");
    if (std::filesystem::exists(devPackagePath))
    {
        DEBUG_LOG("DeveloperPackage found at: " + devPackagePath.string() + ". Make sure this package is properly loaded and its scenes are compiled.");
    }
    else
    {
        std::cerr << "Warning: DeveloperPackage not found at expected path: " << devPackagePath << std::endl;
    }

    return true;
}

bool Engine::resolveAssets()
{
    DEBUG_LOG("Resolving assets...");
    // Asset resolution is currently handled by the BootstrapSystem during Init()
    // This separate method allows for future extension of the resolution pipeline
    return true;
}

bool Engine::displayCompiledScene()
{
    DEBUG_LOG("Displaying compiled scene...");
    // Scene compilation and display is delegated to the WorldGenSystem and VisualizationSystem
    // These are triggered by events from the BootstrapSystem
    return true;
}

bool Engine::loadAndDisplayScene(const std::string &sceneId)
{
    DEBUG_LOG("Loading and displaying scene: " + sceneId);
    // Find the WorldGenSystem which is responsible for scene loading
    WorldGenSystem *worldGenSys = world.getSystem<WorldGenSystem>();
    if (!worldGenSys)
    {
        std::cerr << "Error: WorldGenSystem not found in world for scene loading!" << std::endl;
        return false;
    }

    DEBUG_LOG("Attempting to load scene: " + sceneId);

    // Call the WorldGenSystem's LoadScene method with the specified scene ID
    bool success = worldGenSys->LoadScene(sceneId);

    if (!success)
    {
        DEBUG_LOG("Failed to load scene: " + sceneId + ". Falling back to default scene generation...");
        // Attempt to use the default scene as a fallback
        worldGenSys->GenerateDefaultSphereWorld();
    }

    return true; // Even if scene loading failed, we return true because we've fallen back to a default scene
}

int Engine::run()
{
    DEBUG_LOG("Running engine main loop...");

    if (windowHandle == nullptr)
    {
        std::cerr << "ERROR: Cannot run main loop - window handle is nullptr!" << std::endl;
        return 1;
    }

    // Show window and initialize timing
    DEBUG_LOG("Showing window...");
    ShowWindow(windowHandle, SW_SHOW);
    UpdateWindow(windowHandle);

    running = true;
    lastFrameTime = std::chrono::high_resolution_clock::now();
    lastFpsUpdateTime = lastFrameTime;

    DEBUG_LOG("=== ENTERING MAIN GAME LOOP ===");

    try
    {
        while (running)
        {
            // Process Windows messages
            if (!processWindowMessages())
                break;

            // Calculate delta time
            auto currentTime = std::chrono::high_resolution_clock::now();
            float deltaTime = std::chrono::duration<float>(currentTime - lastFrameTime).count();
            lastFrameTime = currentTime;

            // Cap delta time to prevent spiral of death
            if (deltaTime > 0.25f)
                deltaTime = 0.25f;

            // Update simulation clock
            simClock.tick(deltaTime);

            // Fixed timestep updates (physics)
            updateFixedTimestep(deltaTime);

            // Variable timestep updates (input, rendering)
            updateVariableTimestep(deltaTime);

            // Update frame rate display
            updateFrameRate();

            // Small delay for first few frames
            if (frameCount < 10)
                std::this_thread::sleep_for(std::chrono::milliseconds(16));
        }
    }
    catch (const std::exception &e)
    {
        std::cerr << "FATAL ERROR in main game loop: " << e.what() << std::endl;
        keepWindowAlive("Fatal error in main game loop: " + std::string(e.what()));
        return 1;
    }
    catch (...)
    {
        std::cerr << "UNKNOWN FATAL ERROR in main game loop" << std::endl;
        keepWindowAlive("Unknown fatal error occurred in the game loop");
        return 1;
    }

    DEBUG_LOG("=== MAIN LOOP EXITED ===");
    return 0;
}

HWND Engine::createWindow()
{
    const char CLASS_NAME[] = "FPV_FlightSimWindow";

    // Register window class
    WNDCLASSA wc = {};
    wc.lpfnWndProc = Engine::windowProcStatic;
    wc.hInstance = GetModuleHandle(NULL);
    wc.lpszClassName = CLASS_NAME;
    wc.hbrBackground = (HBRUSH)(COLOR_WINDOW + 1);
    wc.hCursor = LoadCursor(NULL, IDC_ARROW);

    if (!RegisterClassA(&wc))
    {
        std::cerr << "ERROR: Failed to register window class! Error code: " << GetLastError() << std::endl;
        return nullptr;
    }

    DEBUG_LOG("Creating window with title: " + renderConfig.getWindowTitle() + ", width: " + std::to_string(renderConfig.getWindowWidth()) + ", height: " + std::to_string(renderConfig.getWindowHeight()));

    // Create window
    HWND hwnd = CreateWindowExA(
        0,                                     // Optional window styles
        CLASS_NAME,                            // Window class
        renderConfig.getWindowTitle().c_str(), // Window text from config
        WS_OVERLAPPEDWINDOW,                   // Window style
        CW_USEDEFAULT, CW_USEDEFAULT,          // Position
        renderConfig.getWindowWidth(),         // Width from config
        renderConfig.getWindowHeight(),        // Height from config
        NULL,                                  // Parent window
        NULL,                                  // Menu
        GetModuleHandle(NULL),                 // Instance handle
        this                                   // Additional data - pass this pointer
    );

    if (hwnd == nullptr)
    {
        std::cerr << "ERROR: Failed to create window! Error code: " << GetLastError() << std::endl;
    }

    return hwnd;
}

void Engine::updateWindowTitle(const std::string &sceneName)
{
    if (windowHandle != nullptr)
    {
        std::string newTitle = "FPV Flight Sim - " + sceneName;
        SetWindowTextA(windowHandle, newTitle.c_str());
        DEBUG_LOG("Updated window title to: " + newTitle);
    }
}

LRESULT CALLBACK Engine::windowProcStatic(HWND hwnd, UINT uMsg, WPARAM wParam, LPARAM lParam)
{
    // Get the Engine instance
    if (uMsg == WM_CREATE)
    {
        CREATESTRUCTA *createStruct = reinterpret_cast<CREATESTRUCTA *>(lParam);
        SetWindowLongPtrA(hwnd, GWLP_USERDATA,
                          reinterpret_cast<LONG_PTR>(createStruct->lpCreateParams));
    }

    // Forward to instance method
    Engine *engine = reinterpret_cast<Engine *>(GetWindowLongPtrA(hwnd, GWLP_USERDATA));
    if (engine)
    {
        return engine->handleWindowMessage(hwnd, uMsg, wParam, lParam);
    }

    return DefWindowProc(hwnd, uMsg, wParam, lParam);
}

LRESULT Engine::handleWindowMessage(HWND hwnd, UINT uMsg, WPARAM wParam, LPARAM lParam)
{
    switch (uMsg)
    {
    case WM_CLOSE:
        PostQuitMessage(0);
        return 0;
    case WM_PAINT:
    {
        // For OpenGL rendering, we don't need to do anything here
        // Just validate the update region to prevent Windows from sending more WM_PAINT messages
        PAINTSTRUCT ps;
        BeginPaint(hwnd, &ps);
        EndPaint(hwnd, &ps);
        return 0;
    }
    case WM_SIZE:
    {
        // Handle window resize - important for OpenGL viewport
        int width = LOWORD(lParam);
        int height = HIWORD(lParam);

        // Store the new dimensions for the rendering system
        DEBUG_LOG("Window resized to " + std::to_string(width) + "x" + std::to_string(height));

        // Let the game loop handle the resize during the next update cycle
        return 0;
    }
    }
    return DefWindowProc(hwnd, uMsg, wParam, lParam);
}

void Engine::initializeSystems()
{
    DEBUG_LOG("Initializing simulation systems...");

    // Initialize physics models
    auto airDensityModel = std::make_unique<ExponentialAirDensityModel>(
        physicsConfig.seaLevelDensity, physicsConfig.scaleHeight);
    auto windModel = std::make_unique<PerlinWindModel>(
        physicsConfig.baseWindSpeed, physicsConfig.turbulenceScale,
        physicsConfig.turbulenceIntensity, physicsConfig.randomSeed);
    auto collisionResolver = std::make_unique<ImpulseCollisionResolver>(
        physicsConfig.restitution, physicsConfig.friction);

    // Initialize material manager
    auto materialManager = std::make_unique<Material::MaterialManager>();
    materialManager->LoadDefaultMaterials();
    Material::MaterialManager *materialManagerPtr = materialManager.get();
    DEBUG_LOG("Material manager initialized with default materials");

    // Add core systems
    world.addSystem(std::make_unique<PhysicsSystem>(
        eventBus, *airDensityModel, *windModel, *collisionResolver));

    inputDevice_ = std::make_unique<WinInputDevice>();
    world.addSystem(std::make_unique<InputSystem>(eventBus, *inputDevice_));

    world.addSystem(std::make_unique<VehicleControlSystem>(eventBus));
    DEBUG_LOG("Core simulation systems initialized");

    // Add asset pipeline systems
    world.addSystem(std::make_unique<BootstrapSystem>(
        eventBus, world, assetRegistry, assetLoader));
    world.addSystem(std::make_unique<AssetHotReloadSystem>(
        assetRegistry, assetLoader));
    DEBUG_LOG("Asset pipeline systems initialized");

    // Add world generation system
    world.addSystem(std::make_unique<WorldGenSystem>(
        eventBus, world, assetRegistry, *materialManagerPtr));
    DEBUG_LOG("World generation system initialized");

    // Add UI and visualization systems
    world.addSystem(std::make_unique<ConsoleSystem>(eventBus));
    world.addSystem(std::make_unique<VisualizationSystem>(
        eventBus, world, windowHandle, *materialManagerPtr, renderConfig));
    DEBUG_LOG("Visualization systems initialized");

    // Store MaterialManager to keep it alive
    world.storeSharedResource("MaterialManager", std::move(materialManager));

    DEBUG_LOG("All systems initialized successfully");
}

void Engine::shutdownSystems()
{
    // World destructor will handle system shutdown
}

void Engine::keepWindowAlive(const std::string &errorMessage)
{
    // Show error dialog
    MessageBoxA(windowHandle, errorMessage.c_str(), "Error in Simulation", MB_ICONERROR | MB_OK);

    // Keep processing messages to prevent window from appearing to freeze
    MSG msg = {};
    while (PeekMessage(&msg, NULL, 0, 0, PM_REMOVE))
    {
        if (msg.message == WM_QUIT)
            break;

        TranslateMessage(&msg);
        DispatchMessage(&msg);
    }
}

bool Engine::processWindowMessages()
{
    MSG msg = {};
    if (PeekMessage(&msg, NULL, 0, 0, PM_REMOVE))
    {
        if (msg.message == WM_QUIT)
        {
            DEBUG_LOG("WM_QUIT received - exiting main loop");
            running = false;
            return false;
        }
        TranslateMessage(&msg);
        DispatchMessage(&msg);
    }
    return true;
}

void Engine::updateFixedTimestep(float deltaTime)
{
    // Get system references
    PhysicsSystem *physicsSystem = world.getSystem<PhysicsSystem>();
    VehicleControlSystem *vehicleControlSystem = world.getSystem<VehicleControlSystem>();

    const float fixedTimestep = simClock.getFixedTimestep();
    int physicsSteps = 0;

    // Run physics updates at fixed timestep
    while (simClock.shouldStepPhysics())
    {
        physicsSteps++;

        try
        {
            if (physicsSystem)
                physicsSystem->update(world, fixedTimestep);

            if (vehicleControlSystem)
                vehicleControlSystem->update(world, fixedTimestep);
        }
        catch (const std::exception &e)
        {
            std::cerr << "ERROR in fixed timestep update: " << e.what() << std::endl;
        }
    }
}

void Engine::updateVariableTimestep(float deltaTime)
{
    // Get system references
    InputSystem *inputSystem = world.getSystem<InputSystem>();
    VisualizationSystem *visualSystem = world.getSystem<VisualizationSystem>();
    AssetHotReloadSystem *hotReloadSystem = world.getSystem<AssetHotReloadSystem>();

    try
    {
        // Update input system
        if (inputSystem)
            inputSystem->update(world, deltaTime);

        // Update visualization system
        if (visualSystem)
        {
            auto startTime = std::chrono::high_resolution_clock::now();
            visualSystem->update(world, deltaTime);
            auto endTime = std::chrono::high_resolution_clock::now();

            float duration = std::chrono::duration<float>(endTime - startTime).count();
            if (frameCount % 60 == 0) // Log occasionally
                DEBUG_LOG("Visualization update: " + std::to_string(duration * 1000.0f) + "ms");
        }

        // Update asset hot reload system
        if (hotReloadSystem)
            hotReloadSystem->update(world, deltaTime);
    }
    catch (const std::exception &e)
    {
        std::cerr << "ERROR in variable timestep update: " << e.what() << std::endl;
    }
}

void Engine::updateFrameRate()
{
    frameCount++;
    auto currentTime = std::chrono::high_resolution_clock::now();
    float timeSinceLastFpsUpdate = std::chrono::duration<float>(currentTime - lastFpsUpdateTime).count();

    if (timeSinceLastFpsUpdate >= fpsUpdateInterval)
    {
        float fps = frameCount / timeSinceLastFpsUpdate;
        std::ostringstream oss;
        oss << renderConfig.getWindowTitle() << " - FPS: " << std::fixed << std::setprecision(0) << fps;
        SetWindowTextA(windowHandle, oss.str().c_str());

        frameCount = 0;
        lastFpsUpdateTime = currentTime;
    }
}


================================================================================
FILE: src\core\Engine.h
================================================================================

#pragma once

#include "EventBus.h"
#include "World.h"
#include "SimClock.h"
#include "AssetRegistry.h"
#include "AssetPackLoader.h"
#include "../config/PhysicsConfig.h"
#include "../config/RenderConfig.h"

#include <windows.h>
#include <memory>
#include <string>
#include <chrono>

// Forward declarations
class IInputDevice;
class BootstrapSystem;
class WorldGenSystem;
class VisualizationSystem;
class ConsoleSystem;
class AssetHotReloadSystem;
namespace Material
{
    class MaterialManager;
}

/**
 * @class Engine
 * @brief Core engine class that encapsulates the runtime environment.
 *
 * The Engine class provides a high-level interface for initializing,
 * configuring, and running the simulation. It handles system initialization,
 * asset discovery and resolution, and main loop execution while maintaining
 * a clean separation of responsibilities.
 */
class Engine
{
public:
    /**
     * @brief Construct a new Engine instance
     */
    Engine();

    /**
     * @brief Destroy the Engine instance and clean up resources
     */
    ~Engine();

    /**
     * @brief Initialize the engine with configuration files
     *
     * @param physicsConfigPath Path to physics configuration file
     * @param renderConfigPath Path to render configuration file
     * @param inputConfigPath Path to input configuration file
     * @return true if initialization succeeded
     * @return false if initialization failed
     */
    bool initialize(const std::string &physicsConfigPath = "configs/physics_config.json",
                    const std::string &renderConfigPath = "configs/render_config.json",
                    const std::string &inputConfigPath = "configs/input_config.json");

    /**
     * @brief Discover and load assets from development directories
     *
     * @return true if asset discovery succeeded
     * @return false if asset discovery failed
     */
    bool discoverAssets();

    /**
     * @brief Resolve assets into usable runtime resources
     *
     * @return true if asset resolution succeeded
     * @return false if asset resolution failed
     */
    bool resolveAssets();

    /**
     * @brief Request and display a compiled scene
     *
     * @return true if scene compilation and display succeeded
     * @return false if scene compilation or display failed
     */
    bool displayCompiledScene();

    /**
     * @brief Load and display a specific scene by ID
     *
     * @param sceneId The ID of the scene to load (e.g., "DeveloperScene")
     * @return true if scene loading and display succeeded
     * @return false if scene loading or display failed
     */
    bool loadAndDisplayScene(const std::string &sceneId);

    /**
     * @brief Update the window title to reflect the current scene
     *
     * @param sceneName The name of the currently loaded scene
     */
    void updateWindowTitle(const std::string &sceneName);

    /**
     * @brief Run the engine's main loop
     *
     * @return Exit code (0 for success)
     */
    int run();

private:
    // Core systems
    EventBus eventBus;
    World world;
    SimClock simClock;
    AssetRegistry assetRegistry;
    AssetPackLoader assetLoader;

    // Configuration
    Physics::PhysicsConfig physicsConfig;
    Render::RenderConfiguration renderConfig;

    // Platform components
    HWND windowHandle;
    bool running;
    std::unique_ptr<IInputDevice> inputDevice_;

    // Frame timing
    std::chrono::high_resolution_clock::time_point lastFrameTime;
    std::chrono::high_resolution_clock::time_point lastFpsUpdateTime;
    int frameCount;
    float fpsUpdateInterval;

    // Private helper methods
    HWND createWindow();
    static LRESULT CALLBACK windowProcStatic(HWND hwnd, UINT uMsg, WPARAM wParam, LPARAM lParam);
    LRESULT handleWindowMessage(HWND hwnd, UINT uMsg, WPARAM wParam, LPARAM lParam);

    // Systems management
    void initializeSystems();
    void shutdownSystems();

    // Main loop helpers
    bool processWindowMessages();
    void updateFixedTimestep(float deltaTime);
    void updateVariableTimestep(float deltaTime);
    void updateFrameRate();

    // Error handling helpers
    void keepWindowAlive(const std::string &errorMessage);
};


================================================================================
FILE: src\core\Entity.cpp
================================================================================

#include "Entity.h"
#include "debug.h"
#include "../components/TransformC.h"
#include "../components/RenderableC.h"
#include "../components/PhysicsC.h"
#include "../components/VehicleC.h"
#include "../components/AudioC.h"
#include "../components/LightC.h"
#include "Vector3D.h"
#include "Quaternion.h"

/**
 * @brief Construct an entity with a unique identifier.
 *
 * Initializes the entity with the provided ID and prepares the component storage.
 *
 * @param id The unique identifier for this entity
 */
Entity::Entity(unsigned int id) : id_(id)
{
    DEBUG_LOG("Creating entity with ID " + std::to_string(id));
}

/**
 * @brief Set the entity's position.
 *
 * @param x X coordinate
 * @param y Y coordinate
 * @param z Z coordinate
 */
void Entity::setPosition(float x, float y, float z)
{
    DEBUG_LOG("Setting position to (" + std::to_string(x) + ", " + std::to_string(y) + ", " + std::to_string(z) + ") for entity " + std::to_string(id_));
    auto transform = getComponent<TransformC>();

    if (!transform)
    {
        DEBUG_LOG("Creating new TransformC component");
        auto newTransform = std::make_unique<TransformC>();
        newTransform->position = Vector3D(x, y, z);
        addComponent<TransformC>(std::move(newTransform));
    }
    else
    {
        DEBUG_LOG("Updating existing TransformC component");
        transform->position = Vector3D(x, y, z);
    }
}

/**
 * @brief Set the entity's rotation.
 *
 * @param pitch Pitch in radians
 * @param yaw Yaw in radians
 * @param roll Roll in radians
 */
void Entity::setRotation(float pitch, float yaw, float roll)
{
    DEBUG_LOG("Setting rotation to (" + std::to_string(pitch) + ", " + std::to_string(yaw) + ", " + std::to_string(roll) + ") for entity " + std::to_string(id_));
    auto transform = getComponent<TransformC>();

    if (!transform)
    {
        DEBUG_LOG("Creating new TransformC component");
        auto newTransform = std::make_unique<TransformC>();
        newTransform->rotation = Quaternion::fromEulerAngles(pitch, yaw, roll);
        addComponent<TransformC>(std::move(newTransform));
    }
    else
    {
        DEBUG_LOG("Updating existing TransformC component");
        transform->rotation = Quaternion::fromEulerAngles(pitch, yaw, roll);
    }
}

/**
 * @brief Set the entity's scale.
 *
 * @param x X scale
 * @param y Y scale
 * @param z Z scale
 */
void Entity::setScale(float x, float y, float z)
{
    DEBUG_LOG("Setting scale to (" + std::to_string(x) + ", " + std::to_string(y) + ", " + std::to_string(z) + ") for entity " + std::to_string(id_));
    auto transform = getComponent<TransformC>();

    if (!transform)
    {
        DEBUG_LOG("Creating new TransformC component");
        auto newTransform = std::make_unique<TransformC>();
        newTransform->scale = Vector3D(x, y, z);
        addComponent<TransformC>(std::move(newTransform));
    }
    else
    {
        DEBUG_LOG("Updating existing TransformC component");
        transform->scale = Vector3D(x, y, z);
    }
}

/**
 * @brief Set renderable component properties.
 *
 * @param meshId ID of the mesh to use
 * @param materialId ID of the material to use
 * @param visible Whether the entity is visible
 */
void Entity::setRenderableComponent(const std::string &meshId, const std::string &materialId, bool visible)
{
    DEBUG_LOG("Setting renderable component with meshId: " + meshId + ", materialId: " + materialId + ", visible: " + (visible ? "true" : "false") + " for entity " + std::to_string(id_));
    auto renderable = getComponent<RenderableC>();

    if (!renderable)
    {
        DEBUG_LOG("Creating new RenderableC component");
        auto newRenderable = std::make_unique<RenderableC>(meshId, materialId, visible);
        addComponent<RenderableC>(std::move(newRenderable));
    }
    else
    {
        DEBUG_LOG("Updating existing RenderableC component");
        renderable->meshId = meshId;
        renderable->materialId = materialId;
        renderable->isVisible = visible;
    }
}

/**
 * @brief Set physics component properties.
 *
 * @param hasPhysics Whether the entity has physics
 * @param mass Entity mass
 * @param friction Entity friction
 * @param restitution Entity restitution (bounciness)
 */
void Entity::setPhysicsComponent(bool hasPhysics, float mass, float friction, float restitution)
{
    DEBUG_LOG("Setting physics component with hasPhysics: " + std::string(hasPhysics ? "true" : "false") + ", mass: " + std::to_string(mass) + ", friction: " + std::to_string(friction) + ", restitution: " + std::to_string(restitution) + " for entity " + std::to_string(id_));
    if (!hasPhysics)
    {
        DEBUG_LOG("Removing PhysicsC component");
        // If physics is disabled, remove the component if it exists
        components_.erase(std::type_index(typeid(PhysicsC)));
        return;
    }

    auto physics = getComponent<PhysicsC>();

    if (!physics)
    {
        DEBUG_LOG("Creating new PhysicsC component");
        auto newPhysics = std::make_unique<PhysicsC>(mass, friction, restitution);
        addComponent<PhysicsC>(std::move(newPhysics));
    }
    else
    {
        DEBUG_LOG("Updating existing PhysicsC component");
        physics->mass = mass;
        physics->friction = friction;
        physics->restitution = restitution;
    }
}

/**
 * @brief Set collider type for physics.
 *
 * @param colliderType Type of collider ("sphere", "box", etc.)
 */
void Entity::setColliderType(const std::string &colliderType)
{
    DEBUG_LOG("Setting collider type to " + colliderType + " for entity " + std::to_string(id_));
    auto physics = getComponent<PhysicsC>();

    if (!physics)
    {
        DEBUG_LOG("Creating new PhysicsC component");
        auto newPhysics = std::make_unique<PhysicsC>();
        newPhysics->colliderType = colliderType;
        addComponent<PhysicsC>(std::move(newPhysics));
    }
    else
    {
        DEBUG_LOG("Updating existing PhysicsC component");
        physics->colliderType = colliderType;
    }
}

/**
 * @brief Set collider size for physics.
 *
 * @param x X size
 * @param y Y size
 * @param z Z size
 */
void Entity::setColliderSize(float x, float y, float z)
{
    DEBUG_LOG("Setting collider size to (" + std::to_string(x) + ", " + std::to_string(y) + ", " + std::to_string(z) + ") for entity " + std::to_string(id_));
    auto physics = getComponent<PhysicsC>();

    if (!physics)
    {
        DEBUG_LOG("Creating new PhysicsC component");
        auto newPhysics = std::make_unique<PhysicsC>();
        newPhysics->colliderSize[0] = x;
        newPhysics->colliderSize[1] = y;
        newPhysics->colliderSize[2] = z;
        addComponent<PhysicsC>(std::move(newPhysics));
    }
    else
    {
        DEBUG_LOG("Updating existing PhysicsC component");
        physics->colliderSize[0] = x;
        physics->colliderSize[1] = y;
        physics->colliderSize[2] = z;
    }
}

/**
 * @brief Set whether the entity is kinematic.
 *
 * @param isKinematic True if the entity is kinematic, false otherwise
 */
void Entity::setKinematic(bool isKinematic)
{
    DEBUG_LOG("Setting kinematic to " + std::string(isKinematic ? "true" : "false") + " for entity " + std::to_string(id_));
    auto physics = getComponent<PhysicsC>();

    if (!physics)
    {
        auto newPhysics = std::make_unique<PhysicsC>();
        newPhysics->isKinematic = isKinematic;
        addComponent<PhysicsC>(std::move(newPhysics));
    }
    else
    {
        physics->isKinematic = isKinematic;
    }
}

/**
 * @brief Set whether the entity uses gravity.
 *
 * @param useGravity True if the entity uses gravity, false otherwise
 */
void Entity::setUseGravity(bool useGravity)
{
    DEBUG_LOG("Setting use gravity to " + std::string(useGravity ? "true" : "false") + " for entity " + std::to_string(id_));
    auto physics = getComponent<PhysicsC>();

    if (!physics)
    {
        auto newPhysics = std::make_unique<PhysicsC>();
        newPhysics->useGravity = useGravity;
        addComponent<PhysicsC>(std::move(newPhysics));
    }
    else
    {
        physics->useGravity = useGravity;
    }
}

/**
 * @brief Set vehicle component properties.
 *
 * @param vehicleType Type of vehicle
 * @param maxSpeed Maximum speed
 * @param acceleration Acceleration
 */
void Entity::setVehicleComponent(const std::string &vehicleType, float maxSpeed, float acceleration)
{
    DEBUG_LOG("Setting vehicle component with type: " + vehicleType + ", maxSpeed: " + std::to_string(maxSpeed) + ", acceleration: " + std::to_string(acceleration) + " for entity " + std::to_string(id_));
    auto vehicle = getComponent<VehicleC>();

    if (!vehicle)
    {
        auto newVehicle = std::make_unique<VehicleC>(vehicleType, maxSpeed, acceleration);
        addComponent<VehicleC>(std::move(newVehicle));
    }
    else
    {
        vehicle->vehicleType = vehicleType;
        vehicle->maxSpeed = maxSpeed;
        vehicle->acceleration = acceleration;
    }
}

/**
 * @brief Set audio component properties.
 *
 * @param soundId ID of the sound to play
 * @param volume Volume level
 * @param loop Whether to loop the sound
 */
void Entity::setAudioComponent(const std::string &soundId, float volume, bool loop)
{
    DEBUG_LOG("Setting audio component with soundId: " + soundId + ", volume: " + std::to_string(volume) + ", loop: " + (loop ? "true" : "false") + " for entity " + std::to_string(id_));
    auto audio = getComponent<AudioC>();

    if (!audio)
    {
        auto newAudio = std::make_unique<AudioC>(soundId, volume, loop);
        addComponent<AudioC>(std::move(newAudio));
    }
    else
    {
        audio->soundId = soundId;
        audio->volume = volume;
        audio->loop = loop;
    }
}

/**
 * @brief Set light component properties.
 *
 * @param lightType Type of light
 * @param r Red component
 * @param g Green component
 * @param b Blue component
 * @param intensity Light intensity
 * @param range Light range
 */
void Entity::setLightComponent(const std::string &lightType, float r, float g, float b, float intensity, float range)
{
    DEBUG_LOG("Setting light component with type: " + lightType + ", color: (" + std::to_string(r) + ", " + std::to_string(g) + ", " + std::to_string(b) + "), intensity: " + std::to_string(intensity) + ", range: " + std::to_string(range) + " for entity " + std::to_string(id_));
    auto light = getComponent<LightC>();

    if (!light)
    {
        auto newLight = std::make_unique<LightC>(lightType, r, g, b, intensity, range);
        addComponent<LightC>(std::move(newLight));
    }
    else
    {
        light->lightType = lightType;
        light->color[0] = r;
        light->color[1] = g;
        light->color[2] = b;
        light->intensity = intensity;
        light->range = range;
    }
}

/**
 * @brief Set a custom property on the entity.
 *
 * @param name Property name
 * @param value Property value
 */
void Entity::setCustomProperty(const std::string &name, const std::string &value)
{
    DEBUG_LOG("Setting custom property " + name + " = " + value + " for entity " + std::to_string(id_));
    customProperties_[name] = value;
}



================================================================================
FILE: src\core\Entity.h
================================================================================

#ifndef ENTITY_H
#define ENTITY_H

#include "IComponent.h"
#include <memory>
#include <string>
#include <unordered_map>
#include <typeindex>

/**
 * @brief Represents an entity in the Entity Component System (ECS).
 *
 * An entity is a container for components that define its properties and behavior.
 * Entities are identified by a unique ID and can have multiple components attached
 * to them. The entity itself contains no logic - all behavior is implemented
 * through systems that operate on entities with specific component combinations.
 */
class Entity
{
public:
    /**
     * @brief Construct an entity with a unique identifier.
     *
     * @param id The unique identifier for this entity
     */
    Entity(unsigned int id);

    /**
     * @brief Get the unique identifier of this entity.
     *
     * @return The entity's unique ID
     */
    unsigned int getId() const { return id_; }

    /**
     * @brief Set the name of this entity.
     *
     * @param name The name to set for this entity
     */
    void setName(const std::string &name) { name_ = name; }

    /**
     * @brief Get the name of this entity.
     *
     * @return The entity's name
     */
    const std::string &getName() const { return name_; }

    /**
     * @brief Set whether this entity is active.
     *
     * @param active True if the entity should be active, false otherwise
     */
    void setActive(bool active) { active_ = active; }

    /**
     * @brief Check if this entity is active.
     *
     * @return True if the entity is active, false otherwise
     */
    bool isActive() const { return active_; }

    /**
     * @brief Set the entity's position.
     *
     * @param x X coordinate
     * @param y Y coordinate
     * @param z Z coordinate
     */
    void setPosition(float x, float y, float z);

    /**
     * @brief Set the entity's rotation.
     *
     * @param pitch Pitch in radians
     * @param yaw Yaw in radians
     * @param roll Roll in radians
     */
    void setRotation(float pitch, float yaw, float roll);

    /**
     * @brief Set the entity's scale.
     *
     * @param x X scale
     * @param y Y scale
     * @param z Z scale
     */
    void setScale(float x, float y, float z);

    /**
     * @brief Set renderable component properties.
     *
     * @param meshId ID of the mesh to use
     * @param materialId ID of the material to use
     * @param visible Whether the entity is visible
     */
    void setRenderableComponent(const std::string &meshId, const std::string &materialId, bool visible);

    /**
     * @brief Set physics component properties.
     *
     * @param hasPhysics Whether the entity has physics
     * @param mass Entity mass
     * @param friction Entity friction
     * @param restitution Entity restitution (bounciness)
     */
    void setPhysicsComponent(bool hasPhysics, float mass, float friction, float restitution);

    /**
     * @brief Set collider type for physics.
     *
     * @param colliderType Type of collider ("sphere", "box", etc.)
     */
    void setColliderType(const std::string &colliderType);

    /**
     * @brief Set collider size for physics.
     *
     * @param x X size
     * @param y Y size
     * @param z Z size
     */
    void setColliderSize(float x, float y, float z);

    /**
     * @brief Set whether the entity is kinematic.
     *
     * @param isKinematic True if the entity is kinematic, false otherwise
     */
    void setKinematic(bool isKinematic);

    /**
     * @brief Set whether the entity uses gravity.
     *
     * @param useGravity True if the entity uses gravity, false otherwise
     */
    void setUseGravity(bool useGravity);

    /**
     * @brief Set vehicle component properties.
     *
     * @param vehicleType Type of vehicle
     * @param maxSpeed Maximum speed
     * @param acceleration Acceleration
     */
    void setVehicleComponent(const std::string &vehicleType, float maxSpeed, float acceleration);

    /**
     * @brief Set audio component properties.
     *
     * @param soundId ID of the sound to play
     * @param volume Volume level
     * @param loop Whether to loop the sound
     */
    void setAudioComponent(const std::string &soundId, float volume, bool loop);

    /**
     * @brief Set light component properties.
     *
     * @param lightType Type of light
     * @param r Red component
     * @param g Green component
     * @param b Blue component
     * @param intensity Light intensity
     * @param range Light range
     */
    void setLightComponent(const std::string &lightType, float r, float g, float b, float intensity, float range);

    /**
     * @brief Set a custom property on the entity.
     *
     * @param name Property name
     * @param value Property value
     */
    void setCustomProperty(const std::string &name, const std::string &value);

    /**
     * @brief Set the lifetime of this entity.
     *
     * @param lifetime Lifetime in seconds, -1 for infinite
     */
    void setLifetime(float lifetime) { lifetime_ = lifetime; }

    /**
     * @brief Add a component to this entity.
     *
     * Components define the properties and capabilities of an entity.
     * Each component type can only be added once per entity.
     *
     * @tparam T The type of component to add
     * @param component Unique pointer to the component instance
     */
    template <typename T>
    void addComponent(std::unique_ptr<T> component)
    {
        components_[std::type_index(typeid(T))] = std::move(component);
    }

    /**
     * @brief Get a component from this entity.
     *
     * @tparam T The type of component to retrieve
     * @return Pointer to the component if it exists, nullptr otherwise
     */
    template <typename T>
    T *getComponent()
    {
        auto it = components_.find(std::type_index(typeid(T)));
        if (it != components_.end())
        {
            return static_cast<T *>(it->second.get());
        }
        return nullptr;
    }

private:
    unsigned int id_;                                                             /**< Unique identifier for this entity */
    std::string name_;                                                            /**< Entity name */
    bool active_ = true;                                                          /**< Whether the entity is active */
    float lifetime_ = -1.0f;                                                      /**< Entity lifetime in seconds, -1 for infinite */
    std::unordered_map<std::type_index, std::unique_ptr<IComponent>> components_; /**< Map of component types to component instances */
    std::unordered_map<std::string, std::string> customProperties_;               /**< Custom entity properties */
};

#endif



================================================================================
FILE: src\core\EventBus.cpp
================================================================================

#include "EventBus.h"
#include "debug.h"
#define DEBUG

#ifdef DEBUG
#pragma message("DEBUG is defined")
#else
#pragma message("DEBUG is not defined")
#endif

/**
 * @brief Construct an empty event bus.
 *
 * Initializes the event bus with no registered handlers.
 */
EventBus::EventBus()
{
    DEBUG_LOG("Creating EventBus");
}

/**
 * @brief Subscribe a handler function to a specific event type.
 *
 * Adds the handler to the list of functions that will be called when
 * events of the specified type are published. If this is the first
 * handler for this event type, a new entry is created in the handlers map.
 *
 * @param type The event type to subscribe to
 * @param handler Function to call when events of this type are published
 */
void EventBus::subscribe(EventType type, std::function<void(const IEvent &)> handler)
{
    DEBUG_LOG("Subscribing handler for event type " + std::to_string(static_cast<int>(type)));
    handlers_[type].push_back(handler);
}

/**
 * @brief Publish an event to all subscribed handlers.
 *
 * Looks up all handlers registered for the event's type and calls each
 * one with a reference to the event. If no handlers are registered for
 * this event type, the function returns without doing anything.
 *
 * @param event The event to publish
 */
void EventBus::publish(const IEvent &event)
{
    DEBUG_LOG("Publishing event of type " + std::to_string(static_cast<int>(event.getType())));
    auto it = handlers_.find(event.getType());
    if (it != handlers_.end())
    {
        DEBUG_LOG("Found " + std::to_string(it->second.size()) + " handlers for event type " + std::to_string(static_cast<int>(event.getType())));
        for (auto &handler : it->second)
        {
            handler(event);
        }
    }
    else
    {
        DEBUG_LOG("No handlers found for event type " + std::to_string(static_cast<int>(event.getType())));
    }
}



================================================================================
FILE: src\core\EventBus.h
================================================================================

#ifndef EVENTBUS_H
#define EVENTBUS_H

#include "IEvent.h"
#include <functional>
#include <unordered_map>
#include <vector>

/**
 * @brief Central event management system for inter-system communication.
 *
 * The EventBus implements a publish-subscribe pattern where systems can
 * subscribe to specific event types and receive notifications when those
 * events are published. This enables decoupled communication between
 * different parts of the simulation.
 */
class EventBus
{
public:
    /**
     * @brief Construct an empty event bus.
     */
    EventBus();

    /**
     * @brief Subscribe a handler function to a specific event type.
     *
     * Multiple handlers can subscribe to the same event type. When an
     * event of that type is published, all subscribed handlers will be called.
     *
     * @param type The event type to subscribe to
     * @param handler Function to call when events of this type are published
     */
    void subscribe(EventType type, std::function<void(const IEvent &)> handler);

    /**
     * @brief Publish an event to all subscribed handlers.
     *
     * All handlers subscribed to the event's type will be called with
     * a reference to the event object.
     *
     * @param event The event to publish
     */
    void publish(const IEvent &event);

private:
    /** Map of event types to lists of handler functions */
    std::unordered_map<EventType, std::vector<std::function<void(const IEvent &)>>> handlers_;
};

#endif


================================================================================
FILE: src\core\IComponent.h
================================================================================

#ifndef ICOMPONENT_H
#define ICOMPONENT_H

/**
 * @brief Base interface for all components in the Entity Component System (ECS).
 *
 * Components are data structures that can be attached to entities to give them
 * specific properties or behaviors. This interface provides the basic contract
 * that all components must follow, primarily for proper memory management.
 */
class IComponent
{
public:
    /**
     * @brief Virtual destructor to ensure proper cleanup of derived components.
     *
     * This allows components to be properly deleted through base class pointers,
     * enabling polymorphic component management in the ECS.
     */
    virtual ~IComponent() = default;
};

#endif



================================================================================
FILE: src\core\IEvent.h
================================================================================

#ifndef IEVENT_H
#define IEVENT_H

/**
 * @brief Enumeration of all possible event types in the simulation.
 *
 * Event types are used to categorize different kinds of events that can occur
 * during simulation execution, enabling systems to subscribe to specific event types.
 */
enum class EventType
{
    BatteryLow,               /**< Low battery warning event */
    Collision,                /**< Collision detection event */
    ConsoleToggle,            /**< Console visibility toggle event */
    ConsoleVisibilityChanged, /**< Console visibility state change event */
    DebugModeToggled,         /**< Debug mode activation/deactivation event */
    NoPackagesFound,          /**< No asset packages found during bootstrap */
    DefaultWorldGenerated,    /**< Default world generation completed */
    SceneLoaded,              /**< Scene successfully loaded with name */
    // Add more as needed
};

/**
 * @brief Base interface for all events in the event-driven architecture.
 *
 * Events are used for communication between different systems in the simulation.
 * Each event must provide its type for proper routing and handling.
 */
class IEvent
{
public:
    /**
     * @brief Virtual destructor to ensure proper cleanup of derived events.
     */
    virtual ~IEvent() = default;

    /**
     * @brief Get the type of this event.
     *
     * @return EventType The specific type of this event instance.
     */
    virtual EventType getType() const = 0;
};

#endif


================================================================================
FILE: src\core\IoContainer.cpp
================================================================================

#include "IoContainer.h"
#include <algorithm>

namespace Core
{

    IoContainer::IoContainer() : parent(nullptr) {}

    IoContainer::IoContainer(IoContainer *parentContainer) : parent(parentContainer) {}

    IoContainer::~IoContainer() = default;

    void IoContainer::clear()
    {
        registrations.clear();
    }

    std::unique_ptr<IoContainer> IoContainer::createChild()
    {
        return std::unique_ptr<IoContainer>(new IoContainer(this));
    }

    std::vector<std::string> IoContainer::getRegisteredTypes() const
    {
        std::vector<std::string> types;
        types.reserve(registrations.size());

        for (const auto &[key, reg] : registrations)
        {
            types.push_back(reg.typeName);
        }

        // Include parent types if we have a parent
        if (parent)
        {
            auto parentTypes = parent->getRegisteredTypes();
            types.insert(types.end(), parentTypes.begin(), parentTypes.end());
        }

        // Remove duplicates
        std::sort(types.begin(), types.end());
        types.erase(std::unique(types.begin(), types.end()), types.end());

        return types;
    }

    IoContainer::Registration *IoContainer::findRegistration(const std::string &key)
    {
        auto it = registrations.find(key);
        if (it != registrations.end())
        {
            return &it->second;
        }

        // Check parent if not found locally
        if (parent)
        {
            return parent->findRegistration(key);
        }

        return nullptr;
    }

} // namespace Core


================================================================================
FILE: src\core\IoContainer.h
================================================================================

#pragma once
#include <memory>
#include <unordered_map>
#include <functional>
#include <typeindex>
#include <string>
#include <vector>

namespace Core
{

    /**
     * Simple IoC (Inversion of Control) container for dependency injection.
     * Supports singleton and transient lifetimes, and integration with the package system.
     */
    class IoContainer
    {
    public:
        enum class Lifetime
        {
            Singleton, // One instance for the entire application
            Transient  // New instance each time
        };

        /**
         * Factory function type for creating instances
         */
        template <typename T>
        using Factory = std::function<std::unique_ptr<T>()>;

        IoContainer();
        ~IoContainer();

        /**
         * Register a type with a factory function
         * @param factory Function that creates instances of T
         * @param lifetime Lifetime management for the type
         * @param name Optional name for named registrations
         */
        template <typename TInterface, typename TImplementation>
        void register_(Factory<TInterface> factory, Lifetime lifetime = Lifetime::Singleton,
                       const std::string &name = "");

        /**
         * Register a type with automatic factory creation
         * @param lifetime Lifetime management for the type
         * @param name Optional name for named registrations
         */
        template <typename TInterface, typename TImplementation>
        void register_(Lifetime lifetime = Lifetime::Singleton, const std::string &name = "");

        /**
         * Register an existing instance (always singleton)
         * @param instance Existing instance to register
         * @param name Optional name for named registrations
         */
        template <typename TInterface>
        void registerInstance(std::shared_ptr<TInterface> instance, const std::string &name = "");

        /**
         * Resolve a dependency by type
         * @param name Optional name for named resolution
         * @return Shared pointer to the resolved instance
         */
        template <typename T>
        std::shared_ptr<T> resolve(const std::string &name = "");

        /**
         * Check if a type is registered
         * @param name Optional name for named check
         * @return True if the type is registered
         */
        template <typename T>
        bool isRegistered(const std::string &name = "") const;

        /**
         * Unregister a type
         * @param name Optional name for named unregistration
         */
        template <typename T>
        void unregister(const std::string &name = "");

        /**
         * Clear all registrations
         */
        void clear();

        /**
         * Create a child container for scoped dependencies (e.g., package-specific services)
         * Child containers can resolve from parent but registrations don't affect parent
         */
        std::unique_ptr<IoContainer> createChild();

        /**
         * Get all registered type names for debugging
         */
        std::vector<std::string> getRegisteredTypes() const;

    private:
        struct Registration
        {
            std::function<std::shared_ptr<void>()> factory;
            Lifetime lifetime;
            std::shared_ptr<void> singletonInstance;
            std::type_index typeIndex;
            std::string typeName;

            Registration(std::function<std::shared_ptr<void>()> f, Lifetime lt,
                         std::type_index ti, const std::string &tn)
                : factory(std::move(f)), lifetime(lt), typeIndex(ti), typeName(tn) {}
        };

        std::unordered_map<std::string, Registration> registrations;
        IoContainer *parent = nullptr;

        /**
         * Get registration key for type and name
         */
        template <typename T>
        std::string getKey(const std::string &name = "") const;

        /**
         * Constructor for child containers
         */
        IoContainer(IoContainer *parentContainer);

        /**
         * Find registration, checking parent if not found locally
         */
        Registration *findRegistration(const std::string &key);
    };

    // Template implementations
    template <typename TInterface, typename TImplementation>
    void IoContainer::register_(Factory<TInterface> factory, Lifetime lifetime, const std::string &name)
    {
        std::string key = getKey<TInterface>(name);

        // Wrap the typed factory in a void* factory
        auto voidFactory = [factory]() -> std::shared_ptr<void>
        {
            auto ptr = factory();
            return std::shared_ptr<void>(ptr.release(), [](void *p)
                                         { delete static_cast<TInterface *>(p); });
        };

        registrations.emplace(key, Registration(
                                       std::move(voidFactory),
                                       lifetime,
                                       std::type_index(typeid(TInterface)),
                                       typeid(TInterface).name()));
    }

    template <typename TInterface, typename TImplementation>
    void IoContainer::register_(Lifetime lifetime, const std::string &name)
    {
        auto factory = []() -> std::unique_ptr<TInterface>
        {
            return std::make_unique<TImplementation>();
        };
        register_<TInterface, TImplementation>(std::move(factory), lifetime, name);
    }

    template <typename TInterface>
    void IoContainer::registerInstance(std::shared_ptr<TInterface> instance, const std::string &name)
    {
        std::string key = getKey<TInterface>(name);

        auto factory = [instance]() -> std::shared_ptr<void>
        {
            return std::static_pointer_cast<void>(instance);
        };

        Registration reg(std::move(factory), Lifetime::Singleton,
                         std::type_index(typeid(TInterface)), typeid(TInterface).name());
        reg.singletonInstance = std::static_pointer_cast<void>(instance);

        registrations.emplace(key, std::move(reg));
    }

    template <typename T>
    std::shared_ptr<T> IoContainer::resolve(const std::string &name)
    {
        std::string key = getKey<T>(name);

        Registration *reg = findRegistration(key);
        if (!reg)
        {
            return nullptr;
        }

        if (reg->lifetime == Lifetime::Singleton)
        {
            if (!reg->singletonInstance)
            {
                reg->singletonInstance = reg->factory();
            }
            return std::static_pointer_cast<T>(reg->singletonInstance);
        }
        else
        {
            return std::static_pointer_cast<T>(reg->factory());
        }
    }

    template <typename T>
    bool IoContainer::isRegistered(const std::string &name) const
    {
        std::string key = getKey<T>(name);
        return registrations.find(key) != registrations.end() ||
               (parent && parent->isRegistered<T>(name));
    }

    template <typename T>
    void IoContainer::unregister(const std::string &name)
    {
        std::string key = getKey<T>(name);
        registrations.erase(key);
    }

    template <typename T>
    std::string IoContainer::getKey(const std::string &name) const
    {
        std::string key = typeid(T).name();
        if (!name.empty())
        {
            key += ":" + name;
        }
        return key;
    }

} // namespace Core


================================================================================
FILE: src\core\ISystem.h
================================================================================

#ifndef ISYSTEM_H
#define ISYSTEM_H

class World;

/**
 * @brief Base interface for all systems in the Entity Component System (ECS).
 *
 * Systems contain the logic that operates on entities and their components.
 * Each system is updated every frame with the current world state and delta time.
 */
class ISystem
{
public:
    /**
     * @brief Virtual destructor to ensure proper cleanup of derived systems.
     */
    virtual ~ISystem() = default;

    /**
     * @brief Update the system with the current world state.
     *
     * This method is called once per frame for each system, allowing it to
     * process entities, update components, and perform game logic.
     *
     * @param world Reference to the world containing all entities and systems.
     * @param dt Time elapsed since the last update in seconds.
     */
    virtual void update(World &world, float dt) = 0;

    /**
     * @brief Get the name of the system for debugging and identification.
     *
     * @return String name of the system
     */
    virtual const char *getName() const { return "UnnamedSystem"; }
};

#endif



================================================================================
FILE: src\core\PackageBootstrap.cpp
================================================================================

#include "PackageBootstrap.h"
#include "../debug.h"
#include <chrono>
#include <algorithm>
#include <iostream>

namespace Core
{

    PackageBootstrap::PackageBootstrap() = default;
    PackageBootstrap::~PackageBootstrap()
    {
        if (initialized)
        {
            shutdown();
        }
    }

    bool PackageBootstrap::initialize(const BootstrapConfig &config)
    {
        if (initialized)
        {
            return true;
        }

        auto startTime = std::chrono::steady_clock::now();
        currentConfig = config;

        try
        {
            std::cout << "🔧 Creating main IoC container..." << std::endl;
            // Create main IoC container
            mainContainer = std::make_unique<IoContainer>();

            std::cout << "🔧 Setting up core services..." << std::endl;
            // Setup core services
            setupCoreServices();

            std::cout << "🔧 Resolving core systems..." << std::endl;
            // Initialize core systems
            packageManager = mainContainer->resolve<Assets::PackageManager>();
            assetRegistry = mainContainer->resolve<Assets::AssetRegistry>();
            behaviorSystem = mainContainer->resolve<Systems::BehaviorSystem>();
            behaviorRegistry = mainContainer->resolve<Factory::BehaviorRegistry>();

            if (!packageManager || !assetRegistry || !behaviorSystem || !behaviorRegistry)
            {
                std::cout << "❌ Failed to resolve core systems:" << std::endl;
                std::cout << "   PackageManager: " << (packageManager ? "OK" : "FAILED") << std::endl;
                std::cout << "   AssetRegistry: " << (assetRegistry ? "OK" : "FAILED") << std::endl;
                std::cout << "   BehaviorSystem: " << (behaviorSystem ? "OK" : "FAILED") << std::endl;
                std::cout << "   BehaviorRegistry: " << (behaviorRegistry ? "OK" : "FAILED") << std::endl;
                return false;
            }

            std::cout << "🔧 Initializing systems..." << std::endl;

            // Initialize systems
            assetRegistry->initialize();
            behaviorSystem->initialize();

            std::cout << "🔧 Registering asset loaders..." << std::endl;
            // Register asset loaders
            registerAssetLoaders();

            std::cout << "🔧 Loading initial packages..." << std::endl;
            // Load initial packages
            if (!loadInitialPackages())
            {
                std::cout << "❌ Failed to load initial packages" << std::endl;
                return false;
            }

            std::cout << "🔧 Registering package behaviors..." << std::endl;
            // Register behaviors from packages
            registerPackageBehaviors();

            std::cout << "🔧 Setting up package containers..." << std::endl;
            // Setup package-specific containers
            setupPackageContainers();

            initialized = true;

            auto endTime = std::chrono::steady_clock::now();
            stats.initializationTimeMs = std::chrono::duration_cast<std::chrono::milliseconds>(
                                             endTime - startTime)
                                             .count();

            return true;
        }
        catch (const std::exception &)
        {
            shutdown();
            return false;
        }
    }

    void PackageBootstrap::shutdown()
    {
        if (!initialized)
        {
            return;
        }

        // Shutdown systems in reverse order
        if (behaviorSystem)
        {
            behaviorSystem->shutdown();
        }

        if (assetRegistry)
        {
            assetRegistry->shutdown();
        }

        // Clear container
        if (mainContainer)
        {
            mainContainer->clear();
        }

        // Reset pointers
        behaviorRegistry.reset();
        behaviorSystem.reset();
        assetRegistry.reset();
        packageManager.reset();
        mainContainer.reset();

        initialized = false;
        stats = BootstrapStats{};
    }

    size_t PackageBootstrap::loadPackages(const std::vector<std::string> &packagePaths)
    {
        // Remove the initialized check since we're still in the initialization process
        size_t loadedCount = 0;

        for (const auto &path : packagePaths)
        {
            DEBUG_LOG("Loading package: " << path);
            std::cout << "🔍 Loading package: " << path << std::endl;
            auto result = packageManager->loadPackage(path);
            if (result.success)
            {
                DEBUG_LOG("Successfully loaded package: " << result.package.metadata.id);
                std::cout << "✅ Successfully loaded package: " << result.package.metadata.id << std::endl;
                // Register assets from the package
                assetRegistry->registerPackageAssets(result.package);

                // Preload assets if configured
                if (currentConfig.preloadAssets)
                {
                    assetRegistry->preloadPackageAssets(result.package.metadata.id);
                }

                loadedCount++;
                stats.packagesLoaded++;
            }
            else
            {
                ERROR_LOG("Failed to load package: " << path);
                std::cout << "❌ Failed to load package: " << path << std::endl;
                for (const auto &error : result.errors)
                {
                    ERROR_LOG("  - " << error);
                    std::cout << "   - " << error << std::endl;
                }
            }
        }

        return loadedCount;
    }

    bool PackageBootstrap::unloadPackage(const std::string &packageId)
    {
        if (!initialized)
        {
            return false;
        }

        // Unregister assets first
        assetRegistry->unregisterPackageAssets(packageId);

        // Unload package
        bool success = packageManager->unloadPackage(packageId);

        if (success)
        {
            stats.packagesLoaded = std::max(0, static_cast<int>(stats.packagesLoaded) - 1);
        }

        return success;
    }

    bool PackageBootstrap::reloadPackage(const std::string &packageId)
    {
        if (!initialized)
        {
            return false;
        }

        // Get the package to find its path
        const auto *package = packageManager->getPackage(packageId);
        if (!package)
        {
            return false;
        }

        std::string packagePath = package->metadata.packagePath;

        // Unload current version
        if (!unloadPackage(packageId))
        {
            return false;
        }

        // Reload from path
        auto result = packageManager->loadPackage(packagePath);
        if (result.success)
        {
            assetRegistry->registerPackageAssets(result.package);
            if (currentConfig.preloadAssets)
            {
                assetRegistry->preloadPackageAssets(result.package.metadata.id);
            }
            stats.packagesLoaded++;
            return true;
        }

        return false;
    }

    PackageBootstrap::BootstrapStats PackageBootstrap::getStats() const
    {
        BootstrapStats currentStats = stats;

        if (initialized)
        {
            currentStats.packagesLoaded = packageManager->getAllPackages().size();
            currentStats.behaviorsRegistered = behaviorRegistry->getRegisteredBehaviors().size();
            currentStats.assetsRegistered = assetRegistry->getMemoryStats().totalAssets;
        }

        return currentStats;
    }

    void PackageBootstrap::setupCoreServices()
    {
        // Register core services as singletons
        mainContainer->register_<Assets::PackageManager, Assets::PackageManager>(
            IoContainer::Lifetime::Singleton);

        mainContainer->register_<Assets::AssetRegistry, Assets::AssetRegistry>(
            IoContainer::Lifetime::Singleton);

        mainContainer->register_<Systems::BehaviorSystem, Systems::BehaviorSystem>(
            IoContainer::Lifetime::Singleton);

        // Register behavior registry as singleton reference
        mainContainer->registerInstance<Factory::BehaviorRegistry>(
            std::shared_ptr<Factory::BehaviorRegistry>(&Factory::BehaviorRegistry::instance(), [](Factory::BehaviorRegistry *) {}));
    }

    void PackageBootstrap::registerAssetLoaders()
    {
        // Register default asset loaders
        // In a real implementation, these would load actual file formats

        // Mesh loader
        assetRegistry->registerAssetLoader(Assets::AssetType::Mesh, [](const std::string &filePath, size_t &outSize) -> void *
                                           {
                                               // Placeholder: load mesh from file
                                               outSize = 1024;           // Dummy size
                                               return new char[outSize]; // Dummy data
                                           },
                                           [](void *data, Assets::AssetType type)
                                           { delete[] static_cast<char *>(data); });

        // Texture loader
        assetRegistry->registerAssetLoader(Assets::AssetType::Texture, [](const std::string &filePath, size_t &outSize) -> void *
                                           {
                                               // Placeholder: load texture from file
                                               outSize = 2048;           // Dummy size
                                               return new char[outSize]; // Dummy data
                                           },
                                           [](void *data, Assets::AssetType type)
                                           { delete[] static_cast<char *>(data); });

        // Audio loader
        assetRegistry->registerAssetLoader(Assets::AssetType::Audio, [](const std::string &filePath, size_t &outSize) -> void *
                                           {
                                               // Placeholder: load audio from file
                                               outSize = 4096;           // Dummy size
                                               return new char[outSize]; // Dummy data
                                           },
                                           [](void *data, Assets::AssetType type)
                                           { delete[] static_cast<char *>(data); });

        // Material loader
        assetRegistry->registerAssetLoader(Assets::AssetType::Material, [](const std::string &filePath, size_t &outSize) -> void *
                                           {
                                               // Placeholder: load material from file
                                               outSize = 512;            // Dummy size
                                               return new char[outSize]; // Dummy data
                                           },
                                           [](void *data, Assets::AssetType type)
                                           { delete[] static_cast<char *>(data); });
    }

    bool PackageBootstrap::loadInitialPackages()
    {
        DEBUG_LOG("Starting package discovery in directory: " << currentConfig.packagesDirectory);
        std::cout << "🔍 Discovering packages in directory: " << currentConfig.packagesDirectory << std::endl;

        // Discover packages in the packages directory
        auto discoveryResult = packageManager->discoverPackages(currentConfig.packagesDirectory);
        if (!discoveryResult.errors.empty())
        {
            ERROR_LOG("Package discovery errors found:");
            std::cout << "❌ Package discovery errors:" << std::endl;
            for (const auto &error : discoveryResult.errors)
            {
                ERROR_LOG("  - " << error);
                std::cout << "   - " << error << std::endl;
            }
            return false;
        }

        DEBUG_LOG("Found " << discoveryResult.packagePaths.size() << " package paths");
        std::cout << "✅ Found " << discoveryResult.packagePaths.size() << " package paths:" << std::endl;
        for (const auto &path : discoveryResult.packagePaths)
        {
            DEBUG_LOG("  - " << path);
            std::cout << "   - " << path << std::endl;
        }

        std::cout << "🔍 Validating package dependencies..." << std::endl;
        // Validate dependencies
        if (!validatePackageDependencies(discoveryResult.packagePaths))
        {
            ERROR_LOG("Package dependency validation failed");
            std::cout << "❌ Package dependency validation failed" << std::endl;
            return false;
        }

        std::cout << "🔍 Loading packages..." << std::endl;
        // Load packages in dependency order
        size_t loadedCount = loadPackages(discoveryResult.packagePaths);
        DEBUG_LOG("Loaded " << loadedCount << " packages");
        std::cout << "✅ Loaded " << loadedCount << " packages" << std::endl;

        std::cout << "🔍 Checking required packages..." << std::endl;

        // Check if all required packages were loaded
        for (const auto &requiredPackage : currentConfig.requiredPackages)
        {
            bool isLoaded = packageManager->isPackageLoaded(requiredPackage);
            DEBUG_LOG("Required package '" << requiredPackage << "': " << (isLoaded ? "LOADED" : "NOT FOUND"));
            if (!isLoaded)
            {
                ERROR_LOG("Required package '" << requiredPackage << "' was not loaded!");
                return false;
            }
        }

        stats.packagesLoaded = loadedCount;
        return loadedCount > 0;
    }

    bool PackageBootstrap::validatePackageDependencies(const std::vector<std::string> &packagePaths)
    {
        // For now, just return true - full dependency validation would require
        // parsing all packages first to build the dependency graph
        return true;
    }

    void PackageBootstrap::registerPackageBehaviors()
    {
        // Register built-in behaviors
        // In a real implementation, this would scan loaded packages for behavior definitions
        // and dynamically load them, but for now we'll rely on static registration
        // via the REGISTER_BEHAVIOR macro in behavior implementation files
    }

    void PackageBootstrap::setupPackageContainers()
    {
        // Create child containers for each loaded package
        // This allows package-specific services and configurations
        auto packages = packageManager->getAllPackages();

        for (const auto *package : packages)
        {
            auto childContainer = mainContainer->createChild();
            // In a real implementation, register package-specific services here
        }
    }

} // namespace Core


================================================================================
FILE: src\core\PackageBootstrap.h
================================================================================

#pragma once
#include "IoContainer.h"
#include "../assets/PackageManager.h"
#include "../assets/AssetRegistry.h"
#include "../systems/BehaviorSystem.h"
#include "../factory/BehaviorRegistry.h"
#include <string>
#include <vector>

namespace Core
{

    /**
     * Bootstrap system that initializes the application with package support.
     * Sets up IoC container, loads packages, and initializes all systems.
     */
    class PackageBootstrap
    {
    public:
        struct BootstrapConfig
        {
            std::string packagesDirectory = "packages";
            std::vector<std::string> requiredPackages = {"core"};
            bool enableHotReload = true;
            bool preloadAssets = false;
        };

        PackageBootstrap();
        ~PackageBootstrap();

        /**
         * Initialize the application with package support
         * @param config Bootstrap configuration
         * @return True if initialization was successful
         */
        bool initialize(const BootstrapConfig &config);

        /**
         * Shutdown the application and cleanup all resources
         */
        void shutdown();

        /**
         * Get the main IoC container
         */
        IoContainer &getContainer() { return *mainContainer; }

        /**
         * Get the package manager
         */
        Assets::PackageManager &getPackageManager() { return *packageManager; }

        /**
         * Get the asset registry
         */
        Assets::AssetRegistry &getAssetRegistry() { return *assetRegistry; }

        /**
         * Get the behavior system
         */
        Systems::BehaviorSystem &getBehaviorSystem() { return *behaviorSystem; }

        /**
         * Load additional packages at runtime
         * @param packagePaths Paths to package.xml files to load
         * @return Number of packages successfully loaded
         */
        size_t loadPackages(const std::vector<std::string> &packagePaths);

        /**
         * Unload a package at runtime
         * @param packageId ID of the package to unload
         * @return True if package was successfully unloaded
         */
        bool unloadPackage(const std::string &packageId);

        /**
         * Reload a package (for hot-reload scenarios)
         * @param packageId ID of the package to reload
         * @return True if package was successfully reloaded
         */
        bool reloadPackage(const std::string &packageId);

        /**
         * Check if the bootstrap system is initialized
         */
        bool isInitialized() const { return initialized; }

        /**
         * Get bootstrap statistics
         */
        struct BootstrapStats
        {
            size_t packagesLoaded = 0;
            size_t behaviorsRegistered = 0;
            size_t assetsRegistered = 0;
            size_t initializationTimeMs = 0;
        };

        BootstrapStats getStats() const;

    private:
        std::unique_ptr<IoContainer> mainContainer;
        std::shared_ptr<Assets::PackageManager> packageManager;
        std::shared_ptr<Assets::AssetRegistry> assetRegistry;
        std::shared_ptr<Systems::BehaviorSystem> behaviorSystem;
        std::shared_ptr<Factory::BehaviorRegistry> behaviorRegistry;

        BootstrapConfig currentConfig;
        bool initialized = false;
        BootstrapStats stats;

        /**
         * Setup core services in the IoC container
         */
        void setupCoreServices();

        /**
         * Register core asset loaders
         */
        void registerAssetLoaders();

        /**
         * Load and initialize packages
         */
        bool loadInitialPackages();

        /**
         * Validate package dependencies
         */
        bool validatePackageDependencies(const std::vector<std::string> &packagePaths);

        /**
         * Register behaviors from loaded packages
         */
        void registerPackageBehaviors();

        /**
         * Setup package-specific IoC containers
         */
        void setupPackageContainers();
    };

} // namespace Core


================================================================================
FILE: src\core\Quaternion.h
================================================================================

#pragma once
#include <cmath> // For std::sin, std::cos

/**
 * @brief Simple quaternion class for representing 3D rotations.
 *
 * Quaternions provide a mathematically robust way to represent rotations
 * in 3D space, avoiding issues like gimbal lock that can occur with
 * Euler angles. This implementation provides basic quaternion operations
 * needed for the simulation.
 */
struct Quaternion
{
    float w, x, y, z; /**< Quaternion components: w (real part), x,y,z (imaginary parts) */

    /**
     * @brief Construct a quaternion with specified components.
     *
     * @param w The real component (default: 1.0f for identity rotation)
     * @param x The i component (default: 0.0f)
     * @param y The j component (default: 0.0f)
     * @param z The k component (default: 0.0f)
     */
    Quaternion(float w = 1.0f, float x = 0.0f, float y = 0.0f, float z = 0.0f) : w(w), x(x), y(y), z(z) {}

    /**
     * @brief Create an identity quaternion representing no rotation.
     *
     * @return Quaternion The identity quaternion (1, 0, 0, 0)
     */
    static Quaternion identity()
    {
        return Quaternion(1.0f, 0.0f, 0.0f, 0.0f);
    }

    /**
     * @brief Create a quaternion from Euler angles (pitch, yaw, roll).
     *
     * @param pitch The pitch angle in radians (rotation around X-axis)
     * @param yaw The yaw angle in radians (rotation around Y-axis)
     * @param roll The roll angle in radians (rotation around Z-axis)
     * @return Quaternion The quaternion representing the given Euler angles
     */
    static Quaternion fromEulerAngles(float pitch, float yaw, float roll)
    {
        // Calculate half angles
        float halfPitch = pitch * 0.5f;
        float halfYaw = yaw * 0.5f;
        float halfRoll = roll * 0.5f;

        // Pre-calculate sine and cosine values
        float cosHalfPitch = std::cos(halfPitch);
        float sinHalfPitch = std::sin(halfPitch);
        float cosHalfYaw = std::cos(halfYaw);
        float sinHalfYaw = std::sin(halfYaw);
        float cosHalfRoll = std::cos(halfRoll);
        float sinHalfRoll = std::sin(halfRoll);

        // Calculate quaternion components
        float w = cosHalfRoll * cosHalfPitch * cosHalfYaw + sinHalfRoll * sinHalfPitch * sinHalfYaw;
        float x = sinHalfRoll * cosHalfPitch * cosHalfYaw - cosHalfRoll * sinHalfPitch * sinHalfYaw;
        float y = cosHalfRoll * sinHalfPitch * cosHalfYaw + sinHalfRoll * cosHalfPitch * sinHalfYaw;
        float z = cosHalfRoll * cosHalfPitch * sinHalfYaw - sinHalfRoll * sinHalfPitch * cosHalfYaw;

        return Quaternion(w, x, y, z);
    }
};



================================================================================
FILE: src\core\SimClock.cpp
================================================================================

#include "SimClock.h"
#include "debug.h"

/**
 * @brief Construct a simulation clock with a fixed timestep.
 *
 * Initializes the clock with the specified fixed timestep and resets
 * the accumulator to zero.
 *
 * @param fixedTimestep The fixed time step for physics simulation in seconds
 */
SimClock::SimClock(float fixedTimestep) : fixedTimestep_(fixedTimestep), accumulator_(0.0f)
{
    DEBUG_LOG("Creating SimClock with fixed timestep " + std::to_string(fixedTimestep));
}

/**
 * @brief Advance the simulation clock by the given delta time.
 *
 * This method accumulates the real time that has passed, which will be
 * used to determine when physics steps should occur.
 *
 * @param deltaTime Time elapsed since the last tick in seconds
 */
void SimClock::tick(float deltaTime)
{
    DEBUG_LOG("Ticking SimClock with deltaTime " + std::to_string(deltaTime) + ", accumulator now " + std::to_string(accumulator_ + deltaTime));
    accumulator_ += deltaTime;
}

/**
 * @brief Check if a physics step should be performed.
 *
 * This implements the fixed timestep logic. If enough time has accumulated
 * (at least one fixed timestep), it consumes that time and returns true.
 * This ensures physics simulation runs at a consistent rate.
 *
 * @return true if physics should step, false otherwise
 */
bool SimClock::shouldStepPhysics()
{
    if (accumulator_ >= fixedTimestep_)
    {
        DEBUG_LOG("Physics step triggered, accumulator " + std::to_string(accumulator_) + " >= " + std::to_string(fixedTimestep_));
        accumulator_ -= fixedTimestep_;
        return true;
    }
    DEBUG_LOG("No physics step, accumulator " + std::to_string(accumulator_) + " < " + std::to_string(fixedTimestep_));
    return false;
}

/**
 * @brief Get the fixed timestep value.
 *
 * Returns the fixed timestep that was set during construction.
 *
 * @return The fixed timestep in seconds
 */
float SimClock::getFixedTimestep()
{
    DEBUG_LOG("Getting fixed timestep: " + std::to_string(fixedTimestep_));
    return fixedTimestep_;
}



================================================================================
FILE: src\core\SimClock.h
================================================================================

#ifndef SIMCLOCK_H
#define SIMCLOCK_H

/**
 * @brief Simulation clock for managing fixed timestep physics updates.
 *
 * The SimClock implements a fixed timestep system for physics simulation,
 * accumulating real time and determining when physics steps should occur.
 * This ensures consistent physics behavior regardless of frame rate.
 */
class SimClock
{
public:
    /**
     * @brief Construct a simulation clock with a fixed timestep.
     *
     * @param fixedTimestep The fixed time step for physics simulation in seconds
     */
    SimClock(float fixedTimestep);

    /**
     * @brief Advance the simulation clock by the given delta time.
     *
     * Adds the delta time to the accumulator, which tracks how much time
     * has passed since the last physics step.
     *
     * @param deltaTime Time elapsed since the last tick in seconds
     */
    void tick(float deltaTime);

    /**
     * @brief Check if a physics step should be performed.
     *
     * Returns true if enough time has accumulated for a physics step.
     * If true, the accumulated time is reduced by one fixed timestep.
     *
     * @return true if physics should step, false otherwise
     */
    bool shouldStepPhysics();

    /**
     * @brief Get the fixed timestep value.
     *
     * @return The fixed timestep in seconds
     */
    float getFixedTimestep();

private:
    float fixedTimestep_; /**< The fixed time step for physics simulation */
    float accumulator_;   /**< Accumulated time since last physics step */
};

#endif



================================================================================
FILE: src\core\Vector3D.h
================================================================================

#pragma once

/**
 * @brief Simple 3D vector class for representing positions, scales, and other 3D quantities.
 *
 * This class provides basic 3D vector operations needed for the simulation,
 * including component-wise arithmetic operations. It's used throughout the
 * ECS for positioning entities, scaling, and other spatial calculations.
 */
struct Vector3D
{
    float x, y, z; /**< The x, y, and z components of the vector */

    /**
     * @brief Construct a 3D vector with specified components.
     *
     * @param x The x component (default: 0.0f)
     * @param y The y component (default: 0.0f)
     * @param z The z component (default: 0.0f)
     */
    Vector3D(float x = 0.0f, float y = 0.0f, float z = 0.0f) : x(x), y(y), z(z) {}

    /**
     * @brief Add two vectors component-wise.
     *
     * @param other The vector to add to this one
     * @return Vector3D The result of the addition
     */
    Vector3D operator+(const Vector3D &other) const
    {
        return Vector3D(x + other.x, y + other.y, z + other.z);
    }

    /**
     * @brief Subtract two vectors component-wise.
     *
     * @param other The vector to subtract from this one
     * @return Vector3D The result of the subtraction
     */
    Vector3D operator-(const Vector3D &other) const
    {
        return Vector3D(x - other.x, y - other.y, z - other.z);
    }

    /**
     * @brief Multiply this vector by a scalar value.
     *
     * @param scalar The scalar value to multiply by
     * @return Vector3D The scaled vector
     */
    Vector3D operator*(float scalar) const
    {
        return Vector3D(x * scalar, y * scalar, z * scalar);
    }
};



================================================================================
FILE: src\core\World.cpp
================================================================================

#include "World.h"
#include <iostream>
#include "debug.h"

/**
 * @brief Construct a world with an event bus for communication.
 *
 * Initializes the world with a reference to the event bus that will be used
 * for inter-system communication throughout the simulation.
 *
 * @param eventBus Reference to the event bus used for inter-system communication
 */
World::World(EventBus &eventBus) : eventBus_(eventBus)
{
    DEBUG_LOG("Creating World with EventBus");
}

/**
 * @brief Add an entity to the world.
 *
 * The world takes ownership of the entity through the unique pointer,
 * ensuring proper memory management and lifetime control.
 *
 * @param entity Unique pointer to the entity to add
 */
void World::addEntity(std::unique_ptr<Entity> entity)
{
    DEBUG_LOG("Adding entity with ID " + std::to_string(entity->getId()) + " to World");
    entities_.push_back(std::move(entity));
}

/**
 * @brief Add a system to the world.
 *
 * Systems are stored in the order they are added and will be updated
 * in that same order during the world's update cycle.
 *
 * @param system Unique pointer to the system to add
 */
void World::addSystem(std::unique_ptr<ISystem> system)
{
    DEBUG_LOG("Adding system to World");
    systems_.push_back(std::move(system));
}

/**
 * @brief Update all systems in the world.
 *
 * Iterates through all registered systems and calls their update methods,
 * passing the world reference and delta time. This is the main simulation
 * loop that drives all game logic.
 *
 * @param dt Time elapsed since the last update in seconds
 */
void World::update(float dt)
{
    DEBUG_LOG("Updating World with dt " + std::to_string(dt));
    // Static variable to control frequency of debug output
    static int frameCounter = 0;
    const int debugOutputFrequency = 300; // Show debug every 300 frames (every ~5 seconds at 60 fps)
    bool showDebug = (++frameCounter % debugOutputFrequency == 0);

    if (showDebug)
    {
        DEBUG_LOG("---- Frame " + std::to_string(frameCounter) + " ----");
    }

    int systemIndex = 0;
    for (auto &system : systems_)
    {
        try
        {
            // Debug output only periodically to avoid console spam
            if (showDebug)
            {
                DEBUG_LOG("Updating system: " + std::string(system->getName()) + " (index: " + std::to_string(systemIndex) + ")");
            }

            system->update(*this, dt);
            systemIndex++;
        }
        catch (const std::exception &e)
        {
            std::cerr << "ERROR updating system " << system->getName()
                      << " (index: " << systemIndex << "): " << e.what() << std::endl;
            throw; // Re-throw to handle it in the engine
        }
        catch (...)
        {
            std::cerr << "UNKNOWN ERROR updating system " << system->getName()
                      << " (index: " << systemIndex << ")" << std::endl;
            throw; // Re-throw to handle it in the engine
        }
    }

    if (showDebug)
    {
        DEBUG_LOG("-----------------");
    }
}



================================================================================
FILE: src\core\World.h
================================================================================

#ifndef WORLD_H
#define WORLD_H

#include "EventBus.h"
#include "ISystem.h"
#include "Entity.h"
#include <vector>
#include <memory>
#include <unordered_map>
#include <functional>
#include <string>

/**
 * @brief The central world class that manages all entities and systems in the ECS.
 *
 * The World acts as the container and coordinator for all entities, components,
 * and systems in the simulation. It provides methods to add entities and systems,
 * and coordinates their updates each frame. The World also provides access to
 * the event bus for inter-system communication.
 */
class World
{
public:
    /**
     * @brief Construct a world with an event bus for communication.
     *
     * @param eventBus Reference to the event bus used for inter-system communication
     */
    World(EventBus &eventBus);

    /**
     * @brief Add an entity to the world.
     *
     * The world takes ownership of the entity and will manage its lifetime.
     *
     * @param entity Unique pointer to the entity to add
     */
    void addEntity(std::unique_ptr<Entity> entity);

    /**
     * @brief Add a system to the world.
     *
     * Systems are updated in the order they are added. The world takes
     * ownership of the system and will manage its lifetime.
     *
     * @param system Unique pointer to the system to add
     */
    void addSystem(std::unique_ptr<ISystem> system);

    /**
     * @brief Update all systems in the world.
     *
     * This method iterates through all registered systems and calls their
     * update methods with the current delta time.
     *
     * @param dt Time elapsed since the last update in seconds
     */
    void update(float dt);

    /**
     * @brief Get read-only access to all systems in the world.
     *
     * @return Const reference to the vector of systems
     */
    const std::vector<std::unique_ptr<ISystem>> &getSystems() const { return systems_; }

    /**
     * @brief Get mutable access to all systems in the world.
     *
     * @return Reference to the vector of systems
     */
    std::vector<std::unique_ptr<ISystem>> &getSystems() { return systems_; }

    /**
     * @brief Get a system of a specific type from the world.
     *
     * This method searches for the first system of the specified type T
     * and returns a pointer to it. This provides type-safe system access
     * without relying on magic indices.
     *
     * @tparam T The system type to search for
     * @return Pointer to the system of type T, or nullptr if not found
     */
    template <typename T>
    T *getSystem()
    {
        for (auto &system : systems_)
        {
            T *typedSystem = dynamic_cast<T *>(system.get());
            if (typedSystem != nullptr)
            {
                return typedSystem;
            }
        }
        return nullptr;
    }

    /**
     * @brief Get read-only access to all entities in the world.
     *
     * @return Const reference to the vector of entities
     */
    const std::vector<std::unique_ptr<Entity>> &getEntities() const { return entities_; }

    /**
     * @brief Store a shared resource with the given name
     *
     * This allows storing and retrieving shared resources that need to be accessed
     * by multiple systems but aren't systems themselves, such as asset managers.
     *
     * @tparam T The type of the resource
     * @param name Unique name for the resource
     * @param resource The resource to store
     */
    template <typename T>
    void storeSharedResource(const std::string &name, std::unique_ptr<T> resource)
    {
        // Create a custom deleter that will properly delete the derived type
        auto deleter = [](void *ptr)
        {
            T *typedPtr = static_cast<T *>(ptr);
            delete typedPtr;
        };

        // Store the resource with its custom deleter
        void *rawPtr = resource.release();
        sharedResources_[name] = std::unique_ptr<void, std::function<void(void *)>>(rawPtr, deleter);
    }

    /**
     * @brief Get a shared resource by name
     *
     * @param name The name of the resource to retrieve
     * @return void* Pointer to the resource, or nullptr if not found
     */
    void *getSharedResource(const std::string &name)
    {
        auto it = sharedResources_.find(name);
        if (it != sharedResources_.end())
        {
            return it->second.get();
        }
        return nullptr;
    }

private:
    EventBus &eventBus_;                                                                                  /**< Reference to the event bus for communication */
    std::vector<std::unique_ptr<Entity>> entities_;                                                       /**< All entities in the world */
    std::vector<std::unique_ptr<ISystem>> systems_;                                                       /**< All systems in the world, updated in order */
    std::unordered_map<std::string, std::unique_ptr<void, std::function<void(void *)>>> sharedResources_; /**< Named shared resources */
};

#endif



================================================================================
FILE: src\events\InputEvents.h
================================================================================

#pragma once
#include "../core/IEvent.h"

/**
 * @file InputEvents.h
 * @brief Event definitions for user input and console interactions.
 *
 * This file defines events related to user input handling, including
 * console toggling and visibility changes. These events are used
 * by input systems and UI management systems.
 */

/**
 * @struct ConsoleToggleEvent
 * @brief Event triggered when the console toggle key is pressed.
 *
 * This event is fired when the user presses the key combination
 * that toggles the developer console visibility. It contains no
 * additional data beyond the event type.
 */
struct ConsoleToggleEvent : public IEvent
{
    /** @brief Default constructor for ConsoleToggleEvent */
    ConsoleToggleEvent() = default;

    /**
     * @brief Get the event type identifier.
     * @return EventType::ConsoleToggle
     */
    EventType getType() const override { return EventType::ConsoleToggle; }
};

/**
 * @struct ConsoleVisibilityChangedEvent
 * @brief Event triggered when console visibility changes.
 *
 * This event is fired whenever the console visibility state changes,
 * either due to user input or programmatic control. It includes
 * the new visibility state.
 */
struct ConsoleVisibilityChangedEvent : public IEvent
{
    /**
     * @brief Construct a new ConsoleVisibilityChangedEvent.
     * @param visible The new visibility state of the console
     */
    ConsoleVisibilityChangedEvent(bool visible) : isVisible(visible) {}

    /**
     * @brief Get the event type identifier.
     * @return EventType::ConsoleVisibilityChanged
     */
    EventType getType() const override { return EventType::ConsoleVisibilityChanged; }

    /** @brief The current visibility state of the console */
    bool isVisible;
};

/**
 * @struct DebugModeToggled
 * @brief Event triggered when debug mode is toggled on or off.
 *
 * This event is fired when the user presses F9 to toggle debug mode.
 * It includes the new debug mode state (active/inactive).
 */
struct DebugModeToggled : public IEvent
{
    /**
     * @brief Construct a new DebugModeToggled event.
     * @param active The new debug mode state
     */
    DebugModeToggled(bool active) : isActive(active) {}

    /**
     * @brief Get the event type identifier.
     * @return EventType::DebugModeToggled
     */
    EventType getType() const override { return EventType::DebugModeToggled; }

    /** @brief The current debug mode state */
    bool isActive;
};


================================================================================
FILE: src\events\WorldGenEvents.h
================================================================================

#pragma once
#include "../core/IEvent.h"

/**
 * @file WorldGenEvents.h
 * @brief Event definitions for world generation and asset loading processes.
 *
 * This file defines events related to world generation, asset package loading,
 * and bootstrap processes. These events are used by world generation systems
 * and asset management systems to communicate state changes.
 */

/**
 * @struct NoPackagesFoundEvent
 * @brief Event triggered when no asset packages are found during bootstrap.
 *
 * This event is fired when the asset loading system cannot find any
 * valid asset packages during the initial bootstrap process. This
 * typically indicates a missing or corrupted asset directory.
 */
struct NoPackagesFoundEvent : public IEvent
{
    /** @brief Default constructor for NoPackagesFoundEvent */
    NoPackagesFoundEvent() = default;

    /**
     * @brief Get the event type identifier.
     * @return EventType::NoPackagesFound
     */
    EventType getType() const override { return EventType::NoPackagesFound; }
};

/**
 * @struct DefaultWorldGeneratedEvent
 * @brief Event triggered when the default world has been generated.
 *
 * This event is fired after the default world scene has been successfully
 * generated and loaded. It signals that the basic world setup is complete
 * and the simulation can begin.
 */
struct DefaultWorldGeneratedEvent : public IEvent
{
    /** @brief Default constructor for DefaultWorldGeneratedEvent */
    DefaultWorldGeneratedEvent() = default;

    /**
     * @brief Get the event type identifier.
     * @return EventType::DefaultWorldGenerated
     */
    EventType getType() const override { return EventType::DefaultWorldGenerated; }
};

/**
 * @struct SceneLoadedEvent
 * @brief Event triggered when a scene has been successfully loaded.
 *
 * This event is fired after a scene has been successfully loaded and
 * contains the name of the loaded scene for UI updates.
 */
struct SceneLoadedEvent : public IEvent
{
    std::string sceneName;

    /** @brief Constructor with scene name */
    SceneLoadedEvent(const std::string &name) : sceneName(name) {}

    /**
     * @brief Get the event type identifier.
     * @return EventType::SceneLoaded
     */
    EventType getType() const override { return EventType::SceneLoaded; }
};


================================================================================
FILE: src\factory\addEntityComponents.cpp
================================================================================

// Add implementation of the addEntityComponents method
#include "debug.h"

void EntityFactory::addEntityComponents(Entity &entity, const EntityConfig::EntityDefinition &definition)
{
    DEBUG_LOG("Adding components to entity " + std::to_string(entity.getId()) + " with definition " + definition.name);
    // Set entity properties
    if (!definition.name.empty())
    {
        entity.setName(definition.name);
    }

    // Set transform properties
    entity.setPosition(definition.transform.position);
    entity.setRotation(definition.transform.rotation);
    entity.setScale(definition.transform.scale);

    // Add renderable component if defined
    if (definition.renderable)
    {
        DEBUG_LOG("Adding renderable component to entity " + std::to_string(entity.getId()));
        auto renderableComp = std::make_shared<RenderableC>();
        renderableComp->meshId = definition.renderable->meshId;
        renderableComp->materialId = definition.renderable->materialId;
        renderableComp->isVisible = definition.renderable->isVisible;
        renderableComp->opacity = definition.renderable->opacity;
        renderableComp->renderLayer = definition.renderable->renderLayer;
        entity.addComponent<RenderableC>(renderableComp);
    }

    // Add physics component if defined
    if (definition.physics)
    {
        DEBUG_LOG("Adding physics component to entity " + std::to_string(entity.getId()));
        auto physicsComp = std::make_shared<PhysicsC>();
        physicsComp->mass = definition.physics->mass;
        physicsComp->friction = definition.physics->friction;
        physicsComp->restitution = definition.physics->restitution;
        physicsComp->isKinematic = definition.physics->isKinematic;
        physicsComp->useGravity = definition.physics->useGravity;
        physicsComp->colliderType = definition.physics->colliderType;

        // Copy collider size
        physicsComp->colliderSize.x = definition.physics->colliderSize[0];
        physicsComp->colliderSize.y = definition.physics->colliderSize[1];
        physicsComp->colliderSize.z = definition.physics->colliderSize[2];

        entity.addComponent<PhysicsC>(physicsComp);
    }

    // Add vehicle component if defined
    if (definition.vehicle)
    {
        DEBUG_LOG("Adding vehicle component to entity " + std::to_string(entity.getId()));
        auto vehicleComp = std::make_shared<VehicleC>();
        vehicleComp->vehicleType = definition.vehicle->vehicleType;
        vehicleComp->maxSpeed = definition.vehicle->maxSpeed;
        vehicleComp->acceleration = definition.vehicle->acceleration;
        vehicleComp->maneuverability = definition.vehicle->maneuverability;
        vehicleComp->controllerType = definition.vehicle->controllerType;
        entity.addComponent<VehicleC>(vehicleComp);
    }

    // Add audio component if defined
    if (definition.audio)
    {
        DEBUG_LOG("Adding audio component to entity " + std::to_string(entity.getId()));
        auto audioComp = std::make_shared<AudioC>();
        audioComp->soundId = definition.audio->soundId;
        audioComp->volume = definition.audio->volume;
        audioComp->loop = definition.audio->loop;
        entity.addComponent<AudioC>(audioComp);
    }

    // Add light component if defined
    if (definition.light)
    {
        DEBUG_LOG("Adding light component to entity " + std::to_string(entity.getId()));
        auto lightComp = std::make_shared<LightC>();
        lightComp->lightType = definition.light->lightType;
        lightComp->color = definition.light->color;
        lightComp->intensity = definition.light->intensity;
        lightComp->range = definition.light->range;
        entity.addComponent<LightC>(lightComp);
    }

    // Process custom properties
    for (const auto &prop : definition.customProperties)
    {
        entity.setCustomProperty(prop.name, prop.value);
    }
}



================================================================================
FILE: src\factory\BehaviorRegistry.cpp
================================================================================

#include "../components/EntityBehavior.h"
#include "BehaviorRegistry.h"
#include <stdexcept>

namespace Factory
{

    BehaviorRegistry &BehaviorRegistry::instance()
    {
        static BehaviorRegistry instance;
        return instance;
    }

    BehaviorRegistry::~BehaviorRegistry() = default;

    void BehaviorRegistry::registerBehavior(const std::string &behaviorName, BehaviorFactory factory)
    {
        if (behaviorName.empty())
        {
            throw std::invalid_argument("Behavior name cannot be empty");
        }

        if (!factory)
        {
            throw std::invalid_argument("Behavior factory cannot be null");
        }

        behaviors[behaviorName] = std::move(factory);
    }

    std::unique_ptr<Components::EntityBehavior> BehaviorRegistry::createBehavior(const std::string &behaviorName) const
    {
        auto it = behaviors.find(behaviorName);
        if (it != behaviors.end())
        {
            return it->second();
        }
        return nullptr;
    }

    bool BehaviorRegistry::isBehaviorRegistered(const std::string &behaviorName) const
    {
        return behaviors.find(behaviorName) != behaviors.end();
    }

    std::vector<std::string> BehaviorRegistry::getRegisteredBehaviors() const
    {
        std::vector<std::string> names;
        names.reserve(behaviors.size());

        for (const auto &[name, factory] : behaviors)
        {
            names.push_back(name);
        }

        return names;
    }

    void BehaviorRegistry::unregisterBehavior(const std::string &behaviorName)
    {
        behaviors.erase(behaviorName);
    }

    void BehaviorRegistry::clear()
    {
        behaviors.clear();
    }

} // namespace Factory


================================================================================
FILE: src\factory\BehaviorRegistry.h
================================================================================

#pragma once
#include "../components/EntityBehavior.h"
#include <functional>
#include <unordered_map>
#include <memory>
#include <string>
#include <vector>

namespace Factory
{

    /**
     * Registry for behavior classes that can be instantiated from package XML.
     * Uses factory pattern to create behavior instances by name.
     */
    class BehaviorRegistry
    {
    public:
        using BehaviorFactory = std::function<std::unique_ptr<Components::EntityBehavior>()>;

        /**
         * Get the singleton instance of the behavior registry
         */
        static BehaviorRegistry &instance();

        /**
         * Destructor
         */
        ~BehaviorRegistry();

        /**
         * Register a behavior factory function
         * @param behaviorName Name used in package XML codeBehind attribute
         * @param factory Function that creates instances of the behavior
         */
        void registerBehavior(const std::string &behaviorName, BehaviorFactory factory);

        /**
         * Create a behavior instance by name
         * @param behaviorName Name of the behavior to create
         * @return Unique pointer to the behavior, or nullptr if not found
         */
        std::unique_ptr<Components::EntityBehavior> createBehavior(const std::string &behaviorName) const;

        /**
         * Check if a behavior is registered
         * @param behaviorName Name of the behavior to check
         * @return True if the behavior is registered
         */
        bool isBehaviorRegistered(const std::string &behaviorName) const;

        /**
         * Get all registered behavior names
         * @return Vector of all registered behavior names
         */
        std::vector<std::string> getRegisteredBehaviors() const;

        /**
         * Unregister a behavior (useful for testing or dynamic loading)
         * @param behaviorName Name of the behavior to unregister
         */
        void unregisterBehavior(const std::string &behaviorName);

        /**
         * Clear all registered behaviors
         */
        void clear();

    private:
        BehaviorRegistry() = default;
        BehaviorRegistry(const BehaviorRegistry &) = delete;
        BehaviorRegistry &operator=(const BehaviorRegistry &) = delete;

        std::unordered_map<std::string, BehaviorFactory> behaviors;
    };

} // namespace Factory


================================================================================
FILE: src\factory\EntityComponentInitializer.cpp
================================================================================

#include "debug.h"

void EntityFactory::addEntityComponents(Entity &entity, const EntityConfig::EntityDefinition &definition)
{
    DEBUG_LOG("Initializing components for entity " + std::to_string(entity.getId()) + " with name '" + definition.name + "'");

    // Set entity basic properties
    entity.setName(definition.name);
    entity.setActive(definition.startActive);

    // Set transform component
    entity.setPosition(definition.transform.position.x,
                       definition.transform.position.y,
                       definition.transform.position.z);

    // Convert quaternion to euler angles for now (simplified)
    // In a real implementation, you'd maintain the quaternion rotation
    float yaw = 0.0f, pitch = 0.0f, roll = 0.0f;
    // Simple conversion, not accurate for all cases
    // This would be replaced with proper quaternion to euler conversion
    if (definition.transform.rotation.w != 1.0f)
    {
        yaw = std::atan2(2.0f * (definition.transform.rotation.y * definition.transform.rotation.z +
                                 definition.transform.rotation.w * definition.transform.rotation.x),
                         definition.transform.rotation.w * definition.transform.rotation.w -
                             definition.transform.rotation.x * definition.transform.rotation.x -
                             definition.transform.rotation.y * definition.transform.rotation.y +
                             definition.transform.rotation.z * definition.transform.rotation.z);

        pitch = std::asin(-2.0f * (definition.transform.rotation.x * definition.transform.rotation.z -
                                   definition.transform.rotation.w * definition.transform.rotation.y));

        roll = std::atan2(2.0f * (definition.transform.rotation.x * definition.transform.rotation.y +
                                  definition.transform.rotation.w * definition.transform.rotation.z),
                          definition.transform.rotation.w * definition.transform.rotation.w +
                              definition.transform.rotation.x * definition.transform.rotation.x -
                              definition.transform.rotation.y * definition.transform.rotation.y -
                              definition.transform.rotation.z * definition.transform.rotation.z);
    }

    entity.setRotation(pitch, yaw, roll);
    entity.setScale(definition.transform.scale.x,
                    definition.transform.scale.y,
                    definition.transform.scale.z);

    // Add renderable component if defined
    if (definition.renderable)
    {
        DEBUG_LOG("Adding renderable component to entity " + std::to_string(entity.getId()));
        entity.setRenderableComponent(
            definition.renderable->meshId,
            definition.renderable->materialId,
            definition.renderable->isVisible);

        // Set additional renderable properties if available
        // This would use additional Entity methods that would need to be implemented
        // entity.setOpacity(definition.renderable->opacity);
        // entity.setRenderLayer(definition.renderable->renderLayer);
    }

    // Add physics component if defined
    if (definition.physics)
    {
        DEBUG_LOG("Adding physics component to entity " + std::to_string(entity.getId()));
        entity.setPhysicsComponent(
            definition.physics->hasPhysics,
            definition.physics->mass,
            definition.physics->friction,
            definition.physics->restitution);

        // Set additional physics properties
        entity.setColliderType(definition.physics->colliderType);
        entity.setColliderSize(
            definition.physics->colliderSize[0],
            definition.physics->colliderSize[1],
            definition.physics->colliderSize[2]);
        entity.setKinematic(definition.physics->isKinematic);
        entity.setUseGravity(definition.physics->useGravity);
    }

    // Add vehicle component if defined
    if (definition.vehicle)
    {
        DEBUG_LOG("Adding vehicle component to entity " + std::to_string(entity.getId()));
        entity.setVehicleComponent(
            definition.vehicle->vehicleType,
            definition.vehicle->maxSpeed,
            definition.vehicle->acceleration);

        // Set additional vehicle properties
        // entity.setManeuverability(definition.vehicle->maneuverability);
        // entity.setControllerType(definition.vehicle->controllerType);
    }

    // Add audio component if defined
    if (definition.audio)
    {
        DEBUG_LOG("Adding audio component to entity " + std::to_string(entity.getId()));
        entity.setAudioComponent(
            definition.audio->soundId,
            definition.audio->volume,
            definition.audio->loop);
    }

    // Add light component if defined
    if (definition.light)
    {
        DEBUG_LOG("Adding light component to entity " + std::to_string(entity.getId()));
        entity.setLightComponent(
            definition.light->lightType,
            definition.light->color[0],
            definition.light->color[1],
            definition.light->color[2],
            definition.light->intensity,
            definition.light->range);
    }

    // Add custom properties
    for (const auto &property : definition.customProperties)
    {
        DEBUG_LOG("Setting custom property '" + property.name + "' to '" + property.value + "' for entity " + std::to_string(entity.getId()));
        entity.setCustomProperty(property.name, property.value);
    }

    // Set lifetime if defined (non-negative)
    if (definition.lifetime >= 0.0f)
    {
        DEBUG_LOG("Setting lifetime to " + std::to_string(definition.lifetime) + " for entity " + std::to_string(entity.getId()))
        entity.setLifetime(definition.lifetime);
    }
}



================================================================================
FILE: src\factory\EntityFactory.cpp
================================================================================

#include "EntityFactory.h"
#include "systems/MaterialManager.h"
#include "core/Entity.h"
#include "core/EventBus.h"
#include "core/Vector3D.h"
#include "core/Quaternion.h"
#include "loaders/EntityXmlParser.h"
#include "config/EntityConfigParser.h"
#include "components/TransformC.h"
#include "components/RenderableC.h"
#include "components/PhysicsC.h"
#include "components/VehicleC.h"
#include "components/AudioC.h"
#include "components/LightC.h"
#include <iostream>
#include "debug.h"

namespace EntityFactory
{

    EntityFactory::EntityFactory(EventBus &eventBus, Material::MaterialManager &materialManager)
        : eventBus_(eventBus), materialManager_(materialManager), nextEntityId_(1)
    {
        DEBUG_LOG("Initializing EntityFactory");
        initializeDefaultTemplates();
    }

    bool EntityFactory::loadConfiguration(const std::string &configFilePath)
    {
        DEBUG_LOG("Loading configuration from " + configFilePath);
        // Load entity factory configuration
        DEBUG_LOG("EntityFactory: Loading configuration from " << configFilePath);

        EntityConfig::EntityFactoryConfiguration config =
            EntityConfig::EntityConfigParser::loadFromFile(configFilePath);

        // Append loaded templates to existing ones instead of replacing them
        // This preserves default templates created in initializeDefaultTemplates()
        for (auto &loadedTemplate : config.templates)
        {
            // Check if template already exists
            bool templateExists = false;
            for (const auto &existingTemplate : entityTemplates_)
            {
                if (existingTemplate.templateId == loadedTemplate.templateId)
                {
                    templateExists = true;
                    break;
                }
            }

            if (!templateExists)
            {
                entityTemplates_.push_back(std::move(loadedTemplate));
            }
        }

        // Store any simple name-value templates for backward compatibility
        for (const auto &entityTemplate : entityTemplates_)
        {
            templates_[entityTemplate.templateId] = entityTemplate.name;
        }

        DEBUG_LOG("Total templates available: " << entityTemplates_.size());
        return true;
    }

    std::unique_ptr<Entity> EntityFactory::createFromTemplate(const std::string &templateName,
                                                              const std::string &entityName,
                                                              unsigned int entityId)
    {
        DEBUG_LOG("Creating entity from template '" + templateName + "' with name '" + entityName + "'");
        if (entityId == 0)
        {
            entityId = getNextEntityId();
        }

        // Create basic entity
        auto entity = std::make_unique<Entity>(entityId);

        DEBUG_LOG("EntityFactory: Creating entity '" << entityName
                                                     << "' from template '" << templateName << "' with ID " << entityId);

        // Find template in loaded templates
        for (const auto &entityTemplate : entityTemplates_)
        {
            if (entityTemplate.templateId == templateName)
            {
                // Create a copy of the template's default definition
                EntityConfig::EntityDefinition definition;

                // Copy basic properties
                definition.entityType = entityTemplate.defaultDefinition.entityType;
                definition.name = entityTemplate.defaultDefinition.name;
                definition.description = entityTemplate.defaultDefinition.description;
                definition.startActive = entityTemplate.defaultDefinition.startActive;
                definition.lifetime = entityTemplate.defaultDefinition.lifetime;
                definition.transform = entityTemplate.defaultDefinition.transform;
                definition.customProperties = entityTemplate.defaultDefinition.customProperties;

                // Copy component pointers (deep copy)
                if (entityTemplate.defaultDefinition.renderable)
                {
                    definition.renderable = std::make_unique<EntityConfig::RenderableComponent>(*entityTemplate.defaultDefinition.renderable);
                }

                if (entityTemplate.defaultDefinition.physics)
                {
                    definition.physics = std::make_unique<EntityConfig::PhysicsComponent>(*entityTemplate.defaultDefinition.physics);
                }

                if (entityTemplate.defaultDefinition.audio)
                {
                    definition.audio = std::make_unique<EntityConfig::AudioComponent>(*entityTemplate.defaultDefinition.audio);
                }

                if (entityTemplate.defaultDefinition.vehicle)
                {
                    definition.vehicle = std::make_unique<EntityConfig::VehicleComponent>(*entityTemplate.defaultDefinition.vehicle);
                }

                if (entityTemplate.defaultDefinition.light)
                {
                    definition.light = std::make_unique<EntityConfig::LightComponent>(*entityTemplate.defaultDefinition.light);
                }

                // Override the name if provided
                if (!entityName.empty())
                {
                    definition.name = entityName;
                }

                // Add components based on the definition
                addEntityComponents(*entity, definition);

                return entity;
            }
        }

        // If template not found, create a basic entity as fallback
        DEBUG_LOG("Warning: Template '" << templateName << "' not found, creating basic entity");
        return entity;
    }

    std::unique_ptr<Entity> EntityFactory::createFromXmlFile(const std::string &xmlFilePath, unsigned int entityId)
    {
        DEBUG_LOG("Creating entity from XML file '" + xmlFilePath + "'");
        EntityLoader::EntityXmlParser parser;
        auto entityDef = parser.loadFromFile(xmlFilePath);

        if (!entityDef)
        {
            std::cerr << "Failed to load entity from XML file: " << xmlFilePath << std::endl;
            return nullptr;
        }

        return createFromDefinition(*entityDef, entityId);
    }

    std::unique_ptr<Entity> EntityFactory::createFromDefinition(
        const EntityConfig::EntityDefinition &definition, unsigned int entityId)
    {
        DEBUG_LOG("Creating entity from definition '" + definition.name + "' of type '" + definition.entityType + "'");
        if (entityId == 0)
        {
            entityId = getNextEntityId();
        }

        // Create basic entity
        auto entity = std::make_unique<Entity>(entityId);

        DEBUG_LOG("EntityFactory: Creating entity '" << definition.name
                                                     << "' of type '" << definition.entityType << "' with ID " << entityId);

        // Add components based on the definition
        addEntityComponents(*entity, definition);

        return entity;
    }

    void EntityFactory::initializeDefaultTemplates()
    {
        DEBUG_LOG("Initializing default entity templates");
        // Initialize basic templates
        templates_["earth_sphere"] = "basic_sphere";
        templates_["basic_drone"] = "aircraft";
        templates_["cloud_object"] = "cloud";

        // Create some default entity templates
        EntityConfig::EntityTemplate earthTemplate;
        earthTemplate.templateId = "earth_sphere";
        earthTemplate.name = "Earth";
        earthTemplate.category = "environment";
        earthTemplate.description = "Basic spherical planet";

        // Set up default definition for earth template
        earthTemplate.defaultDefinition.entityType = "sphere";
        earthTemplate.defaultDefinition.name = "Earth";
        earthTemplate.defaultDefinition.transform.scale = {1.0f, 1.0f, 1.0f};

        // Add a renderable component
        auto renderable = std::make_unique<EntityConfig::RenderableComponent>();
        renderable->meshId = "sphere";
        renderable->materialId = "earth";
        earthTemplate.defaultDefinition.renderable = std::move(renderable);

        // Add the template
        entityTemplates_.push_back(std::move(earthTemplate));

        // Create drone template
        EntityConfig::EntityTemplate droneTemplate;
        droneTemplate.templateId = "basic_drone";
        droneTemplate.name = "Drone";
        droneTemplate.category = "vehicle";
        droneTemplate.description = "Basic quadcopter drone";

        droneTemplate.defaultDefinition.entityType = "drone";
        droneTemplate.defaultDefinition.name = "Drone";

        // Add a vehicle component
        auto vehicle = std::make_unique<EntityConfig::VehicleComponent>();
        vehicle->vehicleType = "drone";
        vehicle->maxSpeed = 20.0f;
        droneTemplate.defaultDefinition.vehicle = std::move(vehicle);

        // Add the template
        entityTemplates_.push_back(std::move(droneTemplate));

        // Create cloud template
        EntityConfig::EntityTemplate cloudTemplate;
        cloudTemplate.templateId = "cloud_object";
        cloudTemplate.name = "Cloud";
        cloudTemplate.category = "environment";
        cloudTemplate.description = "Atmospheric cloud";

        cloudTemplate.defaultDefinition.entityType = "cloud";
        cloudTemplate.defaultDefinition.name = "Cloud";

        // Add a renderable component for clouds
        auto cloudRenderable = std::make_unique<EntityConfig::RenderableComponent>();
        cloudRenderable->meshId = "sphere";
        cloudRenderable->materialId = "cloud";
        cloudTemplate.defaultDefinition.renderable = std::move(cloudRenderable);

        // Add the cloud template
        entityTemplates_.push_back(std::move(cloudTemplate));
    }

    void EntityFactory::addEntityComponents(Entity &entity, const EntityConfig::EntityDefinition &definition)
    {
        DEBUG_LOG("Adding components to entity " + std::to_string(entity.getId()) + " from definition");
        // Set entity properties
        if (!definition.name.empty())
        {
            entity.setName(definition.name);
        }

        // Set transform properties
        // Convert from EntityConfig::Vec3 to Vector3D
        Vector3D position(
            definition.transform.position.x,
            definition.transform.position.y,
            definition.transform.position.z);
        entity.setPosition(position.x, position.y, position.z);

        // Convert quaternion to Euler angles
        float yaw = 0.0f, pitch = 0.0f, roll = 0.0f;

        // Only convert if not identity quaternion
        if (definition.transform.rotation.w != 1.0f)
        {
            yaw = std::atan2(2.0f * (definition.transform.rotation.y * definition.transform.rotation.z +
                                     definition.transform.rotation.w * definition.transform.rotation.x),
                             definition.transform.rotation.w * definition.transform.rotation.w -
                                 definition.transform.rotation.x * definition.transform.rotation.x -
                                 definition.transform.rotation.y * definition.transform.rotation.y +
                                 definition.transform.rotation.z * definition.transform.rotation.z);

            pitch = std::asin(-2.0f * (definition.transform.rotation.x * definition.transform.rotation.z -
                                       definition.transform.rotation.w * definition.transform.rotation.y));

            roll = std::atan2(2.0f * (definition.transform.rotation.x * definition.transform.rotation.y +
                                      definition.transform.rotation.w * definition.transform.rotation.z),
                              definition.transform.rotation.w * definition.transform.rotation.w +
                                  definition.transform.rotation.x * definition.transform.rotation.x -
                                  definition.transform.rotation.y * definition.transform.rotation.y -
                                  definition.transform.rotation.z * definition.transform.rotation.z);
        }

        entity.setRotation(pitch, yaw, roll);

        // Convert from EntityConfig::Vec3 to Vector3D
        Vector3D scale(
            definition.transform.scale.x,
            definition.transform.scale.y,
            definition.transform.scale.z);
        entity.setScale(scale.x, scale.y, scale.z);

        // Create and add TransformC component with the calculated values
        DEBUG_LOG("Adding TransformC component to entity " + std::to_string(entity.getId()));
        auto transformComp = std::make_unique<TransformC>();

        // Set position
        transformComp->position = Vector3D(
            definition.transform.position.x,
            definition.transform.position.y,
            definition.transform.position.z);

        // Set rotation (convert from definition rotation)
        transformComp->rotation = Quaternion(
            definition.transform.rotation.x,
            definition.transform.rotation.y,
            definition.transform.rotation.z,
            definition.transform.rotation.w);

        // Set scale
        transformComp->scale = Vector3D(
            definition.transform.scale.x,
            definition.transform.scale.y,
            definition.transform.scale.z);

        entity.addComponent<TransformC>(std::move(transformComp));

        // Add renderable component if defined
        if (definition.renderable)
        {
            DEBUG_LOG("Adding renderable component to entity " + std::to_string(entity.getId()));
            auto renderableComp = std::make_unique<RenderableC>();
            renderableComp->meshId = definition.renderable->meshId;
            renderableComp->materialId = definition.renderable->materialId;
            renderableComp->isVisible = definition.renderable->isVisible;
            entity.addComponent<RenderableC>(std::move(renderableComp));
        }

        // Add physics component if defined
        if (definition.physics)
        {
            DEBUG_LOG("Adding physics component to entity " + std::to_string(entity.getId()));
            auto physicsComp = std::make_unique<PhysicsC>();
            physicsComp->mass = definition.physics->mass;
            physicsComp->friction = definition.physics->friction;
            physicsComp->restitution = definition.physics->restitution;
            physicsComp->isKinematic = definition.physics->isKinematic;
            physicsComp->useGravity = definition.physics->useGravity;
            physicsComp->colliderType = definition.physics->colliderType;

            // Copy collider size
            physicsComp->colliderSize[0] = definition.physics->colliderSize[0];
            physicsComp->colliderSize[1] = definition.physics->colliderSize[1];
            physicsComp->colliderSize[2] = definition.physics->colliderSize[2];

            entity.addComponent<PhysicsC>(std::move(physicsComp));
        }

        // Add vehicle component if defined
        if (definition.vehicle)
        {
            DEBUG_LOG("Adding vehicle component to entity " + std::to_string(entity.getId()));
            auto vehicleComp = std::make_unique<VehicleC>();
            vehicleComp->vehicleType = definition.vehicle->vehicleType;
            vehicleComp->maxSpeed = definition.vehicle->maxSpeed;
            vehicleComp->acceleration = definition.vehicle->acceleration;
            vehicleComp->maneuverability = definition.vehicle->maneuverability;
            vehicleComp->controllerType = definition.vehicle->controllerType;
            entity.addComponent<VehicleC>(std::move(vehicleComp));
        }

        // Add audio component if defined
        if (definition.audio)
        {
            DEBUG_LOG("Adding audio component to entity " + std::to_string(entity.getId()));
            entity.setAudioComponent(definition.audio->soundId, definition.audio->volume, definition.audio->loop);
        }

        // Add light component if defined
        if (definition.light)
        {
            DEBUG_LOG("Adding light component to entity " + std::to_string(entity.getId()));
            float r = 1.0f, g = 1.0f, b = 1.0f;
            if (definition.light->color[0] > 0)
                r = definition.light->color[0];
            if (definition.light->color[1] > 0)
                g = definition.light->color[1];
            if (definition.light->color[2] > 0)
                b = definition.light->color[2];

            entity.setLightComponent(definition.light->lightType, r, g, b,
                                     definition.light->intensity, definition.light->range);
        }

        // Process custom properties
        for (const auto &prop : definition.customProperties)
        {
            entity.setCustomProperty(prop.name, prop.value);
        }
    }

} // namespace EntityFactory


================================================================================
FILE: src\factory\EntityFactory.h
================================================================================

#pragma once

#include "core/Entity.h"
#include "core/EventBus.h"
#include "config/EntityConfig.h"
#include <memory>
#include <string>
#include <unordered_map>
#include <vector>

// Forward declarations
namespace Material
{
    class MaterialManager;
}

namespace EntityFactory
{

    /**
     * @brief Entity Factory for creating entities from XML definitions
     *
     * Creates entities based on XML definitions or templates, and adds
     * appropriate components based on the entity configuration.
     */
    class EntityFactory
    {
    public:
        EntityFactory(EventBus &eventBus, Material::MaterialManager &materialManager);
        ~EntityFactory() = default;

        /**
         * @brief Load configuration from file
         */
        bool loadConfiguration(const std::string &configFilePath);

        /**
         * @brief Create entity from template name
         */
        std::unique_ptr<Entity> createFromTemplate(const std::string &templateName,
                                                   const std::string &entityName,
                                                   unsigned int entityId);

        /**
         * @brief Create entity from XML file
         */
        std::unique_ptr<Entity> createFromXmlFile(const std::string &xmlFilePath,
                                                  unsigned int entityId = 0);

        /**
         * @brief Create entity from EntityDefinition object
         */
        std::unique_ptr<Entity> createFromDefinition(const EntityConfig::EntityDefinition &definition,
                                                     unsigned int entityId = 0);

    private:
        EventBus &eventBus_;
        Material::MaterialManager &materialManager_;
        unsigned int nextEntityId_;

        // Template and configuration storage
        std::unordered_map<std::string, std::string> templates_;
        std::vector<EntityConfig::EntityTemplate> entityTemplates_;

        void initializeDefaultTemplates();

        /**
         * @brief Add components to entity based on EntityDefinition
         */
        void addEntityComponents(Entity &entity, const EntityConfig::EntityDefinition &definition);

        /**
         * @brief Get a unique entity ID if one wasn't provided
         */
        unsigned int getNextEntityId()
        {
            return nextEntityId_++;
        }
    };

} // namespace EntityFactory



================================================================================
FILE: src\generators\BasicShaderGenerator.cpp
================================================================================

#include "BasicShaderGenerator.h"
#include <sstream>
#include <algorithm>
#include "../debug.h"

ShaderInfo BasicShaderGenerator::generateShader(const std::string &shaderType,
                                                const std::map<std::string, std::string> &parameters)
{
    DEBUG_LOG("Generating shader of type '" + shaderType + "'");
    if (shaderType == "phong")
    {
        return generatePhongShader(parameters);
    }
    else if (shaderType == "pbr")
    {
        return generatePBRShader(parameters);
    }
    else if (shaderType == "unlit")
    {
        return generateUnlitShader(parameters);
    }
    else if (shaderType == "debug")
    {
        return generateDebugShader(parameters);
    }
    else
    {
        // Default to unlit
        return generateUnlitShader(parameters);
    }
}

ShaderInfo BasicShaderGenerator::generatePhongShader(const std::map<std::string, std::string> &parameters)
{
    DEBUG_LOG("Generating Phong shader");
    ShaderInfo shader;

    // Vertex shader
    shader.vertexSource = R"(
#version 330 core

layout (location = 0) in vec3 aPos;
layout (location = 1) in vec3 aNormal;
layout (location = 2) in vec2 aTexCoord;

out vec3 FragPos;
out vec3 Normal;
out vec2 TexCoord;

uniform mat4 model;
uniform mat4 view;
uniform mat4 projection;
uniform mat3 normalMatrix;

void main()
{
    FragPos = vec3(model * vec4(aPos, 1.0));
    Normal = normalMatrix * aNormal;
    TexCoord = aTexCoord;
    
    gl_Position = projection * view * vec4(FragPos, 1.0);
}
)";

    // Fragment shader
    std::ostringstream fragShader;
    fragShader << R"(
#version 330 core

in vec3 FragPos;
in vec3 Normal;
in vec2 TexCoord;

out vec4 FragColor;

// Material properties
uniform vec3 material_ambient;
uniform vec3 material_diffuse;
uniform vec3 material_specular;
uniform float material_shininess;
uniform sampler2D material_diffuseMap;
uniform bool material_useDiffuseMap;

// Light properties
uniform vec3 light_position;
uniform vec3 light_ambient;
uniform vec3 light_diffuse;
uniform vec3 light_specular;

// View position
uniform vec3 viewPos;

void main()
{
    vec3 norm = normalize(Normal);
    vec3 lightDir = normalize(light_position - FragPos);
    vec3 viewDir = normalize(viewPos - FragPos);
    vec3 reflectDir = reflect(-lightDir, norm);
    
    // Ambient
    vec3 ambient = light_ambient * material_ambient;
    
    // Diffuse
    float diff = max(dot(norm, lightDir), 0.0);
    vec3 diffuse_color = material_useDiffuseMap ? 
        texture(material_diffuseMap, TexCoord).rgb : material_diffuse;
    vec3 diffuse = light_diffuse * diff * diffuse_color;
    
    // Specular
    float spec = pow(max(dot(viewDir, reflectDir), 0.0), material_shininess);
    vec3 specular = light_specular * spec * material_specular;
    
    vec3 result = ambient + diffuse + specular;
    FragColor = vec4(result, 1.0);
}
)";

    shader.fragmentSource = fragShader.str();

    // Set up uniforms
    shader.uniforms = {
        "model", "view", "projection", "normalMatrix", "viewPos",
        "material_ambient", "material_diffuse", "material_specular",
        "material_shininess", "material_diffuseMap", "material_useDiffuseMap",
        "light_position", "light_ambient", "light_diffuse", "light_specular"};

    shader.attributes = {"aPos", "aNormal", "aTexCoord"};

    return shader;
}

ShaderInfo BasicShaderGenerator::generatePBRShader(const std::map<std::string, std::string> &parameters)
{
    DEBUG_LOG("Generating PBR shader");
    ShaderInfo shader;

    // Basic PBR vertex shader
    shader.vertexSource = generateVertexShader(true, true, false);

    // PBR fragment shader with simplified model
    shader.fragmentSource = R"(
#version 330 core

in vec3 FragPos;
in vec3 Normal;
in vec2 TexCoord;

out vec4 FragColor;

// PBR material properties
uniform vec3 albedo;
uniform float roughness;
uniform float metallic;
uniform float ao;
uniform sampler2D albedoMap;
uniform sampler2D normalMap;
uniform sampler2D metallicMap;
uniform sampler2D roughnessMap;
uniform sampler2D aoMap;
uniform bool useAlbedoMap;
uniform bool useNormalMap;
uniform bool useMetallicMap;
uniform bool useRoughnessMap;
uniform bool useAOMap;

// Lights
uniform vec3 lightPositions[4];
uniform vec3 lightColors[4];
uniform int numLights;

uniform vec3 camPos;

const float PI = 3.14159265359;

vec3 getNormalFromMap()
{
    if (!useNormalMap)
        return normalize(Normal);
        
    vec3 tangentNormal = texture(normalMap, TexCoord).xyz * 2.0 - 1.0;
    
    vec3 Q1 = dFdx(FragPos);
    vec3 Q2 = dFdy(FragPos);
    vec2 st1 = dFdx(TexCoord);
    vec2 st2 = dFdy(TexCoord);
    
    vec3 N = normalize(Normal);
    vec3 T = normalize(Q1 * st2.t - Q2 * st1.t);
    vec3 B = -normalize(cross(N, T));
    mat3 TBN = mat3(T, B, N);
    
    return normalize(TBN * tangentNormal);
}

float DistributionGGX(vec3 N, vec3 H, float roughness)
{
    float a = roughness*roughness;
    float a2 = a*a;
    float NdotH = max(dot(N, H), 0.0);
    float NdotH2 = NdotH*NdotH;
    
    float num = a2;
    float denom = (NdotH2 * (a2 - 1.0) + 1.0);
    denom = PI * denom * denom;
    
    return num / denom;
}

float GeometrySchlickGGX(float NdotV, float roughness)
{
    float r = (roughness + 1.0);
    float k = (r*r) / 8.0;
    
    float num = NdotV;
    float denom = NdotV * (1.0 - k) + k;
    
    return num / denom;
}

float GeometrySmith(vec3 N, vec3 V, vec3 L, float roughness)
{
    float NdotV = max(dot(N, V), 0.0);
    float NdotL = max(dot(N, L), 0.0);
    float ggx2 = GeometrySchlickGGX(NdotV, roughness);
    float ggx1 = GeometrySchlickGGX(NdotL, roughness);
    
    return ggx1 * ggx2;
}

vec3 fresnelSchlick(float cosTheta, vec3 F0)
{
    return F0 + (1.0 - F0) * pow(clamp(1.0 - cosTheta, 0.0, 1.0), 5.0);
}

void main()
{
    vec3 albedoColor = useAlbedoMap ? texture(albedoMap, TexCoord).rgb : albedo;
    float metallicValue = useMetallicMap ? texture(metallicMap, TexCoord).r : metallic;
    float roughnessValue = useRoughnessMap ? texture(roughnessMap, TexCoord).r : roughness;
    float aoValue = useAOMap ? texture(aoMap, TexCoord).r : ao;
    
    vec3 N = getNormalFromMap();
    vec3 V = normalize(camPos - FragPos);
    
    vec3 F0 = vec3(0.04);
    F0 = mix(F0, albedoColor, metallicValue);
    
    vec3 Lo = vec3(0.0);
    for(int i = 0 i < numLights && i < 4; ++i)
    {
        vec3 L = normalize(lightPositions[i] - FragPos);
        vec3 H = normalize(V + L);
        float distance = length(lightPositions[i] - FragPos);
        float attenuation = 1.0 / (distance * distance);
        vec3 radiance = lightColors[i] * attenuation;
        
        float NDF = DistributionGGX(N, H, roughnessValue);
        float G = GeometrySmith(N, V, L, roughnessValue);
        vec3 F = fresnelSchlick(max(dot(H, V), 0.0), F0);
        
        vec3 kS = F;
        vec3 kD = vec3(1.0) - kS;
        kD *= 1.0 - metallicValue;
        
        vec3 numerator = NDF * G * F;
        float denominator = 4.0 * max(dot(N, V), 0.0) * max(dot(N, L), 0.0) + 0.0001;
        vec3 specular = numerator / denominator;
        
        float NdotL = max(dot(N, L), 0.0);
        Lo += (kD * albedoColor / PI + specular) * radiance * NdotL;
    }
    
    vec3 ambient = vec3(0.03) * albedoColor * aoValue;
    vec3 color = ambient + Lo;
    
    // HDR tonemapping
    color = color / (color + vec3(1.0));
    // Gamma correction
    color = pow(color, vec3(1.0/2.2));
    
    FragColor = vec4(color, 1.0);
}
)";

    shader.uniforms = {
        "model", "view", "projection", "normalMatrix", "camPos",
        "albedo", "roughness", "metallic", "ao",
        "albedoMap", "normalMap", "metallicMap", "roughnessMap", "aoMap",
        "useAlbedoMap", "useNormalMap", "useMetallicMap", "useRoughnessMap", "useAOMap",
        "lightPositions", "lightColors", "numLights"};

    shader.attributes = {"aPos", "aNormal", "aTexCoord"};

    return shader;
}

ShaderInfo BasicShaderGenerator::generateUnlitShader(const std::map<std::string, std::string> &parameters)
{
    DEBUG_LOG("Generating unlit shader");
    ShaderInfo shader;

    shader.vertexSource = R"(
#version 330 core

layout (location = 0) in vec3 aPos;
layout (location = 2) in vec2 aTexCoord;

out vec2 TexCoord;

uniform mat4 model;
uniform mat4 view;
uniform mat4 projection;

void main()
{
    TexCoord = aTexCoord;
    gl_Position = projection * view * model * vec4(aPos, 1.0);
}
)";

    shader.fragmentSource = R"(
#version 330 core

in vec2 TexCoord;
out vec4 FragColor;

uniform vec3 color;
uniform sampler2D mainTexture;
uniform bool useTexture;

void main()
{
    vec3 finalColor = useTexture ? texture(mainTexture, TexCoord).rgb * color : color;
    FragColor = vec4(finalColor, 1.0);
}
)";

    shader.uniforms = {"model", "view", "projection", "color", "mainTexture", "useTexture"};
    shader.attributes = {"aPos", "aTexCoord"};

    return shader;
}

ShaderInfo BasicShaderGenerator::generateDebugShader(const std::map<std::string, std::string> &parameters)
{
    DEBUG_LOG("Generating debug shader");
    ShaderInfo shader;

    auto debugType = parameters.find("debug_type");
    std::string type = (debugType != parameters.end()) ? debugType->second : "normals";

    shader.vertexSource = generateVertexShader(true, true, false);

    if (type == "normals")
    {
        shader.fragmentSource = R"(
#version 330 core

in vec3 Normal;
out vec4 FragColor;

void main()
{
    vec3 norm = normalize(Normal);
    FragColor = vec4(norm * 0.5 + 0.5, 1.0);
}
)";
    }
    else if (type == "uvs")
    {
        shader.fragmentSource = R"(
#version 330 core

in vec2 TexCoord;
out vec4 FragColor;

void main()
{
    FragColor = vec4(TexCoord, 0.0, 1.0);
}
)";
    }
    else
    {
        // Default wireframe-style debug
        shader.fragmentSource = R"(
#version 330 core

out vec4 FragColor;

void main()
{
    FragColor = vec4(1.0, 1.0, 0.0, 1.0);
}
)";
    }

    shader.uniforms = {"model", "view", "projection", "normalMatrix"};
    shader.attributes = {"aPos", "aNormal", "aTexCoord"};

    return shader;
}

std::vector<std::string> BasicShaderGenerator::getSupportedShaderTypes()
{
    return {"phong", "pbr", "unlit", "debug"};
}

std::string BasicShaderGenerator::generateVertexShader(bool includeNormals, bool includeUVs, bool includeColors)
{
    DEBUG_LOG("Generating vertex shader with normals=" + std::to_string(includeNormals)+ ", UVs=" + std::to_string(includeUVs) + ", colors=" + std::to_string(includeColors))
    std::ostringstream vs;

    vs << "#version 330 core\n\n";
    vs << "layout (location = 0) in vec3 aPos;\n";

    if (includeNormals)
    {
        vs << "layout (location = 1) in vec3 aNormal;\n";
        vs << "out vec3 FragPos;\n";
        vs << "out vec3 Normal;\n";
    }

    if (includeUVs)
    {
        vs << "layout (location = 2) in vec2 aTexCoord;\n";
        vs << "out vec2 TexCoord;\n";
    }

    if (includeColors)
    {
        vs << "layout (location = 3) in vec3 aColor;\n";
        vs << "out vec3 VertexColor;\n";
    }

    vs << "\nuniform mat4 model;\n";
    vs << "uniform mat4 view;\n";
    vs << "uniform mat4 projection;\n";

    if (includeNormals)
    {
        vs << "uniform mat3 normalMatrix;\n";
    }

    vs << "\nvoid main()\n{\n";

    if (includeNormals)
    {
        vs << "    FragPos = vec3(model * vec4(aPos, 1.0));\n";
        vs << "    Normal = normalMatrix * aNormal;\n";
    }

    if (includeUVs)
    {
        vs << "    TexCoord = aTexCoord;\n";
    }

    if (includeColors)
    {
        vs << "    VertexColor = aColor;\n";
    }

    vs << "    gl_Position = projection * view * model * vec4(aPos, 1.0);\n";
    vs << "}\n";

    return vs.str();
}

std::string BasicShaderGenerator::generateLightingCode(const std::string &lightingModel)
{
    if (lightingModel == "phong")
    {
        return R"(
    vec3 norm = normalize(Normal);
    vec3 lightDir = normalize(light_position - FragPos);
    vec3 viewDir = normalize(viewPos - FragPos);
    vec3 reflectDir = reflect(-lightDir, norm);
    
    vec3 ambient = light_ambient * material_ambient;
    
    float diff = max(dot(norm, lightDir), 0.0);
    vec3 diffuse = light_diffuse * diff * material_diffuse;
    
    float spec = pow(max(dot(viewDir, reflectDir), 0.0), material_shininess);
    vec3 specular = light_specular * spec * material_specular;
    
    vec3 result = ambient + diffuse + specular;
)";
    }

    return "    vec3 result = vec3(1.0);\n";
}

std::string BasicShaderGenerator::generateUniforms(const std::map<std::string, std::string> &parameters)
{
    std::ostringstream uniforms;

    for (const auto &[key, value] : parameters)
    {
        if (key.find("color") != std::string::npos)
        {
            uniforms << "uniform vec3 " << key << ";\n";
        }
        else if (key.find("texture") != std::string::npos)
        {
            uniforms << "uniform sampler2D " << key << ";\n";
        }
        else if (key.find("float") != std::string::npos || key.find("roughness") != std::string::npos || key.find("metallic") != std::string::npos)
        {
            uniforms << "uniform float " << key << ";\n";
        }
    }

    return uniforms.str();
}

std::vector<float> BasicShaderGenerator::parseColor(const std::string &colorStr,
                                                    const std::vector<float> &defaultColor)
{
    std::vector<float> color = defaultColor;

    if (colorStr.empty())
        return color;

    std::istringstream iss(colorStr);
    std::string component;
    size_t index = 0;

    while (std::getline(iss, component, ',') && index < color.size())
    {
        try
        {
            color[index] = std::stof(component);
            index++;
        }
        catch (const std::exception &)
        {
            break;
        }
    }

    return color;
}





================================================================================
FILE: src\generators\BasicShaderGenerator.h
================================================================================

#ifndef BASIC_SHADER_GENERATOR_H
#define BASIC_SHADER_GENERATOR_H

#include <string>
#include <map>
#include <vector>

/**
 * @brief Information about a generated shader.
 */
struct ShaderInfo
{
    std::string vertexSource;            /**< GLSL vertex shader source */
    std::string fragmentSource;          /**< GLSL fragment shader source */
    std::string geometrySource;          /**< GLSL geometry shader source (optional) */
    std::vector<std::string> uniforms;   /**< List of uniform variables */
    std::vector<std::string> attributes; /**< List of vertex attributes */
};

/**
 * @brief Generator for basic GLSL shaders from parametric definitions.
 *
 * This generator creates common shader types (basic lighting, PBR, unlit, etc.)
 * from parameter sets, allowing for data-driven shader creation without
 * requiring manual GLSL coding for every material variant.
 */
class BasicShaderGenerator
{
public:
    /**
     * @brief Generate a shader from parameters.
     *
     * @param shaderType Type of shader to generate ("phong", "pbr", "unlit", etc.)
     * @param parameters Map of parameter name to value
     * @return Generated shader information
     */
    static ShaderInfo generateShader(const std::string &shaderType,
                                     const std::map<std::string, std::string> &parameters);

    /**
     * @brief Generate a basic Phong lighting shader.
     *
     * @param parameters Shader parameters (ambient, diffuse, specular colors, etc.)
     * @return Generated Phong shader
     */
    static ShaderInfo generatePhongShader(const std::map<std::string, std::string> &parameters);

    /**
     * @brief Generate a basic PBR (Physically Based Rendering) shader.
     *
     * @param parameters PBR parameters (roughness, metallic, albedo, etc.)
     * @return Generated PBR shader
     */
    static ShaderInfo generatePBRShader(const std::map<std::string, std::string> &parameters);

    /**
     * @brief Generate an unlit shader (no lighting calculations).
     *
     * @param parameters Basic parameters (color, texture, etc.)
     * @return Generated unlit shader
     */
    static ShaderInfo generateUnlitShader(const std::map<std::string, std::string> &parameters);

    /**
     * @brief Generate a debug shader for visualizing normals, UVs, etc.
     *
     * @param parameters Debug visualization parameters
     * @return Generated debug shader
     */
    static ShaderInfo generateDebugShader(const std::map<std::string, std::string> &parameters);

    /**
     * @brief Get a list of supported shader types.
     *
     * @return Vector of shader type names
     */
    static std::vector<std::string> getSupportedShaderTypes();

private:
    /**
     * @brief Generate common vertex shader code.
     *
     * @param includeNormals Whether to include normal calculations
     * @param includeUVs Whether to include UV coordinates
     * @param includeColors Whether to include vertex colors
     * @return Generated vertex shader source
     */
    static std::string generateVertexShader(bool includeNormals = true,
                                            bool includeUVs = true,
                                            bool includeColors = false);

    /**
     * @brief Generate lighting calculation code.
     *
     * @param lightingModel Lighting model to use ("phong", "pbr", etc.)
     * @return GLSL code for lighting calculations
     */
    static std::string generateLightingCode(const std::string &lightingModel);

    /**
     * @brief Generate uniform declarations from parameters.
     *
     * @param parameters Parameter map
     * @return GLSL uniform declarations
     */
    static std::string generateUniforms(const std::map<std::string, std::string> &parameters);

    /**
     * @brief Extract color value from parameter string.
     *
     * @param colorStr Color string in format "r,g,b" or "r,g,b,a"
     * @param defaultColor Default color if parsing fails
     * @return Parsed color values
     */
    static std::vector<float> parseColor(const std::string &colorStr,
                                         const std::vector<float> &defaultColor);
};

#endif // BASIC_SHADER_GENERATOR_H



================================================================================
FILE: src\generators\CubeGenerator.h
================================================================================

/**
 * @file CubeGenerator.h
 * @brief Procedural cube mesh generator with variations
 *
 * The CubeGenerator creates cube meshes with configurable variations
 * for voxel-style rendering. Features include:
 * - Basic cube generation with proper normals and UVs
 * - Size variations for organic feel
 * - Corner rounding for softer appearance
 * - Texture coordinate mapping options
 * - Integration with Math utilities for calculations
 *
 * @author Generated for Voxel Busy Indicator Scene
 * @date 2024
 */

#pragma once

#include "../math/MathUtils.h"
#include <vector>
#include <cstdint>

/**
 * @brief Procedural cube mesh generator
 *
 * Generates cube meshes with various modifications for voxel-style
 * rendering including size variations and corner rounding.
 */
class CubeGenerator
{
public:
    /**
     * @brief Vertex data structure
     */
    struct Vertex
    {
        Math::float3 position; /**< Vertex position */
        Math::float3 normal;   /**< Vertex normal */
        Math::float2 uv;       /**< Texture coordinates */

        Vertex() : position{0, 0, 0}, normal{0, 0, 0}, uv{0, 0} {}
        Vertex(const Math::float3 &pos, const Math::float3 &norm, const Math::float2 &texCoord)
            : position(pos), normal(norm), uv(texCoord) {}
    };

    /**
     * @brief Generated mesh data
     */
    struct MeshData
    {
        std::vector<Vertex> vertices;  /**< Vertex array */
        std::vector<uint32_t> indices; /**< Triangle indices */
        uint32_t triangleCount;        /**< Number of triangles */
        uint32_t vertexCount;          /**< Number of vertices */

        MeshData() : triangleCount(0), vertexCount(0) {}
    };

    /**
     * @brief UV mapping mode for cube faces
     */
    enum class UVMode
    {
        PerFace,  /**< Each face gets full UV space [0,1] */
        Atlas,    /**< All faces share UV space in atlas layout */
        Projected /**< Projected mapping from one direction */
    };

private:
    /** @brief Cube size */
    Math::float3 size;

    /** @brief Corner rounding radius (0 = sharp corners) */
    float cornerRadius;

    /** @brief Corner rounding subdivision level */
    int cornerSubdivisions;

    /** @brief UV mapping mode */
    UVMode uvMode;

    /** @brief Random seed for variations */
    uint32_t randomSeed;

public:
    /**
     * @brief Construct a new CubeGenerator
     *
     * @param cubeSize Size of the cube (can be non-uniform)
     * @param rounding Corner rounding radius
     * @param subdivisions Corner subdivision level for rounding
     * @param uvMapping UV mapping mode
     * @param seed Random seed for variations
     */
    CubeGenerator(const Math::float3 &cubeSize = {1, 1, 1},
                  float rounding = 0.0f,
                  int subdivisions = 1,
                  UVMode uvMapping = UVMode::PerFace,
                  uint32_t seed = 12345)
        : size(cubeSize), cornerRadius(rounding), cornerSubdivisions(subdivisions), uvMode(uvMapping), randomSeed(seed)
    {
    }

    /**
     * @brief Generate cube mesh
     *
     * @return Generated mesh data
     */
    MeshData generate()
    {
        MeshData mesh;

        if (cornerRadius > 0.0f)
        {
            generateRoundedCube(mesh);
        }
        else
        {
            generateBasicCube(mesh);
        }

        // Update counts
        mesh.vertexCount = static_cast<uint32_t>(mesh.vertices.size());
        mesh.triangleCount = static_cast<uint32_t>(mesh.indices.size()) / 3;

        return mesh;
    }

    /**
     * @brief Generate basic cube with random variations
     *
     * @param variations Amount of random size variation per vertex
     * @return Generated mesh data with variations
     */
    MeshData generateWithVariations(float variations = 0.1f)
    {
        MeshData mesh = generate();

        // Apply random variations to vertices
        uint32_t state = randomSeed;
        for (auto &vertex : mesh.vertices)
        {
            float variation = 1.0f + variations * (Math::rand01(state) - 0.5f);
            vertex.position = Math::scale(vertex.position, variation);
        }

        // Recalculate normals after variation
        recalculateNormals(mesh);

        return mesh;
    }

    /**
     * @brief Set cube size
     *
     * @param cubeSize New cube size
     */
    void setSize(const Math::float3 &cubeSize)
    {
        size = cubeSize;
    }

    /**
     * @brief Set corner rounding
     *
     * @param radius Rounding radius
     * @param subdivisions Subdivision level
     */
    void setCornerRounding(float radius, int subdivisions = 1)
    {
        cornerRadius = Math::clamp(radius, 0.0f, Math::min({size.x, size.y, size.z}) * 0.5f);
        cornerSubdivisions = Math::clamp(subdivisions, 1, 5);
    }

    /**
     * @brief Set UV mapping mode
     *
     * @param mode New UV mapping mode
     */
    void setUVMode(UVMode mode)
    {
        uvMode = mode;
    }

private:
    /**
     * @brief Generate basic cube mesh
     *
     * @param mesh Output mesh data
     */
    void generateBasicCube(MeshData &mesh)
    {
        // Half sizes for convenience
        float hx = size.x * 0.5f;
        float hy = size.y * 0.5f;
        float hz = size.z * 0.5f;

        // Face vertices (position, normal, uv)
        std::vector<std::vector<Vertex>> faces = {
            // Front face (+Z)
            {{{{-hx, -hy, hz}, {0, 0, 1}, {0, 0}},
              {{hx, -hy, hz}, {0, 0, 1}, {1, 0}},
              {{hx, hy, hz}, {0, 0, 1}, {1, 1}},
              {{-hx, hy, hz}, {0, 0, 1}, {0, 1}}}},
            // Back face (-Z)
            {{{{hx, -hy, -hz}, {0, 0, -1}, {0, 0}},
              {{-hx, -hy, -hz}, {0, 0, -1}, {1, 0}},
              {{-hx, hy, -hz}, {0, 0, -1}, {1, 1}},
              {{hx, hy, -hz}, {0, 0, -1}, {0, 1}}}},
            // Left face (-X)
            {{{{-hx, -hy, -hz}, {-1, 0, 0}, {0, 0}},
              {{-hx, -hy, hz}, {-1, 0, 0}, {1, 0}},
              {{-hx, hy, hz}, {-1, 0, 0}, {1, 1}},
              {{-hx, hy, -hz}, {-1, 0, 0}, {0, 1}}}},
            // Right face (+X)
            {{{{hx, -hy, hz}, {1, 0, 0}, {0, 0}},
              {{hx, -hy, -hz}, {1, 0, 0}, {1, 0}},
              {{hx, hy, -hz}, {1, 0, 0}, {1, 1}},
              {{hx, hy, hz}, {1, 0, 0}, {0, 1}}}},
            // Bottom face (-Y)
            {{{{-hx, -hy, -hz}, {0, -1, 0}, {0, 0}},
              {{hx, -hy, -hz}, {0, -1, 0}, {1, 0}},
              {{hx, -hy, hz}, {0, -1, 0}, {1, 1}},
              {{-hx, -hy, hz}, {0, -1, 0}, {0, 1}}}},
            // Top face (+Y)
            {{{{-hx, hy, hz}, {0, 1, 0}, {0, 0}},
              {{hx, hy, hz}, {0, 1, 0}, {1, 0}},
              {{hx, hy, -hz}, {0, 1, 0}, {1, 1}},
              {{-hx, hy, -hz}, {0, 1, 0}, {0, 1}}}}};

        // Add vertices and indices for each face
        for (size_t faceIndex = 0; faceIndex < faces.size(); ++faceIndex)
        {
            uint32_t baseIndex = static_cast<uint32_t>(mesh.vertices.size());

            // Add face vertices with UV mapping
            for (size_t vertIndex = 0; vertIndex < 4; ++vertIndex)
            {
                Vertex vertex = faces[faceIndex][vertIndex];
                vertex.uv = calculateUV(vertex.position, faceIndex, vertIndex);
                mesh.vertices.push_back(vertex);
            }

            // Add face indices (two triangles per face)
            mesh.indices.insert(mesh.indices.end(), {baseIndex, baseIndex + 1, baseIndex + 2,
                                                     baseIndex, baseIndex + 2, baseIndex + 3});
        }
    }

    /**
     * @brief Generate rounded cube mesh
     *
     * @param mesh Output mesh data
     */
    void generateRoundedCube(MeshData &mesh)
    {
        // For rounded cubes, we create a more complex mesh
        // This is a simplified version - full implementation would be quite complex

        // Start with basic cube
        generateBasicCube(mesh);

        // Apply corner rounding by moving vertices towards sphere
        float maxRadius = Math::min({size.x, size.y, size.z}) * 0.5f;
        float clampedRadius = Math::clamp(cornerRadius, 0.0f, maxRadius);

        for (auto &vertex : mesh.vertices)
        {
            // Calculate distance from center
            float distance = Math::len(vertex.position);
            if (distance > clampedRadius)
            {
                // Blend between cube and sphere based on corner radius
                Math::float3 spherePos = Math::scale(Math::norm(vertex.position), clampedRadius);
                float blendFactor = cornerRadius / maxRadius;
                vertex.position = Math::lerp3(vertex.position, spherePos, blendFactor);
            }
        }

        // Recalculate normals after rounding
        recalculateNormals(mesh);
    }

    /**
     * @brief Calculate UV coordinates based on mapping mode
     *
     * @param position Vertex position
     * @param faceIndex Face index (0-5)
     * @param vertexIndex Vertex index within face (0-3)
     * @return UV coordinates
     */
    Math::float2 calculateUV(const Math::float3 &position, size_t faceIndex, size_t vertexIndex)
    {
        switch (uvMode)
        {
        case UVMode::PerFace:
            return calculatePerFaceUV(vertexIndex);

        case UVMode::Atlas:
            return calculateAtlasUV(faceIndex, vertexIndex);

        case UVMode::Projected:
            return calculateProjectedUV(position);

        default:
            return {0, 0};
        }
    }

    /**
     * @brief Calculate per-face UV coordinates
     *
     * @param vertexIndex Vertex index within face
     * @return UV coordinates
     */
    Math::float2 calculatePerFaceUV(size_t vertexIndex)
    {
        switch (vertexIndex)
        {
        case 0:
            return {0, 0};
        case 1:
            return {1, 0};
        case 2:
            return {1, 1};
        case 3:
            return {0, 1};
        default:
            return {0, 0};
        }
    }

    /**
     * @brief Calculate atlas UV coordinates
     *
     * @param faceIndex Face index
     * @param vertexIndex Vertex index within face
     * @return UV coordinates
     */
    Math::float2 calculateAtlasUV(size_t faceIndex, size_t vertexIndex)
    {
        // Simple 3x2 atlas layout
        float faceWidth = 1.0f / 3.0f;
        float faceHeight = 1.0f / 2.0f;

        int atlasX = static_cast<int>(faceIndex % 3);
        int atlasY = static_cast<int>(faceIndex / 3);

        Math::float2 localUV = calculatePerFaceUV(vertexIndex);

        return {
            atlasX * faceWidth + localUV.x * faceWidth,
            atlasY * faceHeight + localUV.y * faceHeight};
    }

    /**
     * @brief Calculate projected UV coordinates
     *
     * @param position Vertex position
     * @return UV coordinates
     */
    Math::float2 calculateProjectedUV(const Math::float3 &position)
    {
        // Simple planar projection from top
        float hx = size.x * 0.5f;
        float hz = size.z * 0.5f;

        return {
            (position.x + hx) / size.x,
            (position.z + hz) / size.z};
    }

    /**
     * @brief Recalculate normals for the mesh
     *
     * @param mesh Mesh to recalculate normals for
     */
    void recalculateNormals(MeshData &mesh)
    {
        // Reset all normals
        for (auto &vertex : mesh.vertices)
        {
            vertex.normal = {0, 0, 0};
        }

        // Calculate face normals and accumulate
        for (size_t i = 0; i < mesh.indices.size(); i += 3)
        {
            uint32_t i0 = mesh.indices[i];
            uint32_t i1 = mesh.indices[i + 1];
            uint32_t i2 = mesh.indices[i + 2];

            const Math::float3 &p0 = mesh.vertices[i0].position;
            const Math::float3 &p1 = mesh.vertices[i1].position;
            const Math::float3 &p2 = mesh.vertices[i2].position;

            // Calculate face normal
            Math::float3 edge1 = Math::sub(p1, p0);
            Math::float3 edge2 = Math::sub(p2, p0);
            Math::float3 faceNormal = Math::norm(Math::cross(edge1, edge2));

            // Accumulate to vertex normals
            mesh.vertices[i0].normal = Math::add(mesh.vertices[i0].normal, faceNormal);
            mesh.vertices[i1].normal = Math::add(mesh.vertices[i1].normal, faceNormal);
            mesh.vertices[i2].normal = Math::add(mesh.vertices[i2].normal, faceNormal);
        }

        // Normalize all vertex normals
        for (auto &vertex : mesh.vertices)
        {
            vertex.normal = Math::norm(vertex.normal);
        }
    }
};



================================================================================
FILE: src\generators\IcoSphereGenerator.h
================================================================================

/**
 * @file IcoSphereGenerator.h
 * @brief Procedural icosphere mesh generator
 *
 * The IcoSphereGenerator creates geodesic sphere meshes with uniform
 * triangle distribution using iterative subdivision of an icosahedron.
 * Features include:
 * - Configurable subdivision levels for detail control
 * - Proper UV mapping for texture application
 * - Normal calculation for lighting
 * - Vertex deduplication for efficiency
 * - Integration with Math utilities for calculations
 *
 * @author Generated for Voxel Busy Indicator Scene
 * @date 2024
 */

#pragma once

#include "../math/MathUtils.h"
#include <vector>
#include <map>
#include <cstdint>

/**
 * @brief Procedural icosphere mesh generator
 *
 * Generates geodesic sphere meshes by subdividing an icosahedron.
 * Provides more uniform triangle distribution than UV spheres.
 */
class IcoSphereGenerator
{
public:
    /**
     * @brief Vertex data structure
     */
    struct Vertex
    {
        Math::float3 position; /**< Vertex position */
        Math::float3 normal;   /**< Vertex normal */
        Math::float2 uv;       /**< Texture coordinates */

        Vertex() : position{0, 0, 0}, normal{0, 0, 0}, uv{0, 0} {}
        Vertex(const Math::float3 &pos, const Math::float3 &norm, const Math::float2 &texCoord)
            : position(pos), normal(norm), uv(texCoord) {}
    };

    /**
     * @brief Generated mesh data
     */
    struct MeshData
    {
        std::vector<Vertex> vertices;  /**< Vertex array */
        std::vector<uint32_t> indices; /**< Triangle indices */
        uint32_t triangleCount;        /**< Number of triangles */
        uint32_t vertexCount;          /**< Number of vertices */

        MeshData() : triangleCount(0), vertexCount(0) {}
    };

private:
    /** @brief Subdivision level (0 = icosahedron, higher = more detail) */
    int subdivisionLevel;

    /** @brief Sphere radius */
    float radius;

    /** @brief Whether to smooth normals */
    bool smoothNormals;

    /** @brief Vertex deduplication map */
    std::map<uint64_t, uint32_t> vertexMap;

    /** @brief Current mesh being generated */
    MeshData *currentMesh;

public:
    /**
     * @brief Construct a new IcoSphereGenerator
     *
     * @param subdivisions Number of subdivision levels (0-6 recommended)
     * @param sphereRadius Radius of the generated sphere
     * @param smooth Whether to smooth normals across faces
     */
    IcoSphereGenerator(int subdivisions = 2, float sphereRadius = 1.0f, bool smooth = true)
        : subdivisionLevel(subdivisions), radius(sphereRadius), smoothNormals(smooth), currentMesh(nullptr)
    {
    }

    /**
     * @brief Generate icosphere mesh
     *
     * @return Generated mesh data
     */
    MeshData generate()
    {
        MeshData mesh;
        currentMesh = &mesh;
        vertexMap.clear();

        // Create base icosahedron
        createIcosahedron();

        // Subdivide to desired level
        for (int i = 0; i < subdivisionLevel; ++i)
        {
            subdivide();
        }

        // Project vertices to sphere surface and calculate normals
        projectToSphere();

        // Generate UV coordinates
        generateUVCoordinates();

        // Update counts
        mesh.vertexCount = static_cast<uint32_t>(mesh.vertices.size());
        mesh.triangleCount = static_cast<uint32_t>(mesh.indices.size()) / 3;

        currentMesh = nullptr;
        return mesh;
    }

    /**
     * @brief Set subdivision level
     *
     * @param level New subdivision level (0-6 recommended)
     */
    void setSubdivisionLevel(int level)
    {
        subdivisionLevel = Math::clamp(level, 0, 6);
    }

    /**
     * @brief Set sphere radius
     *
     * @param sphereRadius New radius
     */
    void setRadius(float sphereRadius)
    {
        radius = sphereRadius;
    }

    /**
     * @brief Set normal smoothing
     *
     * @param smooth Whether to smooth normals
     */
    void setSmoothNormals(bool smooth)
    {
        smoothNormals = smooth;
    }

private:
    /**
     * @brief Create base icosahedron
     */
    void createIcosahedron()
    {
        if (!currentMesh)
            return;

        // Golden ratio
        const float phi = (1.0f + std::sqrt(5.0f)) * 0.5f;
        const float a = 1.0f;
        const float b = 1.0f / phi;

        // Create 12 vertices of icosahedron
        std::vector<Math::float3> positions = {
            {0, b, -a}, {b, a, 0}, {-b, a, 0}, {0, b, a}, {0, -b, a}, {-a, 0, b}, {0, -b, -a}, {a, 0, -b}, {a, 0, b}, {-a, 0, -b}, {b, -a, 0}, {-b, -a, 0}};

        // Add vertices
        for (const auto &pos : positions)
        {
            addVertex(pos);
        }

        // Create 20 triangular faces
        std::vector<std::vector<uint32_t>> faces = {
            {2, 1, 0}, {1, 2, 3}, {5, 4, 3}, {4, 8, 3}, {7, 6, 0}, {6, 9, 0}, {11, 10, 4}, {10, 11, 6}, {9, 5, 2}, {5, 9, 11}, {8, 7, 1}, {7, 8, 10}, {2, 5, 3}, {8, 1, 3}, {9, 2, 0}, {1, 7, 0}, {11, 9, 6}, {7, 10, 6}, {5, 11, 4}, {10, 8, 4}};

        // Add faces
        for (const auto &face : faces)
        {
            currentMesh->indices.push_back(face[0]);
            currentMesh->indices.push_back(face[1]);
            currentMesh->indices.push_back(face[2]);
        }
    }

    /**
     * @brief Subdivide current mesh
     */
    void subdivide()
    {
        if (!currentMesh)
            return;

        std::vector<uint32_t> newIndices;

        // Process each triangle
        for (size_t i = 0; i < currentMesh->indices.size(); i += 3)
        {
            uint32_t v0 = currentMesh->indices[i];
            uint32_t v1 = currentMesh->indices[i + 1];
            uint32_t v2 = currentMesh->indices[i + 2];

            // Get midpoint vertices
            uint32_t m01 = getMidpointVertex(v0, v1);
            uint32_t m12 = getMidpointVertex(v1, v2);
            uint32_t m20 = getMidpointVertex(v2, v0);

            // Create 4 new triangles
            newIndices.insert(newIndices.end(), {v0, m01, m20});
            newIndices.insert(newIndices.end(), {v1, m12, m01});
            newIndices.insert(newIndices.end(), {v2, m20, m12});
            newIndices.insert(newIndices.end(), {m01, m12, m20});
        }

        currentMesh->indices = std::move(newIndices);
    }

    /**
     * @brief Project all vertices to sphere surface
     */
    void projectToSphere()
    {
        if (!currentMesh)
            return;

        for (auto &vertex : currentMesh->vertices)
        {
            // Normalize position to unit sphere
            vertex.position = Math::norm(vertex.position);

            // Scale to desired radius
            vertex.position = Math::scale(vertex.position, radius);

            // Normal is the same as normalized position for a sphere
            vertex.normal = Math::norm(vertex.position);
        }
    }

    /**
     * @brief Generate UV coordinates for vertices
     */
    void generateUVCoordinates()
    {
        if (!currentMesh)
            return;

        for (auto &vertex : currentMesh->vertices)
        {
            // Convert 3D position to spherical coordinates
            Math::float3 normalized = Math::norm(vertex.position);

            // Calculate UV from spherical coordinates
            float u = 0.5f + std::atan2(normalized.z, normalized.x) / (2.0f * Math::Pi);
            float v = 0.5f - std::asin(normalized.y) / Math::Pi;

            vertex.uv = {u, v};
        }

        // Fix UV seam issues
        fixUVSeams();
    }

    /**
     * @brief Fix UV coordinate seams at the sphere wrap-around
     */
    void fixUVSeams()
    {
        if (!currentMesh)
            return;

        // Process each triangle to fix UV discontinuities
        for (size_t i = 0; i < currentMesh->indices.size(); i += 3)
        {
            Vertex &v0 = currentMesh->vertices[currentMesh->indices[i]];
            Vertex &v1 = currentMesh->vertices[currentMesh->indices[i + 1]];
            Vertex &v2 = currentMesh->vertices[currentMesh->indices[i + 2]];

            // Check for UV wrap-around
            fixTriangleUVs(v0, v1, v2);
        }
    }

    /**
     * @brief Fix UV coordinates for a single triangle
     *
     * @param v0 First vertex
     * @param v1 Second vertex
     * @param v2 Third vertex
     */
    void fixTriangleUVs(Vertex &v0, Vertex &v1, Vertex &v2)
    {
        // Check for horizontal wrap-around (U coordinate)
        if (std::abs(v0.uv.x - v1.uv.x) > 0.5f)
        {
            if (v0.uv.x > v1.uv.x)
                v1.uv.x += 1.0f;
            else
                v0.uv.x += 1.0f;
        }
        if (std::abs(v1.uv.x - v2.uv.x) > 0.5f)
        {
            if (v1.uv.x > v2.uv.x)
                v2.uv.x += 1.0f;
            else
                v1.uv.x += 1.0f;
        }
        if (std::abs(v2.uv.x - v0.uv.x) > 0.5f)
        {
            if (v2.uv.x > v0.uv.x)
                v0.uv.x += 1.0f;
            else
                v2.uv.x += 1.0f;
        }
    }

    /**
     * @brief Add vertex to mesh with deduplication
     *
     * @param position Vertex position
     * @return Vertex index
     */
    uint32_t addVertex(const Math::float3 &position)
    {
        if (!currentMesh)
            return 0;

        // Create hash for vertex deduplication
        uint64_t hash = hashVertex(position);

        auto it = vertexMap.find(hash);
        if (it != vertexMap.end())
        {
            return it->second;
        }

        // Add new vertex
        uint32_t index = static_cast<uint32_t>(currentMesh->vertices.size());
        currentMesh->vertices.emplace_back(position, Math::float3{0, 0, 0}, Math::float2{0, 0});
        vertexMap[hash] = index;

        return index;
    }

    /**
     * @brief Get or create midpoint vertex between two vertices
     *
     * @param v0 First vertex index
     * @param v1 Second vertex index
     * @return Midpoint vertex index
     */
    uint32_t getMidpointVertex(uint32_t v0, uint32_t v1)
    {
        if (!currentMesh)
            return 0;

        // Calculate midpoint position
        const Math::float3 &pos0 = currentMesh->vertices[v0].position;
        const Math::float3 &pos1 = currentMesh->vertices[v1].position;
        Math::float3 midpoint = Math::scale(Math::add(pos0, pos1), 0.5f);

        return addVertex(midpoint);
    }

    /**
     * @brief Create hash for vertex position
     *
     * @param position Vertex position
     * @return Hash value
     */
    uint64_t hashVertex(const Math::float3 &position)
    {
        // Simple hash combining x, y, z coordinates
        const float precision = 1000000.0f;
        uint32_t x = static_cast<uint32_t>(position.x * precision);
        uint32_t y = static_cast<uint32_t>(position.y * precision);
        uint32_t z = static_cast<uint32_t>(position.z * precision);

        return (static_cast<uint64_t>(x) << 32) | (static_cast<uint64_t>(y) << 16) | z;
    }
};



================================================================================
FILE: src\generators\ProceduralAircraftGenerator.h
================================================================================

/**
 * @file ProceduralAircraftGenerator.h
 * @brief Procedural low-poly aircraft mesh generator
 *
 * The ProceduralAircraftGenerator creates simple low-poly aircraft meshes
 * suitable for orbital motion display. Features include:
 * - Basic aircraft shapes with wings, fuselage, and tail
 * - Configurable proportions and style variations
 * - Low-poly aesthetic for performance and voxel style
 * - Proper normals and UV mapping
 * - Integration with Math utilities for calculations
 *
 * @author Generated for Voxel Busy Indicator Scene
 * @date 2024
 */

#pragma once

#include "../math/MathUtils.h"
#include <vector>
#include <cstdint>
#include "../debug.h"

/**
 * @brief Procedural low-poly aircraft mesh generator
 *
 * Generates simple aircraft meshes with configurable styles and
 * proportions suitable for voxel-style orbital animations.
 */
class ProceduralAircraftGenerator
{
public:
    /**
     * @brief Vertex data structure
     */
    struct Vertex
    {
        Math::float3 position; /**< Vertex position */
        Math::float3 normal;   /**< Vertex normal */
        Math::float2 uv;       /**< Texture coordinates */

        Vertex() : position{0, 0, 0}, normal{0, 0, 0}, uv{0, 0} {}
        Vertex(const Math::float3 &pos, const Math::float3 &norm, const Math::float2 &texCoord)
            : position(pos), normal(norm), uv(texCoord) {}
    };

    /**
     * @brief Generated mesh data
     */
    struct MeshData
    {
        std::vector<Vertex> vertices;  /**< Vertex array */
        std::vector<uint32_t> indices; /**< Triangle indices */
        uint32_t triangleCount;        /**< Number of triangles */
        uint32_t vertexCount;          /**< Number of vertices */

        MeshData() : triangleCount(0), vertexCount(0) {}
    };

    /**
     * @brief Aircraft style variations
     */
    enum class AircraftStyle
    {
        Fighter,   /**< Fighter jet style */
        Civilian,  /**< Civil aircraft style */
        Transport, /**< Transport aircraft style */
        Simple     /**< Simple abstract aircraft */
    };

    /**
     * @brief Aircraft configuration parameters
     */
    struct AircraftParams
    {
        float length;        /**< Overall aircraft length */
        float wingspan;      /**< Wing span */
        float height;        /**< Overall height */
        float fuselageWidth; /**< Fuselage width */
        float wingThickness; /**< Wing thickness */
        float tailSize;      /**< Tail size factor */
        AircraftStyle style; /**< Aircraft style */
        uint32_t randomSeed; /**< Random seed for variations */

        AircraftParams()
            : length(2.0f), wingspan(2.5f), height(0.5f), fuselageWidth(0.3f), wingThickness(0.1f), tailSize(0.8f), style(AircraftStyle::Simple), randomSeed(12345)
        {
        }
    };

private:
    /** @brief Current aircraft parameters */
    AircraftParams params;

public:
    /**
     * @brief Construct a new ProceduralAircraftGenerator
     *
     * @param aircraftParams Aircraft configuration
     */
    ProceduralAircraftGenerator(const AircraftParams &aircraftParams = AircraftParams())
        : params(aircraftParams)
    {
    }

    /**
     * @brief Generate aircraft mesh
     *
     * @return Generated mesh data
     */
    MeshData generate()
    {
        DEBUG_LOG("Generating aircraft mesh with style " + std::to_string(static_cast<int>(params.style)));
        MeshData mesh;

        switch (params.style)
        {
        case AircraftStyle::Fighter:
            generateFighterAircraft(mesh);
            break;
        case AircraftStyle::Civilian:
            generateCivilianAircraft(mesh);
            break;
        case AircraftStyle::Transport:
            generateTransportAircraft(mesh);
            break;
        case AircraftStyle::Simple:
        default:
            generateSimpleAircraft(mesh);
            break;
        }

        // Calculate normals
        calculateNormals(mesh);

        // Update counts
        mesh.vertexCount = static_cast<uint32_t>(mesh.vertices.size());
        mesh.triangleCount = static_cast<uint32_t>(mesh.indices.size()) / 3;

        return mesh;
    }

    /**
     * @brief Set aircraft parameters
     *
     * @param aircraftParams New parameters
     */
    void setParams(const AircraftParams &aircraftParams)
    {
        DEBUG_LOG("Setting aircraft parameters");
        params = aircraftParams;
    }

    /**
     * @brief Get current aircraft parameters
     *
     * @return Current parameters
     */
    const AircraftParams &getParams() const
    {
        return params;
    }

private:
    /**
     * @brief Generate simple abstract aircraft
     *
     * @param mesh Output mesh data
     */
    void generateSimpleAircraft(MeshData &mesh)
    {
        DEBUG_LOG("Generating simple aircraft mesh");
        // Aircraft is oriented along +X axis (forward)
        float halfLength = params.length * 0.5f;
        float halfWingspan = params.wingspan * 0.5f;
        float halfHeight = params.height * 0.5f;
        float halfWidth = params.fuselageWidth * 0.5f;
        float wingThick = params.wingThickness * 0.5f;

        // Fuselage vertices (simplified box with tapered ends)
        addFuselageVertices(mesh, halfLength, halfWidth, halfHeight);

        // Wing vertices
        addWingVertices(mesh, halfLength * 0.3f, halfWingspan, wingThick);

        // Tail vertices
        addTailVertices(mesh, halfLength, halfWingspan * params.tailSize, halfHeight);

        // Generate UV coordinates
        generateUVCoordinates(mesh);
    }

    /**
     * @brief Generate fighter-style aircraft
     *
     * @param mesh Output mesh data
     */
    void generateFighterAircraft(MeshData &mesh)
    {
        DEBUG_LOG("Generating fighter aircraft mesh");
        // Fighter has more angular design and swept wings
        float halfLength = params.length * 0.5f;
        float halfWingspan = params.wingspan * 0.5f;
        float halfHeight = params.height * 0.5f;
        float halfWidth = params.fuselageWidth * 0.5f;

        // Pointed fuselage
        addPointedFuselage(mesh, halfLength, halfWidth, halfHeight);

        // Swept wings
        addSweptWings(mesh, halfLength * 0.2f, halfWingspan, params.wingThickness);

        // Vertical tail
        addVerticalTail(mesh, halfLength * -0.8f, halfHeight * params.tailSize);

        generateUVCoordinates(mesh);
    }

    /**
     * @brief Generate civilian aircraft
     *
     * @param mesh Output mesh data
     */
    void generateCivilianAircraft(MeshData &mesh)
    {
        DEBUG_LOG("Generating civilian aircraft mesh");
        // Civilian has rounded design and straight wings
        generateSimpleAircraft(mesh); // Use simple as base

        // Add engines under wings (simple cylinders)
        addEngines(mesh, params.length * 0.1f, params.wingspan * 0.3f);

        generateUVCoordinates(mesh);
    }

    /**
     * @brief Generate transport aircraft
     *
     * @param mesh Output mesh data
     */
    void generateTransportAircraft(MeshData &mesh)
    {
        DEBUG_LOG("Generating transport aircraft mesh");
        // Transport is larger and more boxy
        AircraftParams originalParams = params;
        params.fuselageWidth *= 1.5f;
        params.height *= 1.2f;

        generateSimpleAircraft(mesh);

        params = originalParams; // Restore original params
        generateUVCoordinates(mesh);
    }

    /**
     * @brief Add fuselage vertices to mesh
     *
     * @param mesh Output mesh
     * @param halfLength Half length of fuselage
     * @param halfWidth Half width of fuselage
     * @param halfHeight Half height of fuselage
     */
    void addFuselageVertices(MeshData &mesh, float halfLength, float halfWidth, float halfHeight)
    {
        uint32_t baseIndex = static_cast<uint32_t>(mesh.vertices.size());

        // Simplified fuselage as tapered box
        // Front (pointed)
        mesh.vertices.push_back({{halfLength, 0, 0}, {0, 0, 0}, {0.5f, 0.5f}});

        // Middle section (8 vertices for box)
        float midX = 0.0f;
        mesh.vertices.push_back({{midX, -halfWidth, -halfHeight}, {0, 0, 0}, {0.3f, 0.2f}});
        mesh.vertices.push_back({{midX, halfWidth, -halfHeight}, {0, 0, 0}, {0.7f, 0.2f}});
        mesh.vertices.push_back({{midX, halfWidth, halfHeight}, {0, 0, 0}, {0.7f, 0.8f}});
        mesh.vertices.push_back({{midX, -halfWidth, halfHeight}, {0, 0, 0}, {0.3f, 0.8f}});

        // Rear section (4 vertices, smaller)
        float rearX = -halfLength * 0.8f;
        float rearScale = 0.5f;
        mesh.vertices.push_back({{rearX, -halfWidth * rearScale, -halfHeight * rearScale}, {0, 0, 0}, {0.4f, 0.3f}});
        mesh.vertices.push_back({{rearX, halfWidth * rearScale, -halfHeight * rearScale}, {0, 0, 0}, {0.6f, 0.3f}});
        mesh.vertices.push_back({{rearX, halfWidth * rearScale, halfHeight * rearScale}, {0, 0, 0}, {0.6f, 0.7f}});
        mesh.vertices.push_back({{rearX, -halfWidth * rearScale, halfHeight * rearScale}, {0, 0, 0}, {0.4f, 0.7f}});

        // Tail point
        mesh.vertices.push_back({{-halfLength, 0, 0}, {0, 0, 0}, {0.1f, 0.5f}});

        // Connect sections with triangles
        // Front to middle
        addQuad(mesh, baseIndex + 0, baseIndex + 1, baseIndex + 2, baseIndex + 0); // Front triangle
        addQuad(mesh, baseIndex + 0, baseIndex + 2, baseIndex + 3, baseIndex + 0); // Front triangle
        addQuad(mesh, baseIndex + 0, baseIndex + 3, baseIndex + 4, baseIndex + 0); // Front triangle
        addQuad(mesh, baseIndex + 0, baseIndex + 4, baseIndex + 1, baseIndex + 0); // Front triangle

        // Middle to rear
        addQuad(mesh, baseIndex + 1, baseIndex + 5, baseIndex + 6, baseIndex + 2);
        addQuad(mesh, baseIndex + 2, baseIndex + 6, baseIndex + 7, baseIndex + 3);
        addQuad(mesh, baseIndex + 3, baseIndex + 7, baseIndex + 8, baseIndex + 4);
        addQuad(mesh, baseIndex + 4, baseIndex + 8, baseIndex + 5, baseIndex + 1);

        // Rear to tail
        addTriangle(mesh, baseIndex + 5, baseIndex + 9, baseIndex + 6);
        addTriangle(mesh, baseIndex + 6, baseIndex + 9, baseIndex + 7);
        addTriangle(mesh, baseIndex + 7, baseIndex + 9, baseIndex + 8);
        addTriangle(mesh, baseIndex + 8, baseIndex + 9, baseIndex + 5);
    }

    /**
     * @brief Add wing vertices to mesh
     *
     * @param mesh Output mesh
     * @param centerX Center X position of wings
     * @param halfSpan Half wingspan
     * @param thickness Wing thickness
     */
    void addWingVertices(MeshData &mesh, float centerX, float halfSpan, float thickness)
    {
        uint32_t baseIndex = static_cast<uint32_t>(mesh.vertices.size());

        // Wing root (near fuselage)
        float rootChord = params.length * 0.3f;
        float rootX1 = centerX + rootChord * 0.5f;
        float rootX2 = centerX - rootChord * 0.5f;

        // Wing tip
        float tipChord = rootChord * 0.5f;
        float tipX1 = centerX + tipChord * 0.5f;
        float tipX2 = centerX - tipChord * 0.5f;

        // Wing vertices (top and bottom for each position)
        // Left wing
        mesh.vertices.push_back({{rootX1, 0, thickness}, {0, 0, 0}, {0.8f, 0.2f}});         // Root leading top
        mesh.vertices.push_back({{rootX2, 0, thickness}, {0, 0, 0}, {0.2f, 0.2f}});         // Root trailing top
        mesh.vertices.push_back({{tipX1, -halfSpan, thickness}, {0, 0, 0}, {0.8f, 0.0f}});  // Tip leading top
        mesh.vertices.push_back({{tipX2, -halfSpan, thickness}, {0, 0, 0}, {0.2f, 0.0f}});  // Tip trailing top
        mesh.vertices.push_back({{rootX1, 0, -thickness}, {0, 0, 0}, {0.8f, 0.4f}});        // Root leading bottom
        mesh.vertices.push_back({{rootX2, 0, -thickness}, {0, 0, 0}, {0.2f, 0.4f}});        // Root trailing bottom
        mesh.vertices.push_back({{tipX1, -halfSpan, -thickness}, {0, 0, 0}, {0.8f, 0.6f}}); // Tip leading bottom
        mesh.vertices.push_back({{tipX2, -halfSpan, -thickness}, {0, 0, 0}, {0.2f, 0.6f}}); // Tip trailing bottom

        // Right wing (mirror)
        mesh.vertices.push_back({{rootX1, 0, thickness}, {0, 0, 0}, {0.8f, 0.2f}});        // Root leading top
        mesh.vertices.push_back({{rootX2, 0, thickness}, {0, 0, 0}, {0.2f, 0.2f}});        // Root trailing top
        mesh.vertices.push_back({{tipX1, halfSpan, thickness}, {0, 0, 0}, {0.8f, 1.0f}});  // Tip leading top
        mesh.vertices.push_back({{tipX2, halfSpan, thickness}, {0, 0, 0}, {0.2f, 1.0f}});  // Tip trailing top
        mesh.vertices.push_back({{rootX1, 0, -thickness}, {0, 0, 0}, {0.8f, 0.4f}});       // Root leading bottom
        mesh.vertices.push_back({{rootX2, 0, -thickness}, {0, 0, 0}, {0.2f, 0.4f}});       // Root trailing bottom
        mesh.vertices.push_back({{tipX1, halfSpan, -thickness}, {0, 0, 0}, {0.8f, 0.8f}}); // Tip leading bottom
        mesh.vertices.push_back({{tipX2, halfSpan, -thickness}, {0, 0, 0}, {0.2f, 0.8f}}); // Tip trailing bottom

        // Wing surface triangles
        // Left wing top
        addQuad(mesh, baseIndex + 0, baseIndex + 2, baseIndex + 3, baseIndex + 1);
        // Left wing bottom
        addQuad(mesh, baseIndex + 4, baseIndex + 5, baseIndex + 7, baseIndex + 6);

        // Right wing top
        addQuad(mesh, baseIndex + 8, baseIndex + 9, baseIndex + 11, baseIndex + 10);
        // Right wing bottom
        addQuad(mesh, baseIndex + 12, baseIndex + 14, baseIndex + 15, baseIndex + 13);
    }

    /**
     * @brief Add tail vertices to mesh
     *
     * @param mesh Output mesh
     * @param rearX X position of tail
     * @param halfSpan Half span of tail
     * @param height Height of vertical tail
     */
    void addTailVertices(MeshData &mesh, float rearX, float halfSpan, float height)
    {
        uint32_t baseIndex = static_cast<uint32_t>(mesh.vertices.size());

        // Simple vertical tail
        float tailX1 = rearX * 0.8f;
        float tailX2 = rearX * 1.0f;
        float tailThickness = params.wingThickness * 0.5f;

        // Vertical tail vertices
        mesh.vertices.push_back({{tailX1, 0, height}, {0, 0, 0}, {0.9f, 0.9f}});
        mesh.vertices.push_back({{tailX2, 0, height * 0.5f}, {0, 0, 0}, {1.0f, 0.7f}});
        mesh.vertices.push_back({{tailX1, 0, 0}, {0, 0, 0}, {0.9f, 0.5f}});

        // Simple triangle
        addTriangle(mesh, baseIndex + 0, baseIndex + 1, baseIndex + 2);
    }

    /**
     * @brief Add pointed fuselage for fighter aircraft
     */
    void addPointedFuselage(MeshData &mesh, float halfLength, float halfWidth, float halfHeight)
    {
        // Similar to regular fuselage but more pointed
        addFuselageVertices(mesh, halfLength, halfWidth, halfHeight);
    }

    /**
     * @brief Add swept wings for fighter aircraft
     */
    void addSweptWings(MeshData &mesh, float centerX, float halfSpan, float thickness)
    {
        // Similar to regular wings but with sweep angle
        addWingVertices(mesh, centerX, halfSpan, thickness);
    }

    /**
     * @brief Add vertical tail for fighter aircraft
     */
    void addVerticalTail(MeshData &mesh, float rearX, float height)
    {
        addTailVertices(mesh, rearX, height * 0.3f, height);
    }

    /**
     * @brief Add engines for civilian aircraft
     */
    void addEngines(MeshData &mesh, float engineX, float engineY)
    {
        // Simple cylindrical engines under wings
        uint32_t baseIndex = static_cast<uint32_t>(mesh.vertices.size());

        float engineLength = params.length * 0.2f;
        float engineRadius = params.fuselageWidth * 0.3f;

        // Simple box engines
        for (int side = -1; side <= 1; side += 2)
        {
            float y = engineY * side;

            // Engine box vertices
            mesh.vertices.push_back({{engineX + engineLength, y - engineRadius, -engineRadius}, {0, 0, 0}, {0.1f, 0.1f}});
            mesh.vertices.push_back({{engineX + engineLength, y + engineRadius, -engineRadius}, {0, 0, 0}, {0.2f, 0.1f}});
            mesh.vertices.push_back({{engineX + engineLength, y + engineRadius, engineRadius}, {0, 0, 0}, {0.2f, 0.2f}});
            mesh.vertices.push_back({{engineX + engineLength, y - engineRadius, engineRadius}, {0, 0, 0}, {0.1f, 0.2f}});

            mesh.vertices.push_back({{engineX - engineLength, y - engineRadius, -engineRadius}, {0, 0, 0}, {0.0f, 0.1f}});
            mesh.vertices.push_back({{engineX - engineLength, y + engineRadius, -engineRadius}, {0, 0, 0}, {0.3f, 0.1f}});
            mesh.vertices.push_back({{engineX - engineLength, y + engineRadius, engineRadius}, {0, 0, 0}, {0.3f, 0.2f}});
            mesh.vertices.push_back({{engineX - engineLength, y - engineRadius, engineRadius}, {0, 0, 0}, {0.0f, 0.2f}});
        }
    }

    /**
     * @brief Add a quad (4 vertices) as two triangles
     */
    void addQuad(MeshData &mesh, uint32_t v0, uint32_t v1, uint32_t v2, uint32_t v3)
    {
        mesh.indices.insert(mesh.indices.end(), {v0, v1, v2});
        mesh.indices.insert(mesh.indices.end(), {v0, v2, v3});
    }

    /**
     * @brief Add a triangle
     */
    void addTriangle(MeshData &mesh, uint32_t v0, uint32_t v1, uint32_t v2)
    {
        mesh.indices.insert(mesh.indices.end(), {v0, v1, v2});
    }

    /**
     * @brief Calculate normals for all vertices
     */
    void calculateNormals(MeshData &mesh)
    {
        DEBUG_LOG("Calculating normals for aircraft mesh");
        // Reset all normals
        for (auto &vertex : mesh.vertices)
        {
            vertex.normal = {0, 0, 0};
        }

        // Calculate face normals and accumulate
        for (size_t i = 0; i < mesh.indices.size(); i += 3)
        {
            uint32_t i0 = mesh.indices[i];
            uint32_t i1 = mesh.indices[i + 1];
            uint32_t i2 = mesh.indices[i + 2];

            const Math::float3 &p0 = mesh.vertices[i0].position;
            const Math::float3 &p1 = mesh.vertices[i1].position;
            const Math::float3 &p2 = mesh.vertices[i2].position;

            // Calculate face normal
            Math::float3 edge1 = Math::sub(p1, p0);
            Math::float3 edge2 = Math::sub(p2, p0);
            Math::float3 faceNormal = Math::norm(Math::cross(edge1, edge2));

            // Accumulate to vertex normals
            mesh.vertices[i0].normal = Math::add(mesh.vertices[i0].normal, faceNormal);
            mesh.vertices[i1].normal = Math::add(mesh.vertices[i1].normal, faceNormal);
            mesh.vertices[i2].normal = Math::add(mesh.vertices[i2].normal, faceNormal);
        }

        // Normalize all vertex normals
        for (auto &vertex : mesh.vertices)
        {
            vertex.normal = Math::norm(vertex.normal);
        }
    }

    /**
     * @brief Generate UV coordinates for all vertices
     */
    void generateUVCoordinates(MeshData &mesh)
    {
        // UV coordinates are already set during vertex creation
        // This function could be used for post-processing UV coordinates if needed
    }
};


================================================================================
FILE: src\generators\ProceduralTextureGenerator.cpp
================================================================================

#include "ProceduralTextureGenerator.h"
#include <cmath>
#include <algorithm>
#include <random>
#include <sstream>
#include "../debug.h"

#ifndef M_PI
#define M_PI 3.14159265358979323846
#endif

namespace ProceduralTexture
{

    // ============================================================================
    // Color Implementation
    // ============================================================================

    Color Color::lerp(const Color &a, const Color &b, float t)
    {
        t = std::clamp(t, 0.0f, 1.0f);
        return Color(
            static_cast<uint8_t>(a.r + t * (b.r - a.r)),
            static_cast<uint8_t>(a.g + t * (b.g - a.g)),
            static_cast<uint8_t>(a.b + t * (b.b - a.b)),
            static_cast<uint8_t>(a.a + t * (b.a - a.a)));
    }

    Color Color::fromFloat(float r, float g, float b, float a)
    {
        return Color(
            static_cast<uint8_t>(std::clamp(r * 255.0f, 0.0f, 255.0f)),
            static_cast<uint8_t>(std::clamp(g * 255.0f, 0.0f, 255.0f)),
            static_cast<uint8_t>(std::clamp(b * 255.0f, 0.0f, 255.0f)),
            static_cast<uint8_t>(std::clamp(a * 255.0f, 0.0f, 255.0f)));
    }

    Color Color::fromHSV(float h, float s, float v, float a)
    {
        h = std::fmod(h, 360.0f);
        if (h < 0)
            h += 360.0f;
        s = std::clamp(s, 0.0f, 1.0f);
        v = std::clamp(v, 0.0f, 1.0f);

        float c = v * s;
        float x = c * (1.0f - std::abs(std::fmod(h / 60.0f, 2.0f) - 1.0f));
        float m = v - c;

        float r, g, b;
        if (h < 60)
        {
            r = c;
            g = x;
            b = 0;
        }
        else if (h < 120)
        {
            r = x;
            g = c;
            b = 0;
        }
        else if (h < 180)
        {
            r = 0;
            g = c;
            b = x;
        }
        else if (h < 240)
        {
            r = 0;
            g = x;
            b = c;
        }
        else if (h < 300)
        {
            r = x;
            g = 0;
            b = c;
        }
        else
        {
            r = c;
            g = 0;
            b = x;
        }

        return fromFloat(r + m, g + m, b + m, a);
    }

    // ============================================================================
    // TextureData Implementation
    // ============================================================================

    TextureData::TextureData(uint32_t w, uint32_t h, const std::string &fmt)
        : width(w), height(h), format(fmt)
    {
        channels = (fmt == "RGB") ? 3 : 4;
        pixels.resize(width * height);
    }

    Color &TextureData::getPixel(uint32_t x, uint32_t y)
    {
        return pixels[y * width + x];
    }

    const Color &TextureData::getPixel(uint32_t x, uint32_t y) const
    {
        return pixels[y * width + x];
    }

    void TextureData::setPixel(uint32_t x, uint32_t y, const Color &color)
    {
        if (x < width && y < height)
        {
            pixels[y * width + x] = color;
        }
    }

    void TextureData::clear(const Color &color)
    {
        std::fill(pixels.begin(), pixels.end(), color);
    }

    void TextureData::resize(uint32_t newWidth, uint32_t newHeight)
    {
        width = newWidth;
        height = newHeight;
        pixels.resize(width * height);
    }

    std::vector<uint8_t> TextureData::getRawData() const
    {
        std::vector<uint8_t> data;
        data.reserve(pixels.size() * channels);

        for (const auto &pixel : pixels)
        {
            data.push_back(pixel.r);
            data.push_back(pixel.g);
            data.push_back(pixel.b);
            if (channels == 4)
            {
                data.push_back(pixel.a);
            }
        }

        return data;
    }

    // ============================================================================
    // Main Generation Methods
    // ============================================================================

    TextureData ProceduralTextureGenerator::generateTexture(const TextureParams &params)
    {
        DEBUG_LOG("Generating texture of type " + std::to_string(static_cast<int>(params.type)) + " with size " + std::to_string(params.width) + "x" + std::to_string(params.height));
        switch (params.type)
        {
        case TextureParams::Type::Noise:
            return generateNoiseTexture(params);
        case TextureParams::Type::Gradient:
            return generateGradientTexture(params);
        case TextureParams::Type::Pattern:
            return generatePatternTexture(params);
        case TextureParams::Type::Composite:
            return generateCompositeTexture(params);
        default:
            return TextureData(params.width, params.height);
        }
    }

    TextureData ProceduralTextureGenerator::generateFromParameters(const std::string &type,
                                                                   const std::map<std::string, std::string> &parameters)
    {
        DEBUG_LOG("Generating texture from parameters with type '" + type + "'");
        TextureParams params;
        params.type = parseTextureType(type);

        // Parse common parameters
        auto it = parameters.find("width");
        if (it != parameters.end())
        {
            params.width = static_cast<uint32_t>(std::stoi(it->second));
        }

        it = parameters.find("height");
        if (it != parameters.end())
        {
            params.height = static_cast<uint32_t>(std::stoi(it->second));
        }

        it = parameters.find("name");
        if (it != parameters.end())
        {
            params.name = it->second;
        }

        // Parse type-specific parameters
        switch (params.type)
        {
        case TextureParams::Type::Noise:
            params.noise = parseNoiseParameters(parameters);
            break;
        case TextureParams::Type::Gradient:
            params.gradient = parseGradientParameters(parameters);
            break;
        case TextureParams::Type::Pattern:
            params.pattern = parsePatternParameters(parameters);
            break;
        default:
            break;
        }

        return generateTexture(params);
    }

    // ============================================================================
    // Specific Generators
    // ============================================================================

    TextureData ProceduralTextureGenerator::generateNoise(const NoiseParams &params, uint32_t width, uint32_t height)
    {
        DEBUG_LOG("Generating noise texture with size " + std::to_string(width) + "x" + std::to_string(height));
        TextureData texture(width, height);

        for (uint32_t y = 0; y < height; ++y)
        {
            for (uint32_t x = 0; x < width; ++x)
            {
                float fx = static_cast<float>(x) / width;
                float fy = static_cast<float>(y) / height;

                float noise = 0.0f;
                switch (params.type)
                {
                case NoiseParams::Type::Perlin:
                    noise = fractalNoise(fx * params.frequency, fy * params.frequency, params);
                    break;
                case NoiseParams::Type::Simplex:
                    noise = simplexNoise(fx * params.frequency, fy * params.frequency, params.seed);
                    break;
                case NoiseParams::Type::Fractal:
                    noise = fractalNoise(fx * params.frequency, fy * params.frequency, params);
                    break;
                case NoiseParams::Type::Cellular:
                    noise = cellularNoise(fx * params.frequency, fy * params.frequency, params);
                    break;
                case NoiseParams::Type::Voronoi:
                    noise = voronoiNoise(fx * params.frequency, fy * params.frequency, params);
                    break;
                case NoiseParams::Type::White:
                {
                    std::mt19937 rng(params.seed + x * 1000 + y);
                    std::uniform_real_distribution<float> dist(0.0f, 1.0f);
                    noise = dist(rng);
                }
                break;
                }

                noise = std::clamp(noise, 0.0f, 1.0f);
                uint8_t value = static_cast<uint8_t>(noise * 255);
                texture.setPixel(x, y, Color(value, value, value, 255));
            }
        }

        return texture;
    }

    TextureData ProceduralTextureGenerator::generateGradient(const GradientParams &params, uint32_t width, uint32_t height)
    {
        DEBUG_LOG("Generating gradient texture with size " + std::to_string(width) + "x" + std::to_string(height));
        TextureData texture(width, height);

        for (uint32_t y = 0; y < height; ++y)
        {
            for (uint32_t x = 0; x < width; ++x)
            {
                float fx = static_cast<float>(x) / width;
                float fy = static_cast<float>(y) / height;

                float t = calculateGradientPosition(params, fx, fy);
                if (params.repeat)
                {
                    t = std::fmod(t, 1.0f);
                    if (t < 0)
                        t += 1.0f;
                }
                else
                {
                    t = std::clamp(t, 0.0f, 1.0f);
                }

                Color color = evaluateGradient(params, t);
                texture.setPixel(x, y, color);
            }
        }

        return texture;
    }

    TextureData ProceduralTextureGenerator::generatePattern(const PatternParams &params, uint32_t width, uint32_t height)
    {
        DEBUG_LOG("Generating pattern texture with size " + std::to_string(width) + "x" + std::to_string(height));
        TextureData texture(width, height);

        for (uint32_t y = 0; y < height; ++y)
        {
            for (uint32_t x = 0; x < width; ++x)
            {
                float fx = static_cast<float>(x) / width;
                float fy = static_cast<float>(y) / height;

                Color color;
                switch (params.type)
                {
                case PatternParams::Type::Checkerboard:
                    color = evaluateCheckerboard(params, fx, fy);
                    break;
                case PatternParams::Type::Stripes:
                    color = evaluateStripes(params, fx, fy);
                    break;
                case PatternParams::Type::Dots:
                    color = evaluateDots(params, fx, fy);
                    break;
                case PatternParams::Type::Grid:
                    color = evaluateGrid(params, fx, fy);
                    break;
                case PatternParams::Type::Spiral:
                    color = evaluateSpiral(params, fx, fy);
                    break;
                case PatternParams::Type::Waves:
                    color = evaluateWaves(params, fx, fy);
                    break;
                }

                texture.setPixel(x, y, color);
            }
        }

        return texture;
    }

    // ============================================================================
    // Noise Implementation
    // ============================================================================

    float ProceduralTextureGenerator::perlinNoise(float x, float y, uint32_t seed)
    {
        int X = static_cast<int>(std::floor(x)) & 255;
        int Y = static_cast<int>(std::floor(y)) & 255;

        x -= std::floor(x);
        y -= std::floor(y);

        float u = fade(x);
        float v = fade(y);

        uint32_t A = hash(X, Y, seed);
        uint32_t B = hash(X + 1, Y, seed);
        uint32_t C = hash(X, Y + 1, seed);
        uint32_t D = hash(X + 1, Y + 1, seed);

        return lerp(v,
                    lerp(u, grad(A, x, y), grad(B, x - 1, y)),
                    lerp(u, grad(C, x, y - 1), grad(D, x - 1, y - 1)));
    }

    float ProceduralTextureGenerator::simplexNoise(float x, float y, uint32_t seed)
    {
        // Simplified simplex noise implementation
        const float F2 = 0.5f * (std::sqrt(3.0f) - 1.0f);
        const float G2 = (3.0f - std::sqrt(3.0f)) / 6.0f;

        float s = (x + y) * F2;
        int i = static_cast<int>(std::floor(x + s));
        int j = static_cast<int>(std::floor(y + s));

        float t = (i + j) * G2;
        float X0 = i - t;
        float Y0 = j - t;
        float x0 = x - X0;
        float y0 = y - Y0;

        int i1, j1;
        if (x0 > y0)
        {
            i1 = 1;
            j1 = 0;
        }
        else
        {
            i1 = 0;
            j1 = 1;
        }

        float x1 = x0 - i1 + G2;
        float y1 = y0 - j1 + G2;
        float x2 = x0 - 1.0f + 2.0f * G2;
        float y2 = y0 - 1.0f + 2.0f * G2;

        uint32_t gi0 = hash(i, j, seed) % 12;
        uint32_t gi1 = hash(i + i1, j + j1, seed) % 12;
        uint32_t gi2 = hash(i + 1, j + 1, seed) % 12;

        float n0 = 0.0f, n1 = 0.0f, n2 = 0.0f;

        float t0 = 0.5f - x0 * x0 - y0 * y0;
        if (t0 >= 0)
        {
            t0 *= t0;
            n0 = t0 * t0 * grad(gi0, x0, y0);
        }

        float t1 = 0.5f - x1 * x1 - y1 * y1;
        if (t1 >= 0)
        {
            t1 *= t1;
            n1 = t1 * t1 * grad(gi1, x1, y1);
        }

        float t2 = 0.5f - x2 * x2 - y2 * y2;
        if (t2 >= 0)
        {
            t2 *= t2;
            n2 = t2 * t2 * grad(gi2, x2, y2);
        }

        return 70.0f * (n0 + n1 + n2);
    }

    float ProceduralTextureGenerator::fractalNoise(float x, float y, const NoiseParams &params)
    {
        float total = 0.0f;
        float frequency = params.frequency;
        float amplitude = params.amplitude;
        float maxValue = 0.0f;

        for (uint32_t i = 0; i < params.octaves; ++i)
        {
            total += perlinNoise(x * frequency, y * frequency, params.seed + i) * amplitude;
            maxValue += amplitude;
            amplitude *= params.persistence;
            frequency *= params.lacunarity;
        }

        return total / maxValue;
    }

    float ProceduralTextureGenerator::cellularNoise(float x, float y, const NoiseParams &params)
    {
        // Simple cellular automata implementation
        int gridSize = static_cast<int>(params.frequency);
        int gx = static_cast<int>(x * gridSize);
        int gy = static_cast<int>(y * gridSize);

        std::mt19937 rng(params.seed);
        std::uniform_real_distribution<float> dist(0.0f, 1.0f);

        // Initial random state
        bool alive = (hash(gx, gy, params.seed) % 100) < (params.threshold * 100);

        // Simple neighbor check for cellular pattern
        int neighbors = 0;
        for (int dx = -1; dx <= 1; ++dx)
        {
            for (int dy = -1; dy <= 1; ++dy)
            {
                if (dx == 0 && dy == 0)
                    continue;
                if ((hash(gx + dx, gy + dy, params.seed) % 100) < (params.threshold * 100))
                {
                    neighbors++;
                }
            }
        }

        // Conway's Game of Life rules (simplified)
        if (alive)
        {
            return (neighbors == 2 || neighbors == 3) ? 1.0f : 0.0f;
        }
        else
        {
            return (neighbors == 3) ? 1.0f : 0.0f;
        }
    }

    float ProceduralTextureGenerator::voronoiNoise(float x, float y, const NoiseParams &params)
    {
        float minDist = 1.0f;

        // Sample multiple cells
        for (int gx = -1; gx <= 1; ++gx)
        {
            for (int gy = -1; gy <= 1; ++gy)
            {
                int cellX = static_cast<int>(x * params.points) + gx;
                int cellY = static_cast<int>(y * params.points) + gy;

                // Generate random point in cell
                std::mt19937 rng(hash(cellX, cellY, params.seed));
                std::uniform_real_distribution<float> dist(0.0f, 1.0f);

                float pointX = (cellX + dist(rng) * params.jitter) / params.points;
                float pointY = (cellY + dist(rng) * params.jitter) / params.points;

                float dx = x - pointX;
                float dy = y - pointY;
                float distance = std::sqrt(dx * dx + dy * dy);

                minDist = std::min(minDist, distance);
            }
        }

        return std::clamp(minDist, 0.0f, 1.0f);
    }

    // ============================================================================
    // Helper Method Implementations
    // ============================================================================

    float ProceduralTextureGenerator::fade(float t)
    {
        return t * t * t * (t * (t * 6 - 15) + 10);
    }

    float ProceduralTextureGenerator::lerp(float t, float a, float b)
    {
        return a + t * (b - a);
    }

    float ProceduralTextureGenerator::grad(uint32_t hash, float x, float y)
    {
        uint32_t h = hash & 15;
        float u = h < 8 ? x : y;
        float v = h < 4 ? y : (h == 12 || h == 14 ? x : 0);
        return ((h & 1) == 0 ? u : -u) + ((h & 2) == 0 ? v : -v);
    }

    uint32_t ProceduralTextureGenerator::hash(uint32_t x, uint32_t y, uint32_t seed)
    {
        uint32_t h = seed;
        h ^= x + 0x9e3779b9 + (h << 6) + (h >> 2);
        h ^= y + 0x9e3779b9 + (h << 6) + (h >> 2);
        return h;
    }

    // ============================================================================
    // Pattern Evaluation Methods
    // ============================================================================

    Color ProceduralTextureGenerator::evaluateCheckerboard(const PatternParams &params, float x, float y)
    {
        int checkX = static_cast<int>(x * params.frequency);
        int checkY = static_cast<int>(y * params.frequency);
        return ((checkX + checkY) % 2 == 0) ? params.color1 : params.color2;
    }

    Color ProceduralTextureGenerator::evaluateStripes(const PatternParams &params, float x, float y)
    {
        float value = std::sin(x * params.frequency * 2.0f * M_PI + params.phase);
        return (value > 0) ? params.color1 : params.color2;
    }

    Color ProceduralTextureGenerator::evaluateDots(const PatternParams &params, float x, float y)
    {
        float fx = std::fmod(x * params.frequency, 1.0f);
        float fy = std::fmod(y * params.frequency, 1.0f);
        float dist = std::sqrt((fx - 0.5f) * (fx - 0.5f) + (fy - 0.5f) * (fy - 0.5f));
        return (dist < params.thickness * 0.5f) ? params.color1 : params.color2;
    }

    Color ProceduralTextureGenerator::evaluateGrid(const PatternParams &params, float x, float y)
    {
        float fx = std::fmod(x * params.frequency, 1.0f);
        float fy = std::fmod(y * params.frequency, 1.0f);
        bool isLine = (fx < params.thickness) || (fy < params.thickness);
        return isLine ? params.color1 : params.color2;
    }

    Color ProceduralTextureGenerator::evaluateSpiral(const PatternParams &params, float x, float y)
    {
        float dx = x - 0.5f;
        float dy = y - 0.5f;
        float angle = std::atan2(dy, dx);
        float radius = std::sqrt(dx * dx + dy * dy);

        float spiralValue = std::sin(angle * params.frequency + radius * params.amplitude * 20.0f + params.phase);
        return (spiralValue > 0) ? params.color1 : params.color2;
    }

    Color ProceduralTextureGenerator::evaluateWaves(const PatternParams &params, float x, float y)
    {
        float wave1 = std::sin(x * params.frequency * 2.0f * M_PI + params.phase);
        float wave2 = std::sin(y * params.frequency * 2.0f * M_PI + params.phase);
        float combined = (wave1 + wave2) * 0.5f * params.amplitude;

        float t = (combined + 1.0f) * 0.5f;
        return Color::lerp(params.color2, params.color1, t);
    }

    // ============================================================================
    // Internal Generation Methods
    // ============================================================================

    TextureData ProceduralTextureGenerator::generateNoiseTexture(const TextureParams &params)
    {
        DEBUG_LOG("Generating noise texture with name '" + params.name + "'");
        auto texture = generateNoise(params.noise, params.width, params.height);
        texture.name = params.name;
        applyPostProcessing(texture, params);
        return texture;
    }

    TextureData ProceduralTextureGenerator::generateGradientTexture(const TextureParams &params)
    {
        DEBUG_LOG("Generating gradient texture with name '" + params.name + "'");
        auto texture = generateGradient(params.gradient, params.width, params.height);
        texture.name = params.name;
        applyPostProcessing(texture, params);
        return texture;
    }

    TextureData ProceduralTextureGenerator::generatePatternTexture(const TextureParams &params)
    {
        DEBUG_LOG("Generating pattern texture with name '" + params.name + "'");
        auto texture = generatePattern(params.pattern, params.width, params.height);
        texture.name = params.name;
        applyPostProcessing(texture, params);
        return texture;
    }

    TextureData ProceduralTextureGenerator::generateCompositeTexture(const TextureParams &params)
    {
        if (params.layers.empty())
        {
            return TextureData(params.width, params.height);
        }

        std::vector<TextureData> layerTextures;
        layerTextures.reserve(params.layers.size());

        for (const auto &layer : params.layers)
        {
            layerTextures.push_back(generateTexture(layer));
        }

        auto texture = generateComposite(layerTextures, params.blendModes, params.opacities);
        texture.name = params.name;
        applyPostProcessing(texture, params);
        return texture;
    }

    // ============================================================================
    // Parsing Methods
    // ============================================================================

    TextureParams::Type ProceduralTextureGenerator::parseTextureType(const std::string &typeStr)
    {
        if (typeStr == "noise")
            return TextureParams::Type::Noise;
        if (typeStr == "gradient")
            return TextureParams::Type::Gradient;
        if (typeStr == "pattern")
            return TextureParams::Type::Pattern;
        if (typeStr == "composite")
            return TextureParams::Type::Composite;
        return TextureParams::Type::Noise;
    }

    NoiseParams::Type ProceduralTextureGenerator::parseNoiseType(const std::string &typeStr)
    {
        if (typeStr == "perlin")
            return NoiseParams::Type::Perlin;
        if (typeStr == "simplex")
            return NoiseParams::Type::Simplex;
        if (typeStr == "fractal")
            return NoiseParams::Type::Fractal;
        if (typeStr == "cellular")
            return NoiseParams::Type::Cellular;
        if (typeStr == "voronoi")
            return NoiseParams::Type::Voronoi;
        if (typeStr == "white")
            return NoiseParams::Type::White;
        return NoiseParams::Type::Perlin;
    }

    // Implementation of remaining parsing and processing methods would continue...

    // ============================================================================
    // Missing Method Implementations (Stub implementations for build completion)
    // ============================================================================

    void ProceduralTextureGenerator::applyPostProcessing(TextureData &texture, const TextureParams &params)
    {
        // Stub implementation - basic post-processing
        if (params.invert)
        {
            for (auto &pixel : texture.pixels)
            {
                pixel.r = 255 - pixel.r;
                pixel.g = 255 - pixel.g;
                pixel.b = 255 - pixel.b;
            }
        }
        // Additional post-processing would be implemented here
    }

    TextureData ProceduralTextureGenerator::generateComposite(const std::vector<TextureData> &layers,
                                                              const std::vector<TextureParams::BlendMode> &blendModes,
                                                              const std::vector<float> &opacities)
    {
        if (layers.empty())
        {
            return TextureData{};
        }

        // Start with the first layer
        TextureData result = layers[0];

        // Blend additional layers (stub implementation)
        for (size_t i = 1; i < layers.size(); ++i)
        {
            // Simple additive blending for stub
            const auto &layer = layers[i];
            float opacity = (i < opacities.size()) ? opacities[i] : 1.0f;

            for (size_t j = 0; j < result.pixels.size() && j < layer.pixels.size(); ++j)
            {
                result.pixels[j].r = static_cast<uint8_t>(
                    std::min(255.0f, result.pixels[j].r + layer.pixels[j].r * opacity));
                result.pixels[j].g = static_cast<uint8_t>(
                    std::min(255.0f, result.pixels[j].g + layer.pixels[j].g * opacity));
                result.pixels[j].b = static_cast<uint8_t>(
                    std::min(255.0f, result.pixels[j].b + layer.pixels[j].b * opacity));
            }
        }

        return result;
    }

    NoiseParams ProceduralTextureGenerator::parseNoiseParameters(const std::map<std::string, std::string> &parameters)
    {
        NoiseParams params;

        // Parse basic noise parameters (stub implementation)
        auto it = parameters.find("type");
        if (it != parameters.end())
        {
            params.type = parseNoiseType(it->second);
        }

        it = parameters.find("frequency");
        if (it != parameters.end())
        {
            params.frequency = std::stof(it->second);
        }

        it = parameters.find("amplitude");
        if (it != parameters.end())
        {
            params.amplitude = std::stof(it->second);
        }

        return params;
    }

    GradientParams ProceduralTextureGenerator::parseGradientParameters(const std::map<std::string, std::string> &parameters)
    {
        GradientParams params;

        // Parse gradient parameters (stub implementation)
        auto it = parameters.find("type");
        if (it != parameters.end())
        {
            if (it->second == "linear")
                params.type = GradientParams::Type::Linear;
            else if (it->second == "radial")
                params.type = GradientParams::Type::Radial;
            else if (it->second == "angular")
                params.type = GradientParams::Type::Angular;
            else if (it->second == "diamond")
                params.type = GradientParams::Type::Diamond;
        }

        return params;
    }

    PatternParams ProceduralTextureGenerator::parsePatternParameters(const std::map<std::string, std::string> &parameters)
    {
        PatternParams params;

        // Parse pattern parameters (stub implementation)
        auto it = parameters.find("type");
        if (it != parameters.end())
        {
            if (it->second == "checkerboard")
                params.type = PatternParams::Type::Checkerboard;
            else if (it->second == "stripes")
                params.type = PatternParams::Type::Stripes;
            else if (it->second == "dots")
                params.type = PatternParams::Type::Dots;
            else if (it->second == "grid")
                params.type = PatternParams::Type::Grid;
        }

        it = parameters.find("frequency");
        if (it != parameters.end())
        {
            params.frequency = static_cast<uint32_t>(std::stoi(it->second));
        }

        return params;
    }

    float ProceduralTextureGenerator::calculateGradientPosition(const GradientParams &params, float x, float y)
    {
        // Stub implementation for gradient position calculation
        switch (params.type)
        {
        case GradientParams::Type::Linear:
            return x;
        case GradientParams::Type::Radial:
            return std::sqrt(x * x + y * y);
        case GradientParams::Type::Angular:
            return std::atan2(y, x);
        case GradientParams::Type::Diamond:
            return std::abs(x) + std::abs(y);
        default:
            return x;
        }
    }

    Color ProceduralTextureGenerator::evaluateGradient(const GradientParams &params, float position)
    {
        // Stub implementation for gradient evaluation
        if (params.colors.empty())
        {
            return Color(128, 128, 128, 255); // Default gray
        }

        if (params.colors.size() == 1)
        {
            return params.colors[0];
        }

        // Simple linear interpolation between first and last colors
        return Color::lerp(params.colors[0], params.colors.back(), position);
    }
    // This represents the core functionality of the texture generator

} // namespace ProceduralTexture



================================================================================
FILE: src\generators\ProceduralTextureGenerator.h
================================================================================

#pragma once

#include <vector>
#include <map>
#include <string>
#include <memory>
#include <cstdint>
#include <functional>

namespace ProceduralTexture
{

    // ============================================================================
    // Texture Data Structures
    // ============================================================================

    struct Color
    {
        uint8_t r, g, b, a;

        Color() : r(0), g(0), b(0), a(255) {}
        Color(uint8_t red, uint8_t green, uint8_t blue, uint8_t alpha = 255)
            : r(red), g(green), b(blue), a(alpha) {}

        static Color lerp(const Color &a, const Color &b, float t);
        static Color fromFloat(float r, float g, float b, float a = 1.0f);
        static Color fromHSV(float h, float s, float v, float a = 1.0f);
    };

    struct TextureData
    {
        std::vector<Color> pixels;
        uint32_t width;
        uint32_t height;
        uint32_t channels;  // 3 for RGB, 4 for RGBA
        std::string format; // "RGB", "RGBA", "LUMINANCE", etc.
        std::string name;

        TextureData() : width(0), height(0), channels(4), format("RGBA") {}
        TextureData(uint32_t w, uint32_t h, const std::string &fmt = "RGBA");

        Color &getPixel(uint32_t x, uint32_t y);
        const Color &getPixel(uint32_t x, uint32_t y) const;
        void setPixel(uint32_t x, uint32_t y, const Color &color);

        // Utility methods
        void clear(const Color &color = Color(0, 0, 0, 0));
        void resize(uint32_t newWidth, uint32_t newHeight);
        std::vector<uint8_t> getRawData() const;
    };

    // ============================================================================
    // Noise and Pattern Parameters
    // ============================================================================

    struct NoiseParams
    {
        enum class Type
        {
            Perlin,
            Simplex,
            Fractal,
            Cellular,
            Voronoi,
            White
        };

        Type type = Type::Perlin;
        uint32_t seed = 12345;
        float frequency = 1.0f;
        float amplitude = 1.0f;
        uint32_t octaves = 4;
        float persistence = 0.5f;
        float lacunarity = 2.0f;

        // Cellular automata specific
        uint32_t iterations = 5;
        float threshold = 0.5f;

        // Voronoi specific
        uint32_t points = 16;
        float jitter = 1.0f;
    };

    struct GradientParams
    {
        enum class Type
        {
            Linear,
            Radial,
            Angular,
            Diamond
        };

        Type type = Type::Linear;
        std::vector<Color> colors;
        std::vector<float> stops;             // 0.0 to 1.0
        float angle = 0.0f;                   // For linear gradients (degrees)
        float centerX = 0.5f, centerY = 0.5f; // For radial/angular gradients
        float radius = 0.5f;                  // For radial gradients
        bool repeat = false;
    };

    struct PatternParams
    {
        enum class Type
        {
            Checkerboard,
            Stripes,
            Dots,
            Grid,
            Spiral,
            Waves
        };

        Type type = Type::Checkerboard;
        uint32_t frequency = 8; // Pattern repetitions
        Color color1 = Color(255, 255, 255, 255);
        Color color2 = Color(0, 0, 0, 255);
        float thickness = 0.5f; // Line thickness for stripes/grid
        float amplitude = 1.0f; // Wave amplitude
        float phase = 0.0f;     // Wave phase
    };

    // ============================================================================
    // Texture Generator Parameters
    // ============================================================================

    struct TextureParams
    {
        enum class Type
        {
            Noise,
            Gradient,
            Pattern,
            Composite
        };

        Type type = Type::Noise;
        uint32_t width = 256;
        uint32_t height = 256;
        std::string name = "procedural_texture";

        // Generator-specific parameters
        NoiseParams noise;
        GradientParams gradient;
        PatternParams pattern;

        // Composite blending
        enum class BlendMode
        {
            Replace,
            Add,
            Multiply,
            Overlay,
            Screen,
            Darken,
            Lighten
        };

        std::vector<TextureParams> layers; // For composite textures
        std::vector<BlendMode> blendModes;
        std::vector<float> opacities;

        // Post-processing
        bool normalize = false;
        bool invert = false;
        float brightness = 0.0f; // -1.0 to 1.0
        float contrast = 1.0f;   // 0.0 to 2.0
        float gamma = 1.0f;      // Gamma correction
    };

    // ============================================================================
    // Main Texture Generator Class
    // ============================================================================

    class ProceduralTextureGenerator
    {
    public:
        // Construction and Configuration
        ProceduralTextureGenerator() = default;
        ~ProceduralTextureGenerator() = default;

        // Primary generation methods
        static TextureData generateTexture(const TextureParams &params);
        static TextureData generateFromParameters(const std::string &type,
                                                  const std::map<std::string, std::string> &parameters);

        // Specific generators
        static TextureData generateNoise(const NoiseParams &params, uint32_t width, uint32_t height);
        static TextureData generateGradient(const GradientParams &params, uint32_t width, uint32_t height);
        static TextureData generatePattern(const PatternParams &params, uint32_t width, uint32_t height);
        static TextureData generateComposite(const std::vector<TextureData> &layers,
                                             const std::vector<TextureParams::BlendMode> &blendModes,
                                             const std::vector<float> &opacities);

        // Noise generation methods
        static float perlinNoise(float x, float y, uint32_t seed = 12345);
        static float simplexNoise(float x, float y, uint32_t seed = 12345);
        static float fractalNoise(float x, float y, const NoiseParams &params);
        static float cellularNoise(float x, float y, const NoiseParams &params);
        static float voronoiNoise(float x, float y, const NoiseParams &params);

        // Utility and helper methods
        static TextureParams::Type parseTextureType(const std::string &typeStr);
        static NoiseParams::Type parseNoiseType(const std::string &typeStr);
        static GradientParams::Type parseGradientType(const std::string &typeStr);
        static PatternParams::Type parsePatternType(const std::string &typeStr);
        static TextureParams::BlendMode parseBlendMode(const std::string &modeStr);

        static std::string textureTypeToString(TextureParams::Type type);
        static std::string noiseTypeToString(NoiseParams::Type type);
        static std::string gradientTypeToString(GradientParams::Type type);
        static std::string patternTypeToString(PatternParams::Type type);
        static std::string blendModeToString(TextureParams::BlendMode mode);

        // Parameter validation and estimation
        static bool validateParameters(const TextureParams &params);
        static uint32_t estimateMemoryUsage(const TextureParams &params);
        static uint32_t estimateGenerationTime(const TextureParams &params); // In milliseconds

    private:
        // Internal generation helpers
        static TextureData generateNoiseTexture(const TextureParams &params);
        static TextureData generateGradientTexture(const TextureParams &params);
        static TextureData generatePatternTexture(const TextureParams &params);
        static TextureData generateCompositeTexture(const TextureParams &params);

        // Noise implementation helpers
        static float fade(float t);
        static float lerp(float t, float a, float b);
        static float grad(uint32_t hash, float x, float y);
        static uint32_t hash(uint32_t x, uint32_t y, uint32_t seed);

        // Gradient implementation helpers
        static Color evaluateGradient(const GradientParams &params, float t);
        static float calculateGradientPosition(const GradientParams &params, float x, float y);

        // Pattern implementation helpers
        static Color evaluateCheckerboard(const PatternParams &params, float x, float y);
        static Color evaluateStripes(const PatternParams &params, float x, float y);
        static Color evaluateDots(const PatternParams &params, float x, float y);
        static Color evaluateGrid(const PatternParams &params, float x, float y);
        static Color evaluateSpiral(const PatternParams &params, float x, float y);
        static Color evaluateWaves(const PatternParams &params, float x, float y);

        // Blending and compositing
        static Color blendColors(const Color &base, const Color &overlay,
                                 TextureParams::BlendMode mode, float opacity);
        static Color blendAdd(const Color &a, const Color &b);
        static Color blendMultiply(const Color &a, const Color &b);
        static Color blendOverlay(const Color &a, const Color &b);
        static Color blendScreen(const Color &a, const Color &b);
        static Color blendDarken(const Color &a, const Color &b);
        static Color blendLighten(const Color &a, const Color &b);

        // Post-processing
        static void applyPostProcessing(TextureData &texture, const TextureParams &params);
        static void applyNormalization(TextureData &texture);
        static void applyInversion(TextureData &texture);
        static void applyBrightness(TextureData &texture, float brightness);
        static void applyContrast(TextureData &texture, float contrast);
        static void applyGamma(TextureData &texture, float gamma);

        // XML parameter parsing helpers
        static NoiseParams parseNoiseParameters(const std::map<std::string, std::string> &params);
        static GradientParams parseGradientParameters(const std::map<std::string, std::string> &params);
        static PatternParams parsePatternParameters(const std::map<std::string, std::string> &params);
        static std::vector<Color> parseColorList(const std::string &colorStr);
        static Color parseColor(const std::string &colorStr);

        // Validation helpers
        static bool isValidDimension(uint32_t dimension);
        static bool isValidColorStop(float stop);
        static bool isValidBlendMode(TextureParams::BlendMode mode);
    };

} // namespace ProceduralTexture



================================================================================
FILE: src\generators\VoxelMeshGenerator.cpp
================================================================================

#include "VoxelMeshGenerator.h"
#include <cmath>
#include <algorithm>
#include <unordered_map>
#include <array>
#include "../debug.h"

// ============================================================================
// Public Generation Methods
// ============================================================================

VoxelMesh::MeshData VoxelMeshGenerator::generatePrimitive(const VoxelMesh::VoxelParams &params)
{
    DEBUG_LOG("Generating primitive voxel mesh of type " + std::to_string(static_cast<int>(params.type)));
    switch (params.type)
    {
    case VoxelMesh::VoxelType::Cube:
        return generateCube(params);
    case VoxelMesh::VoxelType::Sphere:
        return generateSphere(params);
    case VoxelMesh::VoxelType::Cylinder:
        return generateCylinder(params);
    case VoxelMesh::VoxelType::Plane:
        return generatePlane(params);
    default:
        return generateCube(params); // Default fallback
    }
}

VoxelMesh::MeshData VoxelMeshGenerator::generateCompound(const VoxelMesh::CompoundParams &params)
{
    DEBUG_LOG("Generating compound voxel mesh with " + std::to_string(params.parts.size()) + " parts");
    std::vector<VoxelMesh::MeshData> meshes;
    meshes.reserve(params.parts.size());

    for (const auto &part : params.parts)
    {
        auto mesh = generatePrimitive(part.primitive);
        transformMesh(mesh, part.offset, part.scale);
        meshes.push_back(std::move(mesh));
    }

    auto result = mergeMeshes(meshes);
    result.name = params.name;
    optimizeMesh(result);
    return result;
}

VoxelMesh::MeshData VoxelMeshGenerator::generateFromParameters(const std::string &type,
                                                               const std::map<std::string, std::string> &parameters)
{
    DEBUG_LOG("Generating voxel mesh from parameters with type '" + type + "'");
    VoxelMesh::VoxelParams params;
    params.type = parseVoxelType(type);

    // Parse common parameters
    auto it = parameters.find("size");
    if (it != parameters.end())
    {
        params.size = std::stof(it->second);
    }

    it = parameters.find("radius");
    if (it != parameters.end())
    {
        params.radius = std::stof(it->second);
    }

    it = parameters.find("height");
    if (it != parameters.end())
    {
        params.height = std::stof(it->second);
    }

    it = parameters.find("subdivisions");
    if (it != parameters.end())
    {
        params.subdivisions = static_cast<uint32_t>(std::stoi(it->second));
    }

    return generatePrimitive(params);
}

// ============================================================================
// Utility Methods
// ============================================================================

VoxelMesh::VoxelType VoxelMeshGenerator::parseVoxelType(const std::string &typeStr)
{
    if (typeStr == "cube")
        return VoxelMesh::VoxelType::Cube;
    if (typeStr == "sphere")
        return VoxelMesh::VoxelType::Sphere;
    if (typeStr == "cylinder")
        return VoxelMesh::VoxelType::Cylinder;
    if (typeStr == "plane")
        return VoxelMesh::VoxelType::Plane;
    return VoxelMesh::VoxelType::Cube; // Default fallback
}

std::string VoxelMeshGenerator::voxelTypeToString(VoxelMesh::VoxelType type)
{
    switch (type)
    {
    case VoxelMesh::VoxelType::Cube:
        return "cube";
    case VoxelMesh::VoxelType::Sphere:
        return "sphere";
    case VoxelMesh::VoxelType::Cylinder:
        return "cylinder";
    case VoxelMesh::VoxelType::Plane:
        return "plane";
    default:
        return "cube";
    }
}

uint32_t VoxelMeshGenerator::estimateVertexCount(const VoxelMesh::VoxelParams &params)
{
    switch (params.type)
    {
    case VoxelMesh::VoxelType::Cube:
        return 24; // 6 faces * 4 vertices
    case VoxelMesh::VoxelType::Sphere:
        return params.subdivisions * params.subdivisions * 6; // Approximation for icosphere
    case VoxelMesh::VoxelType::Cylinder:
        return params.subdivisions * 4 + 2; // Side faces + top/bottom
    case VoxelMesh::VoxelType::Plane:
        return 4;
    default:
        return 24;
    }
}

// ============================================================================
// Primitive Generation Implementation
// ============================================================================

VoxelMesh::MeshData VoxelMeshGenerator::generateCube(const VoxelMesh::VoxelParams &params)
{
    DEBUG_LOG("Generating cube voxel mesh");
    VoxelMesh::MeshData mesh;
    mesh.name = "cube";

    const float halfSize = params.size * 0.5f;
    const Math::float3 center = params.center;

    // Define cube faces with normals
    struct Face
    {
        Math::float3 vertices[4];
        Math::float3 normal;
    };

    Face faces[6] = {
        // Front face (+Z)
        {{{-halfSize, -halfSize, halfSize}, {halfSize, -halfSize, halfSize}, {halfSize, halfSize, halfSize}, {-halfSize, halfSize, halfSize}},
         {0, 0, 1}},
        // Back face (-Z)
        {{{halfSize, -halfSize, -halfSize}, {-halfSize, -halfSize, -halfSize}, {-halfSize, halfSize, -halfSize}, {halfSize, halfSize, -halfSize}},
         {0, 0, -1}},
        // Right face (+X)
        {{{halfSize, -halfSize, halfSize}, {halfSize, -halfSize, -halfSize}, {halfSize, halfSize, -halfSize}, {halfSize, halfSize, halfSize}},
         {1, 0, 0}},
        // Left face (-X)
        {{{-halfSize, -halfSize, -halfSize}, {-halfSize, -halfSize, halfSize}, {-halfSize, halfSize, halfSize}, {-halfSize, halfSize, -halfSize}},
         {-1, 0, 0}},
        // Top face (+Y)
        {{{-halfSize, halfSize, halfSize}, {halfSize, halfSize, halfSize}, {halfSize, halfSize, -halfSize}, {-halfSize, halfSize, -halfSize}},
         {0, 1, 0}},
        // Bottom face (-Y)
        {{{-halfSize, -halfSize, -halfSize}, {halfSize, -halfSize, -halfSize}, {halfSize, -halfSize, halfSize}, {-halfSize, -halfSize, halfSize}},
         {0, -1, 0}}};

    // Generate vertices and indices for each face
    for (int face = 0; face < 6; ++face)
    {
        Math::float3 v0 = Math::add(faces[face].vertices[0], center);
        Math::float3 v1 = Math::add(faces[face].vertices[1], center);
        Math::float3 v2 = Math::add(faces[face].vertices[2], center);
        Math::float3 v3 = Math::add(faces[face].vertices[3], center);

        addQuad(mesh, v0, v1, v2, v3, faces[face].normal);
    }

    return mesh;
}

VoxelMesh::MeshData VoxelMeshGenerator::generateSphere(const VoxelMesh::VoxelParams &params)
{
    DEBUG_LOG("Generating sphere voxel mesh with " + std::to_string(params.subdivisions) + " subdivisions");
    VoxelMesh::MeshData mesh;
    mesh.name = "sphere";

    if (params.subdivisions <= 1)
    {
        // Generate basic icosphere for low subdivision
        generateIcosphere(mesh, params);
    }
    else
    {
        // Generate UV sphere for higher subdivisions
        const uint32_t rings = params.subdivisions;
        const uint32_t sectors = params.subdivisions * 2;
        const float radius = params.radius;
        const Math::float3 center = params.center;

        mesh.vertices.reserve((rings + 1) * (sectors + 1));
        mesh.indices.reserve(rings * sectors * 6);

        // Generate vertices
        for (uint32_t r = 0; r <= rings; ++r)
        {
            float y = radius * std::cos(Math::PI * r / rings);
            float ringRadius = radius * std::sin(Math::PI * r / rings);

            for (uint32_t s = 0; s <= sectors; ++s)
            {
                float x = ringRadius * std::cos(2.0f * Math::PI * s / sectors);
                float z = ringRadius * std::sin(2.0f * Math::PI * s / sectors);

                Math::float3 position = Math::add(Math::float3{x, y, z}, center);
                Math::float3 normal = Math::normalize(Math::float3{x, y, z});
                Math::float2 uv = {static_cast<float>(s) / sectors, static_cast<float>(r) / rings};

                mesh.vertices.emplace_back(position, normal, uv);
            }
        }

        // Generate indices
        for (uint32_t r = 0; r < rings; ++r)
        {
            for (uint32_t s = 0; s < sectors; ++s)
            {
                uint32_t current = r * (sectors + 1) + s;
                uint32_t next = current + sectors + 1;

                // Two triangles per quad
                mesh.indices.push_back(current);
                mesh.indices.push_back(next);
                mesh.indices.push_back(current + 1);

                mesh.indices.push_back(current + 1);
                mesh.indices.push_back(next);
                mesh.indices.push_back(next + 1);
            }
        }
    }

    return mesh;
}

VoxelMesh::MeshData VoxelMeshGenerator::generateCylinder(const VoxelMesh::VoxelParams &params)
{
    DEBUG_LOG("Generating cylinder voxel mesh with radius " + std::to_string(params.radius) + " and height " + std::to_string(params.height));
    VoxelMesh::MeshData mesh;
    mesh.name = "cylinder";

    const float radius = params.radius;
    const float height = params.height;
    const float halfHeight = height * 0.5f;
    const uint32_t segments = std::max(3u, params.subdivisions * 8);
    const Math::float3 center = params.center;

    mesh.vertices.reserve(segments * 4 + 2);
    mesh.indices.reserve(segments * 12);

    // Generate side vertices
    for (uint32_t i = 0; i < segments; ++i)
    {
        float angle = 2.0f * Math::PI * i / segments;
        float x = radius * std::cos(angle);
        float z = radius * std::sin(angle);

        Math::float3 bottomPos = Math::add(Math::float3{x, -halfHeight, z}, center);
        Math::float3 topPos = Math::add(Math::float3{x, halfHeight, z}, center);
        Math::float3 normal = Math::normalize(Math::float3{x, 0, z});
        Math::float2 uvBottom = {static_cast<float>(i) / segments, 0.0f};
        Math::float2 uvTop = {static_cast<float>(i) / segments, 1.0f};

        mesh.vertices.emplace_back(bottomPos, normal, uvBottom);
        mesh.vertices.emplace_back(topPos, normal, uvTop);
    }

    // Add center vertices for caps
    uint32_t bottomCenterIdx = mesh.vertices.size();
    mesh.vertices.emplace_back(Math::add(Math::float3{0, -halfHeight, 0}, center), Math::float3{0, -1, 0}, Math::float2{0.5f, 0.5f});
    uint32_t topCenterIdx = mesh.vertices.size();
    mesh.vertices.emplace_back(Math::add(Math::float3{0, halfHeight, 0}, center), Math::float3{0, 1, 0}, Math::float2{0.5f, 0.5f});

    // Generate side faces
    for (uint32_t i = 0; i < segments; ++i)
    {
        uint32_t current = i * 2;
        uint32_t next = ((i + 1) % segments) * 2;

        // Two triangles per side quad
        mesh.indices.push_back(current);
        mesh.indices.push_back(next);
        mesh.indices.push_back(current + 1);

        mesh.indices.push_back(current + 1);
        mesh.indices.push_back(next);
        mesh.indices.push_back(next + 1);
    }

    // Generate cap faces
    for (uint32_t i = 0; i < segments; ++i)
    {
        uint32_t current = i * 2;
        uint32_t next = ((i + 1) % segments) * 2;

        // Bottom cap
        mesh.indices.push_back(bottomCenterIdx);
        mesh.indices.push_back(next);
        mesh.indices.push_back(current);

        // Top cap
        mesh.indices.push_back(topCenterIdx);
        mesh.indices.push_back(current + 1);
        mesh.indices.push_back(next + 1);
    }

    return mesh;
}

VoxelMesh::MeshData VoxelMeshGenerator::generatePlane(const VoxelMesh::VoxelParams &params)
{
    DEBUG_LOG("Generating plane voxel mesh with size " + std::to_string(params.size));
    VoxelMesh::MeshData mesh;
    mesh.name = "plane";

    const float halfSize = params.size * 0.5f;
    const Math::float3 center = params.center;

    Math::float3 v0 = Math::add({-halfSize, 0, -halfSize}, center);
    Math::float3 v1 = Math::add({halfSize, 0, -halfSize}, center);
    Math::float3 v2 = Math::add({halfSize, 0, halfSize}, center);
    Math::float3 v3 = Math::add({-halfSize, 0, halfSize}, center);

    addQuad(mesh, v0, v1, v2, v3, {0, 1, 0});

    return mesh;
}

// ============================================================================
// Helper Methods Implementation
// ============================================================================

void VoxelMeshGenerator::addQuad(VoxelMesh::MeshData &mesh,
                                 const Math::float3 &v0, const Math::float3 &v1,
                                 const Math::float3 &v2, const Math::float3 &v3,
                                 const Math::float3 &normal)
{
    uint32_t startIdx = mesh.vertices.size();

    // Add vertices with UVs
    mesh.vertices.emplace_back(v0, normal, Math::float2{0, 0});
    mesh.vertices.emplace_back(v1, normal, Math::float2{1, 0});
    mesh.vertices.emplace_back(v2, normal, Math::float2{1, 1});
    mesh.vertices.emplace_back(v3, normal, Math::float2{0, 1});

    // Add indices for two triangles
    mesh.indices.push_back(startIdx);
    mesh.indices.push_back(startIdx + 1);
    mesh.indices.push_back(startIdx + 2);

    mesh.indices.push_back(startIdx);
    mesh.indices.push_back(startIdx + 2);
    mesh.indices.push_back(startIdx + 3);
}

void VoxelMeshGenerator::addTriangle(VoxelMesh::MeshData &mesh,
                                     const Math::float3 &v0, const Math::float3 &v1, const Math::float3 &v2,
                                     const Math::float3 &normal)
{
    uint32_t startIdx = mesh.vertices.size();

    mesh.vertices.emplace_back(v0, normal, Math::float2{0, 0});
    mesh.vertices.emplace_back(v1, normal, Math::float2{1, 0});
    mesh.vertices.emplace_back(v2, normal, Math::float2{0.5f, 1});

    mesh.indices.push_back(startIdx);
    mesh.indices.push_back(startIdx + 1);
    mesh.indices.push_back(startIdx + 2);
}

Math::float2 VoxelMeshGenerator::calculateSphericalUV(const Math::float3 &position)
{
    Math::float3 normalized = Math::normalize(position);
    float u = 0.5f + std::atan2(normalized.z, normalized.x) / (2.0f * Math::PI);
    float v = 0.5f - std::asin(normalized.y) / Math::PI;
    return {u, v};
}

Math::float2 VoxelMeshGenerator::calculateCubicUV(const Math::float3 &position, int faceIndex)
{
    // Simple planar projection based on face
    switch (faceIndex)
    {
    case 0:
    case 1: // Front/Back
        return {(position.x + 1.0f) * 0.5f, (position.y + 1.0f) * 0.5f};
    case 2:
    case 3: // Right/Left
        return {(position.z + 1.0f) * 0.5f, (position.y + 1.0f) * 0.5f};
    case 4:
    case 5: // Top/Bottom
        return {(position.x + 1.0f) * 0.5f, (position.z + 1.0f) * 0.5f};
    default:
        return {0.5f, 0.5f};
    }
}

void VoxelMeshGenerator::generateIcosphere(VoxelMesh::MeshData &mesh, const VoxelMesh::VoxelParams &params)
{
    // Basic icosphere implementation for low-poly spheres
    const float t = (1.0f + std::sqrt(5.0f)) / 2.0f; // Golden ratio
    const float radius = params.radius;
    const Math::float3 center = params.center;

    // Create icosahedron vertices
    std::vector<Math::float3> vertices = {
        {-1, t, 0}, {1, t, 0}, {-1, -t, 0}, {1, -t, 0}, {0, -1, t}, {0, 1, t}, {0, -1, -t}, {0, 1, -t}, {t, 0, -1}, {t, 0, 1}, {-t, 0, -1}, {-t, 0, 1}};

    // Normalize and scale
    for (auto &v : vertices)
    {
        v = Math::mul(Math::normalize(v), radius);
        v = Math::add(v, center);
    }

    // Create faces (20 triangles)
    std::vector<std::array<uint32_t, 3>> faces;
    faces.push_back(std::array<uint32_t, 3>{0, 11, 5});
    faces.push_back(std::array<uint32_t, 3>{0, 5, 1});
    faces.push_back(std::array<uint32_t, 3>{0, 1, 7});
    faces.push_back(std::array<uint32_t, 3>{0, 7, 10});
    faces.push_back(std::array<uint32_t, 3>{0, 10, 11});
    faces.push_back(std::array<uint32_t, 3>{1, 5, 9});
    faces.push_back(std::array<uint32_t, 3>{5, 11, 4});
    faces.push_back(std::array<uint32_t, 3>{11, 10, 2});
    faces.push_back(std::array<uint32_t, 3>{10, 7, 6});
    faces.push_back(std::array<uint32_t, 3>{7, 1, 8});
    faces.push_back(std::array<uint32_t, 3>{3, 9, 4});
    faces.push_back(std::array<uint32_t, 3>{3, 4, 2});
    faces.push_back(std::array<uint32_t, 3>{3, 2, 6});
    faces.push_back(std::array<uint32_t, 3>{3, 6, 8});
    faces.push_back(std::array<uint32_t, 3>{3, 8, 9});
    faces.push_back(std::array<uint32_t, 3>{4, 9, 5});
    faces.push_back(std::array<uint32_t, 3>{2, 4, 11});
    faces.push_back(std::array<uint32_t, 3>{6, 2, 10});
    faces.push_back(std::array<uint32_t, 3>{8, 6, 7});
    faces.push_back(std::array<uint32_t, 3>{9, 8, 1});

    // Add vertices and indices
    for (const auto &vertex : vertices)
    {
        Math::float3 normal = Math::normalize(Math::sub(vertex, center));
        Math::float2 uv = calculateSphericalUV(normal);
        mesh.vertices.emplace_back(vertex, normal, uv);
    }

    for (const auto &face : faces)
    {
        mesh.indices.push_back(face[0]);
        mesh.indices.push_back(face[1]);
        mesh.indices.push_back(face[2]);
    }
}

VoxelMesh::MeshData VoxelMeshGenerator::mergeMeshes(const std::vector<VoxelMesh::MeshData> &meshes)
{
    VoxelMesh::MeshData result;

    if (meshes.empty())
    {
        return result;
    }

    // Calculate total size
    uint32_t totalVertices = 0;
    uint32_t totalIndices = 0;
    for (const auto &mesh : meshes)
    {
        totalVertices += mesh.vertices.size();
        totalIndices += mesh.indices.size();
    }

    result.vertices.reserve(totalVertices);
    result.indices.reserve(totalIndices);

    // Merge meshes
    uint32_t vertexOffset = 0;
    for (const auto &mesh : meshes)
    {
        // Copy vertices
        result.vertices.insert(result.vertices.end(), mesh.vertices.begin(), mesh.vertices.end());

        // Copy indices with offset
        for (uint32_t index : mesh.indices)
        {
            result.indices.push_back(index + vertexOffset);
        }

        vertexOffset += mesh.vertices.size();
    }

    result.name = "compound";
    return result;
}

void VoxelMeshGenerator::transformMesh(VoxelMesh::MeshData &mesh, const Math::float3 &offset, const Math::float3 &scale)
{
    for (auto &vertex : mesh.vertices)
    {
        // Apply scale
        vertex.position.x *= scale.x;
        vertex.position.y *= scale.y;
        vertex.position.z *= scale.z;

        // Apply offset
        vertex.position = Math::add(vertex.position, offset);
    }
}

void VoxelMeshGenerator::calculateNormals(VoxelMesh::MeshData &mesh)
{
    // Calculate face normals and accumulate vertex normals
    for (size_t i = 0; i < mesh.indices.size(); i += 3)
    {
        uint32_t i0 = mesh.indices[i];
        uint32_t i1 = mesh.indices[i + 1];
        uint32_t i2 = mesh.indices[i + 2];

        Math::float3 v0 = mesh.vertices[i0].position;
        Math::float3 v1 = mesh.vertices[i1].position;
        Math::float3 v2 = mesh.vertices[i2].position;

        Math::float3 edge1 = Math::sub(v1, v0);
        Math::float3 edge2 = Math::sub(v2, v0);
        Math::float3 normal = Math::normalize(Math::cross(edge1, edge2));

        mesh.vertices[i0].normal = Math::add(mesh.vertices[i0].normal, normal);
        mesh.vertices[i1].normal = Math::add(mesh.vertices[i1].normal, normal);
        mesh.vertices[i2].normal = Math::add(mesh.vertices[i2].normal, normal);
    }

    // Normalize accumulated normals
    for (auto &vertex : mesh.vertices)
    {
        vertex.normal = Math::normalize(vertex.normal);
    }
}

void VoxelMeshGenerator::optimizeMesh(VoxelMesh::MeshData &mesh)
{
    // Simple optimization: remove unused vertices
    // More sophisticated optimization could be added here
    if (mesh.vertices.empty() || mesh.indices.empty())
    {
        return;
    }

    // For now, just ensure normals are properly calculated
    calculateNormals(mesh);
}



================================================================================
FILE: src\generators\VoxelMeshGenerator.h
================================================================================

#pragma once
#include "../math/MathUtils.h"
#include <vector>
#include <string>
#include <map>

/**
 * @file VoxelMeshGenerator.h
 * @brief Generic voxel-based mesh generation system
 *
 * This generator creates all mesh types using voxel primitives as building blocks.
 * Supports cubes, spheres, cylinders, and compound meshes built from multiple primitives.
 * All generation is deterministic and configurable through parameters.
 */

namespace VoxelMesh
{

    /**
     * @brief Vertex data structure for generated meshes
     */
    struct Vertex
    {
        Math::float3 position;
        Math::float3 normal;
        Math::float2 uv;

        Vertex() = default;
        Vertex(const Math::float3 &pos, const Math::float3 &norm, const Math::float2 &texCoord)
            : position(pos), normal(norm), uv(texCoord) {}
    };

    /**
     * @brief Generated mesh data
     */
    struct MeshData
    {
        std::vector<Vertex> vertices;
        std::vector<uint32_t> indices;
        std::string name;

        void clear()
        {
            vertices.clear();
            indices.clear();
            name.clear();
        }

        bool isEmpty() const
        {
            return vertices.empty() || indices.empty();
        }
    };

    /**
     * @brief Voxel primitive types
     */
    enum class VoxelType
    {
        Cube,
        Sphere,
        Cylinder,
        Plane
    };

    /**
     * @brief Parameters for voxel primitive generation
     */
    struct VoxelParams
    {
        VoxelType type = VoxelType::Cube;
        float size = 1.0f;            // Size for cubes/planes
        float radius = 1.0f;          // Radius for spheres/cylinders
        float height = 1.0f;          // Height for cylinders
        uint32_t subdivisions = 1;    // Level of detail
        Math::float3 center{0, 0, 0}; // Center position

        VoxelParams() = default;
        VoxelParams(VoxelType t, float s = 1.0f) : type(t), size(s), radius(s) {}
    };

    /**
     * @brief Parameters for compound mesh (multiple primitives)
     */
    struct CompoundPart
    {
        VoxelParams primitive;
        Math::float3 offset{0, 0, 0};
        Math::float3 scale{1, 1, 1};
        std::string name;

        CompoundPart() = default;
        CompoundPart(const VoxelParams &prim, const Math::float3 &pos = {0, 0, 0})
            : primitive(prim), offset(pos) {}
    };

    /**
     * @brief Parameters for compound meshes
     */
    struct CompoundParams
    {
        std::vector<CompoundPart> parts;
        std::string name;

        void addPart(const CompoundPart &part)
        {
            parts.push_back(part);
        }

        void addPart(const VoxelParams &primitive, const Math::float3 &offset = {0, 0, 0})
        {
            parts.emplace_back(primitive, offset);
        }
    };

} // namespace VoxelMesh

/**
 * @brief Generic voxel mesh generator
 *
 * Creates meshes from voxel primitives with configurable parameters.
 * All shapes are built from the same base system for consistency.
 */
class VoxelMeshGenerator
{
public:
    VoxelMeshGenerator() = default;
    ~VoxelMeshGenerator() = default;

    // ============================================================================
    // Primary Generation Methods
    // ============================================================================

    /**
     * @brief Generate a single voxel primitive
     * @param params Primitive parameters
     * @return Generated mesh data
     */
    VoxelMesh::MeshData generatePrimitive(const VoxelMesh::VoxelParams &params);

    /**
     * @brief Generate a compound mesh from multiple primitives
     * @param params Compound mesh parameters
     * @return Generated mesh data
     */
    VoxelMesh::MeshData generateCompound(const VoxelMesh::CompoundParams &params);

    /**
     * @brief Generate mesh from string parameters (for XML parsing)
     * @param type Primitive type as string
     * @param parameters Parameter map
     * @return Generated mesh data
     */
    VoxelMesh::MeshData generateFromParameters(const std::string &type,
                                               const std::map<std::string, std::string> &parameters);

    // ============================================================================
    // Utility Methods
    // ============================================================================

    /**
     * @brief Parse voxel type from string
     * @param typeStr Type string ("cube", "sphere", etc.)
     * @return Voxel type enum
     */
    static VoxelMesh::VoxelType parseVoxelType(const std::string &typeStr);

    /**
     * @brief Get voxel type as string
     * @param type Voxel type enum
     * @return Type string
     */
    static std::string voxelTypeToString(VoxelMesh::VoxelType type);

    /**
     * @brief Calculate approximate vertex count for primitive
     * @param params Primitive parameters
     * @return Estimated vertex count
     */
    static uint32_t estimateVertexCount(const VoxelMesh::VoxelParams &params);

private:
    // ============================================================================
    // Primitive Generation Methods
    // ============================================================================

    VoxelMesh::MeshData generateCube(const VoxelMesh::VoxelParams &params);
    VoxelMesh::MeshData generateSphere(const VoxelMesh::VoxelParams &params);
    VoxelMesh::MeshData generateCylinder(const VoxelMesh::VoxelParams &params);
    VoxelMesh::MeshData generatePlane(const VoxelMesh::VoxelParams &params);

    // ============================================================================
    // Helper Methods
    // ============================================================================

    /**
     * @brief Add a quad to mesh data
     */
    void addQuad(VoxelMesh::MeshData &mesh,
                 const Math::float3 &v0, const Math::float3 &v1,
                 const Math::float3 &v2, const Math::float3 &v3,
                 const Math::float3 &normal);

    /**
     * @brief Add a triangle to mesh data
     */
    void addTriangle(VoxelMesh::MeshData &mesh,
                     const Math::float3 &v0, const Math::float3 &v1, const Math::float3 &v2,
                     const Math::float3 &normal);

    /**
     * @brief Calculate UV coordinates for a vertex on a sphere
     */
    Math::float2 calculateSphericalUV(const Math::float3 &position);

    /**
     * @brief Calculate UV coordinates for a vertex on a cube face
     */
    Math::float2 calculateCubicUV(const Math::float3 &position, int faceIndex);

    /**
     * @brief Generate vertices for subdivided icosphere
     */
    void generateIcosphere(VoxelMesh::MeshData &mesh, const VoxelMesh::VoxelParams &params);

    /**
     * @brief Merge multiple mesh data objects
     */
    VoxelMesh::MeshData mergeMeshes(const std::vector<VoxelMesh::MeshData> &meshes);

    /**
     * @brief Transform mesh vertices
     */
    void transformMesh(VoxelMesh::MeshData &mesh, const Math::float3 &offset, const Math::float3 &scale);

    /**
     * @brief Calculate normals for mesh (if not provided)
     */
    void calculateNormals(VoxelMesh::MeshData &mesh);

    /**
     * @brief Optimize mesh (remove duplicates, etc.)
     */
    void optimizeMesh(VoxelMesh::MeshData &mesh);
};



================================================================================
FILE: src\loaders\EntityXmlParser.cpp
================================================================================

#include "EntityXmlParser.h"
#include "platform/PugiXmlParser.h"
#include <iostream>
#include <memory>
#include "../debug.h"

namespace EntityLoader
{

    EntityXmlParser::EntityXmlParser()
        : xmlParser_(std::make_unique<PugiXmlParser>()){
              DEBUG_LOG("Initializing EntityXmlParser");}

          EntityXmlParser::~EntityXmlParser() = default;

    std::unique_ptr<EntityConfig::EntityDefinition> EntityXmlParser::loadFromFile(const std::string &filePath)
    {
        DEBUG_LOG("Loading entity from XML file '" + filePath + "'");
        if (!xmlParser_->loadFile(filePath))
        {
            std::cerr << "Failed to load entity XML file: " << filePath << std::endl;
            std::cerr << "Error: " << xmlParser_->getLastError() << std::endl;
            return nullptr;
        }

        return parseEntity();
    }

    std::unique_ptr<EntityConfig::EntityDefinition> EntityXmlParser::loadFromString(const std::string &xmlContent)
    {
        DEBUG_LOG("Loading entity from XML string");
        if (!xmlParser_->loadString(xmlContent))
        {
            std::cerr << "Failed to parse entity XML string" << std::endl;
            std::cerr << "Error: " << xmlParser_->getLastError() << std::endl;
            return nullptr;
        }

        return parseEntity();
    }

    std::unique_ptr<EntityConfig::EntityDefinition> EntityXmlParser::parseEntity()
    {
        DEBUG_LOG("Parsing entity from XML");
        auto definition = std::make_unique<EntityConfig::EntityDefinition>();

        // Check if it's a valid entity XML
        std::string rootElement = xmlParser_->getRootElementName();
        if (rootElement != "entity")
        {
            std::cerr << "XML file does not have 'entity' as root element. Found: " << rootElement << std::endl;
            return nullptr;
        }

        // Get entity attributes
        std::string entityId = xmlParser_->getElementAttribute("entity", "id");
        std::string entityType = xmlParser_->getElementAttribute("entity", "type");

        // Type is required, but we can work without ID
        if (entityType.empty())
        {
            std::cerr << "Entity XML is missing required type attribute" << std::endl;
            return nullptr;
        }

        // Parse basic entity info
        definition->entityType = entityType;

        // Try both 'n' and 'name' elements for backward compatibility
        definition->name = xmlParser_->getElementText("entity/info/n");
        if (definition->name.empty())
        {
            definition->name = xmlParser_->getElementText("entity/info/name");
        }

        definition->description = xmlParser_->getElementText("entity/info/description");

        std::string startActiveStr = xmlParser_->getElementText("entity/info/active");
        if (!startActiveStr.empty())
        {
            definition->startActive = (startActiveStr == "true" || startActiveStr == "1");
        }
        std::string lifetimeStr = xmlParser_->getElementText("entity/info/lifetime");
        if (!lifetimeStr.empty())
        {
            try
            {
                definition->lifetime = std::stof(lifetimeStr);
            }
            catch (...)
            {
                std::cerr << "Invalid lifetime value: " << lifetimeStr << std::endl;
            }
        }

        // Parse transform
        parseTransform(*definition);

        // Parse optional components
        parseRenderableComponent(*definition);
        parsePhysicsComponent(*definition);
        parseVehicleComponent(*definition);
        parseAudioComponent(*definition);
        parseLightComponent(*definition);

        // Parse custom properties
        parseCustomProperties(*definition);

        DEBUG_LOG("Successfully parsed entity: " << definition->name << " (Type: " << definition->entityType << ")");

        return definition;
    }

    void EntityXmlParser::parseTransform(EntityConfig::EntityDefinition &definition)
    {
        DEBUG_LOG("Parsing transform component");
        // Check if transform element exists
        if (!xmlParser_->hasElement("transform", "entity"))
        {
            return;
        }

        // Position
        if (xmlParser_->hasElement("position", "entity/transform"))
        {
            std::string posX = xmlParser_->getElementAttribute("entity/transform/position", "x");
            std::string posY = xmlParser_->getElementAttribute("entity/transform/position", "y");
            std::string posZ = xmlParser_->getElementAttribute("entity/transform/position", "z");

            if (!posX.empty())
                definition.transform.position.x = std::stof(posX);
            if (!posY.empty())
                definition.transform.position.y = std::stof(posY);
            if (!posZ.empty())
                definition.transform.position.z = std::stof(posZ);
        }

        // Rotation (Quaternion)
        if (xmlParser_->hasElement("rotation", "entity/transform"))
        {
            std::string rotX = xmlParser_->getElementAttribute("entity/transform/rotation", "x");
            std::string rotY = xmlParser_->getElementAttribute("entity/transform/rotation", "y");
            std::string rotZ = xmlParser_->getElementAttribute("entity/transform/rotation", "z");
            std::string rotW = xmlParser_->getElementAttribute("entity/transform/rotation", "w");

            if (!rotX.empty())
                definition.transform.rotation.x = std::stof(rotX);
            if (!rotY.empty())
                definition.transform.rotation.y = std::stof(rotY);
            if (!rotZ.empty())
                definition.transform.rotation.z = std::stof(rotZ);
            if (!rotW.empty())
                definition.transform.rotation.w = std::stof(rotW);
        }

        // Scale
        if (xmlParser_->hasElement("scale", "entity/transform"))
        {
            std::string scaleX = xmlParser_->getElementAttribute("entity/transform/scale", "x");
            std::string scaleY = xmlParser_->getElementAttribute("entity/transform/scale", "y");
            std::string scaleZ = xmlParser_->getElementAttribute("entity/transform/scale", "z");

            if (!scaleX.empty())
                definition.transform.scale.x = std::stof(scaleX);
            if (!scaleY.empty())
                definition.transform.scale.y = std::stof(scaleY);
            if (!scaleZ.empty())
                definition.transform.scale.z = std::stof(scaleZ);
        }
    }

    void EntityXmlParser::parseRenderableComponent(EntityConfig::EntityDefinition &definition)
    {
        DEBUG_LOG("Parsing renderable component");
        if (!xmlParser_->hasElement("renderable", "entity"))
        {
            return;
        }

        auto renderable = std::make_unique<EntityConfig::RenderableComponent>();

        renderable->meshId = xmlParser_->getElementText("entity/renderable/mesh");
        renderable->materialId = xmlParser_->getElementText("entity/renderable/material");

        std::string visibleStr = xmlParser_->getElementText("entity/renderable/visible");
        if (!visibleStr.empty())
        {
            renderable->isVisible = (visibleStr == "true" || visibleStr == "1");
        }

        std::string opacityStr = xmlParser_->getElementText("entity/renderable/opacity");
        if (!opacityStr.empty())
        {
            renderable->opacity = std::stof(opacityStr);
        }

        std::string layerStr = xmlParser_->getElementText("entity/renderable/layer");
        if (!layerStr.empty())
        {
            renderable->renderLayer = std::stoi(layerStr);
        }

        definition.renderable = std::move(renderable);
    }

    void EntityXmlParser::parsePhysicsComponent(EntityConfig::EntityDefinition &definition)
    {
        DEBUG_LOG("Parsing physics component");
        if (!xmlParser_->hasElement("physics", "entity"))
        {
            return;
        }

        auto physics = std::make_unique<EntityConfig::PhysicsComponent>();

        std::string enabledStr = xmlParser_->getElementText("entity/physics/enabled");
        if (!enabledStr.empty())
        {
            physics->hasPhysics = (enabledStr == "true" || enabledStr == "1");
        }

        std::string massStr = xmlParser_->getElementText("entity/physics/mass");
        if (!massStr.empty())
        {
            physics->mass = std::stof(massStr);
        }

        std::string frictionStr = xmlParser_->getElementText("entity/physics/friction");
        if (!frictionStr.empty())
        {
            physics->friction = std::stof(frictionStr);
        }

        std::string restitutionStr = xmlParser_->getElementText("entity/physics/restitution");
        if (!restitutionStr.empty())
        {
            physics->restitution = std::stof(restitutionStr);
        }

        // Parse collider size
        if (xmlParser_->hasElement("collider-size", "entity/physics"))
        {
            std::string sizeX = xmlParser_->getElementAttribute("entity/physics/collider-size", "x");
            std::string sizeY = xmlParser_->getElementAttribute("entity/physics/collider-size", "y");
            std::string sizeZ = xmlParser_->getElementAttribute("entity/physics/collider-size", "z");

            if (!sizeX.empty())
                physics->colliderSize[0] = std::stof(sizeX);
            if (!sizeY.empty())
                physics->colliderSize[1] = std::stof(sizeY);
            if (!sizeZ.empty())
                physics->colliderSize[2] = std::stof(sizeZ);
        }

        std::string kinematicStr = xmlParser_->getElementText("entity/physics/kinematic");
        if (!kinematicStr.empty())
        {
            physics->isKinematic = (kinematicStr == "true" || kinematicStr == "1");
        }

        std::string useGravityStr = xmlParser_->getElementText("entity/physics/use-gravity");
        if (!useGravityStr.empty())
        {
            physics->useGravity = (useGravityStr == "true" || useGravityStr == "1");
        }

        std::string colliderTypeStr = xmlParser_->getElementText("entity/physics/collider-type");
        if (!colliderTypeStr.empty())
        {
            physics->colliderType = colliderTypeStr;
        }

        definition.physics = std::move(physics);
    }

    void EntityXmlParser::parseVehicleComponent(EntityConfig::EntityDefinition &definition)
    {
        DEBUG_LOG("Parsing vehicle component");
        if (!xmlParser_->hasElement("vehicle", "entity"))
        {
            return;
        }

        auto vehicle = std::make_unique<EntityConfig::VehicleComponent>();

        std::string typeStr = xmlParser_->getElementText("entity/vehicle/type");
        if (!typeStr.empty())
        {
            vehicle->vehicleType = typeStr;
        }

        std::string maxSpeedStr = xmlParser_->getElementText("entity/vehicle/max-speed");
        if (!maxSpeedStr.empty())
        {
            vehicle->maxSpeed = std::stof(maxSpeedStr);
        }

        std::string accelerationStr = xmlParser_->getElementText("entity/vehicle/acceleration");
        if (!accelerationStr.empty())
        {
            vehicle->acceleration = std::stof(accelerationStr);
        }

        std::string maneuverabilityStr = xmlParser_->getElementText("entity/vehicle/maneuverability");
        if (!maneuverabilityStr.empty())
        {
            vehicle->maneuverability = std::stof(maneuverabilityStr);
        }

        std::string controllerTypeStr = xmlParser_->getElementText("entity/vehicle/controller-type");
        if (!controllerTypeStr.empty())
        {
            vehicle->controllerType = controllerTypeStr;
        }

        definition.vehicle = std::move(vehicle);
    }

    void EntityXmlParser::parseAudioComponent(EntityConfig::EntityDefinition &definition)
    {
        DEBUG_LOG("Parsing audio component");
        if (!xmlParser_->hasElement("audio", "entity"))
        {
            return;
        }

        auto audio = std::make_unique<EntityConfig::AudioComponent>();

        // Try both 'sound-id' and 'sound' elements for backward compatibility
        audio->soundId = xmlParser_->getElementText("entity/audio/sound-id");
        if (audio->soundId.empty())
        {
            audio->soundId = xmlParser_->getElementText("entity/audio/sound");
        }

        std::string volumeStr = xmlParser_->getElementText("entity/audio/volume");
        if (!volumeStr.empty())
        {
            audio->volume = std::stof(volumeStr);
        }

        std::string loopStr = xmlParser_->getElementText("entity/audio/loop");
        if (!loopStr.empty())
        {
            audio->loop = (loopStr == "true" || loopStr == "1");
        }

        definition.audio = std::move(audio);
    }

    void EntityXmlParser::parseLightComponent(EntityConfig::EntityDefinition &definition)
    {
        DEBUG_LOG("Parsing light component");
        if (!xmlParser_->hasElement("light", "entity"))
        {
            return;
        }

        auto light = std::make_unique<EntityConfig::LightComponent>();

        std::string typeStr = xmlParser_->getElementText("entity/light/type");
        if (!typeStr.empty())
        {
            light->lightType = typeStr;
        }

        // Parse light color
        if (xmlParser_->hasElement("color", "entity/light"))
        {
            std::string colorR = xmlParser_->getElementAttribute("entity/light/color", "r");
            std::string colorG = xmlParser_->getElementAttribute("entity/light/color", "g");
            std::string colorB = xmlParser_->getElementAttribute("entity/light/color", "b");

            if (!colorR.empty())
                light->color[0] = std::stof(colorR);
            if (!colorG.empty())
                light->color[1] = std::stof(colorG);
            if (!colorB.empty())
                light->color[2] = std::stof(colorB);
        }

        std::string intensityStr = xmlParser_->getElementText("entity/light/intensity");
        if (!intensityStr.empty())
        {
            light->intensity = std::stof(intensityStr);
        }

        std::string rangeStr = xmlParser_->getElementText("entity/light/range");
        if (!rangeStr.empty())
        {
            light->range = std::stof(rangeStr);
        }

        definition.light = std::move(light);
    }

    void EntityXmlParser::parseCustomProperties(EntityConfig::EntityDefinition &definition)
    {
        DEBUG_LOG("Parsing custom properties");
        // First try "properties" element (used in existing XML)
        if (xmlParser_->hasElement("properties", "entity"))
        {
            auto propertyElements = xmlParser_->getElementsWithName("property", "entity/properties");

            for (const auto &propertyPath : propertyElements)
            {
                EntityConfig::CustomProperty prop;

                prop.name = xmlParser_->getElementAttribute(propertyPath, "name");
                prop.type = xmlParser_->getElementAttribute(propertyPath, "type");
                prop.value = xmlParser_->getElementText(propertyPath);

                if (!prop.name.empty())
                {
                    definition.customProperties.push_back(prop);
                }
            }
            return;
        }

        // Then try "customProperties" element (newer schema)
        if (xmlParser_->hasElement("customProperties", "entity"))
        {
            auto propertyElements = xmlParser_->getElementsWithName("property", "entity/customProperties");

            for (const auto &propertyPath : propertyElements)
            {
                EntityConfig::CustomProperty prop;

                prop.name = xmlParser_->getElementAttribute(propertyPath, "name");
                prop.type = xmlParser_->getElementAttribute(propertyPath, "type");
                prop.value = xmlParser_->getElementAttribute(propertyPath, "value");

                if (!prop.name.empty())
                {
                    definition.customProperties.push_back(prop);
                }
            }
        }
    }

} // namespace EntityLoader





================================================================================
FILE: src\loaders\EntityXmlParser.h
================================================================================

#ifndef ENTITY_XML_PARSER_H
#define ENTITY_XML_PARSER_H

#include "config/EntityConfig.h"
#include <memory>
#include <string>

class IXmlParserUnified;

namespace EntityLoader
{

    /**
     * @brief Parser for entity XML files according to entity.xsd schema
     *
     * This class is responsible for loading and parsing entity definition XML files
     * into EntityConfig::EntityDefinition structures that can be used by the EntityFactory
     * to instantiate entities in the game world.
     */
    class EntityXmlParser
    {
    public:
        EntityXmlParser();
        ~EntityXmlParser();

        /**
         * @brief Load entity definition from XML file
         *
         * @param filePath Path to the entity XML file
         * @return std::unique_ptr<EntityConfig::EntityDefinition> The parsed entity definition or nullptr on failure
         */
        std::unique_ptr<EntityConfig::EntityDefinition> loadFromFile(const std::string &filePath);

        /**
         * @brief Load entity definition from XML string
         *
         * @param xmlContent XML content as string
         * @return std::unique_ptr<EntityConfig::EntityDefinition> The parsed entity definition or nullptr on failure
         */
        std::unique_ptr<EntityConfig::EntityDefinition> loadFromString(const std::string &xmlContent);

    private:
        std::unique_ptr<IXmlParserUnified> xmlParser_;

        /**
         * @brief Parse entity XML into EntityDefinition
         *
         * @return std::unique_ptr<EntityConfig::EntityDefinition> Parsed entity definition
         */
        std::unique_ptr<EntityConfig::EntityDefinition> parseEntity();

        /**
         * @brief Parse transform component
         *
         * @param definition EntityDefinition to populate
         */
        void parseTransform(EntityConfig::EntityDefinition &definition);

        /**
         * @brief Parse renderable component
         *
         * @param definition EntityDefinition to populate
         */
        void parseRenderableComponent(EntityConfig::EntityDefinition &definition);

        /**
         * @brief Parse physics component
         *
         * @param definition EntityDefinition to populate
         */
        void parsePhysicsComponent(EntityConfig::EntityDefinition &definition);

        /**
         * @brief Parse vehicle component
         *
         * @param definition EntityDefinition to populate
         */
        void parseVehicleComponent(EntityConfig::EntityDefinition &definition);

        /**
         * @brief Parse audio component
         *
         * @param definition EntityDefinition to populate
         */
        void parseAudioComponent(EntityConfig::EntityDefinition &definition);

        /**
         * @brief Parse light component
         *
         * @param definition EntityDefinition to populate
         */
        void parseLightComponent(EntityConfig::EntityDefinition &definition);

        /**
         * @brief Parse custom properties
         *
         * @param definition EntityDefinition to populate
         */
        void parseCustomProperties(EntityConfig::EntityDefinition &definition);
    };

} // namespace EntityLoader

#endif // ENTITY_XML_PARSER_H



================================================================================
FILE: src\math\MathUtils.h
================================================================================

#pragma once
#include <cmath>
#include <algorithm>
#include <stdint.h>

/**
 * @file MathUtils.h
 * @brief Comprehensive math utilities for 3D graphics, physics, and procedural generation
 *
 * Contains constants, utility functions, vector/quaternion operations, orbital mechanics,
 * random number generation, and specialized functions for the voxel busy indicator scene.
 */

namespace Math
{

    // ============================================================================
    // 1) Constants and basic utilities
    // ============================================================================

    constexpr float DegToRad = 0.017453292519943295f;
    constexpr float RadToDeg = 57.29577951308232f;
    constexpr float PI = 3.14159265358979323846f;
    constexpr float TAU = 6.28318530717958647692f; // 2*PI

    inline float saturate(float x) { return (std::min)(1.f, (std::max)(0.f, x)); }
    inline float clamp(float x, float a, float b) { return (std::min)(b, (std::max)(a, x)); }
    inline float lerp(float a, float b, float t) { return a + (b - a) * t; }
    inline float invLerp(float a, float b, float x) { return (x - a) / (b - a); }
    inline float remap(float i0, float i1, float o0, float o1, float x)
    {
        return lerp(o0, o1, saturate(invLerp(i0, i1, x)));
    }

    inline float smoothstep(float a, float b, float x)
    {
        float t = saturate(invLerp(a, b, x));
        return t * t * (3.f - 2.f * t);
    }

    inline float smootherstep(float a, float b, float x)
    {
        float t = saturate(invLerp(a, b, x));
        return t * t * t * (t * (6.f * t - 15.f) + 10.f);
    }

    // ============================================================================
    // 2) Random & hashing (deterministic per seed)
    // ============================================================================

    /**
     * @brief PCG-like quick hash function for deterministic random generation
     * @param x Input value to hash
     * @return Hashed 32-bit unsigned integer
     */
    inline uint32_t hash_u32(uint32_t x)
    {
        x ^= x >> 16;
        x *= 0x7feb352dU;
        x ^= x >> 15;
        x *= 0x846ca68bU;
        x ^= x >> 16;
        return x;
    }

    /**
     * @brief Generate random float in [0,1) range using hash-based PRNG
     * @param state Reference to PRNG state (modified)
     * @return Random float in [0,1) range
     */
    inline float rand01(uint32_t &state)
    {
        state = hash_u32(state);
        return (state >> 8) * (1.f / 16777216.f); // 24-bit mantissa
    }

    /**
     * @brief Sample from exponential distribution for Poisson inter-arrival times
     * @param u Uniform random value in [0,1)
     * @param lambda Rate parameter (events per unit time)
     * @return Time until next event
     */
    inline float sample_exponential(float u, float lambda)
    {
        return -std::log((std::max)(u, 1e-7f)) / lambda;
    }

    // ============================================================================
    // 3) Vector operations
    // ============================================================================

    /**
     * @brief 2D vector structure with basic operations
     */
    struct float2
    {
        float x, y;

        float2() : x(0), y(0) {}
        float2(float x_, float y_) : x(x_), y(y_) {}

        float2 operator+(const float2 &other) const { return {x + other.x, y + other.y}; }
        float2 operator-(const float2 &other) const { return {x - other.x, y - other.y}; }
        float2 operator*(float s) const { return {x * s, y * s}; }
        float2 &operator+=(const float2 &other)
        {
            x += other.x;
            y += other.y;
            return *this;
        }
    };

    /**
     * @brief 3D vector structure with basic operations
     */
    struct float3
    {
        float x, y, z;

        float3() : x(0), y(0), z(0) {}
        float3(float x_, float y_, float z_) : x(x_), y(y_), z(z_) {}

        float3 operator+(const float3 &other) const { return {x + other.x, y + other.y, z + other.z}; }
        float3 operator-(const float3 &other) const { return {x - other.x, y - other.y, z - other.z}; }
        float3 operator*(float s) const { return {x * s, y * s, z * s}; }
        float3 &operator+=(const float3 &other)
        {
            x += other.x;
            y += other.y;
            z += other.z;
            return *this;
        }
    };

    /**
     * @brief 4D vector structure with basic operations (useful for quaternions and colors)
     */
    struct float4
    {
        float x, y, z, w;

        float4() : x(0), y(0), z(0), w(0) {}
        float4(float x_, float y_, float z_, float w_) : x(x_), y(y_), z(z_), w(w_) {}

        float4 operator+(const float4 &other) const { return {x + other.x, y + other.y, z + other.z, w + other.w}; }
        float4 operator-(const float4 &other) const { return {x - other.x, y - other.y, z - other.z, w - other.w}; }
        float4 operator*(float s) const { return {x * s, y * s, z * s, w * s}; }
        float4 &operator+=(const float4 &other)
        {
            x += other.x;
            y += other.y;
            z += other.z;
            w += other.w;
            return *this;
        }
    };

    inline float2 add(const float2 &a, const float2 &b) { return {a.x + b.x, a.y + b.y}; }
    inline float2 sub(const float2 &a, const float2 &b) { return {a.x - b.x, a.y - b.y}; }
    inline float2 mul(const float2 &a, float s) { return {a.x * s, a.y * s}; }
    inline float dot(const float2 &a, const float2 &b) { return a.x * b.x + a.y * b.y; }
    inline float length(const float2 &v) { return std::sqrt(v.x * v.x + v.y * v.y); }
    inline float2 normalize(const float2 &v)
    {
        float len = length(v);
        return len > 1e-6f ? mul(v, 1.0f / len) : float2{0, 0};
    }

    inline float4 add(const float4 &a, const float4 &b) { return {a.x + b.x, a.y + b.y, a.z + b.z, a.w + b.w}; }
    inline float4 sub(const float4 &a, const float4 &b) { return {a.x - b.x, a.y - b.y, a.z - b.z, a.w - b.w}; }
    inline float4 mul(const float4 &a, float s) { return {a.x * s, a.y * s, a.z * s, a.w * s}; }
    inline float dot(const float4 &a, const float4 &b) { return a.x * b.x + a.y * b.y + a.z * b.z + a.w * b.w; }
    inline float length(const float4 &v) { return std::sqrt(v.x * v.x + v.y * v.y + v.z * v.z + v.w * v.w); }
    inline float4 normalize(const float4 &v)
    {
        float len = length(v);
        return len > 1e-6f ? mul(v, 1.0f / len) : float4{0, 0, 0, 0};
    }

    inline float3 add(const float3 &a, const float3 &b) { return {a.x + b.x, a.y + b.y, a.z + b.z}; }
    inline float3 sub(const float3 &a, const float3 &b) { return {a.x - b.x, a.y - b.y, a.z - b.z}; }
    inline float3 mul(const float3 &a, float s) { return {a.x * s, a.y * s, a.z * s}; }
    inline float dot(const float3 &a, const float3 &b) { return a.x * b.x + a.y * b.y + a.z * b.z; }
    inline float3 cross(const float3 &a, const float3 &b)
    {
        return {a.y * b.z - a.z * b.y, a.z * b.x - a.x * b.z, a.x * b.y - a.y * b.x};
    }
    inline float len(const float3 &v) { return std::sqrt(dot(v, v)); }
    inline float lengthSq(const float3 &v) { return dot(v, v); }
    inline float3 norm(const float3 &v)
    {
        float L = len(v);
        return (L > 0) ? mul(v, 1.f / L) : float3{0, 0, 0};
    }
    inline float3 normalize(const float3 &v)
    {
        return norm(v);
    }

    // ============================================================================
    // 4) Quaternion operations
    // ============================================================================

    /**
     * @brief Quaternion structure for 3D rotations
     */
    struct quat
    {
        float w, x, y, z;

        quat() : w(1), x(0), y(0), z(0) {}
        quat(float w_, float x_, float y_, float z_) : w(w_), x(x_), y(y_), z(z_) {}

        static quat identity() { return quat(1, 0, 0, 0); }
    };

    /**
     * @brief Create quaternion from axis-angle representation
     * @param axis Rotation axis (will be normalized)
     * @param angleRad Rotation angle in radians
     * @return Quaternion representing the rotation
     */
    inline quat q_from_axis_angle(const float3 &axis, float angleRad)
    {
        float3 u = norm(axis);
        float s = std::sin(angleRad * 0.5f);
        return {std::cos(angleRad * 0.5f), u.x * s, u.y * s, u.z * s};
    }

    /**
     * @brief Rotate vector by quaternion
     * @param q Rotation quaternion
     * @param v Vector to rotate
     * @return Rotated vector
     */
    inline float3 q_rotate(const quat &q, const float3 &v)
    {
        // v' = q * (0,v) * q^-1
        float3 u = {q.x, q.y, q.z};
        float s = q.w;
        float3 t = mul(cross(u, v), 2.f);
        return add(add(v, mul(t, s)), cross(u, t));
    }

    /**
     * @brief Multiply two quaternions
     * @param a First quaternion
     * @param b Second quaternion
     * @return Product quaternion a * b
     */
    inline quat q_mul(const quat &a, const quat &b)
    {
        return {
            a.w * b.w - a.x * b.x - a.y * b.y - a.z * b.z,
            a.w * b.x + a.x * b.w + a.y * b.z - a.z * b.y,
            a.w * b.y - a.x * b.z + a.y * b.w + a.z * b.x,
            a.w * b.z + a.x * b.y - a.y * b.x + a.z * b.w};
    }

    /**
     * @brief Create look-at rotation quaternion
     * @param forward Forward direction (will be normalized)
     * @param up Up direction (will be normalized)
     * @return Quaternion representing the orientation
     */
    inline quat q_look_rotation(const float3 &forward, const float3 &up)
    {
        float3 f = norm(forward);
        float3 r = norm(cross(up, f));
        float3 u = cross(f, r);

        // Convert 3x3 rotation matrix to quaternion
        float m00 = r.x, m01 = u.x, m02 = f.x;
        float m11 = u.y, m22 = f.z;
        float trace = m00 + m11 + m22;

        quat q;
        if (trace > 0.f)
        {
            float s = std::sqrt(trace + 1.f) * 2.f; // s = 4 * qw
            q.w = 0.25f * s;
            q.x = (u.z - f.y) / s;
            q.y = (f.x - r.z) / s;
            q.z = (r.y - u.x) / s;
        }
        else
        {
            // Handle other cases - simplified for now
            q.w = 0.5f;
            q.x = 0.5f;
            q.y = 0.0f;
            q.z = 0.0f;
        }
        return q;
    }

    // ============================================================================
    // 5) Matrix operations (4x4 for camera transforms)
    // ============================================================================

    /**
     * @brief 4x4 transformation matrix
     */
    struct float4x4
    {
        float m[4][4];

        float4x4()
        {
            for (int i = 0; i < 4; i++)
            {
                for (int j = 0; j < 4; j++)
                {
                    m[i][j] = (i == j) ? 1.0f : 0.0f;
                }
            }
        }
    };

    /**
     * @brief Create look-at view matrix (right-handed, +Y up, -Z forward)
     * @param eye Camera position
     * @param target Look-at target
     * @param up Up direction
     * @return View transformation matrix
     */
    inline float4x4 lookAt(const float3 &eye, const float3 &target, const float3 &up)
    {
        float3 f = norm(sub(target, eye)); // forward
        float3 r = norm(cross(f, up));     // right
        float3 u = cross(r, f);            // corrected up

        float4x4 M{};
        M.m[0][0] = r.x;
        M.m[0][1] = u.x;
        M.m[0][2] = -f.x;
        M.m[0][3] = 0;
        M.m[1][0] = r.y;
        M.m[1][1] = u.y;
        M.m[1][2] = -f.y;
        M.m[1][3] = 0;
        M.m[2][0] = r.z;
        M.m[2][1] = u.z;
        M.m[2][2] = -f.z;
        M.m[2][3] = 0;
        M.m[3][0] = -dot(r, eye);
        M.m[3][1] = -dot(u, eye);
        M.m[3][2] = dot(f, eye);
        M.m[3][3] = 1;
        return M;
    }

    // ============================================================================
    // 6) Orbital mechanics utilities
    // ============================================================================

    /**
     * @brief Parameters for elliptical orbit calculation
     */
    struct OrbitParams
    {
        float semiMajorAxis; // a: semi-major axis
        float eccentricity;  // e: eccentricity [0,1)
        float inclination;   // i: inclination angle (radians)
        float angularRate;   // ω: angular rate (rad/s)
        float phaseOffset;   // φ₀: initial phase offset

        OrbitParams() : semiMajorAxis(1.0f), eccentricity(0.0f), inclination(0.0f),
                        angularRate(1.0f), phaseOffset(0.0f) {}
    };

    /**
     * @brief Calculate position on elliptical orbit
     * @param params Orbital parameters
     * @param time Current time
     * @return 3D position on orbit
     */
    inline float3 calculateOrbitPosition(const OrbitParams &params, float time)
    {
        float a = params.semiMajorAxis;
        float e = params.eccentricity;
        float b = a * (1.f - e); // semi-minor axis (simplified)
        float omega = params.angularRate;
        float i = params.inclination;
        float phi = omega * time + params.phaseOffset;

        // Ellipse in XZ plane
        float xP = a * std::cos(phi);
        float zP = b * std::sin(phi);

        // Rotate about X by inclination
        float x = xP;
        float y = -std::sin(i) * zP;
        float z = std::cos(i) * zP;

        return {x, y, z};
    }

    /**
     * @brief Calculate velocity on elliptical orbit
     * @param params Orbital parameters
     * @param time Current time
     * @return 3D velocity vector
     */
    inline float3 calculateOrbitVelocity(const OrbitParams &params, float time)
    {
        float a = params.semiMajorAxis;
        float e = params.eccentricity;
        float b = a * (1.f - e);
        float omega = params.angularRate;
        float i = params.inclination;
        float phi = omega * time + params.phaseOffset;

        // Velocity in XZ plane
        float vxP = -a * omega * std::sin(phi);
        float vzP = b * omega * std::cos(phi);

        // Rotate about X by inclination
        float vx = vxP;
        float vy = -std::sin(i) * vzP;
        float vz = std::cos(i) * vzP;

        return {vx, vy, vz};
    }

    /**
     * @brief Calculate banking angle for coordinated turn
     * @param velocity Current velocity vector
     * @param position Current position vector (for turn radius calculation)
     * @param maxBank Maximum banking angle (radians)
     * @return Banking angle in radians
     */
    inline float calculateBankingAngle(const float3 &velocity, const float3 &position, float maxBank = 15.f * DegToRad)
    {
        float3 Vh = {velocity.x, 0.f, velocity.z}; // horizontal velocity
        float3 Ph = {position.x, 0.f, position.z}; // horizontal position

        float speedH = len(Vh);
        if (speedH < 1e-4f)
            return 0.f;

        // Yaw rate calculation
        float yawRate = (velocity.x * position.z - velocity.z * position.x) / (Ph.x * Ph.x + Ph.z * Ph.z);

        // Coordinated turn banking
        float speed = len(velocity);
        float g = 9.81f;
        float bank = std::atan2(speed * yawRate, g);

        return clamp(bank, -maxBank, maxBank);
    }

    // ============================================================================
    // 7) Procedural generation utilities
    // ============================================================================

    /**
     * @brief Generate procedural texture noise value
     * @param x X coordinate
     * @param y Y coordinate
     * @param seed Random seed
     * @param amplitude Noise amplitude
     * @return Noise value
     */
    inline float proceduralNoise(int x, int y, uint32_t seed, float amplitude)
    {
        uint32_t state = hash_u32(seed + x * 73856093u + y * 19349663u);
        return (rand01(state) - 0.5f) * amplitude;
    }

    /**
     * @brief Check if pixel should be speckled based on density
     * @param x X coordinate
     * @param y Y coordinate
     * @param seed Random seed
     * @param density Speckle density [0,1]
     * @return True if pixel should be speckled
     */
    inline bool shouldSpeckle(int x, int y, uint32_t seed, float density)
    {
        uint32_t state = hash_u32(seed + x * 73856093u + y * 19349663u);
        return rand01(state) < density;
    }

    // ============================================================================
    // 8) Cel-shading utilities
    // ============================================================================

    /**
     * @brief Calculate cel-shaded lighting with band quantization
     * @param normal Surface normal (world space)
     * @param lightDir Light direction (from surface to light, normalized)
     * @param bands Number of shading bands
     * @return Shading factor [0,1]
     */
    inline float calculateCelShading(const float3 &normal, const float3 &lightDir, int bands = 4)
    {
        float NdotL = saturate(dot(normal, lightDir));

        // Band quantization
        float qIdx = std::floor(NdotL * bands);
        float qVal = (qIdx + 0.5f) / bands; // mid-band value

        return qVal;
    }

    /**
     * @brief Calculate rim lighting effect
     * @param normal Surface normal (world space)
     * @param viewDir View direction (from surface to camera, normalized)
     * @param power Rim falloff power
     * @return Rim lighting factor [0,1]
     */
    inline float calculateRimLighting(const float3 &normal, const float3 &viewDir, float power = 2.f)
    {
        return std::pow(1.f - saturate(dot(normal, viewDir)), power);
    }

    // ============================================================================
    // 9) Lifecycle and fade utilities
    // ============================================================================

    /**
     * @brief Calculate piecewise fade curve
     * @param t Current time
     * @param t0 Start time (0 alpha)
     * @param t1 Fade in complete time (1 alpha)
     * @param t2 Fade out start time (1 alpha)
     * @param t3 End time (0 alpha)
     * @return Alpha value [0,1]
     */
    inline float alpha_piecewise(float t, float t0, float t1, float t2, float t3)
    {
        if (t <= t0)
            return 0.f;
        if (t < t1)
            return smoothstep(t0, t1, t);
        if (t <= t2)
            return 1.f;
        if (t < t3)
            return 1.f - smoothstep(t2, t3, t);
        return 0.f;
    }

    /**
     * @brief Calculate exponential fade for contrails
     * @param elapsedTime Time since spawn
     * @param lifetime Total lifetime
     * @return Alpha value [0,1]
     */
    inline float alpha_contrail(float elapsedTime, float lifetime)
    {
        float s = saturate(1.f - elapsedTime / lifetime);
        return s * s; // quadratic falloff
    }

} // namespace Math


================================================================================
FILE: src\math\Quaternion.h
================================================================================

#pragma once
#include "Vector3D.h"
#include <cmath>

/**
 * @struct Quaternion
 * @brief Quaternion class for representing 3D rotations.
 *
 * Quaternions offer a more stable and efficient way to represent rotations
 * compared to Euler angles, avoiding gimbal lock and providing smooth interpolation.
 */
struct Quaternion
{
    float x = 0.0f;
    float y = 0.0f;
    float z = 0.0f;
    float w = 1.0f; // Real part, initialized to identity rotation

    /**
     * @brief Default constructor creates an identity quaternion
     */
    Quaternion() = default;

    /**
     * @brief Constructs a quaternion with specified components
     *
     * @param x The x component (imaginary i)
     * @param y The y component (imaginary j)
     * @param z The z component (imaginary k)
     * @param w The w component (real part)
     */
    Quaternion(float x, float y, float z, float w) : x(x), y(y), z(z), w(w) {}

    /**
     * @brief Creates a quaternion from Euler angles (in radians)
     *
     * @param pitch Rotation around X axis (in radians)
     * @param yaw Rotation around Y axis (in radians)
     * @param roll Rotation around Z axis (in radians)
     * @return Quaternion representing the rotation
     */
    static Quaternion fromEulerAngles(float pitch, float yaw, float roll)
    {
        // Convert Euler angles to quaternion using the ZYX convention
        float cy = std::cos(yaw * 0.5f);
        float sy = std::sin(yaw * 0.5f);
        float cp = std::cos(pitch * 0.5f);
        float sp = std::sin(pitch * 0.5f);
        float cr = std::cos(roll * 0.5f);
        float sr = std::sin(roll * 0.5f);

        Quaternion q;
        q.w = cy * cp * cr + sy * sp * sr;
        q.x = cy * cp * sr - sy * sp * cr;
        q.y = sy * cp * sr + cy * sp * cr;
        q.z = sy * cp * cr - cy * sp * sr;

        return q;
    }

    /**
     * @brief Normalizes this quaternion to unit length
     *
     * @return Reference to this quaternion after normalization
     */
    Quaternion &normalize()
    {
        float len = std::sqrt(x * x + y * y + z * z + w * w);
        if (len > 0)
        {
            float invLen = 1.0f / len;
            x *= invLen;
            y *= invLen;
            z *= invLen;
            w *= invLen;
        }
        return *this;
    }

    /**
     * @brief Multiply this quaternion by another (compose rotations)
     *
     * @param other Quaternion to multiply with
     * @return Reference to this quaternion after multiplication
     */
    Quaternion &operator*=(const Quaternion &other)
    {
        float newW = w * other.w - x * other.x - y * other.y - z * other.z;
        float newX = w * other.x + x * other.w + y * other.z - z * other.y;
        float newY = w * other.y - x * other.z + y * other.w + z * other.x;
        float newZ = w * other.z + x * other.y - y * other.x + z * other.w;

        w = newW;
        x = newX;
        y = newY;
        z = newZ;

        return *this;
    }
};

/**
 * @brief Multiply two quaternions (compose rotations)
 *
 * @param a First quaternion
 * @param b Second quaternion
 * @return Resulting quaternion (a * b)
 */
inline Quaternion operator*(const Quaternion &a, const Quaternion &b)
{
    return Quaternion(
        a.w * b.x + a.x * b.w + a.y * b.z - a.z * b.y,
        a.w * b.y - a.x * b.z + a.y * b.w + a.z * b.x,
        a.w * b.z + a.x * b.y - a.y * b.x + a.z * b.w,
        a.w * b.w - a.x * b.x - a.y * b.y - a.z * b.z);
}



================================================================================
FILE: src\math\Vector3D.h
================================================================================

#pragma once

/**
 * @struct Vector3D
 * @brief A 3D vector class for representing positions, directions, and velocities.
 */
struct Vector3D
{
    float x = 0.0f;
    float y = 0.0f;
    float z = 0.0f;

    /**
     * @brief Default constructor initializes vector to (0,0,0)
     */
    Vector3D() = default;

    /**
     * @brief Constructs a 3D vector with specified coordinates
     *
     * @param x The x coordinate
     * @param y The y coordinate
     * @param z The z coordinate
     */
    Vector3D(float x, float y, float z) : x(x), y(y), z(z) {}

    /**
     * @brief Add another vector to this one
     *
     * @param other Vector to add
     * @return Reference to this vector after addition
     */
    Vector3D &operator+=(const Vector3D &other)
    {
        x += other.x;
        y += other.y;
        z += other.z;
        return *this;
    }

    /**
     * @brief Subtract another vector from this one
     *
     * @param other Vector to subtract
     * @return Reference to this vector after subtraction
     */
    Vector3D &operator-=(const Vector3D &other)
    {
        x -= other.x;
        y -= other.y;
        z -= other.z;
        return *this;
    }

    /**
     * @brief Scale this vector by a scalar value
     *
     * @param scalar Scaling factor
     * @return Reference to this vector after scaling
     */
    Vector3D &operator*=(float scalar)
    {
        x *= scalar;
        y *= scalar;
        z *= scalar;
        return *this;
    }
};

/**
 * @brief Add two vectors
 *
 * @param a First vector
 * @param b Second vector
 * @return Sum of the two vectors
 */
inline Vector3D operator+(const Vector3D &a, const Vector3D &b)
{
    return Vector3D(a.x + b.x, a.y + b.y, a.z + b.z);
}

/**
 * @brief Subtract one vector from another
 *
 * @param a Vector to subtract from
 * @param b Vector to subtract
 * @return Difference of the two vectors
 */
inline Vector3D operator-(const Vector3D &a, const Vector3D &b)
{
    return Vector3D(a.x - b.x, a.y - b.y, a.z - b.z);
}

/**
 * @brief Scale a vector by a scalar
 *
 * @param v Vector to scale
 * @param scalar Scaling factor
 * @return Scaled vector
 */
inline Vector3D operator*(const Vector3D &v, float scalar)
{
    return Vector3D(v.x * scalar, v.y * scalar, v.z * scalar);
}

/**
 * @brief Scale a vector by a scalar
 *
 * @param scalar Scaling factor
 * @param v Vector to scale
 * @return Scaled vector
 */
inline Vector3D operator*(float scalar, const Vector3D &v)
{
    return v * scalar;
}



================================================================================
FILE: src\physics\ExponentialAirDensityModel.cpp
================================================================================

/**
 * @file ExpExponentialAirDensityModel::ExponentialAirDensityModel(float seaLevelDensity, float scaleHeight)
    : seaLevelDensity_(seaLevelDensity), scaleHeight_(scaleHeight)
{
    DEBUG_LOG("Initializing ExponentialAirDensityModel with sea level density " + std::to_string(seaLevelDensity) + " and scale height " + std::to_string(scaleHeight));
}ialAirDensityModel.cpp
 * @brief Implementation of the exponential air density model.
 */

#include "ExponentialAirDensityModel.h"
#include <cmath>
#include "../debug.h"

/**
 * @brief Construct a new ExponentialAirDensityModel.
 *
 * Initializes the model with the given sea level density and scale height parameters.
 *
 * @param seaLevelDensity Air density at sea level in kg/m³ (typically ~1.225)
 * @param scaleHeight Atmospheric scale height in meters (typically ~8400)
 */
ExponentialAirDensityModel::ExponentialAirDensityModel(float seaLevelDensity, float scaleHeight)
    : seaLevelDensity_(seaLevelDensity), scaleHeight_(scaleHeight)
{
    DEBUG_LOG("Initializing ExponentialAirDensityModel with sea level density " + std::to_string(seaLevelDensity) + " and scale height " + std::to_string(scaleHeight));
}

/**
 * @brief Calculate air density at a given altitude.
 *
 * Implements the exponential decay formula: ρ(h) = ρ₀ * exp(-h/H)
 * where ρ₀ is the sea level density and H is the scale height.
 *
 * @param altitude The altitude above sea level in meters
 * @return The air density in kg/m³ at the specified altitude
 */
float ExponentialAirDensityModel::getDensity(float altitude) const
{
    DEBUG_LOG("Calculating air density at altitude " + std::to_string(altitude));
    return seaLevelDensity_ * std::exp(-altitude / scaleHeight_);
}



================================================================================
FILE: src\physics\ExponentialAirDensityModel.h
================================================================================

/**
 * @file ExponentialAirDensityModel.h
 * @brief Implementation of an exponential air density model.
 *
 * This file implements an exponential decay model for atmospheric density,
 * commonly used in aviation and atmospheric physics. The model assumes
 * density decreases exponentially with altitude.
 */

#ifndef EXPONENTIALAIRDENSITYMODEL_H
#define EXPONENTIALAIRDENSITYMODEL_H

#include "IAirDensityModel.h"

/**
 * @class ExponentialAirDensityModel
 * @brief Air density model using exponential decay with altitude.
 *
 * This implementation uses the standard atmospheric model where air density
 * decreases exponentially with height according to the formula:
 * ρ(h) = ρ₀ * exp(-h/H)
 * where ρ₀ is sea level density and H is the scale height.
 */
class ExponentialAirDensityModel : public IAirDensityModel
{
public:
    /**
     * @brief Construct a new ExponentialAirDensityModel.
     *
     * @param seaLevelDensity Air density at sea level in kg/m³ (typically ~1.225)
     * @param scaleHeight Atmospheric scale height in meters (typically ~8400)
     */
    ExponentialAirDensityModel(float seaLevelDensity, float scaleHeight);

    /**
     * @brief Calculate air density at a given altitude.
     *
     * Uses the exponential decay formula: ρ(h) = ρ₀ * exp(-h/H)
     *
     * @param altitude The altitude above sea level in meters
     * @return The air density in kg/m³ at the specified altitude
     */
    float getDensity(float altitude) const override;

private:
    /** @brief Air density at sea level in kg/m³ */
    float seaLevelDensity_;

    /** @brief Atmospheric scale height in meters */
    float scaleHeight_;
};

#endif



================================================================================
FILE: src\physics\IAirDensityModel.h
================================================================================

/**
 * @file IAirDensityModel.h
 * @brief Interface for air density models used in physics calculations.
 *
 * This interface defines the contract for air density models that calculate
 * atmospheric density as a function of altitude. Different implementations
 * can provide various atmospheric models (exponential, tabulated, etc.).
 */

#ifndef IAIRDENSITYMODEL_H
#define IAIRDENSITYMODEL_H

/**
 * @class IAirDensityModel
 * @brief Abstract interface for calculating air density at different altitudes.
 *
 * This interface provides a standardized way to calculate atmospheric density
 * based on altitude. Implementations can use different mathematical models
 * such as exponential decay, lookup tables, or complex atmospheric simulations.
 */
class IAirDensityModel
{
public:
    /** @brief Virtual destructor for proper cleanup of derived classes */
    virtual ~IAirDensityModel() = default;

    /**
     * @brief Calculate air density at a given altitude.
     *
     * @param altitude The altitude above sea level in meters
     * @return The air density in kg/m³ at the specified altitude
     */
    virtual float getDensity(float altitude) const = 0;
};

#endif



================================================================================
FILE: src\physics\ICollisionResolver.h
================================================================================

/**
 * @file ICollisionResolver.h
 * @brief Interface for collision resolution algorithms.
 *
 * This interface defines the contract for collision resolution systems that
 * handle the physics of objects colliding with surfaces. Different implementations
 * can provide various collision response models (impulse-based, penalty-based, etc.).
 */

#ifndef ICOLLISIONRESOLVER_H
#define ICOLLISIONRESOLVER_H

/**
 * @class ICollisionResolver
 * @brief Abstract interface for resolving collisions between objects and surfaces.
 *
 * This interface provides a standardized way to handle collision responses.
 * Implementations calculate how an object's velocity should change when it
 * collides with a surface, taking into account factors like restitution (bounciness).
 */
class ICollisionResolver
{
public:
    /** @brief Virtual destructor for proper cleanup of derived classes */
    virtual ~ICollisionResolver() = default;

    /**
     * @brief Resolve a collision by modifying object velocity.
     *
     * This method calculates the post-collision velocity of an object based on
     * its pre-collision velocity, the surface normal, and the coefficient of restitution.
     *
     * @param vx [in,out] X component of object velocity (modified by collision response)
     * @param vy [in,out] Y component of object velocity (modified by collision response)
     * @param vz [in,out] Z component of object velocity (modified by collision response)
     * @param normalX X component of the surface normal vector
     * @param normalY Y component of the surface normal vector
     * @param normalZ Z component of the surface normal vector
     * @param restitution Coefficient of restitution (0.0 = perfectly inelastic, 1.0 = perfectly elastic)
     */
    virtual void resolveCollision(float &vx, float &vy, float &vz, float normalX, float normalY, float normalZ, float restitution) = 0;
};

#endif



================================================================================
FILE: src\physics\ImpulseCollisionResolver.cpp
================================================================================

/**
 * @file ImpulseCollisionResolver.cpp
 * @brief Implementation of impulse-based collision resolution.
 */

#include "ImpulseCollisionResolver.h"
#include "../debug.h"

/**
 * @brief Construct a new ImpulseCollisionResolver.
 *
 * Initializes the collision resolver with default friction and restitution values.
 *
 * @param friction Coefficient of friction (0.0 = no friction, 1.0 = high friction)
 * @param restitution Default coefficient of restitution (0.0 = inelastic, 1.0 = elastic)
 */
ImpulseCollisionResolver::ImpulseCollisionResolver(float friction, float restitution)
    : friction_(friction), restitution_(restitution)
{
    DEBUG_LOG("Initializing ImpulseCollisionResolver with friction " + std::to_string(friction) + " and restitution " + std::to_string(restitution));
}

/**
 * @brief Resolve a collision using impulse-based calculations.
 *
 * This is a simplified implementation that applies an impulse to reverse
 * the component of velocity towards the surface. The impulse magnitude
 * is calculated based on the coefficient of restitution.
 *
 * Note: This is currently a stub implementation. A full impulse-based
 * resolver would include friction calculations and proper impulse magnitude
 * determination based on object masses and collision geometry.
 *
 * @param vx [in,out] X component of object velocity (modified by collision response)
 * @param vy [in,out] Y component of object velocity (modified by collision response)
 * @param vz [in,out] Z component of object velocity (modified by collision response)
 * @param normalX X component of the surface normal vector
 * @param normalY Y component of the surface normal vector
 * @param normalZ Z component of the surface normal vector
 * @param restitution Coefficient of restitution for this collision
 */
void ImpulseCollisionResolver::resolveCollision(float &vx, float &vy, float &vz, float normalX, float normalY, float normalZ, float restitution)
{
    DEBUG_LOG("Resolving collision with restitution " + std::to_string(restitution));
    // Calculate the component of velocity towards the surface
    float dot = vx * normalX + vy * normalY + vz * normalZ;

    // Only resolve if object is moving towards the surface
    if (dot < 0)
    {
        // Apply impulse to reverse the normal component of velocity
        // Formula: v' = v - (1+e) * (v·n) * n
        // where e is the coefficient of restitution
        vx -= (1 + restitution) * dot * normalX;
        vy -= (1 + restitution) * dot * normalY;
        vz -= (1 + restitution) * dot * normalZ;
    }
}



================================================================================
FILE: src\physics\ImpulseCollisionResolver.h
================================================================================

/**
 * @file ImpulseCollisionResolver.h
 * @brief Implementation of impulse-based collision resolution.
 *
 * This file implements an impulse-based collision response system that
 * calculates collision impulses and applies them to resolve object collisions
 * with surfaces, taking into account friction and restitution.
 */

#ifndef IMPULSECOLLISIONRESOLVER_H
#define IMPULSECOLLISIONRESOLVER_H

#include "ICollisionResolver.h"

/**
 * @class ImpulseCollisionResolver
 * @brief Collision resolver using impulse-based response calculations.
 *
 * This implementation uses classical mechanics to calculate collision impulses
 * based on conservation of momentum and energy. It handles both normal and
 * tangential components of collisions, applying friction and restitution effects.
 */
class ImpulseCollisionResolver : public ICollisionResolver
{
public:
    /**
     * @brief Construct a new ImpulseCollisionResolver.
     *
     * @param friction Coefficient of friction (0.0 = no friction, 1.0 = high friction)
     * @param restitution Default coefficient of restitution if not specified in resolveCollision
     */
    ImpulseCollisionResolver(float friction, float restitution);

    /**
     * @brief Resolve a collision using impulse-based calculations.
     *
     * Calculates the collision impulse based on the relative velocity,
     * surface normal, and material properties. Applies both normal and
     * tangential impulse components.
     *
     * @param vx [in,out] X component of object velocity (modified by collision response)
     * @param vy [in,out] Y component of object velocity (modified by collision response)
     * @param vz [in,out] Z component of object velocity (modified by collision response)
     * @param normalX X component of the surface normal vector
     * @param normalY Y component of the surface normal vector
     * @param normalZ Z component of the surface normal vector
     * @param restitution Coefficient of restitution for this collision
     */
    void resolveCollision(float &vx, float &vy, float &vz, float normalX, float normalY, float normalZ, float restitution) override;

private:
    /** @brief Default coefficient of friction for surfaces */
    float friction_;

    /** @brief Default coefficient of restitution for collisions */
    float restitution_;
};

#endif



================================================================================
FILE: src\physics\IWindModel.h
================================================================================

/**
 * @file IWindModel.h
 * @brief Interface for wind models used in aerodynamic calculations.
 *
 * This interface defines the contract for wind models that calculate
 * wind velocity vectors at different positions in 3D space. Different
 * implementations can provide various wind patterns (constant, turbulent, etc.).
 */

#ifndef IWINDMODEL_H
#define IWINDMODEL_H

/**
 * @class IWindModel
 * @brief Abstract interface for calculating wind velocity at spatial positions.
 *
 * This interface provides a standardized way to calculate wind velocity
 * vectors at any point in 3D space. Implementations can model different
 * types of wind conditions including steady winds, turbulence, and weather systems.
 */
class IWindModel
{
public:
    /** @brief Virtual destructor for proper cleanup of derived classes */
    virtual ~IWindModel() = default;

    /**
     * @brief Calculate wind velocity at a given position.
     *
     * @param x X coordinate of the position
     * @param y Y coordinate of the position
     * @param z Z coordinate of the position
     * @param wx [out] X component of wind velocity at the position
     * @param wy [out] Y component of wind velocity at the position
     * @param wz [out] Z component of wind velocity at the position
     */
    virtual void getWind(float x, float y, float z, float &wx, float &wy, float &wz) const = 0;
};

#endif



================================================================================
FILE: src\physics\PerlinWindModel.cpp
================================================================================

/**
 * @file PerlinWindModel.cpp
 * @brief Implementation of Perlin noise-based wind model.
 */

#include "PerlinWindModel.h"
#include "../debug.h"

/**
 * @brief Construct a new PerlinWindModel.
 *
 * Initializes the wind model with parameters for generating Perlin noise-based
 * wind fields. The parameters control the strength, frequency, and amplitude
 * of the wind variations.
 *
 * @param strength Base wind strength multiplier
 * @param frequency Spatial frequency of the wind variations
 * @param amplitude Maximum wind speed variation
 * @param seed Random seed for reproducible wind patterns
 */
PerlinWindModel::PerlinWindModel(float strength, float frequency, float amplitude, int seed)
    : strength_(strength), frequency_(frequency), amplitude_(amplitude), seed_(seed)
{
    DEBUG_LOG("Initializing PerlinWindModel with strength " + std::to_string(strength) + ", frequency " + std::to_string(frequency) + ", amplitude " + std::to_string(amplitude));
}

/**
 * @brief Calculate wind velocity at a given position using Perlin noise.
 *
 * This is currently a stub implementation that returns constant wind in the X direction.
 * A full implementation would use Perlin noise functions to generate spatially coherent
 * wind velocity fields with realistic turbulence patterns.
 *
 * @param x X coordinate of the position
 * @param y Y coordinate of the position
 * @param z Z coordinate of the position
 * @param wx [out] X component of wind velocity at the position
 * @param wy [out] Y component of wind velocity at the position
 * @param wz [out] Z component of wind velocity at the position
 */
void PerlinWindModel::getWind(float x, float y, float z, float &wx, float &wy, float &wz) const
{
    DEBUG_LOG("Getting wind at position (" + std::to_string(x) + ", " + std::to_string(y) + ", " + std::to_string(z) + ")");
    // Stub: return constant wind in X direction
    // TODO: Implement Perlin noise-based wind field generation
    wx = strength_;
    wy = 0.0f;
    wz = 0.0f;
}



================================================================================
FILE: src\physics\PerlinWindModel.h
================================================================================

/**
 * @file PerlinWindModel.h
 * @brief Implementation of a Perlin noise-based wind model.
 *
 * This file implements a wind model using Perlin noise to generate
 * realistic turbulent wind patterns. The model creates spatially
 * coherent wind fields that vary smoothly across 3D space.
 */

#ifndef PERLINWINDMODEL_H
#define PERLINWINDMODEL_H

#include "IWindModel.h"

/**
 * @class PerlinWindModel
 * @brief Wind model using Perlin noise for realistic turbulence.
 *
 * This implementation generates wind velocity fields using Perlin noise,
 * creating natural-looking wind patterns with spatial coherence. The wind
 * varies smoothly in space and can include multiple octaves for complex
 * turbulence patterns.
 */
class PerlinWindModel : public IWindModel
{
public:
    /**
     * @brief Construct a new PerlinWindModel.
     *
     * @param strength Base wind strength multiplier
     * @param frequency Spatial frequency of the wind variations
     * @param amplitude Maximum wind speed variation
     * @param seed Random seed for reproducible wind patterns
     */
    PerlinWindModel(float strength, float frequency, float amplitude, int seed);

    /**
     * @brief Calculate wind velocity at a given position using Perlin noise.
     *
     * Uses Perlin noise functions to generate spatially coherent wind
     * velocity components. The wind field varies smoothly and creates
     * realistic turbulence patterns.
     *
     * @param x X coordinate of the position
     * @param y Y coordinate of the position
     * @param z Z coordinate of the position
     * @param wx [out] X component of wind velocity at the position
     * @param wy [out] Y component of wind velocity at the position
     * @param wz [out] Z component of wind velocity at the position
     */
    void getWind(float x, float y, float z, float &wx, float &wy, float &wz) const override;

private:
    /** @brief Base wind strength multiplier */
    float strength_;

    /** @brief Spatial frequency of wind variations */
    float frequency_;

    /** @brief Maximum wind speed variation */
    float amplitude_;

    /** @brief Random seed for reproducible patterns */
    int seed_;
};

#endif



================================================================================
FILE: src\platform\IInputDevice.h
================================================================================

/**
 * @file IInputDevice.h
 * @brief Interface for platform-specific input device handling.
 *
 * This interface defines the contract for input device implementations
 * that handle user input from various sources (keyboard, mouse, gamepads, etc.).
 * Different platforms can provide their own implementations while maintaining
 * a consistent interface for the rest of the application.
 */

#ifndef IINPUTDEVICE_H
#define IINPUTDEVICE_H

/**
 * @class IInputDevice
 * @brief Abstract interface for handling user input devices.
 *
 * This interface provides a platform-independent way to access user input.
 * Implementations handle polling input devices and providing input state
 * to the application. The interface is designed to be extensible for
 * different types of input devices and platforms.
 */
class IInputDevice
{
public:
    /** @brief Virtual destructor for proper cleanup of derived classes */
    virtual ~IInputDevice() = default;

    /**
     * @brief Poll the input devices for new input events.
     *
     * This method should be called regularly to update the internal
     * input state. It handles platform-specific input processing and
     * updates the state of all connected input devices.
     */
    virtual void poll() = 0;

    // TODO: Add methods for querying specific input states
    // virtual bool isKeyPressed(KeyCode key) const = 0;
    // virtual bool isMouseButtonPressed(MouseButton button) const = 0;
    // virtual void getMousePosition(int& x, int& y) const = 0;
};

#endif



================================================================================
FILE: src\platform\NlohmannJsonParser.cpp
================================================================================

#include "NlohmannJsonParser.h"
#include <fstream>
#include <sstream>
#include <iostream>

NlohmannJsonParser::NlohmannJsonParser() : isValid_(false)
{
    clear();
}

bool NlohmannJsonParser::loadFile(const std::string &path)
{
    try
    {
        std::ifstream file(path);
        if (!file.is_open())
        {
            addError("Failed to open JSON file: " + path);
            return false;
        }

        file >> rootJson_;
        currentJson_ = rootJson_;
        isValid_ = true;
        return true;
    }
    catch (const nlohmann::json::parse_error &e)
    {
        addError("JSON parse error in file " + path + ": " + e.what());
        isValid_ = false;
        return false;
    }
    catch (const std::exception &e)
    {
        addError("Error loading JSON file " + path + ": " + e.what());
        isValid_ = false;
        return false;
    }
}

bool NlohmannJsonParser::loadString(const std::string &jsonContent)
{
    try
    {
        rootJson_ = nlohmann::json::parse(jsonContent);
        currentJson_ = rootJson_;
        isValid_ = true;
        return true;
    }
    catch (const nlohmann::json::parse_error &e)
    {
        addError("JSON parse error: " + std::string(e.what()));
        isValid_ = false;
        return false;
    }
    catch (const std::exception &e)
    {
        addError("Error parsing JSON string: " + std::string(e.what()));
        isValid_ = false;
        return false;
    }
}

const nlohmann::json &NlohmannJsonParser::getRootJson() const
{
    return rootJson_;
}

bool NlohmannJsonParser::hasKey(const std::string &key) const
{
    if (!isValid_ || !currentJson_.is_object())
        return false;

    return currentJson_.contains(key);
}

std::string NlohmannJsonParser::getString(const std::string &key, const std::string &defaultValue) const
{
    if (!hasKey(key))
        return defaultValue;

    try
    {
        return currentJson_[key].get<std::string>();
    }
    catch (const std::exception &)
    {
        return defaultValue;
    }
}

int NlohmannJsonParser::getInt(const std::string &key, int defaultValue) const
{
    if (!hasKey(key))
        return defaultValue;

    try
    {
        return currentJson_[key].get<int>();
    }
    catch (const std::exception &)
    {
        return defaultValue;
    }
}

float NlohmannJsonParser::getFloat(const std::string &key, float defaultValue) const
{
    if (!hasKey(key))
        return defaultValue;

    try
    {
        return currentJson_[key].get<float>();
    }
    catch (const std::exception &)
    {
        return defaultValue;
    }
}

bool NlohmannJsonParser::getBool(const std::string &key, bool defaultValue) const
{
    if (!hasKey(key))
        return defaultValue;

    try
    {
        return currentJson_[key].get<bool>();
    }
    catch (const std::exception &)
    {
        return defaultValue;
    }
}

std::vector<nlohmann::json> NlohmannJsonParser::getArray(const std::string &key) const
{
    std::vector<nlohmann::json> result;

    if (!hasKey(key))
        return result;

    try
    {
        const auto &jsonArray = currentJson_[key];
        if (jsonArray.is_array())
        {
            for (const auto &item : jsonArray)
            {
                result.push_back(item);
            }
        }
    }
    catch (const std::exception &)
    {
        // Return empty vector on error
    }

    return result;
}

nlohmann::json NlohmannJsonParser::getObject(const std::string &key) const
{
    if (!hasKey(key))
        return nlohmann::json::object();

    try
    {
        return currentJson_[key];
    }
    catch (const std::exception &)
    {
        return nlohmann::json::object();
    }
}

const nlohmann::json &NlohmannJsonParser::getCurrentJson() const
{
    return currentJson_;
}

void NlohmannJsonParser::addError(const std::string &error)
{
    errors_.push_back(error);
}

void NlohmannJsonParser::addWarning(const std::string &warning)
{
    warnings_.push_back(warning);
}

bool NlohmannJsonParser::hasErrors() const
{
    return !errors_.empty();
}

bool NlohmannJsonParser::hasWarnings() const
{
    return !warnings_.empty();
}

const std::vector<std::string> &NlohmannJsonParser::getErrors() const
{
    return errors_;
}

const std::vector<std::string> &NlohmannJsonParser::getWarnings() const
{
    return warnings_;
}

void NlohmannJsonParser::clear()
{
    errors_.clear();
    warnings_.clear();
    rootJson_ = nlohmann::json::object();
    currentJson_ = rootJson_;
    isValid_ = false;
}

void NlohmannJsonParser::setCurrentJson(const nlohmann::json &json)
{
    currentJson_ = json;
}

void NlohmannJsonParser::resetToRoot()
{
    currentJson_ = rootJson_;
}

bool NlohmannJsonParser::isValid() const
{
    return isValid_;
}


================================================================================
FILE: src\platform\NlohmannJsonParser.h
================================================================================

#pragma once
#include "utils/IJsonParserUnified.h"
#include <nlohmann/json.hpp>
#include <fstream>
#include <vector>
#include <string>

/**
 * @brief Concrete implementation of JSON parser using nlohmann/json.
 *
 * Provides complete JSON parsing functionality for the engine.
 */
class NlohmannJsonParser : public IJsonParserUnified
{
private:
    nlohmann::json rootJson_;
    nlohmann::json currentJson_;
    std::vector<std::string> errors_;
    std::vector<std::string> warnings_;
    bool isValid_;

public:
    NlohmannJsonParser();
    virtual ~NlohmannJsonParser() = default;

    // IJsonLoader implementation
    bool loadFile(const std::string &path) override;
    bool loadString(const std::string &jsonContent) override;
    const nlohmann::json &getRootJson() const override;

    // IJsonQuery implementation
    bool hasKey(const std::string &key) const override;
    std::string getString(const std::string &key, const std::string &defaultValue = "") const override;
    int getInt(const std::string &key, int defaultValue = 0) const override;
    float getFloat(const std::string &key, float defaultValue = 0.0f) const override;
    bool getBool(const std::string &key, bool defaultValue = false) const override;
    std::vector<nlohmann::json> getArray(const std::string &key) const override;
    nlohmann::json getObject(const std::string &key) const override;
    const nlohmann::json &getCurrentJson() const override;

    // IJsonErrorHandler implementation
    void addError(const std::string &error) override;
    void addWarning(const std::string &warning) override;
    bool hasErrors() const override;
    bool hasWarnings() const override;
    const std::vector<std::string> &getErrors() const override;
    const std::vector<std::string> &getWarnings() const override;
    void clear() override;

    // IJsonParserUnified implementation
    void setCurrentJson(const nlohmann::json &json) override;
    void resetToRoot() override;
    bool isValid() const override;
};


================================================================================
FILE: src\platform\OpenGLContext.cpp
================================================================================

#include "OpenGLContext.h"
#include <iostream>
#include "../debug.h"

OpenGLContext::OpenGLContext()
    : hwnd(nullptr), hdc(nullptr), hglrc(nullptr), initialized(false)
{
}

OpenGLContext::~OpenGLContext()
{
    Cleanup();
}

bool OpenGLContext::Initialize(HWND windowHandle)
{
    hwnd = windowHandle;
    hdc = GetDC(hwnd);

    if (!hdc)
    {
        std::cerr << "Failed to get device context" << std::endl;
        return false;
    }

    if (!SetupPixelFormat())
    {
        std::cerr << "Failed to setup pixel format" << std::endl;
        return false;
    }

    hglrc = wglCreateContext(hdc);
    if (!hglrc)
    {
        std::cerr << "Failed to create OpenGL context" << std::endl;
        return false;
    }

    if (!wglMakeCurrent(hdc, hglrc))
    {
        std::cerr << "Failed to make OpenGL context current" << std::endl;
        return false;
    }

    // Basic OpenGL setup
    glEnable(GL_DEPTH_TEST);
    glEnable(GL_BLEND);
    glBlendFunc(GL_SRC_ALPHA, GL_ONE_MINUS_SRC_ALPHA);

    // Set clear color to dark blue
    glClearColor(20.0f / 255.0f, 30.0f / 255.0f, 50.0f / 255.0f, 1.0f);

    initialized = true;
    DEBUG_LOG("OpenGL context initialized successfully");
    DEBUG_LOG("OpenGL Version: " << glGetString(GL_VERSION));
    DEBUG_LOG("OpenGL Vendor: " << glGetString(GL_VENDOR));

    return true;
}

void OpenGLContext::SwapBuffers()
{
    if (hdc)
    {
        ::SwapBuffers(hdc);
    }
}

void OpenGLContext::MakeCurrent()
{
    if (hdc && hglrc)
    {
        wglMakeCurrent(hdc, hglrc);
    }
}

void OpenGLContext::Cleanup()
{
    if (hglrc)
    {
        wglMakeCurrent(nullptr, nullptr);
        wglDeleteContext(hglrc);
        hglrc = nullptr;
    }

    if (hdc && hwnd)
    {
        ReleaseDC(hwnd, hdc);
        hdc = nullptr;
    }

    initialized = false;
}

bool OpenGLContext::SetupPixelFormat()
{
    PIXELFORMATDESCRIPTOR pfd = {};
    pfd.nSize = sizeof(PIXELFORMATDESCRIPTOR);
    pfd.nVersion = 1;
    pfd.dwFlags = PFD_DRAW_TO_WINDOW | PFD_SUPPORT_OPENGL | PFD_DOUBLEBUFFER;
    pfd.iPixelType = PFD_TYPE_RGBA;
    pfd.cColorBits = 32;
    pfd.cDepthBits = 24;
    pfd.cStencilBits = 8;
    pfd.iLayerType = PFD_MAIN_PLANE;

    int pixelFormat = ChoosePixelFormat(hdc, &pfd);
    if (pixelFormat == 0)
    {
        std::cerr << "Failed to choose pixel format" << std::endl;
        return false;
    }

    if (!SetPixelFormat(hdc, pixelFormat, &pfd))
    {
        std::cerr << "Failed to set pixel format" << std::endl;
        return false;
    }

    return true;
}


================================================================================
FILE: src\platform\OpenGLContext.h
================================================================================

#ifndef OPENGL_CONTEXT_H
#define OPENGL_CONTEXT_H

#include <windows.h>
#include <gl/GL.h>

/**
 * @brief Manages OpenGL context creation and management for Windows
 */
class OpenGLContext
{
public:
    OpenGLContext();
    ~OpenGLContext();

    bool Initialize(HWND hwnd);
    void SwapBuffers();
    void MakeCurrent();
    void Cleanup();

    bool IsInitialized() const { return initialized; }

private:
    HWND hwnd;
    HDC hdc;
    HGLRC hglrc;
    bool initialized;

    bool SetupPixelFormat();
};

#endif



================================================================================
FILE: src\platform\OpenGLRenderer.cpp
================================================================================

#include "OpenGLRenderer.h"
#include <iostream>
#include <cmath>
#include "../debug.h"

OpenGLRenderer::OpenGLRenderer()
    : initialized(false)
{
}

OpenGLRenderer::~OpenGLRenderer()
{
}

bool OpenGLRenderer::Initialize()
{
    DEBUG_LOG("OpenGLRenderer: Initializing...");

    // Basic OpenGL setup
    glEnable(GL_DEPTH_TEST);
    glEnable(GL_BLEND);
    glBlendFunc(GL_SRC_ALPHA, GL_ONE_MINUS_SRC_ALPHA);

    // Get OpenGL version info for debugging
    const char *version = (const char *)glGetString(GL_VERSION);
    const char *vendor = (const char *)glGetString(GL_VENDOR);
    const char *renderer = (const char *)glGetString(GL_RENDERER);

    DEBUG_LOG("OpenGL Version: " << (version ? version : "Unknown"));
    DEBUG_LOG("OpenGL Vendor: " << (vendor ? vendor : "Unknown"));
    DEBUG_LOG("OpenGL Renderer: " << (renderer ? renderer : "Unknown"));

    // Set up clear color to help identify when rendering is occurring
    glClearColor(0.1f, 0.2f, 0.3f, 1.0f); // Dark blue-ish background

    // Load default shader
    if (!LoadDefaultShader())
    {
        DEBUG_LOG("Warning: Failed to load default shader, using fixed pipeline");
    }

    // Enable wire frame rendering for debugging visibility
    // glPolygonMode(GL_FRONT_AND_BACK, GL_LINE);

    initialized = true;
    DEBUG_LOG("OpenGLRenderer: Initialization complete");
    return true;
}

void OpenGLRenderer::Clear()
{
    glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);
}

void OpenGLRenderer::BeginFrame()
{
    Clear();

    // Debug info - helps see if OpenGL is actually working
    static int frameCount = 0;
    if (frameCount++ % 300 == 0)
    {
        DEBUG_LOG("OpenGLRenderer: Beginning frame #" << frameCount);
        DEBUG_LOG("OpenGL context active: " << (glGetError() == GL_NO_ERROR ? "YES" : "NO"));
    }

    // Use default shader if available
    UseDefaultShader();
}

void OpenGLRenderer::EndFrame()
{
    // Frame complete - caller handles buffer swapping
}

void OpenGLRenderer::SetupCamera(float fov, float aspect, float nearPlane, float farPlane)
{
    glMatrixMode(GL_PROJECTION);
    glLoadIdentity();

    // Simple perspective projection using basic OpenGL functions
    float fH = tan(fov / 360.0f * 3.14159f) * nearPlane;
    float fW = fH * aspect;
    glFrustum(-fW, fW, -fH, fH, nearPlane, farPlane);
}

void OpenGLRenderer::SetCameraView(float eyeX, float eyeY, float eyeZ,
                                   float centerX, float centerY, float centerZ,
                                   float upX, float upY, float upZ)
{
    glMatrixMode(GL_MODELVIEW);
    glLoadIdentity();

    // Debug output to track camera position
    static int frameCount = 0;
    if (frameCount++ % 300 == 0)
    { // Log every 300 frames
        DEBUG_LOG("OpenGLRenderer: Camera position (" << eyeX << ", " << eyeY << ", " << eyeZ << ")");
        DEBUG_LOG("OpenGLRenderer: Camera target (" << centerX << ", " << centerY << ", " << centerZ << ")");
    }

    // Properly set up a look-at matrix
    // Calculate forward vector (direction from eye to center)
    float forwardX = centerX - eyeX;
    float forwardY = centerY - eyeY;
    float forwardZ = centerZ - eyeZ;

    // Normalize forward vector
    float forwardLength = sqrt(forwardX * forwardX + forwardY * forwardY + forwardZ * forwardZ);
    if (forwardLength < 0.0001f)
    {
        // Prevent division by zero
        forwardX = 0.0f;
        forwardY = 0.0f;
        forwardZ = -1.0f; // Default forward is -Z in OpenGL
    }
    else
    {
        forwardX /= forwardLength;
        forwardY /= forwardLength;
        forwardZ /= forwardLength;
    }

    // Manual implementation of "look at" functionality since we don't have gluLookAt
    // Step 1: Calculate the right vector as the cross product of up and forward
    float rightX = upY * forwardZ - upZ * forwardY;
    float rightY = upZ * forwardX - upX * forwardZ;
    float rightZ = upX * forwardY - upY * forwardX;

    // Normalize the right vector
    float rightLength = sqrt(rightX * rightX + rightY * rightY + rightZ * rightZ);
    if (rightLength > 0.0001f)
    {
        rightX /= rightLength;
        rightY /= rightLength;
        rightZ /= rightLength;
    }

    // Step 2: Recalculate the up vector to make sure it's perpendicular to both forward and right
    float newUpX = forwardY * rightZ - forwardZ * rightY;
    float newUpY = forwardZ * rightX - forwardX * rightZ;
    float newUpZ = forwardX * rightY - forwardY * rightX;

    // Step 3: Create a view matrix using these vectors
    float viewMatrix[16] = {
        rightX, newUpX, -forwardX, 0.0f,
        rightY, newUpY, -forwardY, 0.0f,
        rightZ, newUpZ, -forwardZ, 0.0f,
        -(rightX * eyeX + rightY * eyeY + rightZ * eyeZ),
        -(newUpX * eyeX + newUpY * eyeY + newUpZ * eyeZ),
        forwardX * eyeX + forwardY * eyeY + forwardZ * eyeZ,
        1.0f};

    // Apply the view matrix
    glMultMatrixf(viewMatrix);
}

void OpenGLRenderer::DrawSphere(float x, float y, float z, float radius, float r, float g, float b)
{
    // Debug output to verify the renderer is being called
    static int sphereCount = 0;
    if (sphereCount++ % 100 == 0)
    { // Only print every 100th sphere to avoid spam
        DEBUG_LOG("OpenGLRenderer: Drawing sphere at (" << x << ", " << y << ", " << z
                                                        << ") radius=" << radius << " color=(" << r << ", " << g << ", " << b << ")");
    }

    glPushMatrix();
    glTranslatef(x, y, z);

    glColor3f(r, g, b);

    // Draw a simple wireframe sphere using basic OpenGL
    DrawWireSphere(radius, 16);

    // Also draw a solid sphere with lower alpha for better visibility
    glEnable(GL_BLEND);
    glColor4f(r, g, b, 0.3f);
    DrawSolidSphere(radius * 0.95f, 12);

    glPopMatrix();
}

void OpenGLRenderer::DrawText2D(float x, float y, const std::string &text, float r, float g, float b)
{
    // For now, skip text rendering in OpenGL - this requires font texture loading
    // which is complex. We'll add this later when implementing proper text rendering
}

void OpenGLRenderer::DrawWireSphere(float radius, int segments)
{
    glBegin(GL_LINES);

    // Draw longitude lines
    for (int i = 0; i < segments; i++)
    {
        float theta1 = i * 2.0f * 3.14159f / segments;
        float theta2 = (i + 1) * 2.0f * 3.14159f / segments;

        for (int j = 0; j < segments; j++)
        {
            float phi = j * 3.14159f / segments;

            float x1 = radius * sin(phi) * cos(theta1);
            float y1 = radius * cos(phi);
            float z1 = radius * sin(phi) * sin(theta1);

            float x2 = radius * sin(phi) * cos(theta2);
            float y2 = radius * cos(phi);
            float z2 = radius * sin(phi) * sin(theta2);

            glVertex3f(x1, y1, z1);
            glVertex3f(x2, y2, z2);
        }
    }

    // Draw latitude lines
    for (int i = 0; i < segments; i++)
    {
        float phi1 = i * 3.14159f / segments;
        float phi2 = (i + 1) * 3.14159f / segments;

        for (int j = 0; j < segments; j++)
        {
            float theta = j * 2.0f * 3.14159f / segments;

            float x1 = radius * sin(phi1) * cos(theta);
            float y1 = radius * cos(phi1);
            float z1 = radius * sin(phi1) * sin(theta);

            float x2 = radius * sin(phi2) * cos(theta);
            float y2 = radius * cos(phi2);
            float z2 = radius * sin(phi2) * sin(theta);

            glVertex3f(x1, y1, z1);
            glVertex3f(x2, y2, z2);
        }
    }

    glEnd();
}

void OpenGLRenderer::DrawSolidSphere(float radius, int segments)
{
    // Draw solid sphere with triangles
    for (int j = 0; j < segments; j++)
    {
        float phi1 = j * 3.14159f / segments;
        float phi2 = (j + 1) * 3.14159f / segments;

        glBegin(GL_TRIANGLE_STRIP);
        for (int i = 0; i <= segments; i++)
        {
            float theta = i * 2.0f * 3.14159f / segments;

            float x1 = radius * sin(phi1) * cos(theta);
            float y1 = radius * cos(phi1);
            float z1 = radius * sin(phi1) * sin(theta);

            float x2 = radius * sin(phi2) * cos(theta);
            float y2 = radius * cos(phi2);
            float z2 = radius * sin(phi2) * sin(theta);

            // First vertex
            glVertex3f(x1, y1, z1);

            // Second vertex
            glVertex3f(x2, y2, z2);
        }
        glEnd();
    }
}

bool OpenGLRenderer::LoadDefaultShader()
{
    // Create a simple default shader for basic rendering
    defaultShader.id = "default";

    // Simple vertex shader that just transforms vertices
    defaultShader.vertexSource = R"(
#version 330 core
layout (location = 0) in vec3 aPos;

uniform mat4 uProjection;
uniform mat4 uView;
uniform mat4 uModel;

void main()
{
    gl_Position = uProjection * uView * uModel * vec4(aPos, 1.0);
}
)";

    // Simple fragment shader that uses a uniform color
    defaultShader.fragmentSource = R"(
#version 330 core
out vec4 FragColor;

uniform vec3 uColor;

void main()
{
    FragColor = vec4(uColor, 1.0);
}
)";

    return shaderCompiler.CompileShader(defaultShader);
}

void OpenGLRenderer::UseDefaultShader()
{
    if (defaultShader.isCompiled)
    {
        shaderCompiler.UseShader(defaultShader.programId);
    }
}


================================================================================
FILE: src\platform\OpenGLRenderer.h
================================================================================

#ifndef OPENGL_RENDERER_H
#define OPENGL_RENDERER_H

#include <windows.h>
#include <gl/GL.h>
#include <string>
#include <vector>
#include "ShaderCompiler.h"
#include "assets/ShaderAsset.h"

/**
 * @brief Basic OpenGL renderer for entities and primitives
 */
class OpenGLRenderer
{
public:
    OpenGLRenderer();
    ~OpenGLRenderer();

    bool Initialize();
    void Clear();
    void BeginFrame();
    void EndFrame();

    // Shader management
    bool LoadDefaultShader();
    void UseDefaultShader();

    // Simple primitive rendering
    void DrawSphere(float x, float y, float z, float radius, float r, float g, float b);
    void DrawText2D(float x, float y, const std::string &text, float r, float g, float b);

    // 3D camera setup
    void SetupCamera(float fov, float aspect, float nearPlane, float farPlane);
    void SetCameraView(float eyeX, float eyeY, float eyeZ,
                       float centerX, float centerY, float centerZ,
                       float upX, float upY, float upZ);

private:
    bool initialized;
    ShaderCompiler shaderCompiler;
    ShaderAsset defaultShader;

    void DrawWireSphere(float radius, int segments);
    void DrawSolidSphere(float radius, int segments);
};

#endif



================================================================================
FILE: src\platform\ShaderCompiler.cpp
================================================================================

#include "ShaderCompiler.h"
#include <iostream>
#include "../debug.h"

// Define GLchar if not defined
#ifndef GLchar
typedef char GLchar;
#endif

// We need OpenGL extensions for modern shader functions
// For now, define them manually since we're using basic OpenGL
#ifndef GL_VERTEX_SHADER
#define GL_VERTEX_SHADER 0x8B31
#endif
#ifndef GL_FRAGMENT_SHADER
#define GL_FRAGMENT_SHADER 0x8B30
#endif
#ifndef GL_COMPILE_STATUS
#define GL_COMPILE_STATUS 0x8B81
#endif
#ifndef GL_LINK_STATUS
#define GL_LINK_STATUS 0x8B82
#endif

// Function pointers for OpenGL shader functions
typedef void(APIENTRY *PFNGLATTACHSHADERPROC)(GLuint program, GLuint shader);
typedef void(APIENTRY *PFNGLCOMPILESHADERPROC)(GLuint shader);
typedef GLuint(APIENTRY *PFNGLCREATEPROGRAMPROC)(void);
typedef GLuint(APIENTRY *PFNGLCREATESHADERPROC)(GLenum type);
typedef void(APIENTRY *PFNGLDELETESHADERPROC)(GLuint shader);
typedef void(APIENTRY *PFNGLGETSHADERIVPROC)(GLuint shader, GLenum pname, GLint *params);
typedef void(APIENTRY *PFNGLGETSHADERINFOLOGPROC)(GLuint shader, GLsizei bufSize, GLsizei *length, GLchar *infoLog);
typedef void(APIENTRY *PFNGLLINKPROGRAMPROC)(GLuint program);
typedef void(APIENTRY *PFNGLSHADERSOURCEPROC)(GLuint shader, GLsizei count, const GLchar *const *string, const GLint *length);
typedef void(APIENTRY *PFNGLUSEPROGRAMPROC)(GLuint program);
typedef GLint(APIENTRY *PFNGLGETUNIFORMLOCATIONPROC)(GLuint program, const GLchar *name);
typedef void(APIENTRY *PFNGLUNIFORM1FPROC)(GLint location, GLfloat v0);
typedef void(APIENTRY *PFNGLUNIFORM3FPROC)(GLint location, GLfloat v0, GLfloat v1, GLfloat v2);
typedef void(APIENTRY *PFNGLUNIFORMMATRIX4FVPROC)(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);

// Function pointers
static PFNGLATTACHSHADERPROC glAttachShader = nullptr;
static PFNGLCOMPILESHADERPROC glCompileShader = nullptr;
static PFNGLCREATEPROGRAMPROC glCreateProgram = nullptr;
static PFNGLCREATESHADERPROC glCreateShader = nullptr;
static PFNGLDELETESHADERPROC glDeleteShader = nullptr;
static PFNGLGETSHADERIVPROC glGetShaderiv = nullptr;
static PFNGLGETSHADERINFOLOGPROC glGetShaderInfoLog = nullptr;
static PFNGLLINKPROGRAMPROC glLinkProgram = nullptr;
static PFNGLSHADERSOURCEPROC glShaderSource = nullptr;
static PFNGLUSEPROGRAMPROC glUseProgram = nullptr;
static PFNGLGETUNIFORMLOCATIONPROC glGetUniformLocation = nullptr;
static PFNGLUNIFORM1FPROC glUniform1f = nullptr;
static PFNGLUNIFORM3FPROC glUniform3f = nullptr;
static PFNGLUNIFORMMATRIX4FVPROC glUniformMatrix4fv = nullptr;

ShaderCompiler::ShaderCompiler()
{
    // Load OpenGL extensions for shader support
    glAttachShader = (PFNGLATTACHSHADERPROC)wglGetProcAddress("glAttachShader");
    glCompileShader = (PFNGLCOMPILESHADERPROC)wglGetProcAddress("glCompileShader");
    glCreateProgram = (PFNGLCREATEPROGRAMPROC)wglGetProcAddress("glCreateProgram");
    glCreateShader = (PFNGLCREATESHADERPROC)wglGetProcAddress("glCreateShader");
    glDeleteShader = (PFNGLDELETESHADERPROC)wglGetProcAddress("glDeleteShader");
    glGetShaderiv = (PFNGLGETSHADERIVPROC)wglGetProcAddress("glGetShaderiv");
    glGetShaderInfoLog = (PFNGLGETSHADERINFOLOGPROC)wglGetProcAddress("glGetShaderInfoLog");
    glLinkProgram = (PFNGLLINKPROGRAMPROC)wglGetProcAddress("glLinkProgram");
    glShaderSource = (PFNGLSHADERSOURCEPROC)wglGetProcAddress("glShaderSource");
    glUseProgram = (PFNGLUSEPROGRAMPROC)wglGetProcAddress("glUseProgram");
    glGetUniformLocation = (PFNGLGETUNIFORMLOCATIONPROC)wglGetProcAddress("glGetUniformLocation");
    glUniform1f = (PFNGLUNIFORM1FPROC)wglGetProcAddress("glUniform1f");
    glUniform3f = (PFNGLUNIFORM3FPROC)wglGetProcAddress("glUniform3f");
    glUniformMatrix4fv = (PFNGLUNIFORMMATRIX4FVPROC)wglGetProcAddress("glUniformMatrix4fv");

    // Check if critical functions are available
    if (!glCreateShader || !glCreateProgram)
    {
        DEBUG_LOG("Warning: OpenGL shader extensions not available - shader compilation disabled");
    }
    else
    {
        DEBUG_LOG("OpenGL shader compiler initialized successfully");
    }
}

ShaderCompiler::~ShaderCompiler()
{
}

bool ShaderCompiler::CompileShader(ShaderAsset &shaderAsset)
{
    if (!glCreateShader || !glCreateProgram)
    {
        shaderAsset.compilationErrors = "OpenGL shader extensions not available";
        shaderAsset.isCompiled = false;
        return false;
    }

    // Compile vertex shader
    unsigned int vertexShader = CompileShaderSource(shaderAsset.vertexSource, GL_VERTEX_SHADER);
    if (vertexShader == 0)
    {
        shaderAsset.compilationErrors = "Failed to compile vertex shader";
        shaderAsset.isCompiled = false;
        return false;
    }

    // Compile fragment shader
    unsigned int fragmentShader = CompileShaderSource(shaderAsset.fragmentSource, GL_FRAGMENT_SHADER);
    if (fragmentShader == 0)
    {
        glDeleteShader(vertexShader);
        shaderAsset.compilationErrors = "Failed to compile fragment shader";
        shaderAsset.isCompiled = false;
        return false;
    }

    // Link program
    unsigned int program = LinkProgram(vertexShader, fragmentShader);
    if (program == 0)
    {
        glDeleteShader(vertexShader);
        glDeleteShader(fragmentShader);
        shaderAsset.compilationErrors = "Failed to link shader program";
        shaderAsset.isCompiled = false;
        return false;
    }

    // Cleanup individual shaders
    glDeleteShader(vertexShader);
    glDeleteShader(fragmentShader);

    shaderAsset.programId = program;
    shaderAsset.isCompiled = true;
    shaderAsset.compilationErrors.clear();

    DEBUG_LOG("Shader compiled successfully: " << shaderAsset.id);
    return true;
}

void ShaderCompiler::UseShader(unsigned int programId)
{
    if (glUseProgram && programId > 0)
    {
        glUseProgram(programId);
    }
}

void ShaderCompiler::SetFloat(unsigned int programId, const std::string &name, float value)
{
    if (glUniform1f)
    {
        int location = GetUniformLocation(programId, name);
        if (location >= 0)
        {
            glUniform1f(location, value);
        }
    }
}

void ShaderCompiler::SetVec3(unsigned int programId, const std::string &name, float x, float y, float z)
{
    if (glUniform3f)
    {
        int location = GetUniformLocation(programId, name);
        if (location >= 0)
        {
            glUniform3f(location, x, y, z);
        }
    }
}

void ShaderCompiler::SetMat4(unsigned int programId, const std::string &name, const float *matrix)
{
    if (glUniformMatrix4fv)
    {
        int location = GetUniformLocation(programId, name);
        if (location >= 0)
        {
            glUniformMatrix4fv(location, 1, GL_FALSE, matrix);
        }
    }
}

unsigned int ShaderCompiler::CompileShaderSource(const std::string &source, unsigned int shaderType)
{
    unsigned int shader = glCreateShader(shaderType);
    const char *src = source.c_str();
    const char *const *srcPtr = &src;
    glShaderSource(shader, 1, (const GLchar *const *)srcPtr, nullptr);
    glCompileShader(shader);

    if (!CheckCompileErrors(shader, shaderType == GL_VERTEX_SHADER ? "VERTEX" : "FRAGMENT"))
    {
        glDeleteShader(shader);
        return 0;
    }

    return shader;
}

unsigned int ShaderCompiler::LinkProgram(unsigned int vertexShader, unsigned int fragmentShader)
{
    unsigned int program = glCreateProgram();
    glAttachShader(program, vertexShader);
    glAttachShader(program, fragmentShader);
    glLinkProgram(program);

    if (!CheckCompileErrors(program, "PROGRAM"))
    {
        return 0;
    }

    return program;
}

bool ShaderCompiler::CheckCompileErrors(unsigned int shader, const std::string &type)
{
    int success;
    char infoLog[1024];

    if (type != "PROGRAM")
    {
        glGetShaderiv(shader, GL_COMPILE_STATUS, &success);
        if (!success)
        {
            if (glGetShaderInfoLog)
            {
                glGetShaderInfoLog(shader, 1024, nullptr, (GLchar *)infoLog);
                std::cerr << "Shader compilation error of type: " << type << "\n"
                          << infoLog << std::endl;
            }
            return false;
        }
    }
    else
    {
        // For program linking, we would need glGetProgramiv and glGetProgramInfoLog
        // For now, assume success since we're using basic functionality
    }

    return true;
}

int ShaderCompiler::GetUniformLocation(unsigned int programId, const std::string &name)
{
    if (glGetUniformLocation)
    {
        return glGetUniformLocation(programId, (const GLchar *)name.c_str());
    }
    return -1;
}


================================================================================
FILE: src\platform\ShaderCompiler.h
================================================================================

#ifndef SHADER_COMPILER_H
#define SHADER_COMPILER_H

#include <windows.h>
#include <gl/GL.h>
#include <string>
#include "assets/ShaderAsset.h"

/**
 * @brief Compiles GLSL shaders into OpenGL programs
 */
class ShaderCompiler
{
public:
    ShaderCompiler();
    ~ShaderCompiler();

    /**
     * @brief Compile a shader asset into an OpenGL program
     * @param shaderAsset The shader asset to compile
     * @return true if compilation successful, false otherwise
     */
    bool CompileShader(ShaderAsset &shaderAsset);

    /**
     * @brief Use a compiled shader program
     * @param programId OpenGL program ID to use
     */
    void UseShader(unsigned int programId);

    /**
     * @brief Set uniform values for a shader
     */
    void SetFloat(unsigned int programId, const std::string &name, float value);
    void SetVec3(unsigned int programId, const std::string &name, float x, float y, float z);
    void SetMat4(unsigned int programId, const std::string &name, const float *matrix);

private:
    unsigned int CompileShaderSource(const std::string &source, unsigned int shaderType);
    unsigned int LinkProgram(unsigned int vertexShader, unsigned int fragmentShader);
    bool CheckCompileErrors(unsigned int shader, const std::string &type);
    int GetUniformLocation(unsigned int programId, const std::string &name);
};

#endif



================================================================================
FILE: src\platform\WinInputDevice.cpp
================================================================================

/**
 * @file WinInputDevice.cpp
 * @brief Implementation of Windows-specific input device handling.
 */

#include "WinInputDevice.h"

/**
 * @brief Poll Windows input devices for new input events.
 *
 * This is currently a stub implementation. A full implementation would:
 * - Process Windows messages from the message queue
 * - Update keyboard state using GetAsyncKeyState or similar
 * - Handle mouse input and cursor position
 * - Process raw input for game controllers
 * - Update internal input state for querying by other systems
 */
void WinInputDevice::poll()
{
    // Stub: poll Windows input
    // TODO: Implement Windows message processing and input state updates
}




================================================================================
FILE: src\platform\WinInputDevice.h
================================================================================

/**
 * @file WinInputDevice.h
 * @brief Windows-specific implementation of the input device interface.
 *
 * This file implements the IInputDevice interface for Windows platforms,
 * providing input handling through the Windows API. It manages keyboard,
 * mouse, and other input devices available on Windows systems.
 */

#ifndef WININPUTDEVICE_H
#define WININPUTDEVICE_H

#include "IInputDevice.h"

/**
 * @class WinInputDevice
 * @brief Windows platform implementation of input device handling.
 *
 * This class provides Windows-specific input device management using
 * the Win32 API. It handles polling Windows messages, keyboard state,
 * mouse input, and other Windows-specific input sources.
 */
class WinInputDevice : public IInputDevice
{
public:
    /**
     * @brief Poll Windows input devices for new input events.
     *
     * Processes Windows messages and updates the internal input state.
     * This method should be called regularly in the application's main loop
     * to ensure responsive input handling.
     */
    void poll() override;
};

#endif



================================================================================
FILE: src\procedural\ProceduralMeshGenerators.cpp
================================================================================

#include "ProceduralMeshGenerators.h"
#include <map>
#include <cmath>
#include <random>
#include <algorithm>

// IcoSphereGenerator Implementation
ProceduralMesh IcoSphereGenerator::generate(float radius, int subdivisions, bool flatShading)
{
    ProceduralMesh mesh;
    std::vector<Vector3D> tempVertices;

    // Create initial icosahedron vertices
    float t = (1.0f + std::sqrt(5.0f)) / 2.0f; // Golden ratio

    addVertex(tempVertices, Vector3D(-1, t, 0));
    addVertex(tempVertices, Vector3D(1, t, 0));
    addVertex(tempVertices, Vector3D(-1, -t, 0));
    addVertex(tempVertices, Vector3D(1, -t, 0));

    addVertex(tempVertices, Vector3D(0, -1, t));
    addVertex(tempVertices, Vector3D(0, 1, t));
    addVertex(tempVertices, Vector3D(0, -1, -t));
    addVertex(tempVertices, Vector3D(0, 1, -t));

    addVertex(tempVertices, Vector3D(t, 0, -1));
    addVertex(tempVertices, Vector3D(t, 0, 1));
    addVertex(tempVertices, Vector3D(-t, 0, -1));
    addVertex(tempVertices, Vector3D(-t, 0, 1));

    // Create initial faces
    std::vector<std::array<int, 3>> faces = {
        {0, 11, 5}, {0, 5, 1}, {0, 1, 7}, {0, 7, 10}, {0, 10, 11}, {1, 5, 9}, {5, 11, 4}, {11, 10, 2}, {10, 7, 6}, {7, 1, 8}, {3, 9, 4}, {3, 4, 2}, {3, 2, 6}, {3, 6, 8}, {3, 8, 9}, {4, 9, 5}, {2, 4, 11}, {6, 2, 10}, {8, 6, 7}, {9, 8, 1}};

    // Subdivide faces
    std::map<long, int> middlePointIndexCache;
    for (int i = 0 i < subdivisions; i++)
    {
        std::vector<std::array<int, 3>> newFaces;

        for (const auto &face : faces)
        {
            int a = getMiddlePoint(face[0], face[1], tempVertices, middlePointIndexCache, radius);
            int b = getMiddlePoint(face[1], face[2], tempVertices, middlePointIndexCache, radius);
            int c = getMiddlePoint(face[2], face[0], tempVertices, middlePointIndexCache, radius);

            newFaces.push_back({face[0], a, c});
            newFaces.push_back({face[1], b, a});
            newFaces.push_back({face[2], c, b});
            newFaces.push_back({a, b, c});
        }

        faces = newFaces;
    }

    // Convert to final mesh format
    if (flatShading)
    {
        // Duplicate vertices for flat shading
        for (const auto &face : faces)
        {
            Vector3D v1 = tempVertices[face[0]] * radius;
            Vector3D v2 = tempVertices[face[1]] * radius;
            Vector3D v3 = tempVertices[face[2]] * radius;

            Vector3D normal = (v2 - v1).cross(v3 - v1).normalized();

            float u1, v1_uv, u2, v2_uv, u3, v3_uv;
            calculateUV(v1, u1, v1_uv);
            calculateUV(v2, u2, v2_uv);
            calculateUV(v3, u3, v3_uv);

            int baseIndex = mesh.vertices.size();
            mesh.vertices.emplace_back(v1, normal, u1, v1_uv);
            mesh.vertices.emplace_back(v2, normal, u2, v2_uv);
            mesh.vertices.emplace_back(v3, normal, u3, v3_uv);

            mesh.indices.push_back(baseIndex);
            mesh.indices.push_back(baseIndex + 1);
            mesh.indices.push_back(baseIndex + 2);
        }
    }
    else
    {
        // Shared vertices for smooth shading
        for (const auto &vertex : tempVertices)
        {
            Vector3D pos = vertex * radius;
            Vector3D normal = vertex; // For sphere, normal = normalized position
            float u, v;
            calculateUV(pos, u, v);
            mesh.vertices.emplace_back(pos, normal, u, v);
        }

        for (const auto &face : faces)
        {
            mesh.indices.push_back(face[0]);
            mesh.indices.push_back(face[1]);
            mesh.indices.push_back(face[2]);
        }
    }

    return mesh;
}

void IcoSphereGenerator::addVertex(std::vector<Vector3D> &vertices, const Vector3D &v)
{
    vertices.push_back(v.normalized());
}

int IcoSphereGenerator::getMiddlePoint(int p1, int p2, std::vector<Vector3D> &vertices,
                                       std::map<long, int> &cache, float radius)
{
    bool firstIsSmaller = p1 < p2;
    long smallerIndex = firstIsSmaller ? p1 : p2;
    long greaterIndex = firstIsSmaller ? p2 : p1;
    long key = (smallerIndex << 32) + greaterIndex;

    auto found = cache.find(key);
    if (found != cache.end())
    {
        return found->second;
    }

    Vector3D point1 = vertices[p1];
    Vector3D point2 = vertices[p2];
    Vector3D middle = Vector3D(
                          (point1.x + point2.x) / 2.0f,
                          (point1.y + point2.y) / 2.0f,
                          (point1.z + point2.z) / 2.0f)
                          .normalized();

    vertices.push_back(middle);
    int index = vertices.size() - 1;
    cache[key] = index;

    return index;
}

void IcoSphereGenerator::calculateUV(const Vector3D &vertex, float &u, float &v)
{
    u = std::atan2(vertex.x, vertex.z) / (2.0f * M_PI) + 0.5f;
    v = std::asin(vertex.y) / M_PI + 0.5f;
}

// CubeGenerator Implementation
ProceduralMesh CubeGenerator::generate(float size, bool flatShading)
{
    ProceduralMesh mesh;
    float half = size * 0.5f;

    // Define cube vertices
    std::vector<Vector3D> positions = {
        // Front face
        Vector3D(-half, -half, half), Vector3D(half, -half, half),
        Vector3D(half, half, half), Vector3D(-half, half, half),
        // Back face
        Vector3D(-half, -half, -half), Vector3D(-half, half, -half),
        Vector3D(half, half, -half), Vector3D(half, -half, -half),
        // Top face
        Vector3D(-half, half, -half), Vector3D(-half, half, half),
        Vector3D(half, half, half), Vector3D(half, half, -half),
        // Bottom face
        Vector3D(-half, -half, -half), Vector3D(half, -half, -half),
        Vector3D(half, -half, half), Vector3D(-half, -half, half),
        // Right face
        Vector3D(half, -half, -half), Vector3D(half, half, -half),
        Vector3D(half, half, half), Vector3D(half, -half, half),
        // Left face
        Vector3D(-half, -half, -half), Vector3D(-half, -half, half),
        Vector3D(-half, half, half), Vector3D(-half, half, -half)};

    std::vector<Vector3D> normals = {
        Vector3D(0, 0, 1), Vector3D(0, 0, -1), Vector3D(0, 1, 0),
        Vector3D(0, -1, 0), Vector3D(1, 0, 0), Vector3D(-1, 0, 0)};

    // Add faces
    for (int face = 0 face < 6; face++)
    {
        int baseIndex = face * 4;

        if (flatShading)
        {
            // Each face gets its own vertices
            int meshBaseIndex = mesh.vertices.size();

            for (int i = 0 i < 4; i++)
            {
                float u = (i == 1 || i == 2) ? 1.0f : 0.0f;
                float v = (i == 2 || i == 3) ? 1.0f : 0.0f;
                mesh.vertices.emplace_back(positions[baseIndex + i], normals[face], u, v);
            }

            // Two triangles per face
            mesh.indices.push_back(meshBaseIndex);
            mesh.indices.push_back(meshBaseIndex + 1);
            mesh.indices.push_back(meshBaseIndex + 2);

            mesh.indices.push_back(meshBaseIndex);
            mesh.indices.push_back(meshBaseIndex + 2);
            mesh.indices.push_back(meshBaseIndex + 3);
        }
    }

    return mesh;
}

// ProceduralAircraftGenerator Implementation
ProceduralMesh ProceduralAircraftGenerator::generate(float length, int fuselageSegments,
                                                     float wingSpan, float tailSpan, bool flatShading)
{
    ProceduralMesh mesh;

    addFuselage(mesh, length, fuselageSegments);
    addWings(mesh, wingSpan, length * 0.6f);
    addTail(mesh, tailSpan, length * 0.3f);

    return mesh;
}

void ProceduralAircraftGenerator::addFuselage(ProceduralMesh &mesh, float length, int segments)
{
    float halfLength = length * 0.5f;
    float radius = length * 0.05f; // Thin fuselage

    // Simple tapered cylinder
    for (int i = 0 i <= segments; i++)
    {
        float t = static_cast<float>(i) / segments;
        float z = -halfLength + t * length;
        float currentRadius = radius * (1.0f - std::abs(2.0f * t - 1.0f) * 0.7f); // Taper at ends

        // Add circular cross-section
        int sides = 8;
        for (int j = 0 j < sides; j++)
        {
            float angle = 2.0f * M_PI * j / sides;
            float x = currentRadius * std::cos(angle);
            float y = currentRadius * std::sin(angle);

            Vector3D pos(x, y, z);
            Vector3D normal = Vector3D(x, y, 0).normalized();

            mesh.vertices.emplace_back(pos, normal, static_cast<float>(j) / sides, t);
        }
    }

    // Add triangles between segments
    for (int i = 0 i < segments; i++)
    {
        for (int j = 0 j < 8; j++)
        {
            int current = i * 8 + j;
            int next = i * 8 + ((j + 1) % 8);
            int currentNext = (i + 1) * 8 + j;
            int nextNext = (i + 1) * 8 + ((j + 1) % 8);

            // Two triangles per quad
            mesh.indices.push_back(current);
            mesh.indices.push_back(currentNext);
            mesh.indices.push_back(next);

            mesh.indices.push_back(next);
            mesh.indices.push_back(currentNext);
            mesh.indices.push_back(nextNext);
        }
    }
}

void ProceduralAircraftGenerator::addWings(ProceduralMesh &mesh, float span, float length)
{
    float halfSpan = span * 0.5f;
    float halfLength = length * 0.5f;
    float thickness = length * 0.02f;

    int baseIndex = mesh.vertices.size();

    // Wing vertices (simple rectangular wings)
    std::vector<Vector3D> wingVerts = {
        // Top surface
        Vector3D(-halfSpan, thickness, -halfLength), Vector3D(halfSpan, thickness, -halfLength),
        Vector3D(halfSpan, thickness, halfLength), Vector3D(-halfSpan, thickness, halfLength),
        // Bottom surface
        Vector3D(-halfSpan, -thickness, -halfLength), Vector3D(-halfSpan, -thickness, halfLength),
        Vector3D(halfSpan, -thickness, halfLength), Vector3D(halfSpan, -thickness, -halfLength)};

    Vector3D upNormal(0, 1, 0);
    Vector3D downNormal(0, -1, 0);

    // Add vertices
    for (int i = 0 i < 4; i++)
    {
        mesh.vertices.emplace_back(wingVerts[i], upNormal, i % 2, i / 2);
    }
    for (int i = 4 i < 8; i++)
    {
        mesh.vertices.emplace_back(wingVerts[i], downNormal, i % 2, (i - 4) / 2);
    }

    // Add triangles
    std::vector<int> indices = {
        // Top face
        0, 1, 2, 0, 2, 3,
        // Bottom face
        4, 6, 5, 4, 7, 6};

    for (int idx : indices)
    {
        mesh.indices.push_back(baseIndex + idx);
    }
}

void ProceduralAircraftGenerator::addTail(ProceduralMesh &mesh, float span, float length)
{
    // Similar to wings but smaller and positioned at rear
    float halfSpan = span * 0.5f;
    float halfLength = length * 0.5f;
    float thickness = length * 0.01f;
    float zOffset = length * 1.5f; // Position at rear

    int baseIndex = mesh.vertices.size();

    std::vector<Vector3D> tailVerts = {
        Vector3D(-halfSpan, thickness, zOffset - halfLength),
        Vector3D(halfSpan, thickness, zOffset - halfLength),
        Vector3D(halfSpan, thickness, zOffset + halfLength),
        Vector3D(-halfSpan, thickness, zOffset + halfLength),
        Vector3D(-halfSpan, -thickness, zOffset - halfLength),
        Vector3D(-halfSpan, -thickness, zOffset + halfLength),
        Vector3D(halfSpan, -thickness, zOffset + halfLength),
        Vector3D(halfSpan, -thickness, zOffset - halfLength)};

    Vector3D upNormal(0, 1, 0);
    Vector3D downNormal(0, -1, 0);

    for (int i = 0 i < 4; i++)
    {
        mesh.vertices.emplace_back(tailVerts[i], upNormal, i % 2, i / 2);
    }
    for (int i = 4 i < 8; i++)
    {
        mesh.vertices.emplace_back(tailVerts[i], downNormal, i % 2, (i - 4) / 2);
    }

    std::vector<int> indices = {
        0, 1, 2, 0, 2, 3,
        4, 6, 5, 4, 7, 6};

    for (int idx : indices)
    {
        mesh.indices.push_back(baseIndex + idx);
    }
}

// SphericalPatchDisplaceGenerator Implementation
ProceduralMesh SphericalPatchDisplaceGenerator::generate(float baseRadius, int subdivisions,
                                                         int patchCount, float minHeight,
                                                         float maxHeight, int seed)
{
    // Start with base icosphere
    ProceduralMesh baseMesh = IcoSphereGenerator::generate(baseRadius, subdivisions, true);

    // Setup random number generator
    std::mt19937 rng;
    if (seed == -1)
    {
        std::random_device rd;
        rng.seed(rd());
    }
    else
    {
        rng.seed(seed);
    }

    std::uniform_real_distribution<float> dist(-1.0f, 1.0f);
    std::uniform_real_distribution<float> heightDist(minHeight, maxHeight);

    // Generate random patch centers
    std::vector<Vector3D> patchCenters;
    std::vector<float> patchRadii;
    std::vector<float> patchHeights;

    for (int i = 0 i < patchCount; i++)
    {
        Vector3D center(dist(rng), dist(rng), dist(rng));
        center = center.normalized();
        patchCenters.push_back(center);
        patchRadii.push_back(0.2f + dist(rng) * 0.1f); // Radius between 0.1-0.3
        patchHeights.push_back(heightDist(rng));
    }

    // Displace vertices based on patches
    for (auto &vertex : baseMesh.vertices)
    {
        Vector3D originalPos = vertex.position.normalized() * baseRadius;
        float totalDisplacement = 0.0f;

        for (size_t i = 0 i < patchCenters.size() i++)
        {
            if (isInPatch(originalPos, patchCenters[i], patchRadii[i]))
            {
                float displacement = calculateDisplacement(originalPos, patchCenters[i],
                                                           patchRadii[i], 0.0f, patchHeights[i]);
                totalDisplacement += displacement;
            }
        }

        Vector3D direction = vertex.position.normalized();
        vertex.position = direction * (baseRadius + totalDisplacement);
        vertex.normal = direction; // Keep normal pointing outward
    }

    return baseMesh;
}

bool SphericalPatchDisplaceGenerator::isInPatch(const Vector3D &vertex, const Vector3D &patchCenter,
                                                float patchRadius)
{
    return vertex.normalized().dot(patchCenter) > std::cos(patchRadius);
}

float SphericalPatchDisplaceGenerator::calculateDisplacement(const Vector3D &vertex,
                                                             const Vector3D &patchCenter,
                                                             float patchRadius,
                                                             float minHeight, float maxHeight)
{
    float distance = std::acos(vertex.normalized().dot(patchCenter));
    float normalizedDistance = distance / patchRadius;

    if (normalizedDistance >= 1.0f)
        return 0.0f;

    // Smooth falloff using cosine
    float falloff = (std::cos(normalizedDistance * M_PI) + 1.0f) * 0.5f;
    return minHeight + (maxHeight - minHeight) * falloff;
}




================================================================================
FILE: src\procedural\ProceduralMeshGenerators.h
================================================================================

#pragma once
#include <vector>
#include <memory>
#include "../math/MathUtils.h"

/**
 * @file ProceduralMeshGenerators.h
 * @brief Collection of procedural mesh generation utilities.
 *
 * This file contains various mesh generators used for creating low-poly
 * geometry procedurally, including spheres, cubes, and aircraft meshes
 * for the voxel busy indicator scene.
 */

/**
 * @struct Vertex
 * @brief Basic vertex structure for procedural mesh generation.
 */
struct Vertex
{
    Vector3D position;
    Vector3D normal;
    float u, v; // UV coordinates

    Vertex(Vector3D pos = Vector3D(), Vector3D norm = Vector3D(), float texU = 0.0f, float texV = 0.0f)
        : position(pos), normal(norm), u(texU), v(texV) {}
};

/**
 * @struct ProceduralMesh
 * @brief Container for generated mesh data.
 */
struct ProceduralMesh
{
    std::vector<Vertex> vertices;
    std::vector<unsigned int> indices;

    ProceduralMesh() = default;

    void clear()
    {
        vertices.clear();
        indices.clear();
    }

    size_t getVertexCount() const { return vertices.size(); }
    size_t getTriangleCount() const { return indices.size() / 3; }
};

/**
 * @class IcoSphereGenerator
 * @brief Generates low-poly icospheres with flat shading.
 *
 * Creates spherical meshes using icosahedral subdivision for consistent
 * triangle distribution. Ideal for the voxel busy indicator globe.
 */
class IcoSphereGenerator
{
public:
    /**
     * @brief Generate an icosphere mesh.
     *
     * @param radius Radius of the sphere
     * @param subdivisions Number of subdivision levels (0-3 recommended)
     * @param flatShading Whether to use flat shading (duplicate vertices)
     * @return Generated mesh data
     */
    static ProceduralMesh generate(float radius = 1.0f, int subdivisions = 2, bool flatShading = true);

private:
    static void addVertex(std::vector<Vector3D> &vertices, const Vector3D &v);
    static int getMiddlePoint(int p1, int p2, std::vector<Vector3D> &vertices, std::map<long, int> &cache, float radius);
    static void calculateUV(const Vector3D &vertex, float &u, float &v);
};

/**
 * @class CubeGenerator
 * @brief Generates simple cube meshes with flat shading.
 *
 * Creates basic cube geometry for voxel clouds and contrail elements.
 */
class CubeGenerator
{
public:
    /**
     * @brief Generate a cube mesh.
     *
     * @param size Side length of the cube
     * @param flatShading Whether to use flat shading (separate faces)
     * @return Generated mesh data
     */
    static ProceduralMesh generate(float size = 1.0f, bool flatShading = true);

private:
    static void addQuad(ProceduralMesh &mesh,
                        const Vector3D &v1, const Vector3D &v2,
                        const Vector3D &v3, const Vector3D &v4,
                        const Vector3D &normal);
};

/**
 * @class ProceduralAircraftGenerator
 * @brief Generates low-poly aircraft meshes.
 *
 * Creates simple aircraft geometry with fuselage, wings, and tail
 * suitable for the busy indicator scene.
 */
class ProceduralAircraftGenerator
{
public:
    /**
     * @brief Generate an aircraft mesh.
     *
     * @param length Fuselage length
     * @param fuselageSegments Number of fuselage segments
     * @param wingSpan Wing span distance
     * @param tailSpan Tail span distance
     * @param flatShading Whether to use flat shading
     * @return Generated mesh data
     */
    static ProceduralMesh generate(float length = 0.25f,
                                   int fuselageSegments = 6,
                                   float wingSpan = 0.22f,
                                   float tailSpan = 0.12f,
                                   bool flatShading = true);

private:
    static void addFuselage(ProceduralMesh &mesh, float length, int segments);
    static void addWings(ProceduralMesh &mesh, float span, float length);
    static void addTail(ProceduralMesh &mesh, float span, float length);
};

/**
 * @class SphericalPatchDisplaceGenerator
 * @brief Generates displaced spherical patches for terrain bumps.
 *
 * Creates land masses and rock formations on the globe surface
 * by displacing spherical patches outward.
 */
class SphericalPatchDisplaceGenerator
{
public:
    /**
     * @brief Generate displaced spherical patches.
     *
     * @param baseRadius Base sphere radius
     * @param subdivisions Sphere subdivision level
     * @param patchCount Number of displacement patches
     * @param minHeight Minimum displacement height
     * @param maxHeight Maximum displacement height
     * @param seed Random seed (-1 for random)
     * @return Generated mesh data
     */
    static ProceduralMesh generate(float baseRadius = 1.0f,
                                   int subdivisions = 2,
                                   int patchCount = 24,
                                   float minHeight = 0.03f,
                                   float maxHeight = 0.06f,
                                   int seed = -1);

private:
    static bool isInPatch(const Vector3D &vertex, const Vector3D &patchCenter, float patchRadius);
    static float calculateDisplacement(const Vector3D &vertex, const Vector3D &patchCenter,
                                       float patchRadius, float minHeight, float maxHeight);
};



================================================================================
FILE: src\rendering\SceneRenderer.h
================================================================================

#pragma once

#include <string>
#include <vector>
#include <memory>
#include <GL/gl.h>
#include <windows.h>
#include "../core/AssetManager.h"
#include "../assets/AssetRegistry.h"
#include "../components/Transform.h"

/**
 * @brief Simple class to render a scene with multiple objects
 */
class SceneRenderer
{
public:
    struct RenderObject
    {
        std::string meshId;
        std::string materialId;
        Components::Transform transform;
        float rotationX = 0.0f;
        float rotationY = 0.0f;
        float rotationZ = 0.0f;
        float rotationSpeedX = 0.0f;
        float rotationSpeedY = 0.0f;
        float rotationSpeedZ = 0.0f;
    };

    SceneRenderer() = default;
    ~SceneRenderer() = default;

    // Initialize with the scene asset ID
    bool initialize(const std::string &sceneAssetId, AssetManager &assetManager)
    {
        sceneAssetId_ = sceneAssetId;

        // In a real implementation, we would load the scene from the asset
        // Here we'll just create our 3 green cubes directly

        // Create cube 1
        RenderObject cube1;
        cube1.meshId = "mesh.cube";
        cube1.materialId = "material.green";
        cube1.transform.position = {-1.5f, 0.0f, 0.0f};
        cube1.transform.scale = {0.8f, 0.8f, 0.8f};
        cube1.rotationSpeedX = 15.0f;
        cube1.rotationSpeedY = 30.0f;
        objects_.push_back(cube1);

        // Create cube 2
        RenderObject cube2;
        cube2.meshId = "mesh.cube";
        cube2.materialId = "material.green";
        cube2.transform.position = {0.0f, 0.0f, 0.0f};
        cube2.transform.scale = {0.8f, 0.8f, 0.8f};
        cube2.rotationSpeedY = 45.0f;
        objects_.push_back(cube2);

        // Create cube 3
        RenderObject cube3;
        cube3.meshId = "mesh.cube";
        cube3.materialId = "material.green";
        cube3.transform.position = {1.5f, 0.0f, 0.0f};
        cube3.transform.scale = {0.8f, 0.8f, 0.8f};
        cube3.rotationSpeedY = 60.0f;
        cube3.rotationSpeedZ = 30.0f;
        objects_.push_back(cube3);

        // Create red cube (rotating in the opposite direction)
        RenderObject redCube;
        redCube.meshId = "mesh.cube";
        redCube.materialId = "material.red";
        redCube.transform.position = {0.0f, 1.5f, 0.0f};
        redCube.transform.scale = {1.0f, 1.0f, 1.0f};
        redCube.rotationSpeedX = -15.0f;
        redCube.rotationSpeedY = -45.0f; // Negative value for opposite rotation
        objects_.push_back(redCube);

        return true;
    }

    // Update rotations
    void update(float deltaTime)
    {
        for (auto &obj : objects_)
        {
            obj.rotationX += obj.rotationSpeedX * deltaTime;
            obj.rotationY += obj.rotationSpeedY * deltaTime;
            obj.rotationZ += obj.rotationSpeedZ * deltaTime;

            // Wrap rotations
            if (obj.rotationX > 360.0f)
                obj.rotationX -= 360.0f;
            if (obj.rotationY > 360.0f)
                obj.rotationY -= 360.0f;
            if (obj.rotationZ > 360.0f)
                obj.rotationZ -= 360.0f;
        }
    }

    // Render the scene
    void render()
    {
        glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);

        // Setup projection matrix
        glMatrixMode(GL_PROJECTION);
        glLoadIdentity();

        HDC hdc = wglGetCurrentDC();
        HWND hwnd = WindowFromDC(hdc);
        RECT rect;
        GetClientRect(hwnd, &rect);
        float aspect = (float)(rect.right) / (float)(rect.bottom);

        // Simple perspective projection
        glFrustum(-0.1f * aspect, 0.1f * aspect, -0.1f, 0.1f, 0.1f, 100.0f);

        // Setup model-view matrix
        glMatrixMode(GL_MODELVIEW);
        glLoadIdentity();

        // Move camera back and look at center
        glTranslatef(0.0f, 0.0f, -5.0f);

        // Render each object
        for (const auto &obj : objects_)
        {
            glPushMatrix();

            // Apply position
            glTranslatef(obj.transform.position.x, obj.transform.position.y, obj.transform.position.z);

            // Apply rotation
            glRotatef(obj.rotationX, 1.0f, 0.0f, 0.0f);
            glRotatef(obj.rotationY, 0.0f, 1.0f, 0.0f);
            glRotatef(obj.rotationZ, 0.0f, 0.0f, 1.0f);

            // Apply scale
            glScalef(obj.transform.scale.x, obj.transform.scale.y, obj.transform.scale.z);

            // Set material color based on material ID
            if (obj.materialId == "material.red")
            {
                glColor3f(1.0f, 0.0f, 0.0f); // Red color
            }
            else if (obj.materialId == "material.green")
            {
                glColor3f(0.0f, 1.0f, 0.0f); // Green color
            }
            else
            {
                glColor3f(0.7f, 0.7f, 0.7f); // Default gray color
            }

            // Draw cube
            renderCube();

            glPopMatrix();
        }

        SwapBuffers(hdc);
    }

    // For testing
    const std::vector<RenderObject> &getObjects() const
    {
        return objects_;
    }

private:
    // Helper to render a cube
    void renderCube()
    {
        glBegin(GL_QUADS);

        // Front face
        glVertex3f(-0.5f, -0.5f, 0.5f);
        glVertex3f(0.5f, -0.5f, 0.5f);
        glVertex3f(0.5f, 0.5f, 0.5f);
        glVertex3f(-0.5f, 0.5f, 0.5f);

        // Back face
        glVertex3f(-0.5f, -0.5f, -0.5f);
        glVertex3f(-0.5f, 0.5f, -0.5f);
        glVertex3f(0.5f, 0.5f, -0.5f);
        glVertex3f(0.5f, -0.5f, -0.5f);

        // Top face
        glVertex3f(-0.5f, 0.5f, -0.5f);
        glVertex3f(-0.5f, 0.5f, 0.5f);
        glVertex3f(0.5f, 0.5f, 0.5f);
        glVertex3f(0.5f, 0.5f, -0.5f);

        // Bottom face
        glVertex3f(-0.5f, -0.5f, -0.5f);
        glVertex3f(0.5f, -0.5f, -0.5f);
        glVertex3f(0.5f, -0.5f, 0.5f);
        glVertex3f(-0.5f, -0.5f, 0.5f);

        // Right face
        glVertex3f(0.5f, -0.5f, -0.5f);
        glVertex3f(0.5f, 0.5f, -0.5f);
        glVertex3f(0.5f, 0.5f, 0.5f);
        glVertex3f(0.5f, -0.5f, 0.5f);

        // Left face
        glVertex3f(-0.5f, -0.5f, -0.5f);
        glVertex3f(-0.5f, -0.5f, 0.5f);
        glVertex3f(-0.5f, 0.5f, 0.5f);
        glVertex3f(-0.5f, 0.5f, -0.5f);

        glEnd();
    }

    std::string sceneAssetId_;
    std::vector<RenderObject> objects_;
};


================================================================================
FILE: src\systems\AdvancedCelShadingSystem.h
================================================================================

#pragma once

#include "../core/System.h"
#include "../math/MathUtils.h"
#include <vector>
#include <memory>
#include <map>
#include <string>

namespace ECS
{

    // Forward declarations
    class Entity;
    class MaterialComponent;
    class MeshComponent;
    class LightComponent;

    // ============================================================================
    // Advanced Cel-Shading Data Structures
    // ============================================================================

    struct AdvancedCelShadingMaterial
    {
        // Base material properties
        Math::float4 baseColor = {1.0f, 1.0f, 1.0f, 1.0f};
        Math::float4 shadowColor = {0.3f, 0.3f, 0.5f, 1.0f};
        Math::float4 highlightColor = {1.2f, 1.2f, 1.4f, 1.0f};

        // Cel-shading specific parameters
        uint32_t shadingLevels = 3;   // Number of discrete shading levels
        float shadowThreshold = 0.5f; // Light threshold for shadow transition
        float shadowSoftness = 0.1f;  // Softness of shadow transitions

        // Outline properties
        bool enableOutline = true;
        Math::float4 outlineColor = {0.0f, 0.0f, 0.0f, 1.0f};
        float outlineWidth = 0.01f; // Outline width in screen space
        float outlineDepthSensitivity = 1.0f;
        float outlineNormalSensitivity = 1.0f;

        // Rim lighting
        bool enableRimLighting = true;
        Math::float4 rimColor = {1.0f, 1.0f, 1.0f, 1.0f};
        float rimPower = 2.0f;
        float rimIntensity = 1.0f;

        // Specular highlights
        bool enableSpecular = true;
        Math::float4 specularColor = {1.0f, 1.0f, 1.0f, 1.0f};
        float specularPower = 32.0f;
        float specularIntensity = 0.5f;
        uint32_t specularLevels = 2; // Discrete specular levels

        // Texture properties
        std::string diffuseTexture;
        std::string shadowRampTexture;   // 1D texture for shadow ramp
        std::string specularRampTexture; // 1D texture for specular ramp
        std::string outlineTexture;      // Texture for outline variation

        // Animation properties
        bool animateColors = false;
        float colorAnimationSpeed = 1.0f;
        float colorAnimationAmplitude = 0.1f;

        // Advanced properties
        bool useVertexColors = false;
        bool useEnvironmentMapping = false;
        float environmentIntensity = 0.3f;
        bool useFresnel = true;
        float fresnelPower = 3.0f;
    };

    struct CelShadingLight
    {
        EntityId lightEntityId;
        Math::float3 direction;
        Math::float4 color;
        float intensity;

        // Cel-shading specific light properties
        float shadowBias = 0.001f;
        bool castCelShadows = true;
        uint32_t shadowSteps = 3; // Number of shadow cascade levels
        float shadowSoftness = 0.2f;

        // Light animation
        bool animateIntensity = false;
        float intensityAnimationSpeed = 1.0f;
        float intensityAnimationRange = 0.2f;
    };

    // ============================================================================
    // Advanced Cel-Shading System Configuration
    // ============================================================================

    struct AdvancedCelShadingSystemConfig
    {
        // Rendering quality
        bool enableMultiPass = true;     // Use multiple passes for better quality
        bool enableSSAO = false;         // Screen-space ambient occlusion
        bool enableShadowMapping = true; // Real-time shadows
        uint32_t shadowMapSize = 1024;   // Shadow map resolution

        // Performance settings
        uint32_t maxLights = 8;         // Maximum number of lights
        bool enableLightCulling = true; // Cull lights outside view
        float cullingDistance = 100.0f; // Light culling distance
        bool enableLOD = true;          // Level of detail for distant objects

        // Outline settings
        bool enableScreenSpaceOutlines = true;
        uint32_t outlineTextureSize = 512; // Outline detection texture size
        float outlineDepthThreshold = 0.1f;
        float outlineNormalThreshold = 0.4f;

        // Post-processing
        bool enableColorGrading = false;
        bool enableVignette = false;
        float vignetteIntensity = 0.3f;
        bool enableFilmGrain = false;
        float filmGrainIntensity = 0.1f;

        // Debug settings
        bool showWireframe = false;
        bool showNormals = false;
        bool showLightInfluence = false;
        bool showShadowCascades = false;
    };

    // ============================================================================
    // Advanced Cel-Shading System (extends the basic one)
    // ============================================================================

    class AdvancedCelShadingSystem : public System
    {
    public:
        explicit AdvancedCelShadingSystem(const AdvancedCelShadingSystemConfig &config = AdvancedCelShadingSystemConfig{});
        ~AdvancedCelShadingSystem() override;

        // System interface
        void initialize() override;
        void update(float deltaTime) override;
        void render() override;
        void shutdown() override;

        // Configuration management
        void setConfig(const AdvancedCelShadingSystemConfig &config);
        const AdvancedCelShadingSystemConfig &getConfig() const;

        // Material management
        void createCelMaterial(const std::string &materialId, const AdvancedCelShadingMaterial &material);
        void updateCelMaterial(const std::string &materialId, const AdvancedCelShadingMaterial &material);
        void removeCelMaterial(const std::string &materialId);
        bool hasCelMaterial(const std::string &materialId) const;
        const AdvancedCelShadingMaterial *getCelMaterial(const std::string &materialId) const;

        // Light management
        void registerLight(EntityId lightEntityId);
        void unregisterLight(EntityId lightEntityId);
        void updateLightProperties(EntityId lightEntityId);

        // Rendering controls
        void setGlobalToonLevel(uint32_t levels);
        void setGlobalOutlineWidth(float width);
        void setGlobalRimLightIntensity(float intensity);

        // Shadow controls
        void setShadowDistance(float distance);
        void setShadowCascades(uint32_t cascades);
        void setShadowSoftness(float softness);

        // Environment settings
        void setAmbientColor(const Math::float4 &color);
        void setFogColor(const Math::float4 &color);
        void setFogDensity(float density);

        // Performance monitoring
        uint32_t getActiveMaterialCount() const;
        uint32_t getActiveLightCount() const;
        float getAverageRenderTime() const;

        // Debug and visualization
        void setDebugVisualization(bool enabled);
        bool isDebugVisualizationEnabled() const;
        void renderDebugInfo();

    protected:
        // Component handling
        void onComponentAdded(EntityId entityId, ComponentType type) override;
        void onComponentRemoved(EntityId entityId, ComponentType type) override;
        void onComponentChanged(EntityId entityId, ComponentType type) override;

    private:
        AdvancedCelShadingSystemConfig config_;
        std::map<std::string, AdvancedCelShadingMaterial> celMaterials_;
        std::map<EntityId, CelShadingLight> celLights_;

        // Global settings
        uint32_t globalToonLevels_ = 3;
        float globalOutlineWidth_ = 0.01f;
        float globalRimLightIntensity_ = 1.0f;

        // Environment
        Math::float4 ambientColor_ = {0.2f, 0.2f, 0.3f, 1.0f};
        Math::float4 fogColor_ = {0.7f, 0.8f, 0.9f, 1.0f};
        float fogDensity_ = 0.01f;

        // Shadow settings
        float shadowDistance_ = 100.0f;
        uint32_t shadowCascades_ = 3;
        float shadowSoftness_ = 0.3f;

        // Performance tracking
        mutable float averageRenderTime_ = 0.0f;
        mutable uint32_t renderSampleCount_ = 0;

        // Debug visualization
        bool debugVisualization_ = false;

        // Core rendering methods
        void renderWithAdvancedCelShading();
        void setupAdvancedCelShadingUniforms(const AdvancedCelShadingMaterial &material);
        void renderScreenSpaceOutlines();
        void applyPostProcessingEffects();

        // Utility methods
        Math::float3 calculateAdvancedCelShading(const Math::float3 &normal, const Math::float3 &lightDir,
                                                 const AdvancedCelShadingMaterial &material) const;
        float quantizeLighting(float lightValue, uint32_t levels) const;
        Math::float3 quantizeColor(const Math::float3 &color, uint32_t levels) const;

        void updatePerformanceCounters(float deltaTime);
    };

    // ============================================================================
    // Inline Implementation
    // ============================================================================

    inline uint32_t AdvancedCelShadingSystem::getActiveMaterialCount() const
    {
        return static_cast<uint32_t>(celMaterials_.size());
    }

    inline uint32_t AdvancedCelShadingSystem::getActiveLightCount() const
    {
        return static_cast<uint32_t>(celLights_.size());
    }

    inline float AdvancedCelShadingSystem::getAverageRenderTime() const
    {
        return averageRenderTime_;
    }

    inline bool AdvancedCelShadingSystem::isDebugVisualizationEnabled() const
    {
        return debugVisualization_;
    }

    inline void AdvancedCelShadingSystem::setDebugVisualization(bool enabled)
    {
        debugVisualization_ = enabled;
    }

    inline const AdvancedCelShadingSystemConfig &AdvancedCelShadingSystem::getConfig() const
    {
        return config_;
    }

    inline bool AdvancedCelShadingSystem::hasCelMaterial(const std::string &materialId) const
    {
        return celMaterials_.find(materialId) != celMaterials_.end();
    }

    inline const AdvancedCelShadingMaterial *AdvancedCelShadingSystem::getCelMaterial(const std::string &materialId) const
    {
        auto it = celMaterials_.find(materialId);
        return (it != celMaterials_.end()) ? &it->second : nullptr;
    }

    inline float AdvancedCelShadingSystem::quantizeLighting(float lightValue, uint32_t levels) const
    {
        if (levels <= 1)
            return lightValue;

        float step = 1.0f / (levels - 1);
        return std::floor(lightValue / step) * step;
    }

    inline Math::float3 AdvancedCelShadingSystem::quantizeColor(const Math::float3 &color, uint32_t levels) const
    {
        return {
            quantizeLighting(color.x, levels),
            quantizeLighting(color.y, levels),
            quantizeLighting(color.z, levels)};
    }

} // namespace ECS



================================================================================
FILE: src\systems\AnimationSystem.h
================================================================================

#pragma once

#include "../core/System.h"
#include "../math/MathUtils.h"
#include "../config/SceneConfigParser.h"
#include <vector>
#include <memory>
#include <map>
#include <functional>
#include <string>

namespace ECS
{

    // ============================================================================
    // Animation Data Structures
    // ============================================================================

    struct AnimationKeyframe
    {
        float time = 0.0f;
        Math::float3 position = {0.0f, 0.0f, 0.0f};
        Math::float4 rotation = {0.0f, 0.0f, 0.0f, 1.0f}; // Quaternion
        Math::float3 scale = {1.0f, 1.0f, 1.0f};
        Math::float4 color = {1.0f, 1.0f, 1.0f, 1.0f};
        float value = 0.0f; // Generic scalar value

        // Custom properties for specialized animations
        std::map<std::string, float> customFloats;
        std::map<std::string, Math::float3> customVectors;
        std::map<std::string, Math::float4> customColors;
    };

    struct AnimationTrack
    {
        enum class Type
        {
            Transform, // Position, rotation, scale
            Color,     // Color animation
            Value,     // Generic scalar value
            Orbital,   // Orbital motion
            Custom     // Custom animation with callback
        };

        enum class Interpolation
        {
            Linear,
            Cubic,
            Bezier,
            Step,
            Smooth
        };

        Type type = Type::Transform;
        Interpolation interpolation = Interpolation::Linear;
        std::string targetProperty; // Property name to animate
        std::vector<AnimationKeyframe> keyframes;

        // Track-specific parameters
        bool loop = true;
        bool pingPong = false;
        float speed = 1.0f;
        float delay = 0.0f;

        // Orbital motion specific
        Math::OrbitParams orbitParams;

        // Custom animation callback
        std::function<void(EntityId, float, const AnimationKeyframe &)> customCallback;
    };

    struct Animation
    {
        std::string id;
        std::string name;
        float duration = 1.0f;
        bool autoStart = true;
        bool loop = true;
        float playbackSpeed = 1.0f;

        // Animation tracks
        std::vector<AnimationTrack> tracks;

        // Animation state
        enum class State
        {
            Stopped,
            Playing,
            Paused,
            Finished
        };

        State state = State::Stopped;
        float currentTime = 0.0f;
        float normalizedTime = 0.0f; // 0.0 to 1.0
        uint32_t currentLoop = 0;

        // Events
        std::function<void(EntityId)> onStart;
        std::function<void(EntityId)> onComplete;
        std::function<void(EntityId, uint32_t)> onLoop;
        std::function<void(EntityId, float)> onUpdate;
    };

    struct AnimationGroup
    {
        std::string id;
        std::vector<std::string> animationIds;

        enum class PlayMode
        {
            Sequential, // Play animations one after another
            Parallel,   // Play all animations simultaneously
            Random      // Play animations in random order
        };

        PlayMode playMode = PlayMode::Parallel;
        bool loop = false;
        float delay = 0.0f;

        // Group state
        uint32_t currentAnimationIndex = 0;
        bool isPlaying = false;
    };

    // ============================================================================
    // Animation System Configuration
    // ============================================================================

    struct AnimationSystemConfig
    {
        // Performance settings
        uint32_t maxAnimationsPerEntity = 10;
        uint32_t maxActiveAnimations = 1000;
        float updateFrequency = 60.0f; // Updates per second
        bool enableInterpolation = true;

        // Quality settings
        bool enableSmoothing = true;
        float smoothingFactor = 0.1f;
        bool enableBlending = true;
        uint32_t maxBlendedAnimations = 4;

        // Optimization settings
        bool enableCulling = true;
        float cullingDistance = 200.0f;
        bool enableLOD = true;
        float lodNearDistance = 50.0f;
        float lodFarDistance = 150.0f;

        // Memory management
        bool useObjectPooling = true;
        uint32_t initialPoolSize = 500;
        uint32_t poolGrowthSize = 100;

        // Debug settings
        bool logAnimationEvents = false;
        bool validateKeyframes = true;
        bool enablePerformanceMetrics = true;
    };

    // ============================================================================
    // Main Animation System
    // ============================================================================

    class AnimationSystem : public System
    {
    public:
        explicit AnimationSystem(const AnimationSystemConfig &config = AnimationSystemConfig{});
        ~AnimationSystem() override;

        // System interface
        void initialize() override;
        void update(float deltaTime) override;
        void render() override;
        void shutdown() override;

        // Configuration management
        void setConfig(const AnimationSystemConfig &config);
        const AnimationSystemConfig &getConfig() const;

        // Animation management
        void createAnimation(const std::string &animationId, const Animation &animation);
        void removeAnimation(const std::string &animationId);
        bool hasAnimation(const std::string &animationId) const;
        Animation *getAnimation(const std::string &animationId);
        const Animation *getAnimation(const std::string &animationId) const;

        // Entity animation control
        void playAnimation(EntityId entityId, const std::string &animationId);
        void stopAnimation(EntityId entityId, const std::string &animationId);
        void pauseAnimation(EntityId entityId, const std::string &animationId);
        void resumeAnimation(EntityId entityId, const std::string &animationId);
        void stopAllAnimations(EntityId entityId);

        // Animation playback control
        void setAnimationTime(EntityId entityId, const std::string &animationId, float time);
        void setAnimationSpeed(EntityId entityId, const std::string &animationId, float speed);
        float getAnimationTime(EntityId entityId, const std::string &animationId) const;
        bool isAnimationPlaying(EntityId entityId, const std::string &animationId) const;

        // Animation groups
        void createAnimationGroup(const std::string &groupId, const AnimationGroup &group);
        void playAnimationGroup(EntityId entityId, const std::string &groupId);
        void stopAnimationGroup(EntityId entityId, const std::string &groupId);

        // Animation blending
        void blendAnimations(EntityId entityId, const std::vector<std::string> &animationIds,
                             const std::vector<float> &weights);
        void crossfadeAnimation(EntityId entityId, const std::string &fromAnimation,
                                const std::string &toAnimation, float duration);

        // Dynamic animation creation
        Animation createTransformAnimation(const std::string &id, const Math::float3 &startPos,
                                           const Math::float3 &endPos, float duration);
        Animation createRotationAnimation(const std::string &id, const Math::float4 &startRot,
                                          const Math::float4 &endRot, float duration);
        Animation createScaleAnimation(const std::string &id, const Math::float3 &startScale,
                                       const Math::float3 &endScale, float duration);
        Animation createOrbitalAnimation(const std::string &id, const Math::OrbitParams &params, float duration);
        Animation createColorAnimation(const std::string &id, const Math::float4 &startColor,
                                       const Math::float4 &endColor, float duration);

        // Scene integration
        void loadAnimationsFromScene(const SceneConfig::Scene &scene);
        void applyAnimationToEntity(EntityId entityId, const SceneConfig::Animation &sceneAnimation);

        // Performance monitoring
        uint32_t getActiveAnimationCount() const;
        uint32_t getTotalAnimationCount() const;
        float getAverageUpdateTime() const;

        // Debug and visualization
        void setDebugVisualization(bool enabled);
        bool isDebugVisualizationEnabled() const;
        void renderDebugInfo();

    protected:
        // Component handling
        void onComponentAdded(EntityId entityId, ComponentType type) override;
        void onComponentRemoved(EntityId entityId, ComponentType type) override;
        void onComponentChanged(EntityId entityId, ComponentType type) override;

    private:
        // ============================================================================
        // Internal Animation Management
        // ============================================================================

        struct EntityAnimationState
        {
            std::map<std::string, Animation> activeAnimations;
            std::map<std::string, AnimationGroup> activeGroups;
            std::vector<std::string> blendedAnimations;
            std::vector<float> blendWeights;

            // Transform accumulation for blending
            Math::float3 accumulatedPosition = {0.0f, 0.0f, 0.0f};
            Math::float4 accumulatedRotation = {0.0f, 0.0f, 0.0f, 1.0f};
            Math::float3 accumulatedScale = {1.0f, 1.0f, 1.0f};
            Math::float4 accumulatedColor = {1.0f, 1.0f, 1.0f, 1.0f};

            // Performance tracking
            float lastUpdateTime = 0.0f;
            uint32_t animationCount = 0;
        };

        AnimationSystemConfig config_;
        std::map<std::string, Animation> animationTemplates_;
        std::map<std::string, AnimationGroup> groupTemplates_;
        std::map<EntityId, EntityAnimationState> entityAnimations_;

        // Performance tracking
        mutable float averageUpdateTime_ = 0.0f;
        mutable uint32_t updateSampleCount_ = 0;

        // Debug visualization
        bool debugVisualization_ = false;

        // Object pooling
        std::vector<Animation> animationPool_;
        std::vector<size_t> freeAnimationIndices_;

        // ============================================================================
        // Core Update Methods
        // ============================================================================

        void updateEntityAnimations(EntityId entityId, EntityAnimationState &state, float deltaTime);
        void updateAnimation(EntityId entityId, Animation &animation, float deltaTime);
        void updateAnimationGroup(EntityId entityId, AnimationGroup &group, float deltaTime);
        void applyAnimationBlending(EntityId entityId, EntityAnimationState &state);

        // ============================================================================
        // Animation Track Processing
        // ============================================================================

        void processTransformTrack(EntityId entityId, const AnimationTrack &track, float time);
        void processColorTrack(EntityId entityId, const AnimationTrack &track, float time);
        void processValueTrack(EntityId entityId, const AnimationTrack &track, float time);
        void processOrbitalTrack(EntityId entityId, const AnimationTrack &track, float time);
        void processCustomTrack(EntityId entityId, const AnimationTrack &track, float time);

        // ============================================================================
        // Keyframe Interpolation
        // ============================================================================

        AnimationKeyframe interpolateKeyframes(const AnimationKeyframe &a, const AnimationKeyframe &b,
                                               float t, AnimationTrack::Interpolation interpolation) const;

        // Interpolation methods
        float interpolateLinear(float a, float b, float t) const;
        float interpolateCubic(float a, float b, float ta, float tb, float t) const;
        float interpolateBezier(float a, float b, float control1, float control2, float t) const;
        float interpolateStep(float a, float b, float t) const;
        float interpolateSmooth(float a, float b, float t) const;

        // Vector interpolation
        Math::float3 interpolateVector3(const Math::float3 &a, const Math::float3 &b, float t,
                                        AnimationTrack::Interpolation interpolation) const;
        Math::float4 interpolateQuaternion(const Math::float4 &a, const Math::float4 &b, float t) const;
        Math::float4 interpolateColor(const Math::float4 &a, const Math::float4 &b, float t) const;

        // ============================================================================
        // Animation Evaluation
        // ============================================================================

        std::pair<const AnimationKeyframe *, const AnimationKeyframe *>
        findKeyframeInterval(const AnimationTrack &track, float time) const;
        float calculateInterpolationFactor(const AnimationKeyframe &a, const AnimationKeyframe &b, float time) const;
        AnimationKeyframe evaluateTrackAtTime(const AnimationTrack &track, float time) const;

        // ============================================================================
        // Entity Transform Application
        // ============================================================================

        void applyTransformToEntity(EntityId entityId, const Math::float3 &position,
                                    const Math::float4 &rotation, const Math::float3 &scale);
        void applyColorToEntity(EntityId entityId, const Math::float4 &color);
        void applyValueToEntity(EntityId entityId, const std::string &property, float value);

        // Transform component integration
        Math::float3 getEntityPosition(EntityId entityId) const;
        Math::float4 getEntityRotation(EntityId entityId) const;
        Math::float3 getEntityScale(EntityId entityId) const;
        void setEntityTransform(EntityId entityId, const Math::float3 &position,
                                const Math::float4 &rotation, const Math::float3 &scale);

        // ============================================================================
        // Animation Validation and Optimization
        // ============================================================================

        bool validateAnimation(const Animation &animation) const;
        bool validateAnimationTrack(const AnimationTrack &track) const;
        void optimizeAnimation(Animation &animation);
        void sortKeyframes(AnimationTrack &track);
        void removeRedundantKeyframes(AnimationTrack &track);

        // ============================================================================
        // Performance Optimization
        // ============================================================================

        bool shouldUpdateAnimation(EntityId entityId, const Animation &animation) const;
        float calculateLODFactor(EntityId entityId) const;
        void cullDistantAnimations();
        void updatePerformanceCounters(float deltaTime);

        // Object pooling
        Animation *acquireAnimation();
        void releaseAnimation(Animation *animation);
        void expandAnimationPool();

        // ============================================================================
        // Event Handling
        // ============================================================================

        void triggerAnimationEvent(EntityId entityId, const Animation &animation, const std::string &eventType);
        void onAnimationStart(EntityId entityId, const Animation &animation);
        void onAnimationComplete(EntityId entityId, const Animation &animation);
        void onAnimationLoop(EntityId entityId, const Animation &animation, uint32_t loopCount);
        void onAnimationUpdate(EntityId entityId, const Animation &animation, float time);

        // ============================================================================
        // Debug and Profiling
        // ============================================================================

        void renderAnimationDebugInfo(EntityId entityId, const EntityAnimationState &state);
        void logAnimationStatistics() const;
        void validateAnimationState() const;
    };

    // ============================================================================
    // Inline Implementation for Performance-Critical Methods
    // ============================================================================

    inline uint32_t AnimationSystem::getActiveAnimationCount() const
    {
        uint32_t total = 0;
        for (const auto &[entityId, state] : entityAnimations_)
        {
            total += state.animationCount;
        }
        return total;
    }

    inline uint32_t AnimationSystem::getTotalAnimationCount() const
    {
        return static_cast<uint32_t>(animationTemplates_.size());
    }

    inline float AnimationSystem::getAverageUpdateTime() const
    {
        return averageUpdateTime_;
    }

    inline bool AnimationSystem::isDebugVisualizationEnabled() const
    {
        return debugVisualization_;
    }

    inline void AnimationSystem::setDebugVisualization(bool enabled)
    {
        debugVisualization_ = enabled;
    }

    inline const AnimationSystemConfig &AnimationSystem::getConfig() const
    {
        return config_;
    }

    inline bool AnimationSystem::hasAnimation(const std::string &animationId) const
    {
        return animationTemplates_.find(animationId) != animationTemplates_.end();
    }

    inline Animation *AnimationSystem::getAnimation(const std::string &animationId)
    {
        auto it = animationTemplates_.find(animationId);
        return (it != animationTemplates_.end()) ? &it->second : nullptr;
    }

    inline const Animation *AnimationSystem::getAnimation(const std::string &animationId) const
    {
        auto it = animationTemplates_.find(animationId);
        return (it != animationTemplates_.end()) ? &it->second : nullptr;
    }

    inline float AnimationSystem::interpolateLinear(float a, float b, float t) const
    {
        return a + t * (b - a);
    }

    inline float AnimationSystem::interpolateStep(float a, float b, float t) const
    {
        return (t < 1.0f) ? a : b;
    }

    inline float AnimationSystem::interpolateSmooth(float a, float b, float t) const
    {
        // Smoothstep interpolation
        t = t * t * (3.0f - 2.0f * t);
        return interpolateLinear(a, b, t);
    }

} // namespace ECS



================================================================================
FILE: src\systems\AssetHotReloadSystem.cpp
================================================================================

/**
 * @file AssetHotReloadSystem.cpp
 * @brief Implementation of the asset hot-reload system.
 */

#include "AssetHotReloadSystem.h"
#include "../debug.h"
#include <iostream>
#include <filesystem>

namespace fs = std::filesystem;

/**
 * @brief Construct a new AssetHotReloadSystem.
 *
 * Initializes the system with references to the asset registry and loader.
 * The system starts with no watched packages.
 *
 * @param registry Reference to the asset registry for reloading assets
 * @param loader Reference to the asset pack loader for loading packages
 */
AssetHotReloadSystem::AssetHotReloadSystem(AssetRegistry &registry, AssetPackLoader &loader)
    : registry_(registry), loader_(loader), hasPendingAssets_(false), commitRequested_(false)
{
    DEBUG_LOG("Initializing AssetHotReloadSystem");
    // Initialize double-buffering system
    pendingRegistry_ = std::make_unique<AssetRegistry>();
    pendingLoader_ = std::make_unique<AssetPackLoader>(*pendingRegistry_);
}

/** @brief Destructor - currently no cleanup needed */
AssetHotReloadSystem::~AssetHotReloadSystem() {}

/**
 * @brief Update the system and check for asset file changes.
 *
 * Called each frame to monitor watched asset packages. Checks for file
 * modifications and reloads changed packages automatically.
 *
 * @param world Reference to the game world (unused in this system)
 * @param deltaTime Time elapsed since last update in seconds (unused)
 */
void AssetHotReloadSystem::update(World &world, float deltaTime)
{
    DEBUG_LOG("Updating AssetHotReloadSystem");
    // Check for changes at regular intervals
    if (checkForChanges())
    {
        // Start loading changed packages into pending registry
        loadPendingAssets();
    }

    // Commit pending assets at frame boundary if ready
    if (commitRequested_ && hasPendingAssets_)
    {
        commitPendingAssets();
        commitRequested_ = false;
        hasPendingAssets_ = false;
    }
}

/**
 * @brief Add a package to the watch list for change monitoring.
 *
 * Registers an asset package file to be monitored for changes. Records
 * the initial modification time and adds it to the watch list.
 *
 * @param packagePath Path to the asset package file to watch
 */
void AssetHotReloadSystem::watchPackage(const std::string &packagePath)
{
    DEBUG_LOG("Watching package '" + packagePath + "' for changes");
    WatchedFile watched;
    watched.path = packagePath;
    watched.lastModified = getFileModifiedTime(packagePath);
    watched.needsReload = false;

    watchedFiles_[packagePath] = watched;
    if (Debug())
    {
        DEBUG_LOG("Watching package for changes: " << packagePath);
    }
}

/**
 * @brief Automatically discover and watch all packages in the packages directory.
 *
 * Scans the packages directory for package.json files and automatically
 * adds them to the watch list, making the engine package-agnostic.
 *
 * @param packagesDirectory Path to the packages directory
 * @return Number of packages discovered and added to watch list
 */
int AssetHotReloadSystem::watchAllPackages(const std::string &packagesDirectory)
{
    DEBUG_LOG("Watching all packages in directory '" + packagesDirectory + "'");
    int packageCount = 0;

    try
    {
        if (!std::filesystem::exists(packagesDirectory))
        {
            if (Debug())
            {
                DEBUG_LOG("Packages directory not found: " << packagesDirectory);
            }
            return 0;
        }

        // Iterate through all subdirectories in the packages directory
        for (const auto &entry : std::filesystem::directory_iterator(packagesDirectory))
        {
            if (entry.is_directory())
            {
                // Look for package.json in each subdirectory
                std::string packagePath = entry.path().string() + "/package.json";
                if (std::filesystem::exists(packagePath))
                {
                    watchPackage(packagePath);
                    packageCount++;
                    if (Debug())
                    {
                        DEBUG_LOG("Auto-discovered package: " << packagePath);
                    }
                }
            }
        }

        if (Debug())
        {
            DEBUG_LOG("Auto-discovered " << packageCount << " packages for hot-reload monitoring");
        }
    }
    catch (const std::filesystem::filesystem_error &e)
    {
        std::cerr << "Error discovering packages: " << e.what() << std::endl;
    }

    return packageCount;
}

/**
 * @brief Check if any watched files have been modified.
 *
 * Iterates through all watched files and compares their current modification
 * times with the last recorded times. Files that have changed are marked
 * for reload.
 *
 * @return true if any files have changed since last check, false otherwise
 */
bool AssetHotReloadSystem::checkForChanges()
{
    bool hasChanges = false;

    for (auto &pair : watchedFiles_)
    {
        WatchedFile &watched = pair.second;
        auto currentTime = getFileModifiedTime(watched.path);

        if (currentTime > watched.lastModified)
        {
            watched.lastModified = currentTime;
            watched.needsReload = true;
            hasChanges = true;
            if (Debug())
            {
                DEBUG_LOG("Detected change in: " << watched.path);
            }
        }
    }

    return hasChanges;
}

/**
 * @brief Reload all packages that have been marked as changed.
 *
 * Now delegates to the deterministic double-buffering system to ensure
 * frame-boundary commits without mid-frame asset swapping.
 */
void AssetHotReloadSystem::reloadChangedPackages()
{
    DEBUG_LOG("Reloading changed packages");
    // Legacy method - now delegates to deterministic system
    if (checkForChanges())
    {
        loadPendingAssets();
        if (hasPendingAssets_)
        {
            commitRequested_ = true;
        }
    }
}

/**
 * @brief Load changed packages into pending registry for deterministic commit.
 *
 * Loads assets into a secondary registry without affecting the active one.
 * This allows for atomic swapping at frame boundaries.
 */
void AssetHotReloadSystem::loadPendingAssets()
{
    DEBUG_LOG("Loading pending assets");
    bool hasChanges = false;

    for (auto &pair : watchedFiles_)
    {
        WatchedFile &watched = pair.second;

        if (watched.needsReload)
        {
            if (Debug())
            {
                DEBUG_LOG("Loading pending assets from: " << watched.path);
            }

            // Copy current registry state to pending registry first
            // This ensures we don't lose non-changed assets
            if (!hasChanges)
            {
                // Reset pending registry and copy existing assets
                pendingRegistry_ = std::make_unique<AssetRegistry>();
                pendingLoader_ = std::make_unique<AssetPackLoader>(*pendingRegistry_);

                // TODO: Copy existing assets from active registry to pending registry
                // For now, we reload all packages which is less efficient but safer
                hasChanges = true;
            }

            // Load the changed package into pending registry
            if (pendingLoader_->loadPackage(watched.path))
            {
                if (Debug())
                {
                    DEBUG_LOG("Successfully loaded pending assets from: " << watched.path);
                }
            }
            else
            {
                std::cerr << "Failed to load pending assets from: " << watched.path << std::endl;
            }

            watched.needsReload = false;
        }
    }

    if (hasChanges)
    {
        hasPendingAssets_ = true;
        commitRequested_ = true;
    }
}

/**
 * @brief Commit pending assets by swapping registries.
 *
 * Atomically swaps the pending registry with the active one,
 * ensuring deterministic asset updates at frame boundaries.
 */
void AssetHotReloadSystem::commitPendingAssets()
{
    DEBUG_LOG("Committing pending assets");
    if (!hasPendingAssets_)
        return;

    if (Debug())
    {
        DEBUG_LOG("Committing asset changes at frame boundary");
    }

    // Atomic swap: move pending registry contents to active registry
    // This is a simplified implementation - in production this would need
    // more sophisticated handle repointing and indirection table updates

    // Clear active registry and copy from pending
    registry_.clear();

    // For now, reload all packages into the active registry
    // TODO: Implement proper asset handle repointing and indirection tables
    for (auto &pair : watchedFiles_)
    {
        WatchedFile &watched = pair.second;
        if (loader_.loadPackage(watched.path))
        {
            if (Debug())
            {
                DEBUG_LOG("Reloaded package: " << watched.path << " into active registry");
            }
        }
    }

    if (Debug())
    {
        DEBUG_LOG("Asset hot-reload commit completed");
    }
}

/**
 * @brief Get the last modification time of a file.
 *
 * Uses the C++ filesystem library to get the last write time of a file.
 * Handles errors gracefully by returning the minimum time point.
 *
 * @param path Path to the file
 * @return The file's last modification time, or minimum time if file doesn't exist or error occurs
 */
std::chrono::system_clock::time_point AssetHotReloadSystem::getFileModifiedTime(const std::string &path)
{
    try
    {
        if (fs::exists(path))
        {
            auto fileTime = fs::last_write_time(path);
            return std::chrono::system_clock::time_point(
                std::chrono::duration_cast<std::chrono::system_clock::duration>(
                    fileTime.time_since_epoch()));
        }
    }
    catch (const std::exception &e)
    {
        std::cerr << "Error checking file time for " << path << ": " << e.what() << std::endl;
    }

    return std::chrono::system_clock::time_point::min();
}


================================================================================
FILE: src\systems\AssetHotReloadSystem.h
================================================================================

/**
 * @file AssetHotReloadSystem.h
 * @brief System for monitoring and hot-reloading asset packages during development.
 *
 * This system provides live asset reloading capabilities for development workflows.
 * It monitors asset package files for changes and automatically reloads them
 * when modifications are detected, allowing for rapid iteration during development.
 */

#ifndef ASSET_HOT_RELOAD_SYSTEM_H
#define ASSET_HOT_RELOAD_SYSTEM_H

#include "core/ISystem.h"
#include "core/AssetRegistry.h"
#include "core/AssetPackLoader.h"
#include <string>
#include <unordered_map>
#include <chrono>
#include <memory>

/**
 * @class AssetHotReloadSystem
 * @brief System that monitors asset files and reloads them when changed.
 *
 * This system implements hot-reloading of asset packages by monitoring file
 * modification times. When changes are detected, it automatically reloads
 * the affected packages, making development iteration faster and more efficient.
 */
class AssetHotReloadSystem : public ISystem
{
public:
    /**
     * @brief Construct a new AssetHotReloadSystem.
     *
     * @param registry Reference to the asset registry for reloading assets
     * @param loader Reference to the asset pack loader for loading packages
     */
    AssetHotReloadSystem(AssetRegistry &registry, AssetPackLoader &loader);

    /** @brief Destructor */
    ~AssetHotReloadSystem();

    /**
     * @brief Update the system and check for asset file changes.
     *
     * Called each frame to monitor watched asset packages for changes.
     * When changes are detected, marks packages for reloading.
     *
     * @param world Reference to the game world
     * @param deltaTime Time elapsed since last update in seconds
     */
    void update(World &world, float deltaTime) override;

    /**
     * @brief Add a package to the watch list for change monitoring.
     *
     * Registers an asset package file to be monitored for changes.
     * The system will track the modification time of this file.
     *
     * @param packagePath Path to the asset package file to watch
     */
    void watchPackage(const std::string &packagePath);

    /**
     * @brief Automatically discover and watch all packages in the packages directory.
     *
     * Scans the packages directory for package.json files and automatically
     * adds them to the watch list. This makes the engine package-agnostic.
     *
     * @param packagesDirectory Path to the packages directory (default: "assets/packages")
     * @return Number of packages discovered and added to watch list
     */
    int watchAllPackages(const std::string &packagesDirectory = "assets/packages");

    /**
     * @brief Check if any watched files have been modified.
     *
     * Scans all watched files and updates their modification status.
     * Files that have changed since last check are marked for reload.
     *
     * @return true if any files have changed, false otherwise
     */
    bool checkForChanges();

    /**
     * @brief Reload all packages that have been marked as changed.
     *
     * Processes all watched files marked for reload and reloads
     * their corresponding asset packages through the asset loader.
     */
    void reloadChangedPackages();

private:
    /** @brief Reference to the asset registry */
    AssetRegistry &registry_;

    /** @brief Reference to the asset pack loader */
    AssetPackLoader &loader_;

    /**
     * @struct WatchedFile
     * @brief Information about a file being watched for changes.
     */
    struct WatchedFile
    {
        /** @brief Path to the watched file */
        std::string path;

        /** @brief Last modification time of the file */
        std::chrono::system_clock::time_point lastModified;

        /** @brief Whether this file needs to be reloaded */
        bool needsReload;
    };

    /** @brief Map of package paths to their watched file information */
    std::unordered_map<std::string, WatchedFile> watchedFiles_;

    /** @brief Secondary asset registry for double-buffering */
    std::unique_ptr<AssetRegistry> pendingRegistry_;

    /** @brief Secondary asset loader for loading into pending registry */
    std::unique_ptr<AssetPackLoader> pendingLoader_;

    /** @brief Flag indicating pending assets are ready for commit */
    bool hasPendingAssets_;

    /** @brief Flag to request commit at frame boundary */
    bool commitRequested_;

    /**
     * @brief Get the last modification time of a file.
     *
     * @param path Path to the file
     * @return The file's last modification time, or epoch time if file doesn't exist
     */
    std::chrono::system_clock::time_point getFileModifiedTime(const std::string &path);

    /**
     * @brief Load changed packages into pending registry for deterministic commit.
     *
     * Loads assets into a secondary registry without affecting the active one.
     * This allows for atomic swapping at frame boundaries.
     */
    void loadPendingAssets();

    /**
     * @brief Commit pending assets by swapping registries.
     *
     * Atomically swaps the pending registry with the active one,
     * ensuring deterministic asset updates at frame boundaries.
     */
    void commitPendingAssets();
};

#endif


================================================================================
FILE: src\systems\BehaviorSystem.cpp
================================================================================

#include "../components/EntityBehavior.h"
#include "BehaviorSystem.h"
#include "../factory/BehaviorRegistry.h"
#include <algorithm>
#include <stdexcept>

namespace Systems
{

    BehaviorSystem::BehaviorSystem()
        : behaviorRegistry(Factory::BehaviorRegistry::instance())
    {
    }

    BehaviorSystem::~BehaviorSystem()
    {
        if (isInitialized)
        {
            shutdown();
        }
    }

    void BehaviorSystem::initialize()
    {
        if (isInitialized)
        {
            return;
        }

        entityBehaviors.clear();
        isInitialized = true;
    }

    void BehaviorSystem::shutdown()
    {
        if (!isInitialized)
        {
            return;
        }

        // Cleanup all behaviors
        for (auto &[entityId, behaviors] : entityBehaviors)
        {
            for (auto &behaviorInstance : behaviors)
            {
                if (behaviorInstance->behavior)
                {
                    behaviorInstance->behavior->cleanup();
                }
            }
        }

        entityBehaviors.clear();
        isInitialized = false;
    }

    void BehaviorSystem::update(float deltaTime)
    {
        if (!isInitialized)
        {
            return;
        }

        // Update all behaviors
        for (auto &[entityId, behaviors] : entityBehaviors)
        {
            for (auto &behaviorInstance : behaviors)
            {
                if (behaviorInstance->behavior)
                {
                    try
                    {
                        behaviorInstance->behavior->update(deltaTime);
                    }
                    catch (const std::exception &e)
                    {
                        // Log error but continue updating other behaviors
                        // In a real implementation, this would use the logging system
                        // LogError("Behavior update failed for entity {}: {}", entityId, e.what());
                    }
                }
            }
        }
    }

    bool BehaviorSystem::attachBehavior(Entity &entity, const std::string &behaviorName,
                                        const Assets::BehaviorParams &params)
    {
        if (!isInitialized)
        {
            return false;
        }

        // Create the behavior instance
        auto behavior = behaviorRegistry.createBehavior(behaviorName);
        if (!behavior)
        {
            return false;
        }

        // Initialize the behavior
        try
        {
            behavior->setEntity(entity);
            behavior->setParams(params);
            behavior->initialize(entity, params);
        }
        catch (const std::exception &e)
        {
            // Initialization failed
            return false;
        }

        // Create behavior instance wrapper
        auto instance = std::make_unique<BehaviorInstance>();
        instance->behavior = std::move(behavior);
        instance->behaviorName = behaviorName;
        instance->entityId = entity.getId();

        // Add to entity's behavior list
        entityBehaviors[entity.getId()].push_back(std::move(instance));

        return true;
    }

    void BehaviorSystem::removeBehaviors(unsigned int entityId)
    {
        auto it = entityBehaviors.find(entityId);
        if (it != entityBehaviors.end())
        {
            // Cleanup behaviors before removal
            for (auto &behaviorInstance : it->second)
            {
                if (behaviorInstance->behavior)
                {
                    behaviorInstance->behavior->cleanup();
                }
            }
            entityBehaviors.erase(it);
        }
    }

    void BehaviorSystem::removeBehavior(unsigned int entityId, const std::string &behaviorName)
    {
        auto it = entityBehaviors.find(entityId);
        if (it != entityBehaviors.end())
        {
            auto &behaviors = it->second;

            auto behaviorIt = std::remove_if(behaviors.begin(), behaviors.end(),
                                             [&behaviorName](const std::unique_ptr<BehaviorInstance> &instance)
                                             {
                                                 if (instance->behaviorName == behaviorName)
                                                 {
                                                     if (instance->behavior)
                                                     {
                                                         instance->behavior->cleanup();
                                                     }
                                                     return true;
                                                 }
                                                 return false;
                                             });

            behaviors.erase(behaviorIt, behaviors.end());

            // Remove entity entry if no behaviors remain
            if (behaviors.empty())
            {
                entityBehaviors.erase(it);
            }
        }
    }

    std::vector<Components::EntityBehavior *> BehaviorSystem::getBehaviors(unsigned int entityId) const
    {
        std::vector<Components::EntityBehavior *> result;

        auto it = entityBehaviors.find(entityId);
        if (it != entityBehaviors.end())
        {
            result.reserve(it->second.size());
            for (const auto &instance : it->second)
            {
                if (instance->behavior)
                {
                    result.push_back(instance->behavior.get());
                }
            }
        }

        return result;
    }

    Components::EntityBehavior *BehaviorSystem::getBehavior(unsigned int entityId,
                                                            const std::string &behaviorName) const
    {
        auto instance = findBehaviorInstance(entityId, behaviorName);
        return instance ? instance->behavior.get() : nullptr;
    }

    bool BehaviorSystem::hasBehaviors(unsigned int entityId) const
    {
        auto it = entityBehaviors.find(entityId);
        return it != entityBehaviors.end() && !it->second.empty();
    }

    size_t BehaviorSystem::getBehaviorCount() const
    {
        size_t count = 0;
        for (const auto &[entityId, behaviors] : entityBehaviors)
        {
            count += behaviors.size();
        }
        return count;
    }

    size_t BehaviorSystem::createSceneBehaviors(const Assets::Package &package, const std::string &sceneName,
                                                const std::unordered_map<std::string, Entity *> &entities)
    {
        if (!isInitialized)
        {
            return 0;
        }

        size_t behaviorCount = 0;

        // Find the scene in the package
        const auto *scene = package.findScene(sceneName);
        if (!scene)
        {
            return 0;
        }

        // Process each entity in the scene
        for (const auto &entityDef : scene->entities)
        {
            // Find the corresponding entity object
            auto entityIt = entities.find(entityDef.id);
            if (entityIt == entities.end())
            {
                continue;
            }

            Entity *entity = entityIt->second;
            if (!entity)
            {
                continue;
            }

            // Create behavior for this entity if it has a behavior class
            if (!entityDef.behaviorClass.empty())
            {
                if (attachBehavior(*entity, entityDef.behaviorClass, entityDef.behaviorParams))
                {
                    behaviorCount++;
                }
            }
        }

        return behaviorCount;
    }

    BehaviorSystem::BehaviorInstance *BehaviorSystem::findBehaviorInstance(unsigned int entityId,
                                                                           const std::string &behaviorName) const
    {
        auto it = entityBehaviors.find(entityId);
        if (it != entityBehaviors.end())
        {
            for (const auto &instance : it->second)
            {
                if (instance->behaviorName == behaviorName)
                {
                    return instance.get();
                }
            }
        }
        return nullptr;
    }

} // namespace Systems


================================================================================
FILE: src\systems\BehaviorSystem.h
================================================================================

#pragma once
#include "../components/EntityBehavior.h"
#include "../assets/Package.h"
#include "../core/Entity.h"
#include <vector>
#include <memory>
#include <unordered_map>

namespace Factory
{
    class BehaviorRegistry;
}

namespace Systems
{

    /**
     * System responsible for managing and updating all entity behaviors.
     * Integrates with the package system to create behaviors from XML definitions.
     */
    class BehaviorSystem
    {
    public:
        BehaviorSystem();
        ~BehaviorSystem();

        /**
         * Initialize the behavior system
         */
        void initialize();

        /**
         * Shutdown the behavior system and cleanup all behaviors
         */
        void shutdown();

        /**
         * Update all active behaviors
         * @param deltaTime Time elapsed since last frame in seconds
         */
        void update(float deltaTime);

        /**
         * Create and attach a behavior to an entity from package definition
         * @param entity The entity to attach the behavior to
         * @param behaviorName Name of the behavior class
         * @param params Parameters from the package XML
         * @return True if behavior was successfully created and attached
         */
        bool attachBehavior(Entity &entity, const std::string &behaviorName,
                            const Assets::BehaviorParams &params);

        /**
         * Remove all behaviors from an entity
         * @param entityId ID of the entity to remove behaviors from
         */
        void removeBehaviors(unsigned int entityId);

        /**
         * Remove a specific behavior from an entity
         * @param entityId ID of the entity
         * @param behaviorName Name of the behavior to remove
         */
        void removeBehavior(unsigned int entityId, const std::string &behaviorName);

        /**
         * Get all behaviors attached to an entity
         * @param entityId ID of the entity
         * @return Vector of behavior pointers (empty if entity has no behaviors)
         */
        std::vector<Components::EntityBehavior *> getBehaviors(unsigned int entityId) const;

        /**
         * Get a specific behavior from an entity
         * @param entityId ID of the entity
         * @param behaviorName Name of the behavior
         * @return Pointer to the behavior, or nullptr if not found
         */
        Components::EntityBehavior *getBehavior(unsigned int entityId, const std::string &behaviorName) const;

        /**
         * Check if an entity has any behaviors
         * @param entityId ID of the entity
         * @return True if the entity has at least one behavior
         */
        bool hasBehaviors(unsigned int entityId) const;

        /**
         * Get the total number of active behaviors in the system
         */
        size_t getBehaviorCount() const;

        /**
         * Create behaviors for all entities defined in a package scene
         * @param package The package containing the scene definition
         * @param sceneName Name of the scene to process
         * @param entities Map of entity names to entity objects
         * @return Number of behaviors successfully created
         */
        size_t createSceneBehaviors(const Assets::Package &package, const std::string &sceneName,
                                    const std::unordered_map<std::string, Entity *> &entities);

    private:
        struct BehaviorInstance
        {
            std::unique_ptr<Components::EntityBehavior> behavior;
            std::string behaviorName;
            unsigned int entityId;
        };

        // Map from entity ID to list of behaviors
        std::unordered_map<unsigned int, std::vector<std::unique_ptr<BehaviorInstance>>> entityBehaviors;

        // Registry for creating behaviors
        Factory::BehaviorRegistry &behaviorRegistry;

        bool isInitialized = false;

        /**
         * Helper method to find a behavior instance
         */
        BehaviorInstance *findBehaviorInstance(unsigned int entityId, const std::string &behaviorName) const;
    };

} // namespace Systems


================================================================================
FILE: src\systems\BootstrapSystem_AssetManagerIntegration.cpp
================================================================================

// Integration between the AssetManager dual asset system and the BootstrapSystem
// This extension ensures internal assets are used as fallbacks for the package system

// Add to BootstrapSystem.h
#include "core/AssetManager.h"

// Additional BootstrapSystem method declarations
private:
void InitializeInternalAssets(AssetManager &assetManager);

// Implementation in BootstrapSystem.cpp
void BootstrapSystem::InitializeInternalAssets(AssetManager &assetManager)
{
    DEBUG_LOG("Registering internal assets with asset registry");

    if (!assetManager.isInitialized())
    {
        DEBUG_LOG("ERROR: AssetManager not initialized");
        return;
    }

    // Register all internal assets with the AssetRegistry
    if (assetManager.registerWithAssetRegistry(assetRegistry_))
    {
        DEBUG_LOG("✅ Internal assets registered with asset registry");
    }
    else
    {
        DEBUG_LOG("⚠️ Failed to register some internal assets");
    }
}

// Modify the Init() method in BootstrapSystem.cpp to include:
/*
void BootstrapSystem::Init()
{
    DEBUG_LOG("Initializing bootstrap system");
    if (initialized)
        return;

    DEBUG_LOG("Initializing bootstrap system...");

    // Initialize internal assets before running asset compilation
    InitializeInternalAssets(assetManager); // Get AssetManager instance from IoC or global

    // Initialize and run asset compilation
    InitializeAssetCompilation();

    // Rest of the method...
}
*/


================================================================================
FILE: src\systems\BootstrapSystem.cpp
================================================================================

#include "BootstrapSystem.h"
#include "events/WorldGenEvents.h"
#include "../    // Check for any .json package files
for (const auto &entry : std::filesystem::directory_iterator(packagesDir))
{
    if (entry.is_regular_file() && entry.path().extension() == ".json")
        ts / AssetCompilerService.h "
#include <iostream>
#include <filesystem>
#include "../debug.h"

             BootstrapSystem::BootstrapSystem(EventBus & eventBus, World & world, AssetRegistry & assetRegistry, AssetPackLoader & assetLoader)
            : eventBus(eventBus),
        worldRef(world), assetRegistry_(assetRegistry), assetLoader_(assetLoader), initialized(false)
        {
            DEBUG_LOG("Initializing BootstrapSystem");
        }

    void BootstrapSystem::update(World & world, float deltaTime)
    {
        // Bootstrap system doesn't need continuous updates
    }

    void BootstrapSystem::Init()
    {
        DEBUG_LOG("Initializing bootstrap system");
        if (initialized)
            return;

        DEBUG_LOG("Initializing bootstrap system...");

        // Initialize and run asset compilation
        InitializeAssetCompilation();

        // Try to load available packages
        bool packagesLoaded = LoadAvailablePackages();

        if (!packagesLoaded)
        {
            DEBUG_LOG("No asset packages found, triggering default world generation...");
            eventBus.publish(NoPackagesFoundEvent{});
        }
        else
        {
            DEBUG_LOG("Asset packages loaded successfully. Available packages:");
            for (const auto &package : assetRegistry_.getLoadedPackages())
            {
                DEBUG_LOG("  - " << package);
            }

            // Check if we have a default scene configuration to use for world generation
            const std::string *defaultScene = assetRegistry_.getDefaultScene();
            if (defaultScene != nullptr)
            {
                DEBUG_LOG("Found default scene configuration, triggering world generation from XML...");
                // Trigger world generation with the loaded scene configuration
                eventBus.publish(DefaultWorldGeneratedEvent{});
            }
            else
            {
                DEBUG_LOG("No default scene found in loaded packages, falling back to default world generation...");
                eventBus.publish(NoPackagesFoundEvent{});
            }
        }

        initialized = true;
    }

    void BootstrapSystem::PostFrameUpdate()
    {
        DEBUG_LOG("Post-frame update in BootstrapSystem");
        // Could handle hot-reloading here in the future
    }

    bool BootstrapSystem::CheckForAssetPackages()
    {
        // Check if assets/packages directory exists and has package files
        std::filesystem::path packagesDir = "assets/packages";

        if (!std::filesystem::exists(packagesDir))
        {
            return false;
        }

        // Check for any .json package files
        for (const auto &entry : std::filesystem::recursive_directory_iterator(packagesDir))
        {
            if (entry.is_regular_file() && entry.path().extension() == ".json")
            {
                return true;
            }
        }

        // Check runtime/data/packs for .pak files
        std::filesystem::path packsDir = "assets/runtime/data/packs";

        if (std::filesystem::exists(packsDir))
        {
            for (const auto &entry : std::filesystem::directory_iterator(packsDir))
            {
                if (entry.is_regular_file() && entry.path().extension() == ".pak")
                {
                    return true;
                }
            }
        }

        return false;
    }

    bool BootstrapSystem::LoadAvailablePackages()
    {
        DEBUG_LOG("Loading available packages");
        std::filesystem::path packagesDir = "assets/packages";

        if (!std::filesystem::exists(packagesDir))
        {
            return false;
        }

        bool loadedAny = false;

        // Load DeveloperPackage first (fallback package)
        std::filesystem::path devPackagePath = packagesDir / "DeveloperPackage" / "package.json";
        if (std::filesystem::exists(devPackagePath))
        {
            if (assetLoader_.loadPackage(devPackagePath.string()))
            {
                loadedAny = true;
            }
        }

        // Load other packages
        for (const auto &entry : std::filesystem::directory_iterator(packagesDir))
        {
            if (entry.is_directory() && entry.path().filename() != "DeveloperPackage")
            {
                std::filesystem::path packageJson = entry.path() / "package.json";
                if (std::filesystem::exists(packageJson))
                {
                    if (assetLoader_.loadPackage(packageJson.string()))
                    {
                        loadedAny = true;
                    }
                }
            }
        }

        return loadedAny;
    }

    void BootstrapSystem::InitializeAssetCompilation()
    {
        DEBUG_LOG("Initializing asset compilation pipeline");
        DEBUG_LOG("Initializing asset compilation pipeline...");

        try
        {
            // Create asset compiler service
            AssetCompilation::AssetCompilerService compiler;
            compiler.setDebugMode(true);
            compiler.setOptimizationLevel(1);
            compiler.setOutputDirectory("runtime/data/compiled");

            // Compile assets from packages directory only
            if (std::filesystem::exists("assets/packages"))
            {
                DEBUG_LOG("Compiling assets from 'assets/packages' directory...");
                auto results = compiler.compileDirectory("assets/packages", true);

                int successful = 0;
                int failed = 0;
                int skipped = 0;

                for (const auto &result : results)
                {
                    if (result.success)
                    {
                        if (result.errorMessage.find("skipped") != std::string::npos)
                        {
                            skipped++;
                        }
                        else
                        {
                            successful++;
                        }
                    }
                    else
                    {
                        failed++;
                        std::cerr << "Asset compilation failed: " << result.errorMessage << std::endl;
                    }
                }

                DEBUG_LOG("Asset compilation completed: "
                          << successful << " compiled, "
                          << skipped << " skipped, "
                          << failed << " failed");
            }

            // Compile assets from packages
            std::string packagesDir = "assets/packages";
            if (std::filesystem::exists(packagesDir))
            {
                DEBUG_LOG("Compiling package assets...");

                for (const auto &entry : std::filesystem::directory_iterator(packagesDir))
                {
                    if (entry.is_directory())
                    {
                        std::string packagePath = entry.path().string();
                        DEBUG_LOG("Compiling package: " << packagePath);

                        auto results = compiler.compileAssetPackage(packagePath);

                        for (const auto &result : results)
                        {
                            if (!result.success && result.errorMessage.find("skipped") == std::string::npos)
                            {
                                std::cerr << "Package asset compilation failed: " << result.errorMessage << std::endl;
                            }
                        }
                    }
                }
            }

            // Print compilation statistics
            const auto &stats = compiler.getStatistics();
            DEBUG_LOG("Asset compilation statistics:");
            DEBUG_LOG("  Assets compiled: " << stats.assetsCompiled);
            DEBUG_LOG("  Assets skipped: " << stats.assetsSkipped);
            DEBUG_LOG("  Total compilation time: " << stats.totalCompilationTime << "ms");

            if (stats.totalInputSize > 0)
            {
                double compressionRatio = (double)stats.totalOutputSize / stats.totalInputSize;
                DEBUG_LOG("  Compression ratio: " << (compressionRatio * 100.0) << "%");
            }
        }
        catch (const std::exception &e)
        {
            std::cerr << "Error during asset compilation: " << e.what() << std::endl;
        }
    }


================================================================================
FILE: src\systems\BootstrapSystem.h
================================================================================

#pragma once
#include "core/ISystem.h"
#include "core/EventBus.h"
#include "core/World.h"
#include "core/AssetRegistry.h"
#include "core/AssetPackLoader.h"
#include "events/WorldGenEvents.h"

/**
 * Bootstrap system responsible for initializing the world, loading assets, and checking for asset packages.
 */
class BootstrapSystem : public ISystem
{
public:
    BootstrapSystem(EventBus &eventBus, World &world, AssetRegistry &assetRegistry, AssetPackLoader &assetLoader);
    virtual ~BootstrapSystem() = default;

    void update(World &world, float deltaTime) override;
    void Init();
    void PostFrameUpdate();

private:
    EventBus &eventBus;
    World &worldRef;
    AssetRegistry &assetRegistry_;
    AssetPackLoader &assetLoader_;
    bool initialized;

    bool CheckForAssetPackages();
    bool LoadAvailablePackages();
    void InitializeAssetCompilation();
};



================================================================================
FILE: src\systems\CelShadingSystem.h
================================================================================

/**
 * @file CelShadingSystem.h
 * @brief Cel-shading (toon shading) rendering system
 *
 * The CelShadingSystem implements stylized cel-shading with band quantization
 * and rim lighting for the voxel busy indicator scene. Features include:
 * - Multi-band light quantization for cartoon appearance
 * - Rim lighting for object definition
 * - Configurable shading parameters
 * - Integration with Math utilities for calculations
 * - Support for multiple light sources
 *
 * @author Generated for Voxel Busy Indicator Scene
 * @date 2024
 */

#pragma once

#include "../math/MathUtils.h"
#include <vector>
#include <cstdint>

/**
 * @brief Cel-shading rendering system
 *
 * Implements stylized cartoon-like shading with quantized lighting
 * bands and rim lighting effects for enhanced visual definition.
 */
class CelShadingSystem
{
public:
    /**
     * @brief Light source definition
     */
    struct Light
    {
        Math::float3 direction; /**< Light direction (normalized) */
        Math::float3 color;     /**< Light color (RGB) */
        float intensity;        /**< Light intensity */
        bool enabled;           /**< Whether light is active */

        Light() : direction{0, -1, 0}, color{1, 1, 1}, intensity(1.0f), enabled(true) {}
        Light(const Math::float3 &dir, const Math::float3 &col, float intens)
            : direction(Math::norm(dir)), color(col), intensity(intens), enabled(true) {}
    };

    /**
     * @brief Cel-shading parameters
     */
    struct CelShadingParams
    {
        uint32_t bandCount;          /**< Number of lighting bands */
        float bandSmoothness;        /**< Smoothness between bands */
        float rimPower;              /**< Rim lighting power */
        float rimIntensity;          /**< Rim lighting intensity */
        Math::float3 rimColor;       /**< Rim lighting color */
        Math::float3 ambientColor;   /**< Ambient light color */
        float ambientIntensity;      /**< Ambient light intensity */
        bool enableRimLighting;      /**< Whether rim lighting is enabled */
        bool enableBandQuantization; /**< Whether to quantize lighting bands */

        CelShadingParams()
            : bandCount(4), bandSmoothness(0.1f), rimPower(2.0f), rimIntensity(0.5f), rimColor{0.8f, 0.9f, 1.0f}, ambientColor{0.2f, 0.3f, 0.4f}, ambientIntensity(0.3f), enableRimLighting(true), enableBandQuantization(true)
        {
        }
    };

    /**
     * @brief Material properties for cel-shading
     */
    struct CelMaterial
    {
        Math::float3 baseColor;   /**< Base material color */
        Math::float3 shadowColor; /**< Color in shadowed areas */
        float roughness;          /**< Surface roughness [0,1] */
        float metallic;           /**< Metallic factor [0,1] */
        float subsurface;         /**< Subsurface scattering [0,1] */

        CelMaterial()
            : baseColor{0.8f, 0.8f, 0.8f}, shadowColor{0.3f, 0.3f, 0.5f}, roughness(0.5f), metallic(0.0f), subsurface(0.0f)
        {
        }

        CelMaterial(const Math::float3 &base, const Math::float3 &shadow)
            : baseColor(base), shadowColor(shadow), roughness(0.5f), metallic(0.0f), subsurface(0.0f)
        {
        }
    };

    /**
     * @brief Shading calculation result
     */
    struct ShadingResult
    {
        Math::float3 finalColor; /**< Final shaded color */
        float lightIntensity;    /**< Overall light intensity */
        float rimFactor;         /**< Rim lighting factor */
        uint32_t activeBand;     /**< Active lighting band index */

        ShadingResult() : finalColor{0, 0, 0}, lightIntensity(0), rimFactor(0), activeBand(0) {}
    };

private:
    /** @brief Current shading parameters */
    CelShadingParams params;

    /** @brief Active light sources */
    std::vector<Light> lights;

    /** @brief Cached band thresholds for performance */
    std::vector<float> bandThresholds;

public:
    /**
     * @brief Construct a new CelShadingSystem
     *
     * @param shadingParams Initial shading parameters
     */
    CelShadingSystem(const CelShadingParams &shadingParams = CelShadingParams())
        : params(shadingParams)
    {
        updateBandThresholds();
        setupDefaultLighting();
    }

    /**
     * @brief Calculate cel-shaded lighting for a surface point
     *
     * @param position World position of the surface point
     * @param normal Surface normal (normalized)
     * @param viewDirection Direction to viewer (normalized)
     * @param material Material properties
     * @return Shading calculation result
     */
    ShadingResult calculateShading(const Math::float3 &position,
                                   const Math::float3 &normal,
                                   const Math::float3 &viewDirection,
                                   const CelMaterial &material)
    {
        ShadingResult result;

        // Start with ambient lighting
        Math::float3 color = Math::scale(
            Math::mul(params.ambientColor, material.baseColor),
            params.ambientIntensity);

        float totalLightIntensity = 0.0f;

        // Process each light source
        for (const auto &light : lights)
        {
            if (!light.enabled)
                continue;

            // Calculate lighting contribution
            float dotNL = Math::dot(normal, Math::scale(light.direction, -1.0f));
            float lightContribution = Math::clamp(dotNL, 0.0f, 1.0f);

            // Apply cel-shading quantization
            if (params.enableBandQuantization)
            {
                lightContribution = quantizeToBands(lightContribution);
            }

            // Combine with light color and intensity
            Math::float3 lightColor = Math::scale(
                Math::mul(light.color, material.baseColor),
                lightContribution * light.intensity);

            color = Math::add(color, lightColor);
            totalLightIntensity += lightContribution * light.intensity;
        }

        // Apply rim lighting if enabled
        float rimFactor = 0.0f;
        if (params.enableRimLighting)
        {
            rimFactor = calculateRimLighting(normal, viewDirection);
            Math::float3 rimContribution = Math::scale(params.rimColor, rimFactor * params.rimIntensity);
            color = Math::add(color, rimContribution);
        }

        // Apply shadow color mixing in dark areas
        float shadowFactor = 1.0f - Math::clamp(totalLightIntensity, 0.0f, 1.0f);
        if (shadowFactor > 0.0f)
        {
            Math::float3 shadowContribution = Math::scale(material.shadowColor, shadowFactor);
            color = Math::lerp3(color, shadowContribution, shadowFactor * 0.5f);
        }

        // Store results
        result.finalColor = color;
        result.lightIntensity = totalLightIntensity;
        result.rimFactor = rimFactor;
        result.activeBand = getBandIndex(totalLightIntensity);

        return result;
    }

    /**
     * @brief Set cel-shading parameters
     *
     * @param newParams New shading parameters
     */
    void setParams(const CelShadingParams &newParams)
    {
        params = newParams;
        updateBandThresholds();
    }

    /**
     * @brief Get current cel-shading parameters
     *
     * @return Current parameters
     */
    const CelShadingParams &getParams() const
    {
        return params;
    }

    /**
     * @brief Add a light source
     *
     * @param light Light to add
     */
    void addLight(const Light &light)
    {
        lights.push_back(light);
    }

    /**
     * @brief Remove all lights
     */
    void clearLights()
    {
        lights.clear();
    }

    /**
     * @brief Set directional light (sun/moon)
     *
     * @param direction Light direction
     * @param color Light color
     * @param intensity Light intensity
     */
    void setDirectionalLight(const Math::float3 &direction,
                             const Math::float3 &color = {1, 1, 1},
                             float intensity = 1.0f)
    {
        clearLights();
        addLight(Light(direction, color, intensity));
    }

    /**
     * @brief Setup default three-point lighting
     */
    void setupDefaultLighting()
    {
        clearLights();

        // Key light (main directional light)
        addLight(Light({-0.3f, -0.7f, -0.6f}, {1.0f, 0.95f, 0.8f}, 1.0f));

        // Fill light (softer secondary light)
        addLight(Light({0.5f, -0.2f, 0.8f}, {0.6f, 0.7f, 1.0f}, 0.4f));

        // Rim light (back light for definition)
        addLight(Light({0.2f, 0.8f, -0.5f}, {0.9f, 0.9f, 1.0f}, 0.3f));
    }

    /**
     * @brief Get number of active lights
     *
     * @return Number of enabled lights
     */
    size_t getActiveLightCount() const
    {
        size_t count = 0;
        for (const auto &light : lights)
        {
            if (light.enabled)
                count++;
        }
        return count;
    }

private:
    /**
     * @brief Quantize light intensity to discrete bands
     *
     * @param intensity Input light intensity [0,1]
     * @return Quantized intensity
     */
    float quantizeToBands(float intensity)
    {
        if (bandThresholds.empty())
            return intensity;

        // Use Math utility for band quantization
        return Math::quantizeToBands(intensity, bandThresholds, params.bandSmoothness);
    }

    /**
     * @brief Calculate rim lighting factor
     *
     * @param normal Surface normal
     * @param viewDirection View direction
     * @return Rim lighting factor [0,1]
     */
    float calculateRimLighting(const Math::float3 &normal, const Math::float3 &viewDirection)
    {
        return Math::calculateRimLighting(normal, viewDirection, params.rimPower);
    }

    /**
     * @brief Get the active lighting band index
     *
     * @param intensity Light intensity
     * @return Band index
     */
    uint32_t getBandIndex(float intensity)
    {
        for (size_t i = 0; i < bandThresholds.size(); ++i)
        {
            if (intensity <= bandThresholds[i])
            {
                return static_cast<uint32_t>(i);
            }
        }
        return static_cast<uint32_t>(bandThresholds.size() - 1);
    }

    /**
     * @brief Update cached band threshold values
     */
    void updateBandThresholds()
    {
        bandThresholds.clear();
        if (params.bandCount == 0)
            return;

        // Create evenly spaced thresholds
        for (uint32_t i = 1; i <= params.bandCount; ++i)
        {
            float threshold = static_cast<float>(i) / static_cast<float>(params.bandCount);
            bandThresholds.push_back(threshold);
        }
    }
};



================================================================================
FILE: src\systems\CloudPrecessionSystem.h
================================================================================

/**
 * @file CloudPrecessionSystem.h
 * @brief Animation system for voxel cloud orbital precession
 *
 * The CloudPrecessionSystem manages the complex orbital motion of
 * voxel cloud formations with precession and lifecycle management.
 * Features include:
 * - Dual orbital system management (primary + precession)
 * - Cloud lifecycle coordination (spawn, active, despawn)
 * - Hierarchical cloud organization
 * - Performance optimization for large cloud systems
 * - Integration with Math utilities for orbital calculations
 *
 * @author Generated for Voxel Busy Indicator Scene
 * @date 2024
 */

#pragma once

#include "../math/MathUtils.h"
#include "../components/VoxelCloudC.h"
#include "../components/TransformC.h"
#include <vector>
#include <memory>
#include <unordered_map>
#include <queue>

/**
 * @brief Animation system for voxel cloud precession
 *
 * Manages complex orbital cloud formations with precession,
 * lifecycle management, and hierarchical organization.
 */
class CloudPrecessionSystem
{
public:
    /**
     * @brief Entity with cloud precession
     */
    struct CloudEntity
    {
        uint32_t entityId;                     /**< Entity identifier */
        std::shared_ptr<VoxelCloudC> cloud;    /**< Voxel cloud component */
        std::shared_ptr<TransformC> transform; /**< Transform component */
        bool active;                           /**< Whether entity is active */
        float spawnTime;                       /**< Time when cloud was spawned */

        CloudEntity(uint32_t id, std::shared_ptr<VoxelCloudC> cl, std::shared_ptr<TransformC> trans)
            : entityId(id), cloud(cl), transform(trans), active(true), spawnTime(0.0f) {}
    };

    /**
     * @brief Cloud formation for organized group behavior
     */
    struct CloudFormation
    {
        std::string name;                /**< Formation name */
        std::vector<uint32_t> entityIds; /**< Clouds in this formation */
        Math::float3 centerPoint;        /**< Formation center point */
        float formationRadius;           /**< Formation extent radius */
        float rotationSpeed;             /**< Formation rotation speed */
        float precessionSpeed;           /**< Formation precession speed */
        Math::float3 precessionAxis;     /**< Formation precession axis */
        bool synchronized;               /**< Whether formation is synchronized */

        CloudFormation(const std::string &formationName = "default")
            : name(formationName), centerPoint{0, 0, 0}, formationRadius(10.0f), rotationSpeed(0.1f), precessionSpeed(0.02f), precessionAxis{0, 1, 0}, synchronized(true)
        {
        }
    };

    /**
     * @brief Cloud spawning configuration
     */
    struct SpawnConfig
    {
        float spawnRate;          /**< Clouds per second */
        float spawnRadius;        /**< Spawn radius from center */
        float cloudLifetime;      /**< Individual cloud lifetime */
        uint32_t maxClouds;       /**< Maximum concurrent clouds */
        Math::float3 spawnCenter; /**< Center point for spawning */
        float randomOffset;       /**< Random position offset */

        SpawnConfig()
            : spawnRate(0.1f), spawnRadius(8.0f), cloudLifetime(60.0f), maxClouds(20), spawnCenter{0, 0, 0}, randomOffset(2.0f)
        {
        }
    };

    /**
     * @brief System performance statistics
     */
    struct PerformanceStats
    {
        uint32_t totalClouds;     /**< Total active clouds */
        uint32_t totalVoxels;     /**< Total active voxel elements */
        float updateTime;         /**< Last update time in milliseconds */
        uint32_t cloudsSpawned;   /**< Clouds spawned this frame */
        uint32_t cloudsDespawned; /**< Clouds despawned this frame */

        PerformanceStats() : totalClouds(0), totalVoxels(0), updateTime(0), cloudsSpawned(0), cloudsDespawned(0) {}
    };

private:
    /** @brief All registered cloud entities */
    std::vector<CloudEntity> entities;

    /** @brief Cloud formations for organized behavior */
    std::unordered_map<std::string, CloudFormation> formations;

    /** @brief Spawn configuration */
    SpawnConfig spawnConfig;

    /** @brief Global time accumulator */
    float globalTime;

    /** @brief Global time scale */
    float globalTimeScale;

    /** @brief Whether system is active */
    bool systemActive;

    /** @brief Performance statistics */
    PerformanceStats stats;

    /** @brief Spawn timer accumulator */
    float spawnTimer;

    /** @brief Global center point for orbital motion */
    Math::float3 globalCenter;

    /** @brief Random state for procedural generation */
    uint32_t randomState;

    /** @brief Queue of entities to be removed */
    std::queue<uint32_t> removalQueue;

public:
    /**
     * @brief Construct a new CloudPrecessionSystem
     *
     * @param center Global center point for cloud motion
     */
    CloudPrecessionSystem(const Math::float3 &center = {0, 0, 0})
        : globalTime(0.0f), globalTimeScale(1.0f), systemActive(true), spawnTimer(0.0f), globalCenter(center), randomState(12345)
    {
        // Create default formation
        formations["default"] = CloudFormation("default");
    }

    /**
     * @brief Update all cloud animations
     *
     * @param deltaTime Time elapsed since last frame
     */
    void update(float deltaTime)
    {
        if (!systemActive)
            return;

        // Reset frame statistics
        stats.cloudsSpawned = 0;
        stats.cloudsDespawned = 0;
        stats.totalClouds = 0;
        stats.totalVoxels = 0;

        float startTime = globalTime; // For performance measurement

        float scaledDeltaTime = deltaTime * globalTimeScale;
        globalTime += scaledDeltaTime;
        spawnTimer += scaledDeltaTime;

        // Update all cloud entities
        for (auto &entity : entities)
        {
            if (!entity.active || !entity.cloud || !entity.transform)
                continue;

            updateCloudEntity(entity, scaledDeltaTime);
            stats.totalClouds++;
        }

        // Update formations
        updateFormations(scaledDeltaTime);

        // Handle spawning
        updateSpawning();

        // Handle removal of despawned clouds
        updateRemoval();

        // Calculate performance metrics
        stats.updateTime = (globalTime - startTime) * 1000.0f; // Convert to milliseconds
    }

    /**
     * @brief Register an entity for cloud animation
     *
     * @param entityId Entity identifier
     * @param cloud Voxel cloud component
     * @param transform Transform component
     * @param formationName Formation to assign entity to
     */
    void registerEntity(uint32_t entityId,
                        std::shared_ptr<VoxelCloudC> cloud,
                        std::shared_ptr<TransformC> transform,
                        const std::string &formationName = "default")
    {
        entities.emplace_back(entityId, cloud, transform);
        entities.back().spawnTime = globalTime;

        // Add to formation
        auto &formation = getOrCreateFormation(formationName);
        formation.entityIds.push_back(entityId);
    }

    /**
     * @brief Unregister an entity from cloud animation
     *
     * @param entityId Entity to remove
     */
    void unregisterEntity(uint32_t entityId)
    {
        // Remove from entities list
        entities.erase(
            std::remove_if(entities.begin(), entities.end(),
                           [entityId](const CloudEntity &e)
                           { return e.entityId == entityId; }),
            entities.end());

        // Remove from all formations
        for (auto &[formationName, formation] : formations)
        {
            formation.entityIds.erase(
                std::remove(formation.entityIds.begin(), formation.entityIds.end(), entityId),
                formation.entityIds.end());
        }
    }

    /**
     * @brief Create or get a cloud formation
     *
     * @param formationName Name of the formation
     * @return Reference to the formation
     */
    CloudFormation &getOrCreateFormation(const std::string &formationName)
    {
        if (formations.find(formationName) == formations.end())
        {
            formations[formationName] = CloudFormation(formationName);
        }
        return formations[formationName];
    }

    /**
     * @brief Set formation parameters
     *
     * @param formationName Formation name
     * @param centerPoint Formation center
     * @param radius Formation radius
     * @param rotationSpeed Formation rotation speed
     * @param precessionSpeed Formation precession speed
     */
    void setFormationParams(const std::string &formationName,
                            const Math::float3 &centerPoint = {0, 0, 0},
                            float radius = 10.0f,
                            float rotationSpeed = 0.1f,
                            float precessionSpeed = 0.02f)
    {
        auto &formation = getOrCreateFormation(formationName);
        formation.centerPoint = centerPoint;
        formation.formationRadius = radius;
        formation.rotationSpeed = rotationSpeed;
        formation.precessionSpeed = precessionSpeed;
    }

    /**
     * @brief Set spawn configuration
     *
     * @param config New spawn configuration
     */
    void setSpawnConfig(const SpawnConfig &config)
    {
        spawnConfig = config;
    }

    /**
     * @brief Get current spawn configuration
     *
     * @return Current spawn config
     */
    const SpawnConfig &getSpawnConfig() const
    {
        return spawnConfig;
    }

    /**
     * @brief Set global center point
     *
     * @param center New global center
     */
    void setGlobalCenter(const Math::float3 &center)
    {
        globalCenter = center;
    }

    /**
     * @brief Get global center point
     *
     * @return Current global center
     */
    const Math::float3 &getGlobalCenter() const
    {
        return globalCenter;
    }

    /**
     * @brief Set global time scale
     *
     * @param scale Time scaling factor (1.0 = normal speed)
     */
    void setGlobalTimeScale(float scale)
    {
        globalTimeScale = scale;
    }

    /**
     * @brief Get global time scale
     *
     * @return Current time scale
     */
    float getGlobalTimeScale() const
    {
        return globalTimeScale;
    }

    /**
     * @brief Pause/resume cloud animations
     *
     * @param active Whether system should be active
     */
    void setActive(bool active)
    {
        systemActive = active;
    }

    /**
     * @brief Check if system is active
     *
     * @return True if system is running
     */
    bool isActive() const
    {
        return systemActive;
    }

    /**
     * @brief Get performance statistics
     *
     * @return Current performance stats
     */
    const PerformanceStats &getPerformanceStats() const
    {
        return stats;
    }

    /**
     * @brief Get number of registered entities
     *
     * @return Entity count
     */
    size_t getEntityCount() const
    {
        return entities.size();
    }

    /**
     * @brief Get number of active entities
     *
     * @return Active entity count
     */
    size_t getActiveEntityCount() const
    {
        size_t count = 0;
        for (const auto &entity : entities)
        {
            if (entity.active)
                count++;
        }
        return count;
    }

private:
    /**
     * @brief Update a single cloud entity
     *
     * @param entity Entity to update
     * @param deltaTime Time delta for this update
     */
    void updateCloudEntity(CloudEntity &entity, float deltaTime)
    {
        // Update cloud component with global center
        entity.cloud->update(deltaTime, globalCenter);

        // Get current world position and orientation from cloud
        Math::float3 position = entity.cloud->getWorldPosition();
        Math::quat orientation = entity.cloud->getWorldOrientation();

        // Update transform component
        entity.transform->setPosition(position);
        entity.transform->setRotation(orientation);

        // Count voxel elements for statistics
        auto elements = entity.cloud->getActiveElements();
        stats.totalVoxels += elements.size();

        // Check if cloud should be despawned
        if (entity.cloud->shouldDestroy())
        {
            removalQueue.push(entity.entityId);
            stats.cloudsDespawned++;
        }
    }

    /**
     * @brief Update all formations
     *
     * @param deltaTime Time delta for this update
     */
    void updateFormations(float deltaTime)
    {
        for (auto &[formationName, formation] : formations)
        {
            updateFormation(formation, deltaTime);
        }
    }

    /**
     * @brief Update a specific cloud formation
     *
     * @param formation Formation to update
     * @param deltaTime Time delta for this update
     */
    void updateFormation(CloudFormation &formation, float deltaTime)
    {
        if (!formation.synchronized || formation.entityIds.empty())
            return;

        // Calculate formation-level transformations
        float rotationAngle = globalTime * formation.rotationSpeed;
        float precessionAngle = globalTime * formation.precessionSpeed;

        // Apply formation-level effects to member clouds
        for (uint32_t entityId : formation.entityIds)
        {
            for (auto &entity : entities)
            {
                if (entity.entityId == entityId && entity.active && entity.cloud)
                {
                    applyFormationEffects(entity, formation, rotationAngle, precessionAngle);
                }
            }
        }
    }

    /**
     * @brief Apply formation-level effects to a cloud entity
     *
     * @param entity Cloud entity to affect
     * @param formation Formation parameters
     * @param rotationAngle Current formation rotation
     * @param precessionAngle Current formation precession
     */
    void applyFormationEffects(CloudEntity &entity,
                               const CloudFormation &formation,
                               float rotationAngle,
                               float precessionAngle)
    {
        // Apply formation-level orbital modifications
        auto params = entity.cloud->getParams();

        // Modify primary orbit based on formation
        params.primaryOrbit.phaseOffset += rotationAngle * 0.1f;

        // Modify precession based on formation precession
        params.precessionOrbit.phaseOffset += precessionAngle;

        entity.cloud->setParams(params);
    }

    /**
     * @brief Update cloud spawning
     */
    void updateSpawning()
    {
        if (spawnConfig.spawnRate <= 0.0f)
            return;
        if (getActiveEntityCount() >= spawnConfig.maxClouds)
            return;

        float spawnInterval = 1.0f / spawnConfig.spawnRate;
        while (spawnTimer >= spawnInterval)
        {
            spawnNewCloud();
            spawnTimer -= spawnInterval;
            stats.cloudsSpawned++;
        }
    }

    /**
     * @brief Spawn a new cloud entity
     */
    void spawnNewCloud()
    {
        // Generate random spawn position
        float angle = 2.0f * Math::Pi * Math::rand01(randomState);
        float radius = spawnConfig.spawnRadius * Math::rand01(randomState);

        Math::float3 spawnPos = {
            spawnConfig.spawnCenter.x + radius * std::cos(angle),
            spawnConfig.spawnCenter.y + (Math::rand01(randomState) - 0.5f) * spawnConfig.randomOffset,
            spawnConfig.spawnCenter.z + radius * std::sin(angle)};

        // Create new cloud component with random parameters
        auto cloud = std::make_shared<VoxelCloudC>(spawnConfig.cloudLifetime, randomState);
        auto transform = std::make_shared<TransformC>();

        // Set initial transform
        transform->setPosition(spawnPos);

        // Generate unique entity ID
        uint32_t newEntityId = static_cast<uint32_t>(entities.size()) + 1000;

        // Register the new entity
        registerEntity(newEntityId, cloud, transform, "default");
    }

    /**
     * @brief Update removal of despawned clouds
     */
    void updateRemoval()
    {
        while (!removalQueue.empty())
        {
            uint32_t entityId = removalQueue.front();
            removalQueue.pop();
            unregisterEntity(entityId);
        }
    }
};



================================================================================
FILE: src\systems\ConsoleSystem.cpp
================================================================================

#include "ConsoleSystem.h"
#include "../core/World.h"
#include <iostream>
#include "../debug.h"

ConsoleSystem::ConsoleSystem(EventBus &eventBus)
    : eventBus(eventBus), isVisible(false)
{
    DEBUG_LOG("Initializing ConsoleSystem");
    // Subscribe to console toggle events
    eventBus.subscribe(EventType::ConsoleToggle, [this](const IEvent &event)
                       {
        const auto& toggleEvent = static_cast<const ConsoleToggleEvent&>(event);
        OnConsoleToggle(toggleEvent); });

    AddOutput("Console initialized. Press ~ to toggle visibility.");
}

void ConsoleSystem::update(World &world, float deltaTime)
{
    // Console system doesn't need continuous updates
}

void ConsoleSystem::AddOutput(const std::string &message)
{
    DEBUG_LOG("Adding output to console: '" + message + "'");
    outputBuffer.push_back(message);
    if (outputBuffer.size() > 100) // Limit buffer size
    {
        outputBuffer.erase(outputBuffer.begin());
    }
}

void ConsoleSystem::ExecuteCommand(const std::string &command)
{
    DEBUG_LOG("Executing console command: '" + command + "'");
    AddOutput("> " + command);

    // TODO: Implement command parsing and execution
    if (command == "help")
    {
        AddOutput("Available commands:");
        AddOutput("  help - Show this help");
        AddOutput("  clear - Clear console");
        AddOutput("  quit - Exit application");
    }
    else if (command == "clear")
    {
        outputBuffer.clear();
        AddOutput("Console cleared.");
    }
    else if (command == "quit")
    {
        AddOutput("Quitting application...");
        // TODO: Publish quit event
    }
    else
    {
        AddOutput("Unknown command: " + command);
    }
}

void ConsoleSystem::ToggleVisibility()
{
    DEBUG_LOG("Toggling console visibility");
    isVisible = !isVisible;
    // TODO: Publish visibility changed event
}

void ConsoleSystem::OnConsoleToggle(const ConsoleToggleEvent &event)
{
    DEBUG_LOG("Handling console toggle event");
    ToggleVisibility();
}

const std::vector<std::string> &ConsoleSystem::GetOutputBuffer() const
{
    return outputBuffer;
}

bool ConsoleSystem::IsVisible() const
{
    return isVisible;
}



================================================================================
FILE: src\systems\ConsoleSystem.h
================================================================================

#pragma once
#include "../core/ISystem.h"
#include "../core/EventBus.h"
#include "../events/InputEvents.h"
#include <string>
#include <vector>
#include <functional>

class World;

/**
 * Console system for managing developer console state and command processing.
 */
class ConsoleSystem : public ISystem
{
public:
    ConsoleSystem(EventBus &eventBus);
    virtual ~ConsoleSystem() = default;

    void update(World &world, float deltaTime) override;

    void AddOutput(const std::string &message);
    void ExecuteCommand(const std::string &command);
    void ToggleVisibility();

    const std::vector<std::string> &GetOutputBuffer() const;
    bool IsVisible() const;

private:
    EventBus &eventBus;
    bool isVisible;
    std::vector<std::string> outputBuffer;

    void OnConsoleToggle(const ConsoleToggleEvent &event);
};



================================================================================
FILE: src\systems\ContrailSystem.h
================================================================================

#pragma once

#include "../core/System.h"
#include "../components/ContrailComponent.h"
#include "../math/MathUtils.h"
#include <vector>
#include <memory>
#include <map>

namespace ECS
{

    // ============================================================================
    // Particle Trail Data Structures
    // ============================================================================

    struct TrailParticle
    {
        Math::float3 position;
        Math::float3 velocity;
        float life = 1.0f; // 0.0 = dead, 1.0 = just spawned
        float size = 1.0f;
        Math::float4 color = {1.0f, 1.0f, 1.0f, 1.0f};
        float age = 0.0f; // Time since spawn

        // Trail-specific properties
        float trailWeight = 1.0f; // Influence on trail curve
        Math::float3 normal;      // For ribbon trails
        float distance = 0.0f;    // Distance along trail
    };

    struct TrailSegment
    {
        Math::float3 startPos;
        Math::float3 endPos;
        Math::float3 startNormal;
        Math::float3 endNormal;
        float startWidth;
        float endWidth;
        Math::float4 startColor;
        Math::float4 endColor;
        float startLife;
        float endLife;
        float length;
    };

    struct TrailMesh
    {
        std::vector<Math::float3> vertices;
        std::vector<Math::float3> normals;
        std::vector<Math::float2> uvs;
        std::vector<Math::float4> colors;
        std::vector<uint32_t> indices;

        bool needsUpdate = true;
        uint32_t vertexBufferId = 0;
        uint32_t indexBufferId = 0;

        void clear();
        void reserve(size_t vertexCount, size_t indexCount);
    };

    // ============================================================================
    // Contrail System Configuration
    // ============================================================================

    struct ContrailSystemConfig
    {
        // Performance settings
        uint32_t maxParticlesPerTrail = 100;
        uint32_t maxActiveTrails = 50;
        float updateFrequency = 60.0f; // Updates per second
        float cullDistance = 1000.0f;  // Distance beyond which trails are culled

        // Quality settings
        uint32_t segmentSubdivisions = 2; // Smoothing subdivisions
        bool enableCollision = false;
        bool enableWindEffect = false;
        bool enableTurbulence = false;

        // Rendering settings
        bool enableAlphaBlending = true;
        bool enableDepthWrite = false;
        bool enableSoftParticles = true;
        float fadeNearDistance = 1.0f;
        float fadeFarDistance = 100.0f;

        // Memory management
        bool useObjectPooling = true;
        uint32_t initialPoolSize = 1000;
        uint32_t poolGrowthSize = 500;
    };

    // ============================================================================
    // Main Contrail System
    // ============================================================================

    class ContrailSystem : public System
    {
    public:
        explicit ContrailSystem(const ContrailSystemConfig &config = ContrailSystemConfig{});
        ~ContrailSystem() override;

        // System interface
        void initialize() override;
        void update(float deltaTime) override;
        void render() override;
        void shutdown() override;

        // Configuration management
        void setConfig(const ContrailSystemConfig &config);
        const ContrailSystemConfig &getConfig() const;

        // Trail management
        void createTrail(EntityId entityId, const ContrailComponent &component);
        void removeTrail(EntityId entityId);
        void updateTrailComponent(EntityId entityId, const ContrailComponent &component);

        // Environmental effects
        void setWindVector(const Math::float3 &wind);
        void setGravity(const Math::float3 &gravity);
        void setTurbulenceIntensity(float intensity);

        // Performance monitoring
        uint32_t getActiveTrailCount() const;
        uint32_t getTotalParticleCount() const;
        float getAverageUpdateTime() const;

        // Debugging and visualization
        void setDebugVisualization(bool enabled);
        bool isDebugVisualizationEnabled() const;
        void renderDebugInfo();

    protected:
        // Component handling
        void onComponentAdded(EntityId entityId, ComponentType type) override;
        void onComponentRemoved(EntityId entityId, ComponentType type) override;
        void onComponentChanged(EntityId entityId, ComponentType type) override;

    private:
        // ============================================================================
        // Internal Trail Management
        // ============================================================================

        struct TrailData
        {
            ContrailComponent component;
            std::vector<TrailParticle> particles;
            TrailMesh mesh;

            // State tracking
            Math::float3 lastPosition;
            float timeSinceLastEmit = 0.0f;
            float totalLifeTime = 0.0f;
            bool isActive = true;

            // Performance data
            float lastUpdateTime = 0.0f;
            uint32_t particleCount = 0;

            TrailData() = default;
            TrailData(const ContrailComponent &comp) : component(comp) {}
        };

        ContrailSystemConfig config_;
        std::map<EntityId, std::unique_ptr<TrailData>> activeTrails_;

        // Environmental forces
        Math::float3 windVector_ = {0.0f, 0.0f, 0.0f};
        Math::float3 gravity_ = {0.0f, -9.81f, 0.0f};
        float turbulenceIntensity_ = 0.0f;

        // Performance tracking
        mutable float averageUpdateTime_ = 0.0f;
        mutable uint32_t updateSampleCount_ = 0;

        // Debug visualization
        bool debugVisualization_ = false;

        // Object pooling for performance
        std::vector<TrailParticle> particlePool_;
        std::vector<size_t> freeParticleIndices_;

        // ============================================================================
        // Core Update Methods
        // ============================================================================

        void updateTrailEmission(EntityId entityId, TrailData &trail, float deltaTime);
        void updateTrailParticles(TrailData &trail, float deltaTime);
        void updateTrailMesh(TrailData &trail);
        void cullDistantTrails();

        // ============================================================================
        // Particle Management
        // ============================================================================

        void emitParticle(TrailData &trail, const Math::float3 &position, const Math::float3 &velocity);
        void updateParticlePhysics(TrailParticle &particle, float deltaTime);
        void applyEnvironmentalForces(TrailParticle &particle, float deltaTime);
        void killExpiredParticles(TrailData &trail);

        // ============================================================================
        // Mesh Generation
        // ============================================================================

        void generateTrailMesh(TrailData &trail);
        void generateRibbonMesh(TrailData &trail);
        void generateTubeMesh(TrailData &trail);
        void smoothTrailCurve(std::vector<TrailParticle> &particles);
        void calculateTrailNormals(std::vector<TrailParticle> &particles);

        std::vector<TrailSegment> generateTrailSegments(const std::vector<TrailParticle> &particles);
        void addQuadToMesh(TrailMesh &mesh, const TrailSegment &segment, float uvStart, float uvEnd);
        void addTriangleToMesh(TrailMesh &mesh, const Math::float3 &v0, const Math::float3 &v1, const Math::float3 &v2,
                               const Math::float3 &n0, const Math::float3 &n1, const Math::float3 &n2,
                               const Math::float2 &uv0, const Math::float2 &uv1, const Math::float2 &uv2,
                               const Math::float4 &c0, const Math::float4 &c1, const Math::float4 &c2);

        // ============================================================================
        // Rendering Support
        // ============================================================================

        void renderTrail(const TrailData &trail);
        void setupTrailMaterial(const ContrailComponent &component);
        void bindTrailTextures(const ContrailComponent &component);
        void updateTrailUniforms(const ContrailComponent &component);

        // ============================================================================
        // Utility Methods
        // ============================================================================

        Math::float3 getEntityPosition(EntityId entityId) const;
        Math::float3 getEntityVelocity(EntityId entityId) const;
        float calculateEmissionRate(const ContrailComponent &component) const;
        Math::float4 calculateParticleColor(const ContrailComponent &component, float life) const;
        float calculateParticleSize(const ContrailComponent &component, float life) const;

        // Interpolation and smoothing
        Math::float3 catmullRomSpline(const Math::float3 &p0, const Math::float3 &p1,
                                      const Math::float3 &p2, const Math::float3 &p3, float t);
        Math::float3 calculateTangent(const std::vector<TrailParticle> &particles, size_t index);
        Math::float3 calculateBinormal(const Math::float3 &tangent, const Math::float3 &normal);

        // Object pooling
        TrailParticle *acquireParticle();
        void releaseParticle(TrailParticle *particle);
        void expandParticlePool();

        // Performance optimization
        bool shouldUpdateTrail(const TrailData &trail, float deltaTime) const;
        float calculateLODFactor(EntityId entityId) const;
        void optimizeTrailMesh(TrailMesh &mesh);

        // ============================================================================
        // Physics and Forces
        // ============================================================================

        Math::float3 calculateAerodynamicForce(const TrailParticle &particle, const Math::float3 &velocity) const;
        Math::float3 calculateTurbulence(const Math::float3 &position, float time) const;
        Math::float3 calculateWindForce(const TrailParticle &particle) const;
        void handleCollisions(TrailParticle &particle) const;

        // ============================================================================
        // Debug and Profiling
        // ============================================================================

        void renderTrailDebugInfo(const TrailData &trail, EntityId entityId);
        void updatePerformanceCounters(float deltaTime);
        void logTrailStatistics() const;
    };

    // ============================================================================
    // Inline Implementation for Performance-Critical Methods
    // ============================================================================

    inline void TrailMesh::clear()
    {
        vertices.clear();
        normals.clear();
        uvs.clear();
        colors.clear();
        indices.clear();
        needsUpdate = true;
    }

    inline void TrailMesh::reserve(size_t vertexCount, size_t indexCount)
    {
        vertices.reserve(vertexCount);
        normals.reserve(vertexCount);
        uvs.reserve(vertexCount);
        colors.reserve(vertexCount);
        indices.reserve(indexCount);
    }

    inline uint32_t ContrailSystem::getActiveTrailCount() const
    {
        return static_cast<uint32_t>(activeTrails_.size());
    }

    inline uint32_t ContrailSystem::getTotalParticleCount() const
    {
        uint32_t total = 0;
        for (const auto &[entityId, trail] : activeTrails_)
        {
            total += trail->particleCount;
        }
        return total;
    }

    inline float ContrailSystem::getAverageUpdateTime() const
    {
        return averageUpdateTime_;
    }

    inline bool ContrailSystem::isDebugVisualizationEnabled() const
    {
        return debugVisualization_;
    }

    inline void ContrailSystem::setDebugVisualization(bool enabled)
    {
        debugVisualization_ = enabled;
    }

    inline const ContrailSystemConfig &ContrailSystem::getConfig() const
    {
        return config_;
    }

} // namespace ECS



================================================================================
FILE: src\systems\DebugCamera.cpp
================================================================================

#include "DebugCamera.h"
#include "../debug.h"
#include <cmath>
#include <algorithm>

DebugCamera::DebugCamera(EventBus &eventBus)
    : eventBus_(eventBus), debugModeActive_(false), mouseInitialized_(false),
      transitionTime_(0.0f), transitionDuration_(1.0f), isTransitioning_(false), transitioningToDebug_(false)
{
    // Initialize camera state with default values
    state_.position = Vector3(0.0f, 5.0f, 15.0f);
    state_.direction = Vector3(0.0f, 0.0f, -1.0f);
    state_.up = Vector3(0.0f, 1.0f, 0.0f);
    state_.pitch = 0.0f;
    state_.yaw = -90.0f;       // Start looking forward (negative Z)
    state_.speed = 10.0f;      // Units per second
    state_.sensitivity = 0.1f; // Mouse sensitivity

    // Initialize debug target position (looking at origin from above and behind)
    debugTargetPosition_ = Vector3(10.0f, 10.0f, 10.0f);
    debugTargetDirection_ = (Vector3(0.0f, 0.0f, 0.0f) - debugTargetPosition_).normalized();

    // Subscribe to debug mode events
    eventBus_.subscribe(EventType::DebugModeToggled, [this](const IEvent &event)
                        {
        const auto& debugEvent = static_cast<const DebugModeToggled&>(event);
        onDebugModeToggled(debugEvent); });

    DEBUG_LOG("DebugCamera initialized");
}

void DebugCamera::update(float deltaTime)
{
    // Always update transition if it's active
    if (isTransitioning_)
    {
        updateTransition(deltaTime);
        return; // Don't process input while transitioning
    }

    if (!debugModeActive_)
    {
        return;
    }

    processMovementInput(deltaTime);
    processMouseLookInput(deltaTime);
    updateDirectionVectors();
}

void DebugCamera::setCameraState(const Vector3 &position, const Vector3 &direction, const Vector3 &up)
{
    state_.position = position;
    state_.direction = direction.normalized();
    state_.up = up.normalized();

    // Calculate initial pitch and yaw from direction vector
    state_.yaw = atan2(direction.x, -direction.z) * 180.0f / 3.14159f;
    state_.pitch = asin(direction.y) * 180.0f / 3.14159f;

    DEBUG_LOG("Debug camera state set - Position: (" << position.x << ", " << position.y << ", " << position.z << ")");
}

void DebugCamera::onDebugModeToggled(const DebugModeToggled &event)
{
    if (event.isActive)
    {
        // Store current camera state as original
        originalPosition_ = state_.position;
        originalDirection_ = state_.direction;
        originalUp_ = state_.up;

        // Start transition to debug position
        transitionTime_ = 0.0f;
        isTransitioning_ = true;
        transitioningToDebug_ = true;

        DEBUG_LOG("Debug camera activated - starting transition to origin");
    }
    else
    {
        // Start transition back to original position
        transitionTime_ = 0.0f;
        isTransitioning_ = true;
        transitioningToDebug_ = false;

        DEBUG_LOG("Debug camera deactivated - starting transition back to original");
    }

    debugModeActive_ = event.isActive;
}

void DebugCamera::processMovementInput(float deltaTime)
{
    Vector3 movement(0.0f, 0.0f, 0.0f);
    float speed = state_.speed * deltaTime;

    // WASD movement
    if (isKeyPressed('W'))
    {
        movement += state_.direction * speed;
    }
    if (isKeyPressed('S'))
    {
        movement -= state_.direction * speed;
    }
    if (isKeyPressed('A'))
    {
        Vector3 right = state_.direction.cross(state_.up).normalized();
        movement -= right * speed;
    }
    if (isKeyPressed('D'))
    {
        Vector3 right = state_.direction.cross(state_.up).normalized();
        movement += right * speed;
    }

    // Optional: Q/E for up/down movement
    if (isKeyPressed('Q'))
    {
        movement.y -= speed;
    }
    if (isKeyPressed('E'))
    {
        movement.y += speed;
    }

    state_.position += movement;
}

void DebugCamera::processMouseLookInput(float deltaTime)
{
    POINT currentMousePos;
    if (!GetCursorPos(&currentMousePos))
    {
        return;
    }

    if (!mouseInitialized_)
    {
        lastMousePos_ = currentMousePos;
        mouseInitialized_ = true;
        return;
    }

    // Calculate mouse delta
    float deltaX = static_cast<float>(currentMousePos.x - lastMousePos_.x);
    float deltaY = static_cast<float>(currentMousePos.y - lastMousePos_.y);

    // Apply sensitivity
    deltaX *= state_.sensitivity;
    deltaY *= state_.sensitivity;

    // Update yaw and pitch
    state_.yaw += deltaX;
    state_.pitch -= deltaY; // Invert Y axis for natural look

    // Clamp pitch to prevent camera flipping
    state_.pitch = std::max(-89.0f, std::min(89.0f, state_.pitch));

    // Keep yaw in 0-360 range
    if (state_.yaw > 360.0f)
        state_.yaw -= 360.0f;
    if (state_.yaw < 0.0f)
        state_.yaw += 360.0f;

    lastMousePos_ = currentMousePos;
}

void DebugCamera::updateDirectionVectors()
{
    // Convert yaw and pitch to direction vector
    float yawRad = state_.yaw * 3.14159f / 180.0f;
    float pitchRad = state_.pitch * 3.14159f / 180.0f;

    state_.direction.x = cos(pitchRad) * sin(yawRad);
    state_.direction.y = sin(pitchRad);
    state_.direction.z = -cos(pitchRad) * cos(yawRad);

    state_.direction = state_.direction.normalized();

    // Recalculate up vector to maintain orthogonal basis
    Vector3 right = state_.direction.cross(Vector3(0.0f, 1.0f, 0.0f)).normalized();
    state_.up = right.cross(state_.direction).normalized();
}

bool DebugCamera::isKeyPressed(int key) const
{
    return (GetAsyncKeyState(key) & 0x8000) != 0;
}

void DebugCamera::updateTransition(float deltaTime)
{
    transitionTime_ += deltaTime;
    float t = transitionTime_ / transitionDuration_;

    if (t >= 1.0f)
    {
        // Transition complete
        t = 1.0f;
        isTransitioning_ = false;

        if (transitioningToDebug_)
        {
            // Reset mouse tracking when entering debug mode
            mouseInitialized_ = false;
        }
    }

    // Smooth ease-in-out interpolation
    t = t * t * (3.0f - 2.0f * t);

    if (transitioningToDebug_)
    {
        // Transition to debug position (looking at origin)
        state_.position = lerp(originalPosition_, debugTargetPosition_, t);
        state_.direction = lerp(originalDirection_, debugTargetDirection_, t).normalized();

        // Recalculate up vector to maintain orthogonal basis
        Vector3 right = state_.direction.cross(Vector3(0.0f, 1.0f, 0.0f)).normalized();
        state_.up = right.cross(state_.direction).normalized();
    }
    else
    {
        // Transition back to original position
        state_.position = lerp(debugTargetPosition_, originalPosition_, t);
        state_.direction = lerp(debugTargetDirection_, originalDirection_, t).normalized();
        state_.up = lerp(Vector3(0.0f, 1.0f, 0.0f), originalUp_, t).normalized();
    }

    // Update pitch and yaw based on direction
    state_.yaw = atan2(state_.direction.x, -state_.direction.z) * 180.0f / 3.14159f;
    state_.pitch = asin(state_.direction.y) * 180.0f / 3.14159f;
}

DebugCamera::Vector3 DebugCamera::lerp(const Vector3 &a, const Vector3 &b, float t) const
{
    return Vector3(
        a.x + t * (b.x - a.x),
        a.y + t * (b.y - a.y),
        a.z + t * (b.z - a.z));
}


================================================================================
FILE: src\systems\DebugCamera.h
================================================================================

#ifndef DEBUGCAMERA_H
#define DEBUGCAMERA_H

#include "core/ISystem.h"
#include "core/EventBus.h"
#include "events/InputEvents.h"
#include "systems/InputSystem.h"
#include "config/InputConfig.h"
#include <windows.h>
#include <cmath>

/**
 * @class DebugCamera
 * @brief Debug camera controller for free-look navigation with WASD movement
 *
 * This class handles debug camera movement and rotation controls when debug mode
 * is active. It provides WASD movement and mouse look functionality for developers.
 */
class DebugCamera
{
public:
    struct Vector3
    {
        float x, y, z;
        Vector3(float x = 0.0f, float y = 0.0f, float z = 0.0f) : x(x), y(y), z(z) {}

        Vector3 operator+(const Vector3 &other) const
        {
            return Vector3(x + other.x, y + other.y, z + other.z);
        }

        Vector3 operator-(const Vector3 &other) const
        {
            return Vector3(x - other.x, y - other.y, z - other.z);
        }

        Vector3 operator*(float scalar) const
        {
            return Vector3(x * scalar, y * scalar, z * scalar);
        }

        Vector3 &operator+=(const Vector3 &other)
        {
            x += other.x;
            y += other.y;
            z += other.z;
            return *this;
        }

        Vector3 &operator-=(const Vector3 &other)
        {
            x -= other.x;
            y -= other.y;
            z -= other.z;
            return *this;
        }

        float length() const
        {
            return sqrt(x * x + y * y + z * z);
        }

        Vector3 normalized() const
        {
            float len = length();
            if (len > 0.001f)
            {
                return Vector3(x / len, y / len, z / len);
            }
            return Vector3(0, 0, 0);
        }

        Vector3 cross(const Vector3 &other) const
        {
            return Vector3(
                y * other.z - z * other.y,
                z * other.x - x * other.z,
                x * other.y - y * other.x);
        }
    };

    struct CameraState
    {
        Vector3 position;
        Vector3 direction;
        Vector3 up;
        float pitch;       // Rotation around X axis
        float yaw;         // Rotation around Y axis
        float speed;       // Movement speed
        float sensitivity; // Mouse sensitivity
    };

private:
    EventBus &eventBus_;
    CameraState state_;
    bool debugModeActive_;

    // Mouse tracking for look controls
    POINT lastMousePos_;
    bool mouseInitialized_;

    // Camera transition for smooth movement
    Vector3 originalPosition_;
    Vector3 originalDirection_;
    Vector3 originalUp_;
    Vector3 debugTargetPosition_;
    Vector3 debugTargetDirection_;
    float transitionTime_;
    float transitionDuration_;
    bool isTransitioning_;
    bool transitioningToDebug_;

public:
    /**
     * @brief Construct a new Debug Camera
     * @param eventBus Reference to the event bus for listening to debug mode events
     */
    DebugCamera(EventBus &eventBus);

    /**
     * @brief Update camera based on input (called each frame when debug mode is active)
     * @param deltaTime Time elapsed since last frame
     */
    void update(float deltaTime);

    /**
     * @brief Get current camera state
     * @return Current camera position, direction, and up vectors
     */
    const CameraState &getCameraState() const { return state_; }

    /**
     * @brief Set camera state (used to sync with normal camera when entering debug mode)
     * @param position Camera position
     * @param direction Camera direction
     * @param up Camera up vector
     */
    void setCameraState(const Vector3 &position, const Vector3 &direction, const Vector3 &up);

    /**
     * @brief Check if debug mode is currently active
     * @return True if debug mode is active
     */
    bool isDebugModeActive() const { return debugModeActive_; }

    /**
     * @brief Check if camera is currently transitioning
     * @return True if camera is transitioning
     */
    bool isTransitioning() const { return isTransitioning_; }

private:
    /**
     * @brief Handle debug mode toggle events
     * @param event Debug mode toggle event
     */
    void onDebugModeToggled(const DebugModeToggled &event);

    /**
     * @brief Process WASD movement input
     * @param deltaTime Time elapsed since last frame
     */
    void processMovementInput(float deltaTime);

    /**
     * @brief Process mouse look input
     * @param deltaTime Time elapsed since last frame
     */
    void processMouseLookInput(float deltaTime);

    /**
     * @brief Update camera direction vectors based on pitch and yaw
     */
    void updateDirectionVectors();

    /**
     * @brief Check if a key is currently pressed
     * @param key Virtual key code
     * @return True if key is pressed
     */
    bool isKeyPressed(int key) const;

    /**
     * @brief Update camera transition interpolation
     * @param deltaTime Time elapsed since last frame
     */
    void updateTransition(float deltaTime);

    /**
     * @brief Linear interpolation between two Vector3 values
     * @param a Start vector
     * @param b End vector
     * @param t Interpolation factor (0.0 to 1.0)
     * @return Interpolated vector
     */
    Vector3 lerp(const Vector3 &a, const Vector3 &b, float t) const;
};

#endif // DEBUGCAMERA_H


================================================================================
FILE: src\systems\InputSystem.cpp
================================================================================

#include "InputSystem.h"
#include "core/World.h"
#include "events/InputEvents.h"
#include "../platform/NlohmannJsonParser.h"
#include <iostream>
#include <algorithm>
#include <windows.h>
#include "../debug.h"

InputSystem::InputSystem(EventBus &eventBus, IInputDevice &inputDevice)
    : eventBus_(eventBus), inputDevice_(inputDevice), currentContext_("Flight"), debugModeActive_(false)
{
    DEBUG_LOG("Initializing InputSystem with context 'Flight'");
    // Initialize default configuration
    initializeDefaultConfiguration();

    DEBUG_LOG("InputSystem initialized with default configuration");
}

bool InputSystem::loadConfiguration(const std::string &configPath)
{
    DEBUG_LOG("Loading input configuration from '" + configPath + "'");
    try
    {
        auto jsonParser = std::make_unique<NlohmannJsonParser>();
        Input::InputConfigParser parser(std::move(jsonParser));

        config_ = parser.loadFromFile(configPath);

        if (parser.getLastError().empty())
        {
            DEBUG_LOG("Loaded input configuration from: " << configPath);
            DEBUG_LOG("Input bindings loaded:");
            DEBUG_LOG("  Key bindings: " << config_.keyBindings.size());
            DEBUG_LOG("  Mouse bindings: " << config_.mouseBindings.size());
            DEBUG_LOG("  Gamepad bindings: " << config_.gamepadBindings.size());
            DEBUG_LOG("  Contexts: " << config_.contexts.size());

            // Set the default context
            if (!config_.defaultContext.empty())
            {
                setInputContext(config_.defaultContext);
            }

            return true;
        }
        else
        {
            std::cerr << "Failed to load input configuration: " << parser.getLastError() << std::endl;
            return false;
        }
    }
    catch (const std::exception &e)
    {
        std::cerr << "Exception while loading input configuration: " << e.what() << std::endl;
        return false;
    }
}

void InputSystem::setInputContext(const std::string &contextName)
{
    DEBUG_LOG("Setting input context to '" + contextName + "'");
    // Verify the context exists
    bool contextExists = false;
    for (const auto &context : config_.contexts)
    {
        if (context.name == contextName)
        {
            contextExists = true;
            break;
        }
    }

    if (contextExists || contextName == config_.defaultContext)
    {
        currentContext_ = contextName;
        DEBUG_LOG("Input context set to: " << contextName);
    }
    else
    {
        std::cerr << "Unknown input context: " << contextName << std::endl;
    }
}

void InputSystem::update(World &world, float dt)
{
    // Poll the input device
    inputDevice_.poll();

    // Update input states
    updateKeyboardState();
    updateMouseState();
    updateGamepadState();

    // Process input based on current configuration
    processKeyboardInput();
    processMouseInput();
    processGamepadInput();

    // Update previous states for next frame
    updatePreviousStates();
}

void InputSystem::processKeyboardInput()
{
    // Handle F9 debug mode toggle globally (works in any context)
    if (isKeyJustPressed(Input::KeyCode::F9))
    {
        debugModeActive_ = !debugModeActive_;
        eventBus_.publish(DebugModeToggled{debugModeActive_});
        DEBUG_LOG("Debug mode toggled: " << (debugModeActive_ ? "ON" : "OFF"));
    }

    for (const auto &binding : config_.keyBindings)
    {
        if (binding.device == Input::InputDevice::Keyboard &&
            isActionActiveInCurrentContext(binding.action))
        {

            if (isKeyJustPressed(binding.keyCode))
            {
                triggerInputAction(binding.action);
            }
        }
    }
}

void InputSystem::processMouseInput()
{
    for (const auto &binding : config_.mouseBindings)
    {
        if (binding.device == Input::InputDevice::Mouse &&
            isActionActiveInCurrentContext(binding.action))
        {

            if (isMouseButtonJustPressed(binding.mouseButton))
            {
                triggerInputAction(binding.action);
            }
        }
    }
}

void InputSystem::processGamepadInput()
{
    for (const auto &binding : config_.gamepadBindings)
    {
        if (binding.device == Input::InputDevice::Gamepad &&
            isActionActiveInCurrentContext(binding.action))
        {

            if (binding.type == Input::BindingType::GamepadButton)
            {
                if (isGamepadButtonJustPressed(binding.gamepadButton))
                {
                    triggerInputAction(binding.action);
                }
            }
            else if (binding.type == Input::BindingType::GamepadAxis)
            {
                float axisValue = getGamepadAxisValue(binding.gamepadAxis);

                // Handle directional axis bindings
                if (binding.direction == "positive" && axisValue > config_.settings.gamepadDeadzone)
                {
                    triggerInputAction(binding.action);
                }
                else if (binding.direction == "negative" && axisValue < -config_.settings.gamepadDeadzone)
                {
                    triggerInputAction(binding.action);
                }
                else if (binding.direction.empty() && std::abs(axisValue) > config_.settings.gamepadDeadzone)
                {
                    triggerInputAction(binding.action);
                }
            }
            else if (binding.type == Input::BindingType::GamepadTrigger)
            {
                float triggerValue = getGamepadAxisValue(binding.gamepadAxis);
                if (triggerValue > config_.settings.gamepadDeadzone)
                {
                    triggerInputAction(binding.action);
                }
            }
        }
    }
}

void InputSystem::triggerInputAction(const std::string &action)
{
    DEBUG_LOG("Triggering input action '" + action + "'");
    // Handle specific actions
    if (action == "ToggleDebugConsole")
    {
        eventBus_.publish(ConsoleToggleEvent{});
        DEBUG_LOG("Console toggle triggered");
    }
    else if (action == "ToggleWireframe")
    {
        DEBUG_LOG("Wireframe toggle triggered");
        // TODO: Implement wireframe toggle event
    }
    else if (action == "TogglePerfMetrics")
    {
        DEBUG_LOG("Performance metrics toggle triggered");
        // TODO: Implement performance metrics toggle event
    }
    else if (action == "ReloadAssets")
    {
        DEBUG_LOG("Asset reload triggered");
        // TODO: Implement asset reload event
    }
    else if (action == "Quit")
    {
        DEBUG_LOG("Quit triggered");
        // TODO: Implement quit event
    }
    else
    {
        // For other actions, just log for now
        DEBUG_LOG("Input action triggered: " << action);
    }
}

bool InputSystem::isActionActiveInCurrentContext(const std::string &action) const
{
    // Find the current context
    for (const auto &context : config_.contexts)
    {
        if (context.name == currentContext_)
        {
            // Check if the action is in the active bindings list
            return std::find(context.activeBindings.begin(), context.activeBindings.end(), action) != context.activeBindings.end();
        }
    }

    // If context not found, allow all actions
    return true;
}

// Input state checking methods using Windows API
bool InputSystem::isKeyPressed(Input::KeyCode key) const
{
    return (GetAsyncKeyState(static_cast<int>(key)) & 0x8000) != 0;
}

bool InputSystem::isKeyJustPressed(Input::KeyCode key) const
{
    return isKeyPressed(key) && !prevKeyStates_.count(key);
}

bool InputSystem::isMouseButtonPressed(Input::MouseButton button) const
{
    int vkCode = 0;
    switch (button)
    {
    case Input::MouseButton::LEFT:
        vkCode = VK_LBUTTON;
        break;
    case Input::MouseButton::RIGHT:
        vkCode = VK_RBUTTON;
        break;
    case Input::MouseButton::MIDDLE:
        vkCode = VK_MBUTTON;
        break;
    case Input::MouseButton::X1:
        vkCode = VK_XBUTTON1;
        break;
    case Input::MouseButton::X2:
        vkCode = VK_XBUTTON2;
        break;
    default:
        return false;
    }
    return (GetAsyncKeyState(vkCode) & 0x8000) != 0;
}

bool InputSystem::isMouseButtonJustPressed(Input::MouseButton button) const
{
    return isMouseButtonPressed(button) && !prevMouseButtonStates_.count(button);
}

bool InputSystem::isGamepadButtonPressed(Input::GamepadButton button) const
{
    // TODO: Implement gamepad button state checking
    return false;
}

bool InputSystem::isGamepadButtonJustPressed(Input::GamepadButton button) const
{
    return isGamepadButtonPressed(button) && !prevGamepadButtonStates_.count(button);
}

float InputSystem::getGamepadAxisValue(Input::GamepadAxis axis) const
{
    // TODO: Implement gamepad axis value reading
    return 0.0f;
}

void InputSystem::updateKeyboardState()
{
    // Update current key states
    for (const auto &binding : config_.keyBindings)
    {
        Input::KeyCode key = binding.keyCode;
        keyStates_[key] = isKeyPressed(key);
    }
}

void InputSystem::updateMouseState()
{
    // Update current mouse button states
    for (const auto &binding : config_.mouseBindings)
    {
        Input::MouseButton button = binding.mouseButton;
        mouseButtonStates_[button] = isMouseButtonPressed(button);
    }
}

void InputSystem::updateGamepadState()
{
    // TODO: Implement gamepad state updates
}

void InputSystem::updatePreviousStates()
{
    // Update previous frame states
    prevKeyStates_ = keyStates_;
    prevMouseButtonStates_ = mouseButtonStates_;
    prevGamepadButtonStates_ = gamepadButtonStates_;
}

void InputSystem::initializeDefaultConfiguration()
{
    // Initialize basic default configuration
    config_.settings.mouseSensitivity = 1.0f;
    config_.settings.mouseInvertY = false;
    config_.settings.keyboardRepeatDelay = 300;
    config_.settings.keyboardRepeatRate = 50;
    config_.settings.gamepadDeadzone = 0.1f;
    config_.settings.gamepadSensitivity = 1.0f;
    config_.defaultContext = "Flight";

    // Add basic console toggle binding
    Input::InputBinding consoleBinding;
    consoleBinding.action = "ToggleDebugConsole";
    consoleBinding.type = Input::BindingType::Key;
    consoleBinding.device = Input::InputDevice::Keyboard;
    consoleBinding.keyCode = Input::KeyCode::TILDE;
    config_.keyBindings.push_back(consoleBinding);

    // Add basic flight context
    Input::InputContext flightContext;
    flightContext.name = "Flight";
    flightContext.activeBindings = {"ToggleDebugConsole"};
    config_.contexts.push_back(flightContext);
}


================================================================================
FILE: src\systems\InputSystem.h
================================================================================

#ifndef INPUTSYSTEM_H
#define INPUTSYSTEM_H

#include "core/ISystem.h"
#include "core/EventBus.h"
#include "platform/IInputDevice.h"
#include "config/InputConfig.h"
#include "config/InputConfigParser.h"
#include <string>
#include <unordered_map>
#include <memory>

/**
 * @class InputSystem
 * @brief Enhanced input system with configurable key bindings and input handling
 *
 * This system manages user input through configurable key bindings loaded from XML.
 * It supports keyboard, mouse, and gamepad input with context-sensitive binding sets.
 */
class InputSystem : public ISystem
{
public:
    /**
     * @brief Constructor
     * @param eventBus Event bus for publishing input events
     * @param inputDevice Platform-specific input device implementation
     */
    InputSystem(EventBus &eventBus, IInputDevice &inputDevice);

    /**
     * @brief Load input configuration from file
     * @param configPath Path to input configuration XML file
     * @return True if loaded successfully, false otherwise
     */
    bool loadConfiguration(const std::string &configPath);

    /**
     * @brief Set the current input context
     * @param contextName Name of the context to activate
     */
    void setInputContext(const std::string &contextName);

    /**
     * @brief Get the current input context name
     * @return Current context name
     */
    const std::string &getCurrentContext() const { return currentContext_; }

    /**
     * @brief Get input configuration settings
     * @return Reference to input settings
     */
    const Input::InputSettings &getSettings() const { return config_.settings; }

    /**
     * @brief Update the input system
     * @param world Reference to the world
     * @param dt Delta time
     */
    void update(World &world, float dt) override;

private:
    EventBus &eventBus_;
    IInputDevice &inputDevice_;
    Input::InputConfiguration config_;
    std::string currentContext_;
    bool debugModeActive_;

    // Input state tracking
    std::unordered_map<Input::KeyCode, bool> keyStates_;
    std::unordered_map<Input::MouseButton, bool> mouseButtonStates_;
    std::unordered_map<Input::GamepadButton, bool> gamepadButtonStates_;
    std::unordered_map<Input::GamepadAxis, float> gamepadAxisValues_;

    // Previous frame state for edge detection
    std::unordered_map<Input::KeyCode, bool> prevKeyStates_;
    std::unordered_map<Input::MouseButton, bool> prevMouseButtonStates_;
    std::unordered_map<Input::GamepadButton, bool> prevGamepadButtonStates_;

    // Input processing methods
    void processKeyboardInput();
    void processMouseInput();
    void processGamepadInput();

    // Event triggering methods
    void triggerInputAction(const std::string &action);
    bool isActionActiveInCurrentContext(const std::string &action) const;

    // State checking helpers
    bool isKeyPressed(Input::KeyCode key) const;
    bool isKeyJustPressed(Input::KeyCode key) const;
    bool isMouseButtonPressed(Input::MouseButton button) const;
    bool isMouseButtonJustPressed(Input::MouseButton button) const;
    bool isGamepadButtonPressed(Input::GamepadButton button) const;
    bool isGamepadButtonJustPressed(Input::GamepadButton button) const;
    float getGamepadAxisValue(Input::GamepadAxis axis) const;

    // Input device integration methods
    void updateKeyboardState();
    void updateMouseState();
    void updateGamepadState();

    // Helper methods
    void updatePreviousStates();
    void initializeDefaultConfiguration();
};

#endif


================================================================================
FILE: src\systems\MaterialManager.cpp
================================================================================

#include "MaterialManager.h"
#include <iostream>
#include <sstream>
#include <iomanip>
#include <algorithm>
#include <fstream>
#include "../debug.h"

namespace Material
{
    MaterialManager::MaterialManager()
        : textureGenerator_(nullptr)
    {
        DEBUG_LOG("MaterialManager initialized");
    }

    bool MaterialManager::LoadMaterial(const std::string &materialId, const Material &material)
    {
        if (materialId.empty())
        {
            std::cerr << "Error: Cannot load material with empty ID" << std::endl;
            return false;
        }

        if (HasMaterial(materialId))
        {
            DEBUG_LOG("Warning: Overwriting existing material: " << materialId);
        }

        materials_[materialId] = material;

        // Apply global cel-shading settings if not specifically set
        if (materials_[materialId].properties.toonSteps == 4)
        {
            ApplyGlobalCelShadingSettings(materials_[materialId].properties);
        }

        DEBUG_LOG("Loaded material: " << materialId << " (type: " << material.type << ")");
        return true;
    }

    std::optional<Material> MaterialManager::GetMaterial(const std::string &materialId) const
    {
        auto it = materials_.find(materialId);
        if (it != materials_.end())
        {
            return it->second;
        }
        return std::nullopt;
    }

    bool MaterialManager::HasMaterial(const std::string &materialId) const
    {
        return materials_.find(materialId) != materials_.end();
    }

    std::string MaterialManager::CreateDynamicMaterial(const std::string &baseType, const MaterialProperties &properties)
    {
        std::string materialId = GenerateUniqueMaterialId(baseType);

        Material material(materialId, baseType);
        material.properties = properties;
        material.isDynamic = true;

        ApplyGlobalCelShadingSettings(material.properties);

        if (LoadMaterial(materialId, material))
        {
            return materialId;
        }

        return "";
    }

    std::string MaterialManager::CreateEarthMaterial(float radius, int detailLevel)
    {
        std::string materialId = GenerateUniqueMaterialId("earth");

        Material material(materialId, "earth");
        material.properties = CreateEarthProperties(radius, detailLevel);
        material.isDynamic = true;

        // Generate and assign textures if texture generator is available
        if (textureGenerator_)
        {
            AssignEarthTextures(material.properties, radius, detailLevel);
        }

        if (LoadMaterial(materialId, material))
        {
            return materialId;
        }

        return "";
    }

    std::string MaterialManager::CreateAtmosphereMaterial(int layer, float density)
    {
        std::string materialId = GenerateUniqueMaterialId("atmosphere");

        Material material(materialId, "atmosphere");
        material.properties = CreateAtmosphereProperties(layer, density);
        material.isDynamic = true;

        if (textureGenerator_)
        {
            AssignAtmosphereTextures(material.properties, layer);
        }

        if (LoadMaterial(materialId, material))
        {
            return materialId;
        }

        return "";
    }

    std::string MaterialManager::CreateCloudMaterial(float coverage, float density)
    {
        std::string materialId = GenerateUniqueMaterialId("cloud");

        Material material(materialId, "cloud");
        material.properties = CreateCloudProperties(coverage, density);
        material.isDynamic = true;

        if (textureGenerator_)
        {
            AssignCloudTextures(material.properties, coverage);
        }

        if (LoadMaterial(materialId, material))
        {
            return materialId;
        }

        return "";
    }

    std::string MaterialManager::CreateContrailMaterial(const Math::float3 &color)
    {
        std::string materialId = GenerateUniqueMaterialId("contrail");

        Material material(materialId, "contrail");
        material.properties = CreateContrailProperties(color);
        material.isDynamic = true;

        if (textureGenerator_)
        {
            AssignContrailTextures(material.properties);
        }

        if (LoadMaterial(materialId, material))
        {
            return materialId;
        }

        return "";
    }

    void MaterialManager::SetGlobalCelShadingParams(int toonSteps, float threshold, bool enableRim)
    {
        globalToonSteps_ = std::max(1, std::min(toonSteps, 16));
        globalToonThreshold_ = std::max(0.0f, std::min(threshold, 1.0f));
        globalRimLighting_ = enableRim;

        DEBUG_LOG("Updated global cel-shading: " << globalToonSteps_ << " steps, "
                                                 << globalToonThreshold_ << " threshold, rim: " << (globalRimLighting_ ? "enabled" : "disabled"));
    }

    void MaterialManager::EnableOutlinesForMaterial(const std::string &materialId, float width, const Math::float3 &color)
    {
        auto it = materials_.find(materialId);
        if (it != materials_.end())
        {
            it->second.properties.enableOutlines = true;
            it->second.properties.outlineWidth = std::max(0.001f, std::min(width, 0.1f));
            it->second.properties.outlineColor = color;
            DEBUG_LOG("Enabled outlines for material: " << materialId);
        }
        else
        {
            std::cerr << "Error: Material not found: " << materialId << std::endl;
        }
    }

    void MaterialManager::SetMaterialAnimation(const std::string &materialId, const std::string &animType, float speed)
    {
        auto it = materials_.find(materialId);
        if (it != materials_.end())
        {
            it->second.properties.isAnimated = true;
            it->second.properties.animationType = animType;
            it->second.properties.animationSpeed = std::max(0.1f, std::min(speed, 10.0f));
            DEBUG_LOG("Set animation for material: " << materialId << " (" << animType << ", speed: " << speed << ")");
        }
        else
        {
            std::cerr << "Error: Material not found: " << materialId << std::endl;
        }
    }

    void MaterialManager::SetTextureGenerator(const ProceduralTexture::ProceduralTextureGenerator *generator)
    {
        textureGenerator_ = generator;
        DEBUG_LOG("Texture generator assigned to MaterialManager");
    }

    MaterialId MaterialManager::GenerateAndAssignTexture(const std::string &materialId, const std::string &textureType)
    {
        if (!textureGenerator_)
        {
            std::cerr << "Error: No texture generator available" << std::endl;
            return "";
        }

        auto it = materials_.find(materialId);
        if (it == materials_.end())
        {
            std::cerr << "Error: Material not found: " << materialId << std::endl;
            return "";
        }

        // Create texture parameters based on material type and texture type
        ProceduralTexture::TextureParams params;
        params.width = 512;
        params.height = 512;
        params.name = materialId + "_" + textureType;

        if (it->second.type == "earth")
        {
            if (textureType == "albedo")
            {
                params.type = ProceduralTexture::TextureParams::Type::Noise;
                params.noise.type = ProceduralTexture::NoiseParams::Type::Perlin;
                params.noise.frequency = 0.01f;
                params.noise.octaves = 4;
            }
            else if (textureType == "normal")
            {
                params.type = ProceduralTexture::TextureParams::Type::Noise;
                params.noise.type = ProceduralTexture::NoiseParams::Type::Simplex;
                params.noise.frequency = 0.005f;
                params.noise.octaves = 3;
            }
        }
        else if (it->second.type == "atmosphere")
        {
            params.type = ProceduralTexture::TextureParams::Type::Gradient;
            params.gradient.type = ProceduralTexture::GradientParams::Type::Linear;
        }
        else if (it->second.type == "cloud")
        {
            params.type = ProceduralTexture::TextureParams::Type::Noise;
            params.noise.type = ProceduralTexture::NoiseParams::Type::Perlin;
            params.noise.frequency = 0.02f;
            params.noise.octaves = 4;
        }

        // Generate the texture (for now just return the name as AssetId)
        // In a real implementation, this would generate the texture and register it in an asset system
        MaterialId textureId = params.name + "_generated";

        if (!textureId.empty())
        {
            // Assign to material
            if (textureType == "albedo")
            {
                it->second.properties.albedoTexture = textureId;
            }
            else if (textureType == "normal")
            {
                it->second.properties.normalTexture = textureId;
            }
            else if (textureType == "emission")
            {
                it->second.properties.emissionTexture = textureId;
            }

            DEBUG_LOG("Generated and assigned " << textureType << " texture to material: " << materialId);
        }

        return textureId;
    }

    void MaterialManager::LoadDefaultMaterials()
    {
        DEBUG_LOG("Loading default materials...");

        // Load materials from the developer package
        if (LoadMaterialsFromFile("assets/packages/DeveloperPackage/materials.xml"))
        {
            DEBUG_LOG("Default materials loaded successfully");
            return;
        }

        // Fallback to hardcoded materials if file loading fails
        std::cerr << "Failed to load materials from file, using hardcoded defaults" << std::endl;

        // Default Earth material (blue)
        Material earthMaterial("EarthSurfaceMaterial", "earth");
        earthMaterial.properties.albedo = {0.2f, 0.4f, 0.9f}; // Blue earth
        earthMaterial.properties.roughness = 0.8f;
        earthMaterial.properties.metallic = 0.0f;
        earthMaterial.properties.toonSteps = 6;
        earthMaterial.properties.enableRimLighting = true;
        earthMaterial.properties.rimColor = {0.8f, 0.9f, 1.0f};
        LoadMaterial("EarthSurfaceMaterial", earthMaterial);

        // Default atmosphere material
        Material atmosphereMaterial("AtmosphereMaterial", "atmosphere");
        atmosphereMaterial.properties.albedo = {0.5f, 0.7f, 1.0f};
        atmosphereMaterial.properties.roughness = 0.0f;
        atmosphereMaterial.properties.metallic = 0.0f;
        atmosphereMaterial.properties.toonSteps = 3;
        atmosphereMaterial.properties.enableRimLighting = true;
        atmosphereMaterial.properties.rimStrength = 2.0f;
        LoadMaterial("AtmosphereMaterial", atmosphereMaterial);

        // Default cloud material
        Material cloudMaterial("CloudMaterial", "cloud");
        cloudMaterial.properties.albedo = {1.0f, 1.0f, 1.0f};
        cloudMaterial.properties.roughness = 0.1f;
        cloudMaterial.properties.toonSteps = 4;
        cloudMaterial.properties.isAnimated = true;
        cloudMaterial.properties.animationType = "scroll";
        cloudMaterial.properties.animationSpeed = 0.5f;
        LoadMaterial("CloudMaterial", cloudMaterial);

        // Default contrail material
        Material contrailMaterial("ContrailMaterial", "contrail");
        contrailMaterial.properties.albedo = {1.0f, 1.0f, 1.0f};
        contrailMaterial.properties.emission = {0.1f, 0.1f, 0.1f};
        contrailMaterial.properties.roughness = 0.0f;
        contrailMaterial.properties.toonSteps = 2;
        contrailMaterial.properties.isAnimated = true;
        contrailMaterial.properties.animationType = "wave";
        LoadMaterial("ContrailMaterial", contrailMaterial);

        DEBUG_LOG("Hardcoded default materials loaded");
    }

    bool MaterialManager::LoadMaterialsFromFile(const std::string &filePath)
    {
        // Read XML file
        std::ifstream file(filePath);
        if (!file.is_open())
        {
            std::cerr << "Failed to open materials file: " << filePath << std::endl;
            return false;
        }

        std::stringstream buffer;
        buffer << file.rdbuf();
        std::string xmlContent = buffer.str();
        file.close();

        size_t materialsStart = xmlContent.find("<materials>");
        size_t materialsEnd = xmlContent.find("</materials>");

        if (materialsStart == std::string::npos || materialsEnd == std::string::npos)
        {
            std::cerr << "Invalid materials file format: " << filePath << std::endl;
            return false;
        }

        std::string materialsSection = xmlContent.substr(
            materialsStart,
            materialsEnd - materialsStart + std::string("</materials>").length());

        // Parse individual material elements using regex
        size_t currentPos = 0;
        while (true)
        {
            size_t materialStart = materialsSection.find("<material", currentPos);
            if (materialStart == std::string::npos)
                break;

            size_t materialEnd = materialsSection.find("</material>", materialStart);
            if (materialEnd == std::string::npos)
                break;

            materialEnd += std::string("</material>").length();

            std::string materialXml = materialsSection.substr(materialStart, materialEnd - materialStart);

            // Extract material attributes
            std::string materialId = ExtractAttributeValue(materialXml, "id");
            std::string materialType = ExtractAttributeValue(materialXml, "type");

            if (materialId.empty() || materialType.empty())
            {
                std::cerr << "Material missing required attributes: " << materialXml << std::endl;
                currentPos = materialEnd;
                continue;
            }

            // Create material
            Material material(materialId, materialType);

            // Parse properties section
            size_t propsStart = materialXml.find("<properties>");
            size_t propsEnd = materialXml.find("</properties>");

            if (propsStart != std::string::npos && propsEnd != std::string::npos)
            {
                std::string propsSection = materialXml.substr(propsStart, propsEnd - propsStart + std::string("</properties>").length());

                // Parse albedo color
                ParseColorProperty(propsSection, "albedo", material.properties.albedo);

                // Parse emission color
                ParseColorProperty(propsSection, "emission", material.properties.emission);

                // Parse rim color
                ParseColorProperty(propsSection, "rimColor", material.properties.rimColor);

                // Parse float properties
                ParseFloatProperty(propsSection, "roughness", material.properties.roughness);
                ParseFloatProperty(propsSection, "metallic", material.properties.metallic);
                ParseFloatProperty(propsSection, "rimPower", material.properties.rimPower);
                ParseFloatProperty(propsSection, "rimStrength", material.properties.rimStrength);

                // Parse integer properties
                ParseIntProperty(propsSection, "toonSteps", material.properties.toonSteps);

                // Parse boolean properties
                ParseBoolProperty(propsSection, "enableRimLighting", material.properties.enableRimLighting);
                ParseBoolProperty(propsSection, "enableOutlines", material.properties.enableOutlines);

                // Parse texture references
                material.properties.albedoTexture = ExtractTagValue(propsSection, "albedoTexture");
                material.properties.normalTexture = ExtractTagValue(propsSection, "normalTexture");
                material.properties.metallicTexture = ExtractTagValue(propsSection, "metallicTexture");
                material.properties.roughnessTexture = ExtractTagValue(propsSection, "roughnessTexture");
                material.properties.emissionTexture = ExtractTagValue(propsSection, "emissionTexture");
            }

            // Load the material
            LoadMaterial(materialId, material);

            currentPos = materialEnd;
        }

        DEBUG_LOG("Loaded materials from file: " << filePath);
        return true;
    }

    void MaterialManager::ClearAllMaterials()
    {
        size_t count = materials_.size();
        materials_.clear();
        DEBUG_LOG("Cleared " << count << " materials");
    }

    size_t MaterialManager::GetMaterialCount() const
    {
        return materials_.size();
    }

    std::vector<std::string> MaterialManager::GetAllMaterialIds() const
    {
        std::vector<std::string> ids;
        ids.reserve(materials_.size());

        for (const auto &pair : materials_)
        {
            ids.push_back(pair.first);
        }

        std::sort(ids.begin(), ids.end());
        return ids;
    }

    bool MaterialManager::ValidateMaterial(const std::string &materialId) const
    {
        auto it = materials_.find(materialId);
        if (it == materials_.end())
        {
            return false;
        }

        const auto &props = it->second.properties;

        // Validate color values are in valid range
        auto validateColor = [](const Math::float3 &color)
        {
            return color.x >= 0.0f && color.x <= 1.0f &&
                   color.y >= 0.0f && color.y <= 1.0f &&
                   color.z >= 0.0f && color.z <= 1.0f;
        };

        if (!validateColor(props.albedo) || !validateColor(props.emission) || !validateColor(props.rimColor))
        {
            return false;
        }

        // Validate numeric ranges
        if (props.metallic < 0.0f || props.metallic > 1.0f ||
            props.roughness < 0.0f || props.roughness > 1.0f ||
            props.rimPower < 0.1f || props.rimPower > 10.0f ||
            props.toonSteps < 1 || props.toonSteps > 16)
        {
            return false;
        }

        return true;
    }

    void MaterialManager::PrintMaterialInfo(const std::string &materialId) const
    {
        auto it = materials_.find(materialId);
        if (it == materials_.end())
        {
            DEBUG_LOG("Material not found: " << materialId);
            return;
        }

        const auto &material = it->second;
        const auto &props = material.properties;

        DEBUG_LOG("\\n=== Material Info: " << materialId << " ===");
        DEBUG_LOG("Type: " << material.type);
        DEBUG_LOG("Dynamic: " << (material.isDynamic ? "Yes" : "No"));
        DEBUG_LOG("Albedo: (" << props.albedo.x << ", " << props.albedo.y << ", " << props.albedo.z << ")");
        DEBUG_LOG("Metallic: " << props.metallic << ", Roughness: " << props.roughness);
        DEBUG_LOG("Toon Steps: " << props.toonSteps << ", Threshold: " << props.toonThreshold);
        DEBUG_LOG("Rim Lighting: " << (props.enableRimLighting ? "Enabled" : "Disabled"));
        DEBUG_LOG("Outlines: " << (props.enableOutlines ? "Enabled" : "Disabled"));
        DEBUG_LOG("Animation: " << (props.isAnimated ? props.animationType + " (speed: " + std::to_string(props.animationSpeed) + ")" : "None"));
        DEBUG_LOG("=========================");
    }

    // Private helper methods

    std::string MaterialManager::GenerateUniqueMaterialId(const std::string &baseType)
    {
        static int counter = 1000;
        std::string materialId;

        do
        {
            std::stringstream ss;
            ss << baseType << "_material_" << std::setfill('0') << std::setw(4) << counter++;
            materialId = ss.str();
        } while (HasMaterial(materialId));

        return materialId;
    }

    MaterialProperties MaterialManager::CreateBaseProperties(const std::string &materialType)
    {
        MaterialProperties props;

        // Try to use the properties from loaded materials if available
        std::string materialId;
        if (materialType == "earth")
        {
            materialId = "EarthSurfaceMaterial";
        }
        else if (materialType == "atmosphere")
        {
            materialId = "AtmosphereMaterial";
        }
        else if (materialType == "cloud")
        {
            materialId = "CloudMaterial";
        }
        else if (materialType == "contrail")
        {
            materialId = "ContrailMaterial";
        }

        // If the material exists, copy its properties
        if (!materialId.empty() && HasMaterial(materialId))
        {
            auto material = GetMaterial(materialId);
            if (material)
            {
                return material->properties;
            }
        }

        // Fallback to default properties if the material isn't loaded
        if (materialType == "earth")
        {
            props.albedo = {0.2f, 0.4f, 0.9f}; // Blue earth (updated from green)
            props.roughness = 0.8f;
            props.metallic = 0.0f;
            props.toonSteps = 6;
        }
        else if (materialType == "atmosphere")
        {
            props.albedo = {0.5f, 0.7f, 1.0f};
            props.roughness = 0.0f;
            props.metallic = 0.0f;
            props.toonSteps = 3;
        }
        else if (materialType == "cloud")
        {
            props.albedo = {1.0f, 1.0f, 1.0f};
            props.roughness = 0.1f;
            props.metallic = 0.0f;
            props.toonSteps = 4;
        }
        else if (materialType == "contrail")
        {
            props.albedo = {1.0f, 1.0f, 1.0f};
            props.emission = {0.1f, 0.1f, 0.1f};
            props.roughness = 0.0f;
            props.metallic = 0.0f;
            props.toonSteps = 2;
        }

        return props;
    }

    void MaterialManager::ApplyGlobalCelShadingSettings(MaterialProperties &properties)
    {
        if (properties.toonSteps == 4)
        { // Only apply if using default
            properties.toonSteps = globalToonSteps_;
        }
        if (properties.toonThreshold == 0.5f)
        { // Only apply if using default
            properties.toonThreshold = globalToonThreshold_;
        }
        if (properties.enableRimLighting)
        { // Only apply if rim lighting is enabled
            properties.enableRimLighting = globalRimLighting_;
        }
    }

    MaterialProperties MaterialManager::CreateEarthProperties(float radius, int detailLevel)
    {
        MaterialProperties props = CreateBaseProperties("earth");

        // Adjust properties based on radius (for LOD)
        if (radius > 5000000.0f)
        { // Large scale (space view)
            props.toonSteps = 8;
            props.roughness = 0.6f;
        }
        else if (radius > 1000000.0f)
        { // Medium scale
            props.toonSteps = 6;
            props.roughness = 0.7f;
        }
        else
        { // Close scale
            props.toonSteps = 4;
            props.roughness = 0.9f;
        }

        // Detail level affects rim lighting
        props.rimStrength = 1.0f + (detailLevel * 0.2f);
        props.enableRimLighting = true;
        props.rimColor = {0.8f, 0.9f, 1.0f};

        return props;
    }

    MaterialProperties MaterialManager::CreateAtmosphereProperties(int layer, float density)
    {
        MaterialProperties props = CreateBaseProperties("atmosphere");

        // Layer affects color and properties
        float layerFactor = static_cast<float>(layer) / 3.0f;
        props.albedo.x = 0.4f + layerFactor * 0.2f;
        props.albedo.y = 0.6f + layerFactor * 0.2f;
        props.albedo.z = 0.9f + layerFactor * 0.1f;

        // Density affects rim lighting
        props.rimStrength = density * 3.0f;
        props.rimPower = 1.5f + density;
        props.enableRimLighting = true;

        props.toonSteps = 2 + layer;
        props.toonThreshold = 0.3f + density * 0.4f;

        return props;
    }

    MaterialProperties MaterialManager::CreateCloudProperties(float coverage, float density)
    {
        MaterialProperties props = CreateBaseProperties("cloud");

        // Coverage affects albedo
        props.albedo = {0.9f + coverage * 0.1f, 0.9f + coverage * 0.1f, 0.9f + coverage * 0.1f};

        // Density affects roughness and animation
        props.roughness = 0.05f + density * 0.15f;
        props.isAnimated = true;
        props.animationType = "scroll";
        props.animationSpeed = 0.3f + density * 0.4f;

        props.enableRimLighting = true;
        props.rimColor = {0.9f, 0.95f, 1.0f};
        props.rimStrength = 1.2f;

        return props;
    }

    MaterialProperties MaterialManager::CreateContrailProperties(const Math::float3 &color)
    {
        MaterialProperties props = CreateBaseProperties("contrail");

        props.albedo = color;
        props.emission = {color.x * 0.2f, color.y * 0.2f, color.z * 0.2f};

        props.isAnimated = true;
        props.animationType = "wave";
        props.animationSpeed = 1.5f;

        props.enableRimLighting = true;
        props.rimColor = color;
        props.rimStrength = 2.0f;
        props.rimPower = 1.0f;

        return props;
    }

    void MaterialManager::AssignEarthTextures(MaterialProperties &properties, float radius, int detailLevel)
    {
        if (!textureGenerator_)
            return;

        // For now, just assign placeholder texture names
        // In a real implementation, we would generate textures using ProceduralTexture::ProceduralTextureGenerator::generateTexture
        std::string baseId = "earth_" + std::to_string(static_cast<int>(radius)) + "_detail" + std::to_string(detailLevel);

        properties.albedoTexture = baseId + "_albedo";
        properties.normalTexture = baseId + "_normal";
    }

    void MaterialManager::AssignAtmosphereTextures(MaterialProperties &properties, int layer)
    {
        if (!textureGenerator_)
            return;

        std::string baseId = "atmosphere_layer" + std::to_string(layer);
        properties.albedoTexture = baseId + "_albedo";
    }

    void MaterialManager::AssignCloudTextures(MaterialProperties &properties, float coverage)
    {
        if (!textureGenerator_)
            return;

        std::string baseId = "cloud_coverage" + std::to_string(static_cast<int>(coverage * 100));
        properties.albedoTexture = baseId + "_albedo";
    }

    void MaterialManager::AssignContrailTextures(MaterialProperties &properties)
    {
        if (!textureGenerator_)
            return;

        properties.albedoTexture = "contrail_albedo";
    }

    // XML parsing helper methods
    std::string MaterialManager::ExtractAttributeValue(const std::string &xml, const std::string &attributeName)
    {
        std::string searchStr = attributeName + "=\"";
        size_t start = xml.find(searchStr);
        if (start == std::string::npos)
            return "";

        start += searchStr.length();
        size_t end = xml.find("\"", start);
        if (end == std::string::npos)
            return "";

        return xml.substr(start, end - start);
    }

    std::string MaterialManager::ExtractTagValue(const std::string &xml, const std::string &tagName)
    {
        std::string openTag = "<" + tagName + ">";
        std::string closeTag = "</" + tagName + ">";

        size_t start = xml.find(openTag);
        if (start == std::string::npos)
            return "";

        start += openTag.length();
        size_t end = xml.find(closeTag, start);
        if (end == std::string::npos)
            return "";

        return xml.substr(start, end - start);
    }

    void MaterialManager::ParseColorProperty(const std::string &xml, const std::string &propName, Math::float3 &colorValue)
    {
        std::string startTag = "<" + propName;
        size_t start = xml.find(startTag);
        if (start == std::string::npos)
            return;

        std::string r = ExtractAttributeValue(xml.substr(start), "r");
        std::string g = ExtractAttributeValue(xml.substr(start), "g");
        std::string b = ExtractAttributeValue(xml.substr(start), "b");

        if (!r.empty())
            colorValue.x = std::stof(r);
        if (!g.empty())
            colorValue.y = std::stof(g);
        if (!b.empty())
            colorValue.z = std::stof(b);
    }

    void MaterialManager::ParseFloatProperty(const std::string &xml, const std::string &propName, float &floatValue)
    {
        std::string value = ExtractTagValue(xml, propName);
        if (!value.empty())
        {
            try
            {
                floatValue = std::stof(value);
            }
            catch (const std::exception &e)
            {
                std::cerr << "Error parsing float property " << propName << ": " << e.what() << std::endl;
            }
        }
    }

    void MaterialManager::ParseIntProperty(const std::string &xml, const std::string &propName, int &intValue)
    {
        std::string value = ExtractTagValue(xml, propName);
        if (!value.empty())
        {
            try
            {
                intValue = std::stoi(value);
            }
            catch (const std::exception &e)
            {
                std::cerr << "Error parsing int property " << propName << ": " << e.what() << std::endl;
            }
        }
    }

    void MaterialManager::ParseBoolProperty(const std::string &xml, const std::string &propName, bool &boolValue)
    {
        std::string value = ExtractTagValue(xml, propName);
        if (!value.empty())
        {
            boolValue = (value == "true" || value == "1");
        }
    }
}


================================================================================
FILE: src\systems\MaterialManager.h
================================================================================

#pragma once

#include <unordered_map>
#include <string>
#include <memory>
#include <optional>
#include "../math/MathUtils.h"
#include "../generators/ProceduralTextureGenerator.h"
#include "../core/AssetIds.h"

// MaterialManager uses string-based IDs internally but should convert to numeric AssetIds for registry
using MaterialId = std::string;

namespace Material
{
    // Core material properties for cel-shading and PBR workflows
    struct MaterialProperties
    {
        // Cel-shading properties
        Math::float3 albedo = {1.0f, 1.0f, 1.0f};
        Math::float3 emission = {0.0f, 0.0f, 0.0f};
        float metallic = 0.0f;
        float roughness = 0.5f;
        float rimPower = 2.0f;
        float rimStrength = 1.0f;
        Math::float3 rimColor = {1.0f, 1.0f, 1.0f};

        // Texture asset IDs
        std::string albedoTexture;
        std::string normalTexture;
        std::string metallicTexture;
        std::string roughnessTexture;
        std::string emissionTexture;

        // Cel-shading specific
        int toonSteps = 4;
        float toonThreshold = 0.5f;
        bool enableRimLighting = true;
        bool enableOutlines = false;
        float outlineWidth = 0.02f;
        Math::float3 outlineColor = {0.0f, 0.0f, 0.0f};

        // Animation properties
        bool isAnimated = false;
        float animationSpeed = 1.0f;
        std::string animationType = "none"; // "scroll", "rotate", "pulse", "wave"
    };

    // Material definition combining properties and metadata
    struct Material
    {
        std::string name;
        std::string type; // "standard", "earth", "atmosphere", "cloud", "contrail"
        MaterialProperties properties;
        bool isDynamic = false; // Whether textures are generated at runtime

        Material() = default;
        Material(const std::string &materialName, const std::string &materialType)
            : name(materialName), type(materialType) {}
    };

    // Material manager for dynamic loading and cel-shading setup
    class MaterialManager
    {
    public:
        MaterialManager();
        ~MaterialManager() = default;

        // Core material management
        bool LoadMaterial(const std::string &materialId, const Material &material);
        std::optional<Material> GetMaterial(const std::string &materialId) const;
        bool HasMaterial(const std::string &materialId) const;

        // Dynamic material creation
        std::string CreateDynamicMaterial(const std::string &baseType, const MaterialProperties &properties);
        std::string CreateEarthMaterial(float radius, int detailLevel = 1);
        std::string CreateAtmosphereMaterial(int layer = 0, float density = 0.1f);
        std::string CreateCloudMaterial(float coverage = 0.6f, float density = 0.3f);
        std::string CreateContrailMaterial(const Math::float3 &color = {1.0f, 1.0f, 1.0f});

        // Cel-shading configuration
        void SetGlobalCelShadingParams(int toonSteps, float threshold, bool enableRim);
        void EnableOutlinesForMaterial(const std::string &materialId, float width, const Math::float3 &color);
        void SetMaterialAnimation(const std::string &materialId, const std::string &animType, float speed);

        // Texture integration (internal use only)
        void SetTextureGenerator(const ProceduralTexture::ProceduralTextureGenerator *generator);
        MaterialId GenerateAndAssignTexture(const std::string &materialId, const std::string &textureType);

        // Bulk operations
        bool LoadMaterialsFromFile(const std::string &filePath);
        void LoadDefaultMaterials(); // Deprecated - use LoadMaterialsFromFile
        void ClearAllMaterials();
        size_t GetMaterialCount() const;

        // Debugging and validation
        std::vector<std::string> GetAllMaterialIds() const;
        bool ValidateMaterial(const std::string &materialId) const;
        void PrintMaterialInfo(const std::string &materialId) const;

    private:
        std::unordered_map<std::string, Material> materials_;
        const ProceduralTexture::ProceduralTextureGenerator *textureGenerator_;

        // Global cel-shading settings
        int globalToonSteps_ = 4;
        float globalToonThreshold_ = 0.5f;
        bool globalRimLighting_ = true;

        // Helper methods
        std::string GenerateUniqueMaterialId(const std::string &baseType);
        MaterialProperties CreateBaseProperties(const std::string &materialType);
        void ApplyGlobalCelShadingSettings(MaterialProperties &properties);

        // Material type creators
        MaterialProperties CreateEarthProperties(float radius, int detailLevel);
        MaterialProperties CreateAtmosphereProperties(int layer, float density);
        MaterialProperties CreateCloudProperties(float coverage, float density);
        MaterialProperties CreateContrailProperties(const Math::float3 &color);

        // Texture assignment helpers
        void AssignEarthTextures(MaterialProperties &properties, float radius, int detailLevel);
        void AssignAtmosphereTextures(MaterialProperties &properties, int layer);
        void AssignCloudTextures(MaterialProperties &properties, float coverage);
        void AssignContrailTextures(MaterialProperties &properties);

        // XML parsing helpers
        std::string ExtractAttributeValue(const std::string &xml, const std::string &attributeName);
        std::string ExtractTagValue(const std::string &xml, const std::string &tagName);
        void ParseColorProperty(const std::string &xml, const std::string &propName, Math::float3 &colorValue);
        void ParseFloatProperty(const std::string &xml, const std::string &propName, float &floatValue);
        void ParseIntProperty(const std::string &xml, const std::string &propName, int &intValue);
        void ParseBoolProperty(const std::string &xml, const std::string &propName, bool &boolValue);
    };
}



================================================================================
FILE: src\systems\OrbitalAnimationSystem.h
================================================================================

/**
 * @file OrbitalAnimationSystem.h
 * @brief Animation system for orbital motion management
 *
 * The OrbitalAnimationSystem manages orbital motion for entities with
 * OrbitalC components. Features include:
 * - Automatic time advancement and position updates
 * - Synchronization between multiple orbital entities
 * - Speed scaling and time manipulation
 * - Integration with transform components
 * - Support for coordinated group animations
 *
 * @author Generated for Voxel Busy Indicator Scene
 * @date 2024
 */

#pragma once

#include "../math/MathUtils.h"
#include "../components/OrbitalC.h"
#include "../components/TransformC.h"
#include <vector>
#include <memory>
#include <unordered_map>

/**
 * @brief Animation system for orbital motion
 *
 * Manages the update cycle for all entities with orbital motion,
 * ensuring synchronized and smooth orbital animations.
 */
class OrbitalAnimationSystem
{
public:
    /**
     * @brief Entity reference for orbital updates
     */
    struct OrbitalEntity
    {
        uint32_t entityId;                     /**< Entity identifier */
        std::shared_ptr<OrbitalC> orbital;     /**< Orbital component */
        std::shared_ptr<TransformC> transform; /**< Transform component */
        bool active;                           /**< Whether entity is active */

        OrbitalEntity(uint32_t id, std::shared_ptr<OrbitalC> orb, std::shared_ptr<TransformC> trans)
            : entityId(id), orbital(orb), transform(trans), active(true) {}
    };

    /**
     * @brief Animation group for synchronized orbital motion
     */
    struct OrbitalGroup
    {
        std::string name;                /**< Group name */
        std::vector<uint32_t> entityIds; /**< Entities in this group */
        float timeScale;                 /**< Time scaling factor */
        float phaseOffset;               /**< Group phase offset */
        Math::float3 centerPoint;        /**< Group center point */
        bool synchronized;               /**< Whether group is synchronized */

        OrbitalGroup(const std::string &groupName = "default")
            : name(groupName), timeScale(1.0f), phaseOffset(0.0f), centerPoint{0, 0, 0}, synchronized(true)
        {
        }
    };

private:
    /** @brief All registered orbital entities */
    std::vector<OrbitalEntity> entities;

    /** @brief Orbital groups for synchronized animation */
    std::unordered_map<std::string, OrbitalGroup> groups;

    /** @brief Global time accumulator */
    float globalTime;

    /** @brief Global time scale */
    float globalTimeScale;

    /** @brief Whether system is active */
    bool systemActive;

    /** @brief Frame delta time for smooth updates */
    float deltaTime;

public:
    /**
     * @brief Construct a new OrbitalAnimationSystem
     */
    OrbitalAnimationSystem()
        : globalTime(0.0f), globalTimeScale(1.0f), systemActive(true), deltaTime(0.0f)
    {
        // Create default group
        groups["default"] = OrbitalGroup("default");
    }

    /**
     * @brief Update all orbital animations
     *
     * @param frameTime Time elapsed since last frame
     */
    void update(float frameTime)
    {
        if (!systemActive)
            return;

        deltaTime = frameTime * globalTimeScale;
        globalTime += deltaTime;

        // Update all orbital entities
        for (auto &entity : entities)
        {
            if (!entity.active || !entity.orbital || !entity.transform)
                continue;

            updateEntity(entity);
        }

        // Update group-specific animations
        updateGroups();
    }

    /**
     * @brief Register an entity for orbital animation
     *
     * @param entityId Entity identifier
     * @param orbital Orbital component
     * @param transform Transform component
     * @param groupName Group to assign entity to
     */
    void registerEntity(uint32_t entityId,
                        std::shared_ptr<OrbitalC> orbital,
                        std::shared_ptr<TransformC> transform,
                        const std::string &groupName = "default")
    {
        entities.emplace_back(entityId, orbital, transform);

        // Add to group
        auto &group = getOrCreateGroup(groupName);
        group.entityIds.push_back(entityId);
    }

    /**
     * @brief Unregister an entity from orbital animation
     *
     * @param entityId Entity to remove
     */
    void unregisterEntity(uint32_t entityId)
    {
        // Remove from entities list
        entities.erase(
            std::remove_if(entities.begin(), entities.end(),
                           [entityId](const OrbitalEntity &e)
                           { return e.entityId == entityId; }),
            entities.end());

        // Remove from all groups
        for (auto &[groupName, group] : groups)
        {
            group.entityIds.erase(
                std::remove(group.entityIds.begin(), group.entityIds.end(), entityId),
                group.entityIds.end());
        }
    }

    /**
     * @brief Create or get an orbital group
     *
     * @param groupName Name of the group
     * @return Reference to the group
     */
    OrbitalGroup &getOrCreateGroup(const std::string &groupName)
    {
        if (groups.find(groupName) == groups.end())
        {
            groups[groupName] = OrbitalGroup(groupName);
        }
        return groups[groupName];
    }

    /**
     * @brief Set group parameters
     *
     * @param groupName Group name
     * @param timeScale Time scaling factor
     * @param centerPoint Center point for group
     * @param synchronized Whether group should be synchronized
     */
    void setGroupParams(const std::string &groupName,
                        float timeScale = 1.0f,
                        const Math::float3 &centerPoint = {0, 0, 0},
                        bool synchronized = true)
    {
        auto &group = getOrCreateGroup(groupName);
        group.timeScale = timeScale;
        group.centerPoint = centerPoint;
        group.synchronized = synchronized;
    }

    /**
     * @brief Set global time scale
     *
     * @param scale Time scaling factor (1.0 = normal speed)
     */
    void setGlobalTimeScale(float scale)
    {
        globalTimeScale = scale;
    }

    /**
     * @brief Get global time scale
     *
     * @return Current time scale
     */
    float getGlobalTimeScale() const
    {
        return globalTimeScale;
    }

    /**
     * @brief Pause/resume orbital animations
     *
     * @param active Whether system should be active
     */
    void setActive(bool active)
    {
        systemActive = active;
    }

    /**
     * @brief Check if system is active
     *
     * @return True if system is running
     */
    bool isActive() const
    {
        return systemActive;
    }

    /**
     * @brief Reset global time
     *
     * @param time New time value
     */
    void setGlobalTime(float time)
    {
        globalTime = time;

        // Update all orbital components
        for (auto &entity : entities)
        {
            if (entity.orbital)
            {
                entity.orbital->setTime(time);
            }
        }
    }

    /**
     * @brief Get current global time
     *
     * @return Current global time
     */
    float getGlobalTime() const
    {
        return globalTime;
    }

    /**
     * @brief Get number of registered entities
     *
     * @return Entity count
     */
    size_t getEntityCount() const
    {
        return entities.size();
    }

    /**
     * @brief Get number of active entities
     *
     * @return Active entity count
     */
    size_t getActiveEntityCount() const
    {
        size_t count = 0;
        for (const auto &entity : entities)
        {
            if (entity.active)
                count++;
        }
        return count;
    }

private:
    /**
     * @brief Update a single orbital entity
     *
     * @param entity Entity to update
     */
    void updateEntity(OrbitalEntity &entity)
    {
        // Find the group this entity belongs to
        OrbitalGroup *entityGroup = nullptr;
        for (auto &[groupName, group] : groups)
        {
            auto it = std::find(group.entityIds.begin(), group.entityIds.end(), entity.entityId);
            if (it != group.entityIds.end())
            {
                entityGroup = &group;
                break;
            }
        }

        // Calculate time delta for this entity
        float entityDelta = deltaTime;
        if (entityGroup)
        {
            entityDelta *= entityGroup->timeScale;
        }

        // Update orbital component
        entity.orbital->update(entityDelta);

        // Get current orbital position and orientation
        Math::float3 position = entity.orbital->getCurrentPosition();
        Math::quat orientation = entity.orbital->getCurrentOrientation();

        // Apply group center offset if applicable
        if (entityGroup)
        {
            position = Math::add(position, entityGroup->centerPoint);
        }

        // Update transform component
        entity.transform->setPosition(position);
        entity.transform->setRotation(orientation);
    }

    /**
     * @brief Update group-specific animations
     */
    void updateGroups()
    {
        for (auto &[groupName, group] : groups)
        {
            if (!group.synchronized)
                continue;

            // For synchronized groups, ensure all entities have the same phase
            if (group.entityIds.size() > 1)
            {
                updateSynchronizedGroup(group);
            }
        }
    }

    /**
     * @brief Update a synchronized orbital group
     *
     * @param group Group to synchronize
     */
    void updateSynchronizedGroup(OrbitalGroup &group)
    {
        if (group.entityIds.empty())
            return;

        // Find the first active entity as reference
        OrbitalEntity *referenceEntity = nullptr;
        for (uint32_t entityId : group.entityIds)
        {
            for (auto &entity : entities)
            {
                if (entity.entityId == entityId && entity.active && entity.orbital)
                {
                    referenceEntity = &entity;
                    break;
                }
            }
            if (referenceEntity)
                break;
        }

        if (!referenceEntity)
            return;

        // Get reference time from the reference entity
        float referenceTime = globalTime + group.phaseOffset;

        // Apply to all entities in the group
        for (uint32_t entityId : group.entityIds)
        {
            for (auto &entity : entities)
            {
                if (entity.entityId == entityId && entity.active && entity.orbital)
                {
                    // Maintain individual phase offsets while synchronizing base time
                    float individualPhase = entity.orbital->orbitParams.phaseOffset;
                    entity.orbital->setTime(referenceTime + individualPhase);
                }
            }
        }
    }
};



================================================================================
FILE: src\systems\ParticleAnimationSystem.h
================================================================================

/**
 * @file ParticleAnimationSystem.h
 * @brief Animation system for particle effects management
 *
 * The ParticleAnimationSystem manages particle-based effects including
 * contrails, explosions, and other dynamic particle systems. Features include:
 * - Automatic particle lifecycle management
 * - Physics integration for realistic motion
 * - Emitter following for trail effects
 * - Performance optimization through pooling
 * - Integration with Math utilities for physics
 *
 * @author Generated for Voxel Busy Indicator Scene
 * @date 2024
 */

#pragma once

#include "../math/MathUtils.h"
#include "../components/ContrailC.h"
#include "../components/TransformC.h"
#include <vector>
#include <memory>
#include <unordered_map>

/**
 * @brief Animation system for particle effects
 *
 * Manages the update cycle for all particle-based effects,
 * ensuring smooth physics simulation and lifecycle management.
 */
class ParticleAnimationSystem
{
public:
    /**
     * @brief Entity with particle effects
     */
    struct ParticleEntity
    {
        uint32_t entityId;                     /**< Entity identifier */
        std::shared_ptr<ContrailC> contrail;   /**< Contrail component */
        std::shared_ptr<TransformC> transform; /**< Transform component */
        bool active;                           /**< Whether entity is active */
        Math::float3 lastPosition;             /**< Last known position */
        bool hasLastPosition;                  /**< Whether last position is valid */

        ParticleEntity(uint32_t id, std::shared_ptr<ContrailC> cont, std::shared_ptr<TransformC> trans)
            : entityId(id), contrail(cont), transform(trans), active(true), lastPosition{0, 0, 0}, hasLastPosition(false) {}
    };

    /**
     * @brief Particle effect group for synchronized behavior
     */
    struct ParticleGroup
    {
        std::string name;                /**< Group name */
        std::vector<uint32_t> entityIds; /**< Entities in this group */
        Math::float3 windVelocity;       /**< Shared wind velocity */
        float gravityStrength;           /**< Shared gravity strength */
        float timeScale;                 /**< Time scaling factor */
        bool sharedPhysics;              /**< Whether to use shared physics params */

        ParticleGroup(const std::string &groupName = "default")
            : name(groupName), windVelocity{0, 0, 0}, gravityStrength(9.81f), timeScale(1.0f), sharedPhysics(false)
        {
        }
    };

    /**
     * @brief Performance statistics
     */
    struct PerformanceStats
    {
        uint32_t totalParticles;   /**< Total active particles */
        uint32_t totalEmitters;    /**< Total active emitters */
        float updateTime;          /**< Last update time in milliseconds */
        uint32_t particlesSpawned; /**< Particles spawned this frame */
        uint32_t particlesDied;    /**< Particles died this frame */

        PerformanceStats() : totalParticles(0), totalEmitters(0), updateTime(0), particlesSpawned(0), particlesDied(0) {}
    };

private:
    /** @brief All registered particle entities */
    std::vector<ParticleEntity> entities;

    /** @brief Particle groups for synchronized behavior */
    std::unordered_map<std::string, ParticleGroup> groups;

    /** @brief Global time accumulator */
    float globalTime;

    /** @brief Global time scale */
    float globalTimeScale;

    /** @brief Whether system is active */
    bool systemActive;

    /** @brief Performance statistics */
    PerformanceStats stats;

    /** @brief Global physics parameters */
    Math::float3 globalWindVelocity;
    float globalGravityStrength;

public:
    /**
     * @brief Construct a new ParticleAnimationSystem
     */
    ParticleAnimationSystem()
        : globalTime(0.0f), globalTimeScale(1.0f), systemActive(true), globalWindVelocity{0, 0, 0}, globalGravityStrength(9.81f)
    {
        // Create default group
        groups["default"] = ParticleGroup("default");
    }

    /**
     * @brief Update all particle animations
     *
     * @param deltaTime Time elapsed since last frame
     */
    void update(float deltaTime)
    {
        if (!systemActive)
            return;

        // Reset frame statistics
        stats.particlesSpawned = 0;
        stats.particlesDied = 0;
        stats.totalParticles = 0;
        stats.totalEmitters = 0;

        float startTime = globalTime; // For performance measurement

        float scaledDeltaTime = deltaTime * globalTimeScale;
        globalTime += scaledDeltaTime;

        // Update all particle entities
        for (auto &entity : entities)
        {
            if (!entity.active || !entity.contrail || !entity.transform)
                continue;

            updateParticleEntity(entity, scaledDeltaTime);
            stats.totalEmitters++;
        }

        // Update group-specific effects
        updateGroups(scaledDeltaTime);

        // Calculate performance metrics
        stats.updateTime = (globalTime - startTime) * 1000.0f; // Convert to milliseconds
    }

    /**
     * @brief Register an entity for particle animation
     *
     * @param entityId Entity identifier
     * @param contrail Contrail component
     * @param transform Transform component
     * @param groupName Group to assign entity to
     */
    void registerEntity(uint32_t entityId,
                        std::shared_ptr<ContrailC> contrail,
                        std::shared_ptr<TransformC> transform,
                        const std::string &groupName = "default")
    {
        entities.emplace_back(entityId, contrail, transform);

        // Add to group
        auto &group = getOrCreateGroup(groupName);
        group.entityIds.push_back(entityId);
    }

    /**
     * @brief Unregister an entity from particle animation
     *
     * @param entityId Entity to remove
     */
    void unregisterEntity(uint32_t entityId)
    {
        // Remove from entities list
        entities.erase(
            std::remove_if(entities.begin(), entities.end(),
                           [entityId](const ParticleEntity &e)
                           { return e.entityId == entityId; }),
            entities.end());

        // Remove from all groups
        for (auto &[groupName, group] : groups)
        {
            group.entityIds.erase(
                std::remove(group.entityIds.begin(), group.entityIds.end(), entityId),
                group.entityIds.end());
        }
    }

    /**
     * @brief Create or get a particle group
     *
     * @param groupName Name of the group
     * @return Reference to the group
     */
    ParticleGroup &getOrCreateGroup(const std::string &groupName)
    {
        if (groups.find(groupName) == groups.end())
        {
            groups[groupName] = ParticleGroup(groupName);
        }
        return groups[groupName];
    }

    /**
     * @brief Set group physics parameters
     *
     * @param groupName Group name
     * @param windVelocity Wind velocity vector
     * @param gravityStrength Gravity strength
     * @param timeScale Time scaling factor
     * @param sharedPhysics Whether to use shared physics
     */
    void setGroupPhysics(const std::string &groupName,
                         const Math::float3 &windVelocity = {0, 0, 0},
                         float gravityStrength = 9.81f,
                         float timeScale = 1.0f,
                         bool sharedPhysics = true)
    {
        auto &group = getOrCreateGroup(groupName);
        group.windVelocity = windVelocity;
        group.gravityStrength = gravityStrength;
        group.timeScale = timeScale;
        group.sharedPhysics = sharedPhysics;
    }

    /**
     * @brief Set global physics parameters
     *
     * @param windVelocity Global wind velocity
     * @param gravityStrength Global gravity strength
     */
    void setGlobalPhysics(const Math::float3 &windVelocity, float gravityStrength)
    {
        globalWindVelocity = windVelocity;
        globalGravityStrength = gravityStrength;
    }

    /**
     * @brief Set global time scale
     *
     * @param scale Time scaling factor (1.0 = normal speed)
     */
    void setGlobalTimeScale(float scale)
    {
        globalTimeScale = scale;
    }

    /**
     * @brief Get global time scale
     *
     * @return Current time scale
     */
    float getGlobalTimeScale() const
    {
        return globalTimeScale;
    }

    /**
     * @brief Pause/resume particle animations
     *
     * @param active Whether system should be active
     */
    void setActive(bool active)
    {
        systemActive = active;
    }

    /**
     * @brief Check if system is active
     *
     * @return True if system is running
     */
    bool isActive() const
    {
        return systemActive;
    }

    /**
     * @brief Get performance statistics
     *
     * @return Current performance stats
     */
    const PerformanceStats &getPerformanceStats() const
    {
        return stats;
    }

    /**
     * @brief Clear all particles in a group
     *
     * @param groupName Group to clear (empty = all groups)
     */
    void clearParticles(const std::string &groupName = "")
    {
        if (groupName.empty())
        {
            // Clear all particles
            for (auto &entity : entities)
            {
                if (entity.contrail)
                {
                    entity.contrail->clearParticles();
                }
            }
        }
        else
        {
            // Clear particles in specific group
            auto groupIt = groups.find(groupName);
            if (groupIt != groups.end())
            {
                for (uint32_t entityId : groupIt->second.entityIds)
                {
                    for (auto &entity : entities)
                    {
                        if (entity.entityId == entityId && entity.contrail)
                        {
                            entity.contrail->clearParticles();
                        }
                    }
                }
            }
        }
    }

    /**
     * @brief Get number of registered entities
     *
     * @return Entity count
     */
    size_t getEntityCount() const
    {
        return entities.size();
    }

    /**
     * @brief Get number of active entities
     *
     * @return Active entity count
     */
    size_t getActiveEntityCount() const
    {
        size_t count = 0;
        for (const auto &entity : entities)
        {
            if (entity.active)
                count++;
        }
        return count;
    }

private:
    /**
     * @brief Update a single particle entity
     *
     * @param entity Entity to update
     * @param deltaTime Time delta for this update
     */
    void updateParticleEntity(ParticleEntity &entity, float deltaTime)
    {
        // Get current position from transform
        Math::float3 currentPosition = entity.transform->getPosition();

        // Find the group this entity belongs to
        ParticleGroup *entityGroup = nullptr;
        for (auto &[groupName, group] : groups)
        {
            auto it = std::find(group.entityIds.begin(), group.entityIds.end(), entity.entityId);
            if (it != group.entityIds.end())
            {
                entityGroup = &group;
                break;
            }
        }

        // Apply group-specific physics if enabled
        if (entityGroup && entityGroup->sharedPhysics)
        {
            applyGroupPhysics(entity, *entityGroup);
            deltaTime *= entityGroup->timeScale;
        }
        else
        {
            applyGlobalPhysics(entity);
        }

        // Update contrail with current position
        entity.contrail->update(deltaTime, currentPosition);

        // Count particles for statistics
        stats.totalParticles += entity.contrail->getActiveParticleCount();

        // Update last position
        entity.lastPosition = currentPosition;
        entity.hasLastPosition = true;
    }

    /**
     * @brief Apply group-specific physics parameters
     *
     * @param entity Entity to update
     * @param group Group physics parameters
     */
    void applyGroupPhysics(ParticleEntity &entity, const ParticleGroup &group)
    {
        auto params = entity.contrail->getParams();
        params.windVelocity = group.windVelocity;
        params.gravityStrength = group.gravityStrength;
        entity.contrail->setParams(params);
    }

    /**
     * @brief Apply global physics parameters
     *
     * @param entity Entity to update
     */
    void applyGlobalPhysics(ParticleEntity &entity)
    {
        auto params = entity.contrail->getParams();
        params.windVelocity = globalWindVelocity;
        params.gravityStrength = globalGravityStrength;
        entity.contrail->setParams(params);
    }

    /**
     * @brief Update group-specific effects
     *
     * @param deltaTime Time delta for this update
     */
    void updateGroups(float deltaTime)
    {
        for (auto &[groupName, group] : groups)
        {
            updateGroup(group, deltaTime);
        }
    }

    /**
     * @brief Update a specific particle group
     *
     * @param group Group to update
     * @param deltaTime Time delta for this update
     */
    void updateGroup(ParticleGroup &group, float deltaTime)
    {
        // Group-specific animations could be added here
        // For example: synchronized emission patterns, group-wide effects, etc.

        // Currently, individual entity updates handle most functionality
        // This method is reserved for future group-level effects
    }
};



================================================================================
FILE: src\systems\PhysicsSystem.cpp
================================================================================

#include "PhysicsSystem.h"
#include "core/World.h"

PhysicsSystem::PhysicsSystem(EventBus &eventBus, IAirDensityModel &airDensityModel, IWindModel &windModel, ICollisionResolver &collisionResolver)
    : eventBus_(eventBus), airDensityModel_(airDensityModel), windModel_(windModel), collisionResolver_(collisionResolver) {}

void PhysicsSystem::update(World &world, float dt)
{
    // Stub: update physics for entities
}




================================================================================
FILE: src\systems\PhysicsSystem.h
================================================================================

#ifndef PHYSICSSYSTEM_H
#define PHYSICSSYSTEM_H

#include "core/ISystem.h"
#include "core/EventBus.h"
#include "physics/IAirDensityModel.h"
#include "physics/IWindModel.h"
#include "physics/ICollisionResolver.h"

class PhysicsSystem : public ISystem
{
public:
    PhysicsSystem(EventBus &eventBus, IAirDensityModel &airDensityModel, IWindModel &windModel, ICollisionResolver &collisionResolver);
    void update(World &world, float dt) override;

private:
    EventBus &eventBus_;
    IAirDensityModel &airDensityModel_;
    IWindModel &windModel_;
    ICollisionResolver &collisionResolver_;
};

#endif



================================================================================
FILE: src\systems\VehicleControlSystem.cpp
================================================================================

#include "VehicleControlSystem.h"
#include "core/World.h"

VehicleControlSystem::VehicleControlSystem(EventBus &eventBus) : eventBus_(eventBus) {}

void VehicleControlSystem::update(World &world, float dt)
{
    // Stub: control vehicles
}




================================================================================
FILE: src\systems\VehicleControlSystem.h
================================================================================

#ifndef VEHICLECONTROLSYSTEM_H
#define VEHICLECONTROLSYSTEM_H

#include "core/ISystem.h"
#include "core/EventBus.h"

class VehicleControlSystem : public ISystem
{
public:
    VehicleControlSystem(EventBus &eventBus);
    void update(World &world, float dt) override;

private:
    EventBus &eventBus_;
};

#endif



================================================================================
FILE: src\systems\VisualizationSystem_GDI_backup.cpp
================================================================================

#include "VisualizationSystem.h"
#include "../core/AssetIds.h"
#include <iostream>
#include <string>
#include <cmath>
#include <memory>
#include <unordered_map>

// Component definitions
#include "core/IComponent.h"

struct TransformC : public IComponent
{
    struct Vector3
    {
        float x, y, z;
        Vector3(float x = 0.0f, float y = 0.0f, float z = 0.0f) : x(x), y(y), z(z) {}
    };

    struct Quaternion
    {
        float x, y, z, w;
        Quaternion(float x = 0.0f, float y = 0.0f, float z = 0.0f, float w = 1.0f) : x(x), y(y), z(z), w(w) {}
        static Quaternion Identity() { return Quaternion(0, 0, 0, 1); }
    };

    Vector3 position;
    Quaternion orientation;
    Vector3 scale;

    TransformC(Vector3 pos = Vector3(), Quaternion rot = Quaternion::Identity(), Vector3 scl = Vector3(1, 1, 1))
        : position(pos), orientation(rot), scale(scl) {}
};

struct RenderableC : public IComponent
{
    std::string meshId;
    std::string materialId;
    bool isVisible;

    RenderableC(std::string mesh = "", std::string material = "", bool visible = true)
        : meshId(mesh), materialId(material), isVisible(visible) {}
};

VisualizationSystem::VisualizationSystem(EventBus &eventBus, World &world, HWND windowHandle, Material::MaterialManager &materialManager, const Render::RenderConfiguration &renderConfig)
    : eventBus(eventBus), worldRef(world), hwnd(windowHandle), materialManager_(materialManager), renderConfig_(renderConfig),
      displayNoPackagesMessage(false), consoleVisible(false), rotationAngle(0.0f)
{
    hdc = GetDC(hwnd);

    // Subscribe to events
    eventBus.subscribe(EventType::NoPackagesFound, [this](const IEvent &event)
                       {
        const auto& packagesEvent = static_cast<const NoPackagesFoundEvent&>(event);
        OnNoPackagesFound(packagesEvent) });

    eventBus.subscribe(EventType::ConsoleVisibilityChanged, [this](const IEvent &event)
                       {
        const auto& visibilityEvent = static_cast<const ConsoleVisibilityChangedEvent&>(event);
        OnConsoleVisibilityChanged(visibilityEvent) });
}

VisualizationSystem::~VisualizationSystem()
{
    ReleaseDC(hwnd, hdc);
}

void VisualizationSystem::update(World &world, float deltaTime)
{
    // Get a fresh device context for this frame
    HDC frameDC = GetDC(hwnd);

    // Clear the screen
    RECT rect;
    GetClientRect(hwnd, &rect);
    FillRect(frameDC, &rect, (HBRUSH)GetStockObject(BLACK_BRUSH));

    // Temporarily switch to frame DC for rendering
    HDC oldDC = hdc;
    hdc = frameDC;

    // Render entities
    RenderEntities();

    // Render console if visible
    if (consoleVisible)
    {
        RenderConsole();
    }

    // Render no packages message if needed
    if (displayNoPackagesMessage)
    {
        RenderNoPackagesMessage();
    }

    // Restore original DC and release frame DC
    hdc = oldDC;
    ReleaseDC(hwnd, frameDC);

    // Update rotation for animation
    rotationAngle += deltaTime * 0.1f;
}

void VisualizationSystem::OnNoPackagesFound(const NoPackagesFoundEvent &event)
{
    displayNoPackagesMessage = true;
}

void VisualizationSystem::OnConsoleVisibilityChanged(const ConsoleVisibilityChangedEvent &event)
{
    consoleVisible = event.isVisible;
}

void VisualizationSystem::RenderEntities()
{
    // Efficient rendering using precompiled material color lookup
    for (const auto &entity : worldRef.getEntities())
    {
        auto transform = entity->getComponent<TransformC>();
        auto renderable = entity->getComponent<RenderableC>();

        if (transform && renderable && renderable->isVisible)
        {
            // Use configurable 2D projection parameters instead of hardcoded values
            float screenX = renderConfig_.getScreenCenterX() + transform->position.x * renderConfig_.getWorldToScreenScale();
            float screenY = renderConfig_.getScreenCenterY() + transform->position.z * renderConfig_.getWorldToScreenScale();
            float radius = renderConfig_.getDefaultEntityRadius();

            // Load color dynamically from MaterialManager using XML-defined material properties
            COLORREF color = GetMaterialColor(renderable->materialId);

            DrawSphere(screenX, screenY, radius, color);
        }
    }
}

void VisualizationSystem::RenderConsole()
{
    // Console rendering using configurable parameters from render_config.xml
    RECT rect;
    GetClientRect(hwnd, &rect);

    // Draw semi-transparent background using configured colors
    const auto &bgColor = renderConfig_.getConsoleBackgroundColor();
    HBRUSH bgBrush = CreateSolidBrush(RGB(bgColor.r, bgColor.g, bgColor.b));
    RECT consoleRect = {0, rect.bottom - renderConfig_.getConsoleHeight(), rect.right, rect.bottom};
    FillRect(hdc, &consoleRect, bgBrush);
    DeleteObject(bgBrush);

    // Draw border using configured color and width
    const auto &borderColor = renderConfig_.getConsoleBorderColor();
    HPEN pen = CreatePen(PS_SOLID, renderConfig_.getConsoleBorderWidth(), RGB(borderColor.r, borderColor.g, borderColor.b));
    SelectObject(hdc, pen);
    Rectangle(hdc, consoleRect.left, consoleRect.top, consoleRect.right, consoleRect.bottom);
    DeleteObject(pen);

    // Draw console text using configured colors and margins
    const auto &titleColor = renderConfig_.getConsoleTitleColor();
    const auto &textColor = renderConfig_.getConsoleTextColor();
    int marginX = renderConfig_.getConsoleMarginX();
    int marginY = renderConfig_.getConsoleMarginY();

    DrawText(marginX, rect.bottom - renderConfig_.getConsoleHeight() + marginY,
             "Developer Console", RGB(titleColor.r, titleColor.g, titleColor.b));
    DrawText(marginX, rect.bottom - renderConfig_.getConsoleHeight() + marginY * 2,
             "Press ~ to toggle", RGB(textColor.r, textColor.g, textColor.b));
}

void VisualizationSystem::RenderNoPackagesMessage()
{
    RECT rect;
    GetClientRect(hwnd, &rect);

    DrawText(rect.right / 2 - 100, rect.bottom / 2 - 50, "No Asset Packages Found", RGB(255, 0, 0));
    DrawText(rect.right / 2 - 150, rect.bottom / 2 - 20, "Generating Default Earth World...", RGB(255, 255, 0));
}

void VisualizationSystem::DrawSphere(float x, float y, float radius, COLORREF color)
{
    HPEN pen = CreatePen(PS_SOLID, 2, color);
    HBRUSH brush = CreateSolidBrush(color);
    SelectObject(hdc, pen);
    SelectObject(hdc, brush);

    Ellipse(hdc, x - radius, y - radius, x + radius, y + radius);

    DeleteObject(pen);
    DeleteObject(brush);
}

void VisualizationSystem::DrawText(float x, float y, const std::string &text, COLORREF color)
{
    SetTextColor(hdc, color);
    SetBkMode(hdc, TRANSPARENT);
    TextOutA(hdc, x, y, text.c_str(), text.length());
}

/**
 * @brief Get RGB color from material properties loaded from XML.
 *
 * Dynamically retrieves material color from MaterialManager instead of
 * using hardcoded lookup table. This allows colors to be configured via XML.
 *
 * @param materialId The material ID to look up
 * @return COLORREF color value, or default green if material not found
 */
COLORREF VisualizationSystem::GetMaterialColor(const std::string &materialId)
{
    // Try to get material from MaterialManager
    auto materialOpt = materialManager_.GetMaterial(materialId);
    if (materialOpt.has_value())
    {
        const auto &material = materialOpt.value();
        const auto &albedo = material.properties.albedo;

        // Convert from normalized float RGB (0.0-1.0) to Windows COLORREF (0-255)
        int r = static_cast<int>(albedo.x * 255.0f);
        int g = static_cast<int>(albedo.y * 255.0f);
        int b = static_cast<int>(albedo.z * 255.0f);

        // Clamp values to valid range (using Windows macros since std::min/max conflict)
        r = (r < 0) ? 0 : (r > 255) ? 255
                                    : r;
        g = (g < 0) ? 0 : (g > 255) ? 255
                                    : g;
        b = (b < 0) ? 0 : (b > 255) ? 255
                                    : b;

        return RGB(r, g, b);
    }

    // Fallback to default green if material not found
    DEBUG_LOG("Warning: Material '" << materialId << "' not found, using default green color");
    return RGB(0, 255, 0);
}




================================================================================
FILE: src\systems\VisualizationSystem_GDI_backup.h
================================================================================

#ifndef VISUALIZATION_SYSTEM_H
#define VISUALIZATION_SYSTEM_H

#include "core/ISystem.h"
#include "core/EventBus.h"
#include "core/World.h"
#include "events/InputEvents.h"
#include "events/WorldGenEvents.h"
#include "MaterialManager.h"
#include "config/RenderConfig.h"
#include <windows.h>
#include <string>
#include <vector>
#include <unordered_map>

class VisualizationSystem : public ISystem
{
public:
    VisualizationSystem(EventBus &eventBus, World &world, HWND hwnd, Material::MaterialManager &materialManager, const Render::RenderConfiguration &renderConfig);
    ~VisualizationSystem();

    void update(World &world, float deltaTime) override;

private:
    EventBus &eventBus;
    World &worldRef;
    HWND hwnd;
    HDC hdc;
    Material::MaterialManager &materialManager_;
    const Render::RenderConfiguration &renderConfig_;

    bool displayNoPackagesMessage;
    bool consoleVisible;
    float rotationAngle;

    void OnNoPackagesFound(const NoPackagesFoundEvent &event);
    void OnConsoleVisibilityChanged(const ConsoleVisibilityChangedEvent &event);

    void RenderEntities();
    void RenderConsole();
    void RenderNoPackagesMessage();
    void DrawSphere(float x, float y, float radius, COLORREF color);
    void DrawText(float x, float y, const std::string &text, COLORREF color);

    /**
     * @brief Get RGB color from material properties loaded from XML.
     *
     * @param materialId The material ID to look up
     * @return COLORREF color value, or default green if material not found
     */
    COLORREF GetMaterialColor(const std::string &materialId);
};

#endif



================================================================================
FILE: src\systems\VisualizationSystem.cpp
================================================================================

#include "VisualizationSystem.h"
#include "../core/AssetIds.h"
#include "../debug.h"
#include <iostream>
#include <string>
#include <cmath>
#include <memory>
#include <unordered_map>

// Component definitions
#include "core/IComponent.h"

struct TransformC : public IComponent
{
    struct Vector3
    {
        float x, y, z;
        Vector3(float x = 0.0f, float y = 0.0f, float z = 0.0f) : x(x), y(y), z(z) {}
    };

    struct Quaternion
    {
        float x, y, z, w;
        Quaternion(float x = 0.0f, float y = 0.0f, float z = 0.0f, float w = 1.0f) : x(x), y(y), z(z), w(w) {}
        static Quaternion Identity() { return Quaternion(0, 0, 0, 1); }
    };

    Vector3 position;
    Quaternion orientation;
    Vector3 scale;

    TransformC(Vector3 pos = Vector3(), Quaternion rot = Quaternion::Identity(), Vector3 scl = Vector3(1, 1, 1))
        : position(pos), orientation(rot), scale(scl) {}
};

struct RenderableC : public IComponent
{
    std::string meshId;
    std::string materialId;
    bool isVisible;

    RenderableC(std::string mesh = "", std::string material = "", bool visible = true)
        : meshId(mesh), materialId(material), isVisible(visible) {}
};

VisualizationSystem::VisualizationSystem(EventBus &eventBus, World &world, HWND windowHandle, Material::MaterialManager &materialManager, const Render::RenderConfiguration &renderConfig)
    : eventBus(eventBus), worldRef(world), hwnd(windowHandle), materialManager_(materialManager), renderConfig_(renderConfig),
      debugModeActive(false), displayNoPackagesMessage(false), consoleVisible(false), rotationAngle(0.0f)
{
    DEBUG_LOG("Initializing VisualizationSystem with OpenGL rendering...");

    // Initialize OpenGL context
    if (!glContext.Initialize(hwnd))
    {
        std::cerr << "Failed to initialize OpenGL context!" << std::endl;
        return;
    }

    // Initialize OpenGL renderer
    if (!glRenderer.Initialize())
    {
        std::cerr << "Failed to initialize OpenGL renderer!" << std::endl;
        return;
    }

    // Initialize camera
    camera = std::make_shared<CameraConfig>();
    camera->position = {0.0f, 5.0f, 15.0f};  // Position camera higher and further back
    camera->direction = {0.0f, 0.0f, -1.0f}; // Look forward (toward negative Z)
    camera->up = {0.0f, 1.0f, 0.0f};         // Y-up orientation
    camera->fov = 45.0f;
    camera->nearPlane = 0.1f;
    camera->farPlane = 1000.0f;

    DEBUG_LOG("Camera initialized at position (" + std::to_string(camera->position.x) + ", " +
              std::to_string(camera->position.y) + ", " + std::to_string(camera->position.z) + ")");

    // Initialize debug camera
    debugCamera = std::make_unique<DebugCamera>(eventBus);
    debugCamera->setCameraState(
        DebugCamera::Vector3(camera->position.x, camera->position.y, camera->position.z),
        DebugCamera::Vector3(camera->direction.x, camera->direction.y, camera->direction.z),
        DebugCamera::Vector3(camera->up.x, camera->up.y, camera->up.z)
    );

    DEBUG_LOG("Debug camera initialized");

    DEBUG_LOG("OpenGL-based VisualizationSystem initialized successfully");

    // Subscribe to events
    eventBus.subscribe(EventType::NoPackagesFound, [this](const IEvent &event)
                       {
        const auto& packagesEvent = static_cast<const NoPackagesFoundEvent&>(event);
        OnNoPackagesFound(packagesEvent); });

    eventBus.subscribe(EventType::ConsoleVisibilityChanged, [this](const IEvent &event)
                       {
        const auto& visibilityEvent = static_cast<const ConsoleVisibilityChangedEvent&>(event);
        OnConsoleVisibilityChanged(visibilityEvent); });

    eventBus.subscribe(EventType::DebugModeToggled, [this](const IEvent &event)
                       {
        const auto& debugEvent = static_cast<const DebugModeToggled&>(event);
        OnDebugModeToggled(debugEvent); });
}

VisualizationSystem::~VisualizationSystem()
{
    // OpenGL context cleanup is handled by OpenGLContext destructor
}

void VisualizationSystem::update(World &world, float deltaTime)
{
    // Ensure OpenGL context is current
    glContext.MakeCurrent();

    // Update debug camera if active
    if (debugCamera) {
        debugCamera->update(deltaTime);
    }

    // Get window dimensions for camera setup
    RECT rect;
    GetClientRect(hwnd, &rect);
    float aspect = static_cast<float>(rect.right - rect.left) / static_cast<float>(rect.bottom - rect.top);

    // Debug output window size every 600 frames
    static int frameCount = 0;
    if (frameCount++ % 600 == 0)
    {
        DEBUG_LOG("Window dimensions: " + std::to_string(rect.right - rect.left) + "x" +
                  std::to_string(rect.bottom - rect.top) + " (aspect: " + std::to_string(aspect) + ")");
    }

    // Setup 3D camera - use debug camera if debug mode is active, otherwise use normal camera
    if (camera)
    {
        glRenderer.SetupCamera(camera->fov, aspect, camera->nearPlane, camera->farPlane);

        // Use debug camera coordinates if debug mode is active
        if (debugModeActive && debugCamera) {
            const auto& debugState = debugCamera->getCameraState();
            
            // Calculate look-at point based on debug camera position and direction
            float lookAtX = debugState.position.x + debugState.direction.x;
            float lookAtY = debugState.position.y + debugState.direction.y;
            float lookAtZ = debugState.position.z + debugState.direction.z;

            glRenderer.SetCameraView(
                debugState.position.x, debugState.position.y, debugState.position.z,
                lookAtX, lookAtY, lookAtZ,
                debugState.up.x, debugState.up.y, debugState.up.z
            );

            // Debug output for debug camera
            if (frameCount % 300 == 0) {
                DEBUG_LOG("Debug Camera position: (" + std::to_string(debugState.position.x) + ", " +
                          std::to_string(debugState.position.y) + ", " + std::to_string(debugState.position.z) + ")");
                DEBUG_LOG("Debug Camera looking at: (" + std::to_string(lookAtX) + ", " + std::to_string(lookAtY) + ", " + std::to_string(lookAtZ) + ")");
            }
        } else {
            // Use normal camera
            // Calculate look-at point based on camera position and direction
            float lookAtX = camera->position.x + camera->direction.x;
            float lookAtY = camera->position.y + camera->direction.y;
            float lookAtZ = camera->position.z + camera->direction.z;

            glRenderer.SetCameraView(
                camera->position.x, camera->position.y, camera->position.z, // Eye position
                lookAtX, lookAtY, lookAtZ,                                  // Look at point
                camera->up.x, camera->up.y, camera->up.z                    // Up vector
            );

            // Debug output for normal camera
            if (frameCount % 300 == 0) {
                DEBUG_LOG("Camera position: (" + std::to_string(camera->position.x) + ", " +
                          std::to_string(camera->position.y) + ", " + std::to_string(camera->position.z) + ")");
                DEBUG_LOG("Looking at: (" + std::to_string(lookAtX) + ", " + std::to_string(lookAtY) + ", " + std::to_string(lookAtZ) + ")");
            }
        }
    }
    else
    {
        // Fallback camera setup if camera object isn't initialized
        glRenderer.SetupCamera(45.0f, aspect, 0.1f, 100.0f);
        glRenderer.SetCameraView(0.0f, 5.0f, 15.0f, // Eye position
                                 0.0f, 0.0f, 0.0f,  // Look at center
                                 0.0f, 1.0f, 0.0f); // Up vector
    }

    // Begin frame
    glRenderer.BeginFrame();

    // Render entities
    RenderEntities();

    // Render console if visible (simplified for OpenGL transition)
    if (consoleVisible)
    {
        RenderConsole();
    }

    // Render debug mode indicator if debug mode is active
    if (debugModeActive)
    {
        RenderDebugModeIndicator();
    }

    // Render no packages message if needed (simplified for OpenGL transition)
    if (displayNoPackagesMessage)
    {
        RenderNoPackagesMessage();
    }

    // End frame and swap buffers
    glRenderer.EndFrame();
    glContext.SwapBuffers();

    // Update rotation for animation
    rotationAngle += deltaTime * 0.1f;
}

void VisualizationSystem::OnNoPackagesFound(const NoPackagesFoundEvent &event)
{
    displayNoPackagesMessage = true;
}

void VisualizationSystem::OnConsoleVisibilityChanged(const ConsoleVisibilityChangedEvent &event)
{
    consoleVisible = event.isVisible;
}

void VisualizationSystem::OnDebugModeToggled(const DebugModeToggled &event)
{
    debugModeActive = event.isActive;
    
    if (debugModeActive) {
        // Sync debug camera with current camera position when entering debug mode
        if (camera && debugCamera) {
            debugCamera->setCameraState(
                DebugCamera::Vector3(camera->position.x, camera->position.y, camera->position.z),
                DebugCamera::Vector3(camera->direction.x, camera->direction.y, camera->direction.z),
                DebugCamera::Vector3(camera->up.x, camera->up.y, camera->up.z)
            );
        }
        DEBUG_LOG("Debug mode activated - free camera enabled");
    } else {
        DEBUG_LOG("Debug mode deactivated - normal camera resumed");
    }
}

void VisualizationSystem::RenderEntities()
{
    // Debug information - print entity count
    static int frameCount = 0;
    if (frameCount++ % 60 == 0)
    { // Print more frequently for debugging
        DEBUG_LOG("VisualizationSystem: Rendering " + std::to_string(worldRef.getEntities().size()) + " entities");

        // Count entities with required rendering components
        int entitiesWithRenderComponents = 0;
        for (const auto &entity : worldRef.getEntities())
        {
            if (entity->getComponent<TransformC>() && entity->getComponent<RenderableC>())
            {
                entitiesWithRenderComponents++;
            }
        }
        DEBUG_LOG("Entities with rendering components: " + std::to_string(entitiesWithRenderComponents));

        // Output camera position for debugging
        if (camera)
        {
            DEBUG_LOG("Camera position: (" + std::to_string(camera->position.x) + ", " +
                      std::to_string(camera->position.y) + ", " + std::to_string(camera->position.z) + ")");
            DEBUG_LOG("Camera direction: (" + std::to_string(camera->direction.x) + ", " +
                      std::to_string(camera->direction.y) + ", " + std::to_string(camera->direction.z) + ")");
        }
        else
        {
            DEBUG_LOG("WARNING: Camera not initialized!");
        }
    }

    // If no entities to render, show a warning and draw debug shapes
    if (worldRef.getEntities().empty())
    {
        if (frameCount % 60 == 0)
        { // Print more frequently for debugging
            DEBUG_LOG("WARNING: No entities to render in the scene!");
        }
        // Draw a simple debug sphere in the center just to show something
        DrawSphere(0.0f, 0.0f, 0.0f, 2.0f, 1.0f, 0.0f, 0.0f); // Red sphere
        DrawSphere(5.0f, 0.0f, 0.0f, 1.0f, 0.0f, 1.0f, 0.0f); // Green sphere at X=5
        DrawSphere(0.0f, 5.0f, 0.0f, 1.0f, 0.0f, 0.0f, 1.0f); // Blue sphere at Y=5
        return;
    }

    // Render all entities using OpenGL 3D rendering
    for (const auto &entity : worldRef.getEntities())
    {
        auto transform = entity->getComponent<TransformC>();
        auto renderable = entity->getComponent<RenderableC>();

        // Debug output for missing components
        if (!transform && frameCount % 300 == 0)
        {
            DEBUG_LOG("Entity " + std::to_string(entity->getId()) + " missing TransformC component");
        }
        if (!renderable && frameCount % 300 == 0)
        {
            DEBUG_LOG("Entity " + std::to_string(entity->getId()) + " missing RenderableC component");
        }
        if (renderable && !renderable->isVisible && frameCount % 300 == 0)
        {
            DEBUG_LOG("Entity " + std::to_string(entity->getId()) + " has invisible RenderableC");
        }

        if (transform && renderable && renderable->isVisible)
        {
            // Use 3D world coordinates directly
            float x = transform->position.x;
            float y = transform->position.y;
            float z = transform->position.z;
            float radius = 1.0f; // Default radius

            // Load color dynamically from MaterialManager using XML-defined material properties
            Color color = GetMaterialColor(renderable->materialId);

            // Debug output for rendered entities (occasional)
            if (frameCount % 600 == 0)
            {
                DEBUG_LOG("Rendering entity: " + entity->getName() +
                          " at (" + std::to_string(x) + ", " + std::to_string(y) + ", " + std::to_string(z) + ")" +
                          " with material: " + renderable->materialId);
            }

            // Draw 3D sphere at world position
            DrawSphere(x, y, z, radius, color.r, color.g, color.b);
        }
        else if (frameCount % 300 == 0)
        {
            // Debug for entities missing components
            std::string missing = "Entity " + entity->getName() + " is missing ";
            if (!transform)
                missing += "transform ";
            if (!renderable)
                missing += "renderable ";
            if (renderable && !renderable->isVisible)
                missing += "(not visible) ";
            DEBUG_LOG(missing);
        }
    }
}

void VisualizationSystem::RenderConsole()
{
    // Console rendering - simplified for OpenGL transition
    // For now, just indicate console is visible
    DEBUG_LOG("Console visible (OpenGL text rendering to be implemented)");
}

void VisualizationSystem::RenderDebugModeIndicator()
{
    // Render debug mode indicator in upper right corner
    // Since text rendering is not fully implemented, we'll draw a simple colored rectangle
    
    // Get window dimensions
    RECT rect;
    GetClientRect(hwnd, &rect);
    float screenWidth = static_cast<float>(rect.right - rect.left);
    float screenHeight = static_cast<float>(rect.bottom - rect.top);
    
    // Switch to 2D rendering mode
    glMatrixMode(GL_PROJECTION);
    glPushMatrix();
    glLoadIdentity();
    glOrtho(0.0, screenWidth, screenHeight, 0.0, -1.0, 1.0);
    
    glMatrixMode(GL_MODELVIEW);
    glPushMatrix();
    glLoadIdentity();
    
    // Disable depth testing for UI overlay
    glDisable(GL_DEPTH_TEST);
    glEnable(GL_BLEND);
    glBlendFunc(GL_SRC_ALPHA, GL_ONE_MINUS_SRC_ALPHA);
    
    // Draw a red rectangle in the upper right corner as debug indicator
    float indicatorWidth = 120.0f;
    float indicatorHeight = 30.0f;
    float margin = 10.0f;
    
    float x = screenWidth - indicatorWidth - margin;
    float y = margin;
    
    glColor4f(1.0f, 0.0f, 0.0f, 0.7f); // Semi-transparent red
    glBegin(GL_QUADS);
        glVertex2f(x, y);
        glVertex2f(x + indicatorWidth, y);
        glVertex2f(x + indicatorWidth, y + indicatorHeight);
        glVertex2f(x, y + indicatorHeight);
    glEnd();
    
    // Draw border
    glColor4f(1.0f, 1.0f, 1.0f, 1.0f); // White border
    glLineWidth(2.0f);
    glBegin(GL_LINE_LOOP);
        glVertex2f(x, y);
        glVertex2f(x + indicatorWidth, y);
        glVertex2f(x + indicatorWidth, y + indicatorHeight);
        glVertex2f(x, y + indicatorHeight);
    glEnd();
    
    // Restore 3D rendering mode
    glDisable(GL_BLEND);
    glEnable(GL_DEPTH_TEST);
    
    glMatrixMode(GL_PROJECTION);
    glPopMatrix();
    glMatrixMode(GL_MODELVIEW);
    glPopMatrix();

    // Render the debug cube at origin (0, 0, 0) in 3D world space
    DrawCube(0.0f, 0.0f, 0.0f, 2.0f, 1.0f, 1.0f, 1.0f); // White cube with 2 unit size
    
    // Log debug info occasionally
    static int frameCount = 0;
    if (frameCount++ % 300 == 0) // Log every 5 seconds at 60fps
    {
        DEBUG_LOG("DEBUG_MODE indicator rendered in upper right corner at (" << x << ", " << y << ")");
        DEBUG_LOG("Debug white cube rendered at origin (0, 0, 0)");
    }
}

void VisualizationSystem::RenderNoPackagesMessage()
{
    // No packages message - simplified for OpenGL transition
    DEBUG_LOG("No Asset Packages Found - Generating Default Earth World...");
}

void VisualizationSystem::DrawSphere(float x, float y, float z, float radius, float r, float g, float b)
{
    // Debug output entity positions occasionally to help diagnose camera/entity positioning issues
    static int debugCounter = 0;
    if (debugCounter++ % 500 == 0)
    {
        // Only show a few entities to avoid spamming the console
        if (debugCounter < 10000)
        {
            DEBUG_LOG("Drawing entity at position (" << x << ", " << y << ", " << z
                                                     << ") with radius " << radius);

            // If we have a camera, calculate distance from camera
            if (camera)
            {
                float dx = camera->position.x - x;
                float dy = camera->position.y - y;
                float dz = camera->position.z - z;
                float distance = std::sqrt(dx * dx + dy * dy + dz * dz);
                DEBUG_LOG("  Distance from camera: " << distance);
            }
        }
    }

    // Draw the sphere using the OpenGL renderer
    glRenderer.DrawSphere(x, y, z, radius, r, g, b);
}

void VisualizationSystem::DrawCube(float x, float y, float z, float size, float r, float g, float b)
{
    // Debug output cube positions occasionally
    static int debugCounter = 0;
    if (debugCounter++ % 300 == 0)
    {
        DEBUG_LOG("Drawing debug cube at position (" << x << ", " << y << ", " << z
                                                     << ") with size " << size);
    }

    // Draw the cube using OpenGL immediate mode
    float halfSize = size * 0.5f;
    
    glColor3f(r, g, b);
    glBegin(GL_QUADS);
    
    // Front face
    glVertex3f(x - halfSize, y - halfSize, z + halfSize);
    glVertex3f(x + halfSize, y - halfSize, z + halfSize);
    glVertex3f(x + halfSize, y + halfSize, z + halfSize);
    glVertex3f(x - halfSize, y + halfSize, z + halfSize);
    
    // Back face
    glVertex3f(x - halfSize, y - halfSize, z - halfSize);
    glVertex3f(x - halfSize, y + halfSize, z - halfSize);
    glVertex3f(x + halfSize, y + halfSize, z - halfSize);
    glVertex3f(x + halfSize, y - halfSize, z - halfSize);
    
    // Top face
    glVertex3f(x - halfSize, y + halfSize, z - halfSize);
    glVertex3f(x - halfSize, y + halfSize, z + halfSize);
    glVertex3f(x + halfSize, y + halfSize, z + halfSize);
    glVertex3f(x + halfSize, y + halfSize, z - halfSize);
    
    // Bottom face
    glVertex3f(x - halfSize, y - halfSize, z - halfSize);
    glVertex3f(x + halfSize, y - halfSize, z - halfSize);
    glVertex3f(x + halfSize, y - halfSize, z + halfSize);
    glVertex3f(x - halfSize, y - halfSize, z + halfSize);
    
    // Right face
    glVertex3f(x + halfSize, y - halfSize, z - halfSize);
    glVertex3f(x + halfSize, y + halfSize, z - halfSize);
    glVertex3f(x + halfSize, y + halfSize, z + halfSize);
    glVertex3f(x + halfSize, y - halfSize, z + halfSize);
    
    // Left face
    glVertex3f(x - halfSize, y - halfSize, z - halfSize);
    glVertex3f(x - halfSize, y - halfSize, z + halfSize);
    glVertex3f(x - halfSize, y + halfSize, z + halfSize);
    glVertex3f(x - halfSize, y + halfSize, z - halfSize);
    
    glEnd();
}

/**
 * @brief Get RGB color from material properties loaded from XML.
 *
 * Dynamically retrieves material color from MaterialManager instead of
 * using hardcoded lookup table. This allows colors to be configured via XML.
 *
 * @param materialId The material ID to look up
 * @return Color struct with r, g, b components in range 0.0-1.0
 */
VisualizationSystem::Color VisualizationSystem::GetMaterialColor(const std::string &materialId)
{
    // Try to get material from MaterialManager
    auto materialOpt = materialManager_.GetMaterial(materialId);
    if (materialOpt.has_value())
    {
        const auto &material = materialOpt.value();
        const auto &albedo = material.properties.albedo;

        // Return normalized float RGB (0.0-1.0) directly for OpenGL
        return {albedo.x, albedo.y, albedo.z};
    }

    // Fallback to default green if material not found
    DEBUG_LOG("Warning: Material '" << materialId << "' not found, using default green color");
    return {0.0f, 1.0f, 0.0f};
}


================================================================================
FILE: src\systems\VisualizationSystem.h
================================================================================

#ifndef VISUALIZATION_SYSTEM_H
#define VISUALIZATION_SYSTEM_H

#include "core/ISystem.h"
#include "core/EventBus.h"
#include "core/World.h"
#include "events/InputEvents.h"
#include "events/WorldGenEvents.h"
#include "MaterialManager.h"
#include "config/RenderConfig.h"
#include "platform/OpenGLContext.h"
#include "platform/OpenGLRenderer.h"
#include "DebugCamera.h"
#include <windows.h>
#include <string>
#include <vector>
#include <unordered_map>

class VisualizationSystem : public ISystem
{
public:
    VisualizationSystem(EventBus &eventBus, World &world, HWND hwnd, Material::MaterialManager &materialManager, const Render::RenderConfiguration &renderConfig);
    ~VisualizationSystem();

    void update(World &world, float deltaTime) override;

private:
    EventBus &eventBus;
    World &worldRef;
    HWND hwnd;
    Material::MaterialManager &materialManager_;
    const Render::RenderConfiguration &renderConfig_;

    // OpenGL components
    OpenGLContext glContext;
    OpenGLRenderer glRenderer;

    // Camera configuration
    struct CameraConfig
    {
        struct Vector3
        {
            float x, y, z;
            Vector3(float x = 0.0f, float y = 0.0f, float z = 0.0f) : x(x), y(y), z(z) {}
        };

        Vector3 position;  // Camera position
        Vector3 direction; // Look direction
        Vector3 up;        // Up vector
        float fov;         // Field of view in degrees
        float nearPlane;   // Near clipping plane
        float farPlane;    // Far clipping plane
    };

    std::shared_ptr<CameraConfig> camera;
    std::unique_ptr<DebugCamera> debugCamera;
    bool debugModeActive;

    bool displayNoPackagesMessage;
    bool consoleVisible;
    float rotationAngle;

    void OnNoPackagesFound(const NoPackagesFoundEvent &event);
    void OnConsoleVisibilityChanged(const ConsoleVisibilityChangedEvent &event);
    void OnDebugModeToggled(const DebugModeToggled &event);

    void RenderEntities();
    void RenderConsole();
    void RenderDebugModeIndicator();
    void RenderNoPackagesMessage();
    void DrawSphere(float x, float y, float z, float radius, float r, float g, float b);
    void DrawCube(float x, float y, float z, float size, float r, float g, float b);

    /**
     * @brief Get RGB color from material properties loaded from XML.
     *
     * @param materialId The material ID to look up
     * @return Color components as vec3 (r, g, b) in range 0.0-1.0
     */
    struct Color
    {
        float r, g, b;
    };
    Color GetMaterialColor(const std::string &materialId);
};

#endif


================================================================================
FILE: src\systems\VoxelCloudSystem.h
================================================================================

#pragma once

#include "../core/System.h"
#include "../components/VoxelCloudComponent.h"
#include "../math/MathUtils.h"
#include <vector>
#include <memory>
#include <map>
#include <array>

namespace ECS
{

    // ============================================================================
    // Voxel Cloud Data Structures
    // ============================================================================

    struct VoxelData
    {
        float density = 0.0f; // 0.0 = empty, 1.0 = solid
        Math::float4 color = {1.0f, 1.0f, 1.0f, 1.0f};
        Math::float3 normal = {0.0f, 1.0f, 0.0f};
        float temperature = 0.0f; // For heat distortion effects
        float humidity = 0.0f;    // For cloud formation
        uint8_t materialId = 0;   // Different cloud types

        bool isEmpty() const { return density <= 0.001f; }
        bool isSolid() const { return density >= 0.999f; }
    };

    struct VoxelChunk
    {
        static constexpr uint32_t CHUNK_SIZE = 16; // 16x16x16 voxels per chunk
        static constexpr uint32_t VOXEL_COUNT = CHUNK_SIZE * CHUNK_SIZE * CHUNK_SIZE;

        std::array<VoxelData, VOXEL_COUNT> voxels;
        Math::float3 worldPosition;
        bool needsMeshUpdate = true;
        bool isEmpty = true;

        // Mesh data for rendering
        std::vector<Math::float3> vertices;
        std::vector<Math::float3> normals;
        std::vector<Math::float2> uvs;
        std::vector<Math::float4> colors;
        std::vector<uint32_t> indices;

        // GPU buffer handles
        uint32_t vertexBufferId = 0;
        uint32_t indexBufferId = 0;
        uint32_t instanceBufferId = 0;

        // Optimization data
        uint32_t activeVoxelCount = 0;
        float boundingRadius = 0.0f;
        float lastUpdateTime = 0.0f;

        VoxelData &getVoxel(uint32_t x, uint32_t y, uint32_t z);
        const VoxelData &getVoxel(uint32_t x, uint32_t y, uint32_t z) const;
        void setVoxel(uint32_t x, uint32_t y, uint32_t z, const VoxelData &voxel);

        void clear();
        void updateBounds();
        size_t getVoxelIndex(uint32_t x, uint32_t y, uint32_t z) const;
    };

    struct CloudLayer
    {
        float altitude = 0.0f;
        float thickness = 100.0f;
        float coverage = 0.5f; // 0.0 = no clouds, 1.0 = full coverage
        float density = 0.8f;
        Math::float4 baseColor = {1.0f, 1.0f, 1.0f, 1.0f};
        Math::float4 shadowColor = {0.3f, 0.3f, 0.5f, 1.0f};

        // Animation properties
        Math::float2 windSpeed = {2.0f, 0.0f};
        float evolutionSpeed = 0.1f; // How fast clouds change shape
        float turbulence = 0.3f;

        // Noise parameters for generation
        uint32_t seed = 12345;
        float noiseScale = 0.01f;
        uint32_t noiseOctaves = 4;
        float noisePersistence = 0.5f;
        float noiseLacunarity = 2.0f;
    };

    // ============================================================================
    // Voxel Cloud System Configuration
    // ============================================================================

    struct VoxelCloudSystemConfig
    {
        // World parameters
        Math::float3 worldSize = {1000.0f, 200.0f, 1000.0f};
        float voxelSize = 2.0f;    // Size of each voxel in world units
        uint32_t maxChunks = 1000; // Maximum number of active chunks

        // Rendering settings
        uint32_t renderDistance = 500; // Distance in voxels
        uint32_t lodLevels = 4;        // Number of LOD levels
        bool enableVolumetricLighting = true;
        bool enableShadows = true;
        bool enableScattering = true;

        // Performance settings
        uint32_t maxChunkUpdatesPerFrame = 5;
        uint32_t maxMeshGenerationsPerFrame = 2;
        float cullingDistance = 1000.0f;
        bool enableFrustumCulling = true;
        bool enableOcclusionCulling = false;

        // Quality settings
        bool enableSmoothNormals = true;
        bool enableAmbientOcclusion = false;
        float ambientOcclusionRadius = 3.0f;
        uint32_t ambientOcclusionSamples = 16;

        // Animation settings
        bool enableCloudEvolution = true;
        float globalWindSpeed = 1.0f;
        Math::float3 globalWindDirection = {1.0f, 0.0f, 0.0f};
        float turbulenceIntensity = 0.5f;

        // Memory management
        bool useChunkPooling = true;
        uint32_t chunkPoolSize = 200;
        bool enableGarbageCollection = true;
        float garbageCollectionInterval = 5.0f; // seconds
    };

    // ============================================================================
    // Main Voxel Cloud System
    // ============================================================================

    class VoxelCloudSystem : public System
    {
    public:
        explicit VoxelCloudSystem(const VoxelCloudSystemConfig &config = VoxelCloudSystemConfig{});
        ~VoxelCloudSystem() override;

        // System interface
        void initialize() override;
        void update(float deltaTime) override;
        void render() override;
        void shutdown() override;

        // Configuration management
        void setConfig(const VoxelCloudSystemConfig &config);
        const VoxelCloudSystemConfig &getConfig() const;

        // Cloud management
        void createVoxelCloud(EntityId entityId, const VoxelCloudComponent &component);
        void removeVoxelCloud(EntityId entityId);
        void updateVoxelCloudComponent(EntityId entityId, const VoxelCloudComponent &component);

        // World interaction
        void setVoxel(const Math::float3 &worldPos, const VoxelData &voxel);
        VoxelData getVoxel(const Math::float3 &worldPos) const;
        void clearVoxels(const Math::float3 &center, float radius);
        void addCloudMass(const Math::float3 &center, float radius, float density);

        // Environmental controls
        void setGlobalWind(const Math::float3 &windDirection, float windSpeed);
        void addCloudLayer(const CloudLayer &layer);
        void removeCloudLayer(uint32_t layerIndex);
        void updateCloudLayer(uint32_t layerIndex, const CloudLayer &layer);

        // Lighting and atmosphere
        void setSunDirection(const Math::float3 &direction);
        void setSunColor(const Math::float4 &color);
        void setAmbientColor(const Math::float4 &color);
        void setScatteringCoefficients(float rayleigh, float mie);

        // Performance monitoring
        uint32_t getActiveChunkCount() const;
        uint32_t getTotalVoxelCount() const;
        float getAverageUpdateTime() const;

        // Debug and visualization
        void setDebugVisualization(bool enabled);
        bool isDebugVisualizationEnabled() const;
        void renderDebugInfo();

    protected:
        // Component handling
        void onComponentAdded(EntityId entityId, ComponentType type) override;
        void onComponentRemoved(EntityId entityId, ComponentType type) override;
        void onComponentChanged(EntityId entityId, ComponentType type) override;

    private:
        // ============================================================================
        // Internal Cloud Management
        // ============================================================================

        struct CloudData
        {
            VoxelCloudComponent component;
            std::map<Math::int3, std::unique_ptr<VoxelChunk>, Math::Int3Comparator> chunks;

            // Generation parameters
            Math::float3 center;
            Math::float3 size;
            float totalDensity = 0.0f;

            // Animation state
            float animationTime = 0.0f;
            Math::float3 windOffset = {0.0f, 0.0f, 0.0f};

            // Performance tracking
            uint32_t activeChunkCount = 0;
            float lastFullUpdate = 0.0f;

            CloudData() = default;
            CloudData(const VoxelCloudComponent &comp) : component(comp) {}
        };

        VoxelCloudSystemConfig config_;
        std::map<EntityId, std::unique_ptr<CloudData>> activeClouds_;
        std::vector<CloudLayer> cloudLayers_;

        // Environmental state
        Math::float3 sunDirection_ = {0.707f, 0.707f, 0.0f};
        Math::float4 sunColor_ = {1.0f, 0.9f, 0.7f, 1.0f};
        Math::float4 ambientColor_ = {0.2f, 0.3f, 0.5f, 1.0f};
        float rayleighScattering_ = 0.0025f;
        float mieScattering_ = 0.004f;

        Math::float3 globalWindDirection_ = {1.0f, 0.0f, 0.0f};
        float globalWindSpeed_ = 1.0f;

        // Performance tracking
        mutable float averageUpdateTime_ = 0.0f;
        mutable uint32_t updateSampleCount_ = 0;
        float lastGarbageCollection_ = 0.0f;

        // Debug visualization
        bool debugVisualization_ = false;

        // Chunk pooling for performance
        std::vector<std::unique_ptr<VoxelChunk>> chunkPool_;
        std::vector<VoxelChunk *> freeChunks_;

        // ============================================================================
        // Core Update Methods
        // ============================================================================

        void updateCloudGeneration(CloudData &cloud, float deltaTime);
        void updateCloudAnimation(CloudData &cloud, float deltaTime);
        void updateChunkMeshes(CloudData &cloud);
        void updateVisibility(CloudData &cloud);
        void performGarbageCollection();

        // ============================================================================
        // Chunk Management
        // ============================================================================

        Math::int3 worldToChunkCoord(const Math::float3 &worldPos) const;
        Math::float3 chunkToWorldPos(const Math::int3 &chunkCoord) const;
        Math::int3 voxelToLocalCoord(const Math::float3 &worldPos) const;

        VoxelChunk *getOrCreateChunk(CloudData &cloud, const Math::int3 &chunkCoord);
        void removeChunk(CloudData &cloud, const Math::int3 &chunkCoord);
        bool isChunkVisible(const VoxelChunk &chunk) const;
        void cullDistantChunks(CloudData &cloud);

        // ============================================================================
        // Voxel Generation and Manipulation
        // ============================================================================

        void generateCloudVoxels(CloudData &cloud);
        float calculateCloudDensity(const Math::float3 &worldPos, const CloudData &cloud, float time) const;
        Math::float4 calculateCloudColor(const Math::float3 &worldPos, float density, const CloudData &cloud) const;

        void applyCloudLayers(const Math::float3 &worldPos, VoxelData &voxel, float time) const;
        float sampleLayerDensity(const CloudLayer &layer, const Math::float3 &worldPos, float time) const;

        // Noise functions for cloud generation
        float fractalNoise(const Math::float3 &pos, uint32_t seed, uint32_t octaves,
                           float persistence, float lacunarity, float scale) const;
        float billowNoise(const Math::float3 &pos, uint32_t seed, float scale) const;
        float ridgedNoise(const Math::float3 &pos, uint32_t seed, float scale) const;

        // ============================================================================
        // Mesh Generation
        // ============================================================================

        void generateChunkMesh(VoxelChunk &chunk);
        void generateMarchingCubesMesh(VoxelChunk &chunk);
        void generateInstancedMesh(VoxelChunk &chunk);

        // Marching cubes implementation
        void marchCube(const VoxelChunk &chunk, uint32_t x, uint32_t y, uint32_t z,
                       std::vector<Math::float3> &vertices, std::vector<uint32_t> &indices);
        Math::float3 interpolateVertex(const Math::float3 &p1, const Math::float3 &p2,
                                       float density1, float density2, float isoLevel = 0.5f);

        // Mesh optimization
        void smoothMeshNormals(VoxelChunk &chunk);
        void calculateAmbientOcclusion(VoxelChunk &chunk);
        void optimizeMesh(VoxelChunk &chunk);

        // ============================================================================
        // Rendering Support
        // ============================================================================

        void renderCloud(const CloudData &cloud);
        void renderChunk(const VoxelChunk &chunk, const CloudData &cloud);
        void setupCloudMaterial(const VoxelCloudComponent &component);
        void setupVolumetricLighting();
        void setupAtmosphericScattering();

        // Volumetric rendering
        void renderVolumetricClouds(const CloudData &cloud);
        void renderCloudShadows(const CloudData &cloud);
        void applyAtmosphericPerspective(const VoxelChunk &chunk);

        // ============================================================================
        // Utility Methods
        // ============================================================================

        Math::float3 getEntityPosition(EntityId entityId) const;
        Math::float3 getCameraPosition() const;
        float calculateLODLevel(const Math::float3 &position) const;
        bool isInFrustum(const VoxelChunk &chunk) const;

        // Lighting calculations
        float calculateShadowFactor(const Math::float3 &worldPos, const CloudData &cloud) const;
        Math::float4 calculateVolumetricLighting(const Math::float3 &worldPos, const Math::float3 &viewDir) const;
        float calculateScattering(float cosTheta, float g) const; // Henyey-Greenstein phase function

        // Object pooling
        VoxelChunk *acquireChunk();
        void releaseChunk(VoxelChunk *chunk);
        void expandChunkPool();

        // Performance optimization
        bool shouldUpdateChunk(const VoxelChunk &chunk, float deltaTime) const;
        void updatePerformanceCounters(float deltaTime);

        // ============================================================================
        // Physics and Simulation
        // ============================================================================

        void simulateCloudPhysics(CloudData &cloud, float deltaTime);
        void applyWindForces(VoxelChunk &chunk, const Math::float3 &wind, float deltaTime);
        void simulateEvaporation(VoxelChunk &chunk, float deltaTime);
        void simulateCondensation(VoxelChunk &chunk, float deltaTime);

        // ============================================================================
        // Debug and Profiling
        // ============================================================================

        void renderCloudDebugInfo(const CloudData &cloud, EntityId entityId);
        void renderChunkBounds(const VoxelChunk &chunk);
        void logCloudStatistics() const;
    };

    // ============================================================================
    // Inline Implementation for Performance-Critical Methods
    // ============================================================================

    inline VoxelData &VoxelChunk::getVoxel(uint32_t x, uint32_t y, uint32_t z)
    {
        return voxels[getVoxelIndex(x, y, z)];
    }

    inline const VoxelData &VoxelChunk::getVoxel(uint32_t x, uint32_t y, uint32_t z) const
    {
        return voxels[getVoxelIndex(x, y, z)];
    }

    inline void VoxelChunk::setVoxel(uint32_t x, uint32_t y, uint32_t z, const VoxelData &voxel)
    {
        voxels[getVoxelIndex(x, y, z)] = voxel;
        needsMeshUpdate = true;
    }

    inline size_t VoxelChunk::getVoxelIndex(uint32_t x, uint32_t y, uint32_t z) const
    {
        return x + y * CHUNK_SIZE + z * CHUNK_SIZE * CHUNK_SIZE;
    }

    inline uint32_t VoxelCloudSystem::getActiveChunkCount() const
    {
        uint32_t total = 0;
        for (const auto &[entityId, cloud] : activeClouds_)
        {
            total += cloud->activeChunkCount;
        }
        return total;
    }

    inline uint32_t VoxelCloudSystem::getTotalVoxelCount() const
    {
        return getActiveChunkCount() * VoxelChunk::VOXEL_COUNT;
    }

    inline float VoxelCloudSystem::getAverageUpdateTime() const
    {
        return averageUpdateTime_;
    }

    inline bool VoxelCloudSystem::isDebugVisualizationEnabled() const
    {
        return debugVisualization_;
    }

    inline void VoxelCloudSystem::setDebugVisualization(bool enabled)
    {
        debugVisualization_ = enabled;
    }

    inline const VoxelCloudSystemConfig &VoxelCloudSystem::getConfig() const
    {
        return config_;
    }

    inline Math::int3 VoxelCloudSystem::worldToChunkCoord(const Math::float3 &worldPos) const
    {
        float chunkWorldSize = VoxelChunk::CHUNK_SIZE * config_.voxelSize;
        return {
            static_cast<int32_t>(std::floor(worldPos.x / chunkWorldSize)),
            static_cast<int32_t>(std::floor(worldPos.y / chunkWorldSize)),
            static_cast<int32_t>(std::floor(worldPos.z / chunkWorldSize))};
    }

    inline Math::float3 VoxelCloudSystem::chunkToWorldPos(const Math::int3 &chunkCoord) const
    {
        float chunkWorldSize = VoxelChunk::CHUNK_SIZE * config_.voxelSize;
        return {
            chunkCoord.x * chunkWorldSize,
            chunkCoord.y * chunkWorldSize,
            chunkCoord.z * chunkWorldSize};
    }

} // namespace ECS



================================================================================
FILE: src\systems\WorldGenSystem.cpp
================================================================================

#include "factory/EntityFactory.h"
#include "WorldGenSystem.h"
#include "MaterialManager.h"
#include "core/Entity.h"
#include "../math/MathUtils.h"
#include <iostream>
#include <cmath>
#include <memory>
#include <fstream>
#include "../debug.h"

// Component definitions (using Math:: types)
#include "../core/IComponent.h"

struct TransformC : public IComponent
{
    Math::float3 position;
    Math::float4 orientation; // Quaternion (x, y, z, w)
    Math::float3 scale;

    TransformC(Math::float3 pos = {0.0f, 0.0f, 0.0f},
               Math::float4 rot = {0.0f, 0.0f, 0.0f, 1.0f},
               Math::float3 scl = {1.0f, 1.0f, 1.0f})
        : position(pos), orientation(rot), scale(scl) {}
};

struct RenderableC : public IComponent
{
    std::string meshId;
    std::string materialId;
    bool isVisible;

    RenderableC(std::string mesh = "", std::string material = "", bool visible = true)
        : meshId(mesh), materialId(material), isVisible(visible) {}
};

WorldGenSystem::WorldGenSystem(EventBus &eventBus, World &world, AssetRegistry &assetRegistry, Material::MaterialManager &materialManager)
    : eventBus(eventBus), worldRef(world), assetRegistry_(assetRegistry), materialManager_(materialManager), sceneLoaded(false)
{
    // Initialize generic backend systems
    meshGenerator_ = std::make_unique<VoxelMeshGenerator>();
    textureGenerator_ = std::make_unique<ProceduralTexture::ProceduralTextureGenerator>();
    sceneParser_ = std::make_unique<SceneConfig::SceneConfigParser>();

    // Initialize EntityFactory
    entityFactory_ = std::make_unique<EntityFactory::EntityFactory>(eventBus, materialManager);
    entityFactory_->loadConfiguration("configs/entity_factory_config.json");

    // Connect systems together
    materialManager_.SetTextureGenerator(textureGenerator_.get());

    // Subscribe to no packages found event
    eventBus.subscribe(EventType::NoPackagesFound, [this](const IEvent &event)
                       {
        const auto& packagesEvent = static_cast<const NoPackagesFoundEvent&>(event);
        OnNoPackagesFound(packagesEvent); });

    // Subscribe to default world generated event (when we have XML configuration)
    eventBus.subscribe(EventType::DefaultWorldGenerated, [this](const IEvent &event)
                       {
        const auto& worldEvent = static_cast<const DefaultWorldGeneratedEvent&>(event);
        OnDefaultWorldRequested(worldEvent); });
}

WorldGenSystem::~WorldGenSystem() = default;

void WorldGenSystem::update(World &world, float deltaTime)
{
    // World generation is event-driven, no continuous updates needed
}

bool WorldGenSystem::LoadScene(const std::string &sceneType)
{
    if (sceneLoaded)
    {
        if (Debug())
        {
            DEBUG_LOG("Scene already loaded, skipping LoadScene.");
        }
        return true;
    }

    if (Debug())
    {
        DEBUG_LOG("Loading scene of type: " << sceneType);
    }

    // Try to load XML scene configuration first
    auto parseResult = sceneParser_->loadXmlScene(sceneType);

    if (parseResult.success && parseResult.scene)
    {
        if (Debug())
        {
            DEBUG_LOG("Successfully loaded XML scene: " << parseResult.scene->name);
        }
        LoadSceneEntities(*parseResult.scene);
        sceneLoaded = true;
        eventBus.publish(SceneLoadedEvent{parseResult.scene->name});
        eventBus.publish(DefaultWorldGeneratedEvent{});
        return true;
    }

    if (Debug())
    {
        DEBUG_LOG("XML scene loading failed: " << parseResult.errorMessage);
        DEBUG_LOG("Falling back to hardcoded scene generation...");
    }

    // Fallback to hardcoded generation
    if (sceneType == "loading_indicator")
    {
        if (Debug())
        {
            DEBUG_LOG("Creating loading indicator scene with central globe and orbiting objects...");
        }
        GenerateLoadingIndicatorWorld();
        sceneLoaded = true;
        eventBus.publish(SceneLoadedEvent{"Loading Indicator"});
        return true;
    }
    else
    {
        if (Debug())
        {
            DEBUG_LOG("Unknown scene type, falling back to default generation...");
        }
        GenerateDefaultSphereWorld();
        sceneLoaded = true;
        eventBus.publish(SceneLoadedEvent{"Default World"});
        return true;
    }

    // Should never reach here, but just in case
    return false;
}

void WorldGenSystem::GenerateLoadingIndicatorWorld()
{
    if (sceneLoaded)
        return;

    if (Debug())
    {
        DEBUG_LOG("Generating simplified loading indicator world...");
    }

    static unsigned int nextEntityId = 1;

    // Create central globe entity using EntityFactory
    auto globeEntity = entityFactory_->createFromTemplate("earth_sphere", "LoadingGlobe", nextEntityId++);
    if (globeEntity)
    {
        worldRef.addEntity(std::move(globeEntity));
        if (Debug())
        {
            DEBUG_LOG("Created LoadingGlobe entity");
        }
    }

    // Create first orbiting aircraft
    auto aircraft1Entity = entityFactory_->createFromTemplate("basic_drone", "OrbitingAircraft1", nextEntityId++);
    if (aircraft1Entity)
    {
        worldRef.addEntity(std::move(aircraft1Entity));
        if (Debug())
        {
            DEBUG_LOG("Created OrbitingAircraft1 entity");
        }
    }

    // Create second orbiting aircraft
    auto aircraft2Entity = entityFactory_->createFromTemplate("basic_drone", "OrbitingAircraft2", nextEntityId++);
    if (aircraft2Entity)
    {
        worldRef.addEntity(std::move(aircraft2Entity));
        if (Debug())
        {
            DEBUG_LOG("Created OrbitingAircraft2 entity");
        }
    }

    // Create cloud entities
    for (int i = 0; i < 5; i++)
    {
        auto cloudEntity = entityFactory_->createFromTemplate("cloud_object", "LoadingCloud" + std::to_string(i), nextEntityId++);
        if (cloudEntity)
        {
            worldRef.addEntity(std::move(cloudEntity));
        }
    }

    sceneLoaded = true;
    eventBus.publish(DefaultWorldGeneratedEvent{});
    if (Debug())
    {
        DEBUG_LOG("Loading indicator scene created successfully with basic entities.");
    }
}

void WorldGenSystem::LoadSceneEntities(const SceneConfig::Scene &sceneData)
{
    if (Debug())
    {
        DEBUG_LOG("Loading scene entities from XML configuration...");
        DEBUG_LOG("Scene: " << sceneData.name << " (ID: " << sceneData.id << ")");
    }

    static unsigned int nextEntityId = 1;
    int entitiesCreated = 0;

    // If scene has parsed entities, use them
    if (!sceneData.rootEntities.empty())
    {
        for (const auto &entityPtr : sceneData.rootEntities)
        {
            if (!entityPtr)
                continue;

            const auto &entityData = *entityPtr;

            try
            {
                // Create ECS entity with transform component
                auto entity = std::make_unique<Entity>(nextEntityId++);

                // Add transform component
                entity->addComponent(std::make_unique<TransformC>(
                    Math::float3(entityData.transform.position.x,
                                 entityData.transform.position.y,
                                 entityData.transform.position.z),
                    Math::float4(entityData.transform.rotation.x,
                                 entityData.transform.rotation.y,
                                 entityData.transform.rotation.z,
                                 entityData.transform.rotation.w),
                    Math::float3(entityData.transform.scale.x,
                                 entityData.transform.scale.y,
                                 entityData.transform.scale.z)));

                // Add entity to world
                worldRef.addEntity(std::move(entity));
                entitiesCreated++;

                if (Debug())
                {
                    DEBUG_LOG("Created entity: " << entityData.id << " (type: " << entityData.type << ")");
                }
            }
            catch (const std::exception &e)
            {
                std::cerr << "Error creating entity " << entityData.id << ": " << e.what() << std::endl;
            }
        }
    }
    else
    {
        // Scene parser didn't create entities yet, create based on scene type
        if (Debug())
        {
            DEBUG_LOG("No parsed entities found, creating entities based on scene ID...");
        }
        if (Debug())
        {
            DEBUG_LOG("No parsed entities found, creating entities based on scene ID...");
        }

        if (sceneData.id == "loading_indicator")
        {
            // Create loading indicator entities programmatically based on XML structure
            CreateLoadingIndicatorEntitiesFromXmlStructure(nextEntityId, entitiesCreated);
        }
        else if (sceneData.id == "default_sphere_world" || sceneData.id == "procedural_earth_like")
        {
            CreateDefaultSphereEntitiesFromXmlStructure(nextEntityId, entitiesCreated);
        }
        else
        {
            if (Debug())
            {
                DEBUG_LOG("Unknown scene type for entity creation: " << sceneData.id);
            }
        }
    }

    if (Debug())
    {
        DEBUG_LOG("Successfully created " << entitiesCreated << " entities from XML scene data");
    }
}

AssetId WorldGenSystem::GenerateVoxelMesh(const SceneConfig::CompoundMesh &meshConfig)
{
    if (Debug())
    {
        DEBUG_LOG("Generating voxel mesh: " << meshConfig.name << " (ID: " << meshConfig.id << ")");
    }

    // Convert SceneConfig::CompoundMesh to VoxelMesh::CompoundParams
    VoxelMesh::CompoundParams params;
    params.name = meshConfig.name;

    // Convert each VoxelPrimitive to CompoundPart
    for (const auto &primitive : meshConfig.parts)
    {
        VoxelMesh::CompoundPart part;

        // Convert primitive type
        switch (primitive.type)
        {
        case SceneConfig::VoxelPrimitive::Type::Cube:
            part.primitive.type = VoxelMesh::VoxelType::Cube;
            break;
        case SceneConfig::VoxelPrimitive::Type::Sphere:
            part.primitive.type = VoxelMesh::VoxelType::Sphere;
            break;
        case SceneConfig::VoxelPrimitive::Type::Cylinder:
            part.primitive.type = VoxelMesh::VoxelType::Cylinder;
            break;
        case SceneConfig::VoxelPrimitive::Type::Plane:
            part.primitive.type = VoxelMesh::VoxelType::Plane;
            break;
        }

        // Set primitive parameters
        part.primitive.size = primitive.size;
        part.primitive.radius = primitive.radius;
        part.primitive.height = primitive.height;
        part.primitive.subdivisions = primitive.subdivisions;

        // Set transform
        part.offset = Math::float3(
            primitive.transform.position.x,
            primitive.transform.position.y,
            primitive.transform.position.z);
        part.scale = Math::float3(
            primitive.transform.scale.x,
            primitive.transform.scale.y,
            primitive.transform.scale.z);

        part.name = primitive.materialId; // Use material ID as part name for reference
        params.parts.push_back(part);
    }

    // Generate the mesh using VoxelMeshGenerator
    VoxelMesh::MeshData meshData = meshGenerator_->generateCompound(params);

    if (meshData.isEmpty())
    {
        std::cerr << "Failed to generate voxel mesh: " << meshConfig.name << std::endl;
        return 0; // Return invalid AssetId
    }

    // Create a MeshRecipeAsset from the generated mesh data
    auto meshAsset = std::make_unique<MeshRecipeAsset>();
    meshAsset->generator = "VoxelMeshGenerator";
    meshAsset->params["mesh_type"] = std::string("compound_mesh");
    meshAsset->params["mesh_name"] = std::string(meshConfig.name);
    meshAsset->params["part_count"] = static_cast<int>(meshConfig.parts.size());

    // Store vertex and index data (simplified - in production this would need proper mesh asset structure)
    if (Debug())
    {
        DEBUG_LOG("Generated mesh with " << meshData.vertices.size() << " vertices and "
                                         << meshData.indices.size() << " indices");
    }

    // Generate numeric asset ID for the mesh using FNV-1a hash
    constexpr uint32_t FNV_OFFSET_BASIS = 2166136261u;
    constexpr uint32_t FNV_PRIME = 16777619u;

    std::string meshIdString = "voxel_mesh:" + meshConfig.id;
    uint32_t meshAssetId = FNV_OFFSET_BASIS;
    for (char c : meshIdString)
    {
        meshAssetId ^= static_cast<uint32_t>(c);
        meshAssetId *= FNV_PRIME;
    }

    // Ensure we don't return 0 (reserved for invalid ID)
    if (meshAssetId == 0)
        meshAssetId = 1;

    // Register the mesh asset
    assetRegistry_.registerMeshRecipe(meshAssetId, std::move(meshAsset));

    return meshAssetId;
}

void WorldGenSystem::GenerateDefaultSphereWorld()
{
    if (sceneLoaded)
        return;

    if (Debug())
    {
        DEBUG_LOG("Generating default Earth-like sphere world...");
    }

    static unsigned int nextEntityId = 1;

    // Create Earth entity using EntityFactory
    auto earthEntity = entityFactory_->createFromTemplate("earth_sphere", "Earth", nextEntityId++);
    if (earthEntity)
    {
        // Override position and scale for Earth
        if (auto transform = earthEntity->getComponent<TransformC>())
        {
            transform->position = {0.0f, -6371000.0f, 0.0f};
            transform->scale = {1.0f, 1.0f, 1.0f};
        }

        // Use MaterialManager to create dynamic Earth material
        if (auto renderable = earthEntity->getComponent<RenderableC>())
        {
            renderable->materialId = materialManager_.HasMaterial("EarthSurfaceMaterial") ? "EarthSurfaceMaterial" : materialManager_.CreateEarthMaterial(6371000.0f, 2);
            renderable->meshId = "earth_sphere_mesh";
        }

        worldRef.addEntity(std::move(earthEntity));
    }

    // Create atmosphere entity using EntityFactory
    auto atmosphereEntity = entityFactory_->createFromTemplate("earth_sphere", "Atmosphere", nextEntityId++);
    if (atmosphereEntity)
    {
        // Override settings for atmosphere
        if (auto transform = atmosphereEntity->getComponent<TransformC>())
        {
            transform->position = {0.0f, -6371000.0f, 0.0f};
            transform->scale = {1.0f, 1.0f, 1.0f};
        }

        if (auto renderable = atmosphereEntity->getComponent<RenderableC>())
        {
            renderable->materialId = materialManager_.HasMaterial("AtmosphereMaterial") ? "AtmosphereMaterial" : materialManager_.CreateAtmosphereMaterial(1, 0.1f);
            renderable->meshId = "atmosphere_sphere_mesh";
        }

        worldRef.addEntity(std::move(atmosphereEntity));
    }

    // Create cloud entity using EntityFactory
    auto cloudEntity = entityFactory_->createFromTemplate("cloud_object", "GlobalClouds", nextEntityId++);
    if (cloudEntity)
    {
        // Override settings for global cloud layer
        if (auto transform = cloudEntity->getComponent<TransformC>())
        {
            transform->position = {0.0f, -6371000.0f, 0.0f};
            transform->scale = {1.0f, 1.0f, 1.0f};
        }

        if (auto renderable = cloudEntity->getComponent<RenderableC>())
        {
            renderable->materialId = materialManager_.HasMaterial("CloudMaterial") ? "CloudMaterial" : materialManager_.CreateCloudMaterial(0.6f, 0.3f);
            renderable->meshId = "cloud_sphere_mesh";
        }

        worldRef.addEntity(std::move(cloudEntity));
    }

    sceneLoaded = true;
    eventBus.publish(SceneLoadedEvent{"Default Earth World"});
    eventBus.publish(DefaultWorldGeneratedEvent{});
    DEBUG_LOG("Default world generation complete.");
}

void WorldGenSystem::OnNoPackagesFound(const NoPackagesFoundEvent &event)
{
    LoadScene("loading_indicator");
}

void WorldGenSystem::OnDefaultWorldRequested(const DefaultWorldGeneratedEvent &event)
{
    if (sceneLoaded)
        return;

    // Try to load the default scene configuration from the asset registry
    try
    {
        const std::string *defaultSceneXml = assetRegistry_.getDefaultScene();
        if (defaultSceneXml != nullptr)
        {
            DEBUG_LOG("Loading default scene configuration from package...");

            // Parse the scene type from the XML (looking for type="procedural_earth_like")
            size_t typeStart = defaultSceneXml->find("type=\"") + 6;
            size_t typeEnd = defaultSceneXml->find("\"", typeStart);
            if (typeStart != std::string::npos + 6 && typeEnd != std::string::npos)
            {
                std::string sceneType = defaultSceneXml->substr(typeStart, typeEnd - typeStart);
                DEBUG_LOG("Loading scene of type: " << sceneType);
                LoadScene(sceneType);
            }
            else
            {
                DEBUG_LOG("Unable to parse scene type from default scene XML, falling back to hardcoded generation...");
                GenerateDefaultSphereWorld();
            }
        }
        else
        {
            DEBUG_LOG("No default scene registered, falling back to hardcoded generation...");
            GenerateDefaultSphereWorld();
        }
    }
    catch (const std::exception &e)
    {
        DEBUG_LOG("Error loading default scene: " << e.what() << ", falling back to hardcoded generation...");
        GenerateDefaultSphereWorld();
    }
}

// Helper method to convert MaterialId to numeric AssetId
AssetId WorldGenSystem::MaterialIdToAssetId(const std::string &materialId)
{
    // Use FNV-1a hash algorithm for consistent ID generation
    constexpr uint32_t FNV_OFFSET_BASIS = 2166136261u;
    constexpr uint32_t FNV_PRIME = 16777619u;

    uint32_t hash = FNV_OFFSET_BASIS;
    for (char c : materialId)
    {
        hash ^= static_cast<uint32_t>(c);
        hash *= FNV_PRIME;
    }

    // Ensure we don't return 0 (reserved for invalid ID)
    return (hash == 0) ? 1 : hash;
}

// Legacy material methods (placeholder implementations)
AssetId WorldGenSystem::GetEarthMaterialId()
{
    std::string materialId = materialManager_.HasMaterial("EarthSurfaceMaterial") ? "EarthSurfaceMaterial" : materialManager_.CreateEarthMaterial(6371000.0f, 1);
    return MaterialIdToAssetId(materialId);
}

AssetId WorldGenSystem::GetAtmosphereMaterialId(int layer)
{
    std::string materialName = "AtmosphereMaterial_Layer" + std::to_string(layer);
    std::string materialId = materialManager_.HasMaterial(materialName) ? materialName : materialManager_.CreateAtmosphereMaterial(layer, 0.1f);
    return MaterialIdToAssetId(materialId);
}

AssetId WorldGenSystem::GetCloudMaterialId()
{
    std::string materialId = materialManager_.HasMaterial("CloudMaterial") ? "CloudMaterial" : materialManager_.CreateCloudMaterial(0.6f, 0.3f);
    return MaterialIdToAssetId(materialId);
}

void WorldGenSystem::CreateLoadingIndicatorEntitiesFromXmlStructure(unsigned int &nextEntityId, int &entitiesCreated)
{
    DEBUG_LOG("Creating loading indicator entities based on XML structure...");

    // Create central globe entity (from XML: central_globe)
    auto globeEntity = std::make_unique<Entity>(nextEntityId++);
    globeEntity->addComponent(std::make_unique<TransformC>(
        Math::float3(0.0f, 0.0f, 0.0f),
        Math::float4(0.0f, 0.0f, 0.0f, 1.0f),
        Math::float3(2.0f, 2.0f, 2.0f))); // Scale from XML

    std::string globeMaterialId = materialManager_.HasMaterial("LandMaterial") ? "LandMaterial" : materialManager_.CreateEarthMaterial(2.0f, 1);
    globeEntity->addComponent(std::make_unique<RenderableC>(
        "earth_sphere_mesh",
        globeMaterialId,
        true));
    worldRef.addEntity(std::move(globeEntity));
    entitiesCreated++;

    // Create 2 aircraft entities (from XML: aircraft_1, aircraft_2)
    for (int i = 0; i < 2; ++i)
    {
        auto aircraftEntity = std::make_unique<Entity>(nextEntityId++);
        float xPos = (i == 0) ? 5.0f : -5.0f; // From XML positions
        aircraftEntity->addComponent(std::make_unique<TransformC>(
            Math::float3(xPos, 0.0f, 0.0f),
            Math::float4(0.0f, 0.0f, 0.0f, 1.0f),
            Math::float3(0.5f, 0.5f, 0.5f))); // Scale from XML

        std::string aircraftMaterialId = materialManager_.HasMaterial("AircraftBodyMaterial") ? "AircraftBodyMaterial" : materialManager_.CreateContrailMaterial({0.8f, 0.2f, 0.2f});
        aircraftEntity->addComponent(std::make_unique<RenderableC>(
            "aircraft_mesh",
            aircraftMaterialId,
            true));
        worldRef.addEntity(std::move(aircraftEntity));
        entitiesCreated++;
    }

    // Create 6 cloud entities (from XML: cloud_1 to cloud_6)
    Math::float3 cloudPositions[] = {
        {3.0f, 2.0f, 1.0f}, {-3.0f, 2.0f, -1.0f}, {1.0f, -2.0f, 3.0f}, {-1.0f, -2.0f, -3.0f}, {2.0f, 0.0f, 4.0f}, {-2.0f, 0.0f, -4.0f}};

    for (int i = 0; i < 6; ++i)
    {
        auto cloudEntity = std::make_unique<Entity>(nextEntityId++);
        cloudEntity->addComponent(std::make_unique<TransformC>(
            cloudPositions[i],
            Math::float4(0.0f, 0.0f, 0.0f, 1.0f),
            Math::float3(1.0f, 1.0f, 1.0f)));

        std::string cloudMaterialId = materialManager_.HasMaterial("CloudMaterial") ? "CloudMaterial" : materialManager_.CreateCloudMaterial(0.8f, 0.4f);
        cloudEntity->addComponent(std::make_unique<RenderableC>(
            "cloud_mesh",
            cloudMaterialId,
            true));
        worldRef.addEntity(std::move(cloudEntity));
        entitiesCreated++;
    }

    DEBUG_LOG("Created " << entitiesCreated << " entities based on loading_indicator.xml structure");
}

void WorldGenSystem::CreateDefaultSphereEntitiesFromXmlStructure(unsigned int &nextEntityId, int &entitiesCreated)
{
    DEBUG_LOG("Creating default sphere entities based on XML structure...");

    // Create earth sphere entity using EntityFactory (from XML: earth_sphere)
    auto earthEntity = entityFactory_->createFromTemplate("earth_sphere", "Earth", nextEntityId++);
    if (earthEntity)
    {
        // Override settings based on XML structure
        if (auto transform = earthEntity->getComponent<TransformC>())
        {
            transform->position = {0.0f, 0.0f, 0.0f};
            transform->scale = {1.0f, 1.0f, 1.0f};
        }

        if (auto renderable = earthEntity->getComponent<RenderableC>())
        {
            renderable->materialId = materialManager_.HasMaterial("EarthSurfaceMaterial") ? "EarthSurfaceMaterial" : materialManager_.CreateEarthMaterial(6371000.0f, 2);
            renderable->meshId = "earth_sphere_mesh";
        }

        worldRef.addEntity(std::move(earthEntity));
        entitiesCreated++;
    }

    // Create atmosphere layer using EntityFactory (from XML: atmosphere_layer_1)
    auto atmosphereEntity = entityFactory_->createFromTemplate("earth_sphere", "Atmosphere", nextEntityId++);
    if (atmosphereEntity)
    {
        // Override settings based on XML structure
        if (auto transform = atmosphereEntity->getComponent<TransformC>())
        {
            transform->position = {0.0f, 0.0f, 0.0f};
            transform->scale = {1.1f, 1.1f, 1.1f}; // Scale from XML
        }

        if (auto renderable = atmosphereEntity->getComponent<RenderableC>())
        {
            renderable->materialId = materialManager_.HasMaterial("AtmosphereMaterial") ? "AtmosphereMaterial" : materialManager_.CreateAtmosphereMaterial(1, 0.1f);
            renderable->meshId = "atmosphere_mesh";
        }

        worldRef.addEntity(std::move(atmosphereEntity));
        entitiesCreated++;
    }

    // Create cloud layer using EntityFactory (from XML: cloud_layer)
    auto cloudEntity = entityFactory_->createFromTemplate("cloud_object", "Clouds", nextEntityId++);
    if (cloudEntity)
    {
        // Override settings based on XML structure
        if (auto transform = cloudEntity->getComponent<TransformC>())
        {
            transform->position = {0.0f, 0.0f, 0.0f};
            transform->scale = {1.05f, 1.05f, 1.05f}; // Scale from XML
        }

        if (auto renderable = cloudEntity->getComponent<RenderableC>())
        {
            renderable->materialId = materialManager_.HasMaterial("CloudMaterial") ? "CloudMaterial" : materialManager_.CreateCloudMaterial(0.6f, 0.3f);
            renderable->meshId = "cloud_mesh";
        }

        worldRef.addEntity(std::move(cloudEntity));
        entitiesCreated++;
    }

    DEBUG_LOG("Created " << entitiesCreated << " entities based on default_sphere_world.xml structure");
}


================================================================================
FILE: src\systems\WorldGenSystem.h
================================================================================

#pragma once

#include "core/ISystem.h"
#include "core/EventBus.h"
#include "core/World.h"
#include "core/AssetRegistry.h"
#include "events/WorldGenEvents.h"
#include "../config/SceneConfigParser.h"
#include "../generators/VoxelMeshGenerator.h"
#include "../generators/ProceduralTextureGenerator.h"
#include "MaterialManager.h"
#include "../math/MathUtils.h"
#include <memory>

// Forward declaration for EntityFactory
namespace EntityFactory
{
    class EntityFactory;
}

/**
 * Generic world generation system using XML-driven scene configuration.
 * Supports all scene types through SceneConfigParser and VoxelMeshGenerator.
 */
class WorldGenSystem : public ISystem
{
public:
    WorldGenSystem(EventBus &eventBus, World &world, AssetRegistry &assetRegistry, Material::MaterialManager &materialManager);
    ~WorldGenSystem();

    void update(World &world, float deltaTime) override;
    void GenerateDefaultSphereWorld();
    void GenerateWorldFromXMLScene(const std::string &sceneXml);
    void GenerateWorldFromSceneFile(const std::string &sceneFilePath);
    void LoadScene(const SceneConfig::Scene &scene);
    bool LoadScene(const std::string &sceneType);

private:
    EventBus &eventBus;
    World &worldRef;
    AssetRegistry &assetRegistry_;
    bool sceneLoaded;

    // Generic backend systems
    std::unique_ptr<VoxelMeshGenerator> meshGenerator_;
    std::unique_ptr<ProceduralTexture::ProceduralTextureGenerator> textureGenerator_;
    std::unique_ptr<SceneConfig::SceneConfigParser> sceneParser_;
    std::unique_ptr<EntityFactory::EntityFactory> entityFactory_;
    Material::MaterialManager &materialManager_; // Reference to shared MaterialManager

    // Core scene loading methods
    void GenerateLoadingIndicatorWorld();
    void LoadSceneEntities(const SceneConfig::Scene &scene);
    AssetId GenerateVoxelMesh(const SceneConfig::CompoundMesh &meshConfig);

    // Event handlers
    void OnNoPackagesFound(const NoPackagesFoundEvent &event);
    void OnDefaultWorldRequested(const DefaultWorldGeneratedEvent &event);

    // XML-based entity creation helpers
    void CreateLoadingIndicatorEntitiesFromXmlStructure(unsigned int &nextEntityId, int &entitiesCreated);
    void CreateDefaultSphereEntitiesFromXmlStructure(unsigned int &nextEntityId, int &entitiesCreated);

    // Legacy material methods (will be removed when MaterialManager is fully integrated)
    AssetId GetEarthMaterialId();
    AssetId GetAtmosphereMaterialId(int layer);
    AssetId GetCloudMaterialId();

    // Helper method to convert MaterialId to numeric AssetId
    AssetId MaterialIdToAssetId(const std::string &materialId);
};



================================================================================
FILE: src\systems\WorldGenSystemConfig.cpp
================================================================================



================================================================================
FILE: src\tests\test_entity_xml.cpp
================================================================================

#include <iostream>
#include <memory>
#include "loaders/EntityXmlParser.h"
#include "factory/EntityFactory.h"
#include "core/Entity.h"
#include "components/TransformC.h"
#include "components/RenderableC.h"
#include "components/PhysicsC.h"
#include "components/VehicleC.h"
#include "components/AudioC.h"
#include "components/LightC.h"
#include "../debug.h"

bool testEntityXmlLoading()
{
    if (Debug())
    {
        DEBUG_LOG("Testing XML Entity Loading...");
    }

    // Create parser
    EntityLoader::EntityXmlParser parser;

    // Load test entity
    std::string filePath = "assets/entities/simple_drone.xml";
    std::unique_ptr<EntityConfig::EntityDefinition> definition = parser.loadFromFile(filePath);

    if (!definition)
    {
        std::cerr << "Failed to load entity definition from " << filePath << std::endl;
        return false;
    }

    // Check basic entity properties
    if (Debug())
    {
        DEBUG_LOG("Entity: " << definition->name);
        DEBUG_LOG("Type: " << definition->entityType);
    }

    // Create entity using EntityFactory
    EntityFactory factory;
    std::unique_ptr<Entity> entity = factory.createFromDefinition(*definition);

    if (!entity)
    {
        std::cerr << "Failed to create entity from definition" << std::endl;
        return false;
    }

    // Verify components
    if (Debug())
    {
        DEBUG_LOG("Verifying entity components...");
    }

    // Transform component
    auto transform = entity->getComponent<TransformC>();
    if (!transform)
    {
        std::cerr << "Entity has no transform component" << std::endl;
        return false;
    }
    if (Debug())
    {
        DEBUG_LOG("Transform: pos(" << transform->position.x << ", "
                  << transform->position.y << ", "
                  << transform->position.z << ")");
    }

    // Renderable component
    auto renderable = entity->getComponent<RenderableC>();
    if (!renderable)
    {
        std::cerr << "Entity has no renderable component" << std::endl;
        return false;
    }
    if (Debug())
    {
        DEBUG_LOG("Renderable: mesh=" << renderable->meshId
                  << ", material=" << renderable->materialId);
    }

    // Physics component
    auto physics = entity->getComponent<PhysicsC>();
    if (!physics)
    {
        std::cerr << "Entity has no physics component" << std::endl;
        return false;
    }
    if (Debug())
    {
        DEBUG_LOG("Physics: mass=" << physics->mass
                  << ", collider=" << physics->colliderType);
    }

    // Vehicle component
    auto vehicle = entity->getComponent<VehicleC>();
    if (!vehicle)
    {
        std::cerr << "Entity has no vehicle component" << std::endl;
        return false;
    }
    if (Debug())
    {
        DEBUG_LOG("Vehicle: type=" << vehicle->vehicleType
                  << ", speed=" << vehicle->maxSpeed);
    }

    // Audio component
    auto audio = entity->getComponent<AudioC>();
    if (!audio)
    {
        std::cerr << "Entity has no audio component" << std::endl;
        return false;
    }
    if (Debug())
    {
        DEBUG_LOG("Audio: sound=" << audio->soundId);
    }

    // Light component
    auto light = entity->getComponent<LightC>();
    if (!light)
    {
        std::cerr << "Entity has no light component" << std::endl;
        return false;
    }
    if (Debug())
    {
        DEBUG_LOG("Light: type=" << light->lightType
                  << ", intensity=" << light->intensity);

        DEBUG_LOG("All entity components verified successfully!");
    }
    return true;
}

int main()
{
    if (testEntityXmlLoading())
    {
        if (Debug())
        {
            DEBUG_LOG("XML Entity Loading Test: PASSED");
        }
        return 0;
    }
    else
    {
        std::cerr << "XML Entity Loading Test: FAILED" << std::endl;
        return 1;
    }
}




================================================================================
FILE: src\utils\DebugHelper.h
================================================================================



================================================================================
FILE: src\utils\IJsonErrorHandler.h
================================================================================

#pragma once
#include <string>
#include <vector>

/**
 * @brief Interface for JSON error handling operations.
 *
 * Provides methods for collecting and reporting JSON parsing errors.
 */
class IJsonErrorHandler
{
public:
    virtual ~IJsonErrorHandler() = default;

    /**
     * @brief Add an error message
     * @param error Error message to add
     */
    virtual void addError(const std::string &error) = 0;

    /**
     * @brief Add a warning message
     * @param warning Warning message to add
     */
    virtual void addWarning(const std::string &warning) = 0;

    /**
     * @brief Check if there are any errors
     * @return true if errors exist, false otherwise
     */
    virtual bool hasErrors() const = 0;

    /**
     * @brief Check if there are any warnings
     * @return true if warnings exist, false otherwise
     */
    virtual bool hasWarnings() const = 0;

    /**
     * @brief Get all error messages
     * @return Vector of error messages
     */
    virtual const std::vector<std::string> &getErrors() const = 0;

    /**
     * @brief Get all warning messages
     * @return Vector of warning messages
     */
    virtual const std::vector<std::string> &getWarnings() const = 0;

    /**
     * @brief Clear all errors and warnings
     */
    virtual void clear() = 0;
};


================================================================================
FILE: src\utils\IJsonLoader.h
================================================================================

#pragma once
#include <string>
#include <vector>
#include <nlohmann/json.hpp>

/**
 * @brief Interface for JSON document loading operations.
 *
 * Follows Single Responsibility Principle by focusing solely on JSON loading.
 */
class IJsonLoader
{
public:
    virtual ~IJsonLoader() = default;

    /**
     * @brief Load JSON from file.
     * @param path Path to the JSON file
     * @return true if load successful, false otherwise
     */
    virtual bool loadFile(const std::string &path) = 0;

    /**
     * @brief Load JSON from string content.
     * @param jsonContent JSON content as string
     * @return true if load successful, false otherwise
     */
    virtual bool loadString(const std::string &jsonContent) = 0;

    /**
     * @brief Get the root JSON object
     * @return Reference to the root JSON object
     */
    virtual const nlohmann::json &getRootJson() const = 0;
};


================================================================================
FILE: src\utils\IJsonParserUnified.h
================================================================================

#pragma once
#include "IJsonLoader.h"
#include "IJsonQuery.h"
#include "IJsonErrorHandler.h"
#include <nlohmann/json.hpp>

/**
 * @brief Unified interface combining all JSON operations.
 *
 * Provides a single interface for loading, querying, and error handling of JSON documents.
 */
class IJsonParserUnified : public IJsonLoader, public IJsonQuery, public IJsonErrorHandler
{
public:
    virtual ~IJsonParserUnified() = default;

    /**
     * @brief Set current JSON context for queries
     * @param json JSON object to set as current context
     */
    virtual void setCurrentJson(const nlohmann::json &json) = 0;

    /**
     * @brief Reset to root JSON context
     */
    virtual void resetToRoot() = 0;

    /**
     * @brief Check if JSON document is loaded and valid
     * @return true if document is ready for queries
     */
    virtual bool isValid() const = 0;
};


================================================================================
FILE: src\utils\IJsonQuery.h
================================================================================

#pragma once
#include <string>
#include <vector>
#include <nlohmann/json.hpp>

/**
 * @brief Interface for JSON document query operations.
 *
 * Provides methods for navigating and extracting data from JSON structures.
 */
class IJsonQuery
{
public:
    virtual ~IJsonQuery() = default;

    /**
     * @brief Check if a key exists in the current JSON object
     * @param key The key to check
     * @return true if key exists, false otherwise
     */
    virtual bool hasKey(const std::string &key) const = 0;

    /**
     * @brief Get string value from JSON object
     * @param key The key to query
     * @param defaultValue Default value if key not found
     * @return String value or default
     */
    virtual std::string getString(const std::string &key, const std::string &defaultValue = "") const = 0;

    /**
     * @brief Get integer value from JSON object
     * @param key The key to query
     * @param defaultValue Default value if key not found
     * @return Integer value or default
     */
    virtual int getInt(const std::string &key, int defaultValue = 0) const = 0;

    /**
     * @brief Get float value from JSON object
     * @param key The key to query
     * @param defaultValue Default value if key not found
     * @return Float value or default
     */
    virtual float getFloat(const std::string &key, float defaultValue = 0.0f) const = 0;

    /**
     * @brief Get boolean value from JSON object
     * @param key The key to query
     * @param defaultValue Default value if key not found
     * @return Boolean value or default
     */
    virtual bool getBool(const std::string &key, bool defaultValue = false) const = 0;

    /**
     * @brief Get array of objects from JSON
     * @param key The key to query
     * @return Vector of JSON objects
     */
    virtual std::vector<nlohmann::json> getArray(const std::string &key) const = 0;

    /**
     * @brief Get nested JSON object
     * @param key The key to query
     * @return JSON object
     */
    virtual nlohmann::json getObject(const std::string &key) const = 0;

    /**
     * @brief Get the current JSON object
     * @return Reference to current JSON object
     */
    virtual const nlohmann::json &getCurrentJson() const = 0;
};


================================================================================
FILE: src\vehicles\DroneBuilder.cpp
================================================================================

#include "DroneBuilder.h"

DroneBuilder::DroneBuilder(std::unique_ptr<IJsonQuery> jsonParser)
    : m_jsonParser(std::move(jsonParser))
{
}

std::unique_ptr<Entity> DroneBuilder::build(const std::string &configPath, EventBus &eventBus)
{
    // TODO: Use JSON parser to load configuration from configPath
    // For now, create a basic drone entity
    auto entity = std::make_unique<Entity>(1); // id 1
    // TODO: Add components based on JSON configuration (TransformC, BatteryC, etc.)
    return entity;
}


================================================================================
FILE: src\vehicles\DroneBuilder.h
================================================================================

#ifndef DRONEBUILDER_H
#define DRONEBUILDER_H

#include "IVehicleBuilder.h"
#include "../utils/IJsonQuery.h"
#include <memory>

class DroneBuilder : public IVehicleBuilder
{
public:
    DroneBuilder(std::unique_ptr<IJsonQuery> jsonParser);
    std::unique_ptr<Entity> build(const std::string &configPath, EventBus &eventBus) override;

private:
    std::unique_ptr<IJsonQuery> m_jsonParser;
};

#endif


================================================================================
FILE: src\vehicles\IVehicleBuilder.h
================================================================================

#ifndef IVEHICLEBUILDER_H
#define IVEHICLEBUILDER_H

#include <memory>
#include <string>
#include "core/Entity.h"
#include "core/EventBus.h"

class IVehicleBuilder
{
public:
    virtual ~IVehicleBuilder() = default;
    virtual std::unique_ptr<Entity> build(const std::string &configPath, EventBus &eventBus) = 0;
};

#endif



================================================================================
FILE: src\debug.h
================================================================================

#ifndef DEBUG_H
#define DEBUG_H

#include <iostream>
#include <string>
#include <utility>
#include <sstream>
#include <chrono>
#include <iomanip>
#include <fstream>
#include <filesystem>
#include <mutex>
#include <map>

#ifdef __linux__
#include <execinfo.h>
#include <cxxabi.h>
#include <memory>
#include <cstdlib>
#endif

inline bool Debug()
{
#ifdef DEBUG
    return true;
#else
    return false;
#endif
}

inline std::string getCurrentTimestamp()
{
    auto now = std::chrono::system_clock::now();
    auto time_t = std::chrono::system_clock::to_time_t(now);
    auto ms = std::chrono::duration_cast<std::chrono::milliseconds>(
                  now.time_since_epoch()) %
              1000;

    std::stringstream ss;
    ss << std::put_time(std::localtime(&time_t), "%H:%M:%S");
    ss << '.' << std::setfill('0') << std::setw(3) << ms.count();
    return ss.str();
}

inline std::string getCurrentDate()
{
    auto now = std::chrono::system_clock::now();
    auto time_t = std::chrono::system_clock::to_time_t(now);

    std::stringstream ss;
    ss << std::put_time(std::localtime(&time_t), "%Y-%m-%d");
    return ss.str();
}

inline std::string getMMHHDate()
{
    auto now = std::chrono::system_clock::now();
    auto time_t = std::chrono::system_clock::to_time_t(now);

    std::stringstream ss;
    ss << std::put_time(std::localtime(&time_t), "%M%H-%Y-%m-%d");
    return ss.str();
}

inline std::string getLogFilePath(const std::string &className)
{
    static std::map<std::string, std::string> logPaths;
    static std::mutex pathMutex;

    std::lock_guard<std::mutex> lock(pathMutex);

    auto it = logPaths.find(className);
    if (it != logPaths.end())
    {
        return it->second;
    }

    std::string mmhhDate = getMMHHDate();

    // Create log directory structure: log/mmhh-date/
    std::filesystem::path logDir = std::filesystem::path("log") / mmhhDate;
    std::filesystem::create_directories(logDir);

    // Create log file path: log/mmhh-date/className.log
    std::filesystem::path logFile = logDir / (className + ".log");
    std::string logPath = logFile.string();

    logPaths[className] = logPath;
    return logPath;
}

inline void writeToLogFile(const std::string &message, const std::string &className)
{
    static std::mutex logMutex;
    std::lock_guard<std::mutex> lock(logMutex);

    std::ofstream logFile(getLogFilePath(className), std::ios::app);
    if (logFile.is_open())
    {
        logFile << message << std::endl;
    }
}

#ifdef __linux__
inline std::string demangle(const char *symbol)
{
    int status = 0;
    std::unique_ptr<char, void (*)(void *)> res{
        abi::__cxa_demangle(symbol, nullptr, nullptr, &status),
        std::free};
    return (status == 0) ? res.get() : symbol;
}

inline std::string caller_info(int skip = 1)
{
    void *callstack[10];
    int frames = backtrace(callstack, 10);
    char **strs = backtrace_symbols(callstack, frames);

    std::string result = "unknown";

    if (frames > skip)
    {
        std::string raw(strs[skip]);
        // extract function name between '(' and '+'
        auto begin = raw.find('(');
        auto plus = raw.find('+', begin);
        if (begin != std::string::npos && plus != std::string::npos)
        {
            std::string mangled = raw.substr(begin + 1, plus - begin - 1);
            result = demangle(mangled.c_str());
        }
    }
    free(strs);
    return result;
}

inline std::pair<std::string, std::string> get_caller_class_method(int skip = 2)
{
    std::string caller = caller_info(skip);
    size_t colon_pos = caller.find("::");
    if (colon_pos != std::string::npos)
    {
        std::string class_name = caller.substr(0, colon_pos);
        std::string method_name = caller.substr(colon_pos + 2);
        // remove ()
        size_t paren_pos = method_name.find('(');
        if (paren_pos != std::string::npos)
        {
            method_name = method_name.substr(0, paren_pos);
        }
        return {class_name, method_name};
    }
    else
    {
        // global function
        size_t paren_pos = caller.find('(');
        std::string method_name = (paren_pos != std::string::npos) ? caller.substr(0, paren_pos) : caller;
        return {"global", method_name};
    }
}
#else
// Windows fallback - use compiler intrinsics for better caller info
inline std::pair<std::string, std::string> get_caller_class_method(int skip = 2)
{
    // On Windows, we can't easily get stack trace without additional libs
    // Return empty strings to signal we should use __FUNCTION__ instead
    return {"", ""};
}
#endif

inline std::string extractClassName(const std::string &functionName)
{
    // Extract class name from function signature
    // Handle patterns like "ClassName::methodName" or just "functionName"
    size_t colonPos = functionName.find("::");
    if (colonPos != std::string::npos)
    {
        return functionName.substr(0, colonPos);
    }

    // For global functions or when no class is detected, use "Global"
    return "Global";
}

// ERROR_LOG - Always works regardless of debug mode
#ifdef __linux__
#define ERROR_LOG(message)                                                                                                \
    do                                                                                                                    \
    {                                                                                                                     \
        auto caller = get_caller_class_method();                                                                          \
        std::string className = caller.first.empty() ? "Global" : caller.first;                                           \
        std::stringstream ss;                                                                                             \
        ss << "[" << getCurrentTimestamp() << "] [ERROR] [" << caller.first << "::" << caller.second << "]: " << message; \
        std::string logLine = ss.str();                                                                                   \
        std::cerr << logLine << std::endl;                                                                                \
        writeToLogFile(logLine, className + "_ERROR");                                                                    \
    } while (0)
#else
// Windows version - use __FUNCTION__ for better caller info
#define ERROR_LOG(message)                                                                       \
    do                                                                                           \
    {                                                                                            \
        std::string functionName = __FUNCTION__;                                                 \
        std::string className = extractClassName(functionName);                                  \
        std::stringstream ss;                                                                    \
        ss << "[" << getCurrentTimestamp() << "] [ERROR] [" << functionName << "]: " << message; \
        std::string logLine = ss.str();                                                          \
        std::cerr << logLine << std::endl;                                                       \
        writeToLogFile(logLine, className + "_ERROR");                                           \
    } while (0)
#endif

#ifdef DEBUG
// Use different approaches for Linux vs Windows
#ifdef __linux__
#define DEBUG_LOG(message)                                                                                        \
    do                                                                                                            \
    {                                                                                                             \
        auto caller = get_caller_class_method();                                                                  \
        std::string className = caller.first.empty() ? "Global" : caller.first;                                   \
        std::stringstream ss;                                                                                     \
        ss << "[" << getCurrentTimestamp() << "] [" << caller.first << "::" << caller.second << "]: " << message; \
        std::string logLine = ss.str();                                                                           \
        std::cout << logLine << std::endl;                                                                        \
        writeToLogFile(logLine, className);                                                                       \
    } while (0)
#else
// Windows version - use __FUNCTION__ for better caller info
#define DEBUG_LOG(message)                                                               \
    do                                                                                   \
    {                                                                                    \
        std::string functionName = __FUNCTION__;                                         \
        std::string className = extractClassName(functionName);                          \
        std::stringstream ss;                                                            \
        ss << "[" << getCurrentTimestamp() << "] [" << functionName << "]: " << message; \
        std::string logLine = ss.str();                                                  \
        std::cout << logLine << std::endl;                                               \
        writeToLogFile(logLine, className);                                              \
    } while (0)
#endif
#else
#define DEBUG_LOG(message)
#endif

#endif


================================================================================
FILE: src\main.cpp
================================================================================

#include <windows.h>
#include <GL/gl.h>
#include <iostream>
#include <chrono>
#include <thread>
#include <filesystem>

#include "debug.h"
#include "core/PackageBootstrap.h"
#include "core/AssetManager.h"
#include "behaviors/SpinBehavior.h"
#include "behaviors/DebugOverlayBehavior.h"
#include "factory/BehaviorRegistry.h"
#include "core/Entity.h"
#include "core/World.h"

// OpenGL and Windows setup
LRESULT CALLBACK WindowProc(HWND hwnd, UINT uMsg, WPARAM wParam, LPARAM lParam);
bool setupOpenGL(HWND hwnd);
void renderRedCube();

// Global variables
HDC hdc;
HGLRC hglrc;
bool running = true;
float cubeRotation = 0.0f;
AssetManager assetManager;

// Include the SceneRenderer
#include "rendering/SceneRenderer.h"
SceneRenderer sceneRenderer;

/**
 * @brief Windows entry point with OpenGL window and package system
 */
int WINAPI WinMain(HINSTANCE hInstance, HINSTANCE hPrevInstance, LPSTR lpCmdLine, int nShowCmd)
{
    try
    {
        std::cout << "🚀 FPV Flight Simulator - Enhanced Package System with OpenGL" << std::endl;
        std::cout << "=============================================================" << std::endl;

        // Log current working directory for debugging
        std::filesystem::path currentPath = std::filesystem::current_path();
        DEBUG_LOG("Current working directory: " << currentPath.string());
        std::cout << "Working directory: " << currentPath.string() << std::endl;

        // ====================================================================
        // Step 1: Package System Initialization
        // ====================================================================
        std::cout << "\n📦 Initializing dual asset system..." << std::endl;

        // Initialize the asset manager with internal and user assets paths
        if (!assetManager.initialize("internal_assets", "assets"))
        {
            std::cerr << "❌ INTERNAL ASSETS NOT FOUND" << std::endl;
            std::cerr << "   The internal assets are required but not found." << std::endl;
            MessageBoxA(NULL, "INTERNAL ASSETS NOT FOUND - Required for core functionality", "Error", MB_OK);
            return 1;
        }

        DEBUG_LOG("✅ Dual asset system initialized successfully!");
        DEBUG_LOG("   - Internal assets path: internal_assets");
        DEBUG_LOG("   - User assets path: assets");

        // Initialize the scene renderer with our green cubes scene
        if (!sceneRenderer.initialize("scene.green_cubes", assetManager))
        {
            ERROR_LOG("Failed to initialize scene renderer");
            std::cerr << "❌ Failed to initialize scene renderer" << std::endl;
            return 1;
        }

        std::cout << "\n📦 Initializing package system..." << std::endl;
        DEBUG_LOG("Initializing package system...");

        Core::PackageBootstrap bootstrap;
        Core::PackageBootstrap::BootstrapConfig config;
        config.packagesDirectory = "assets/packages";
        config.requiredPackages = {"core"};
        config.enableHotReload = true;

        DEBUG_LOG("Package configuration:");
        DEBUG_LOG("  - packagesDirectory: " << config.packagesDirectory);
        DEBUG_LOG("  - requiredPackages: core");
        DEBUG_LOG("  - enableHotReload: " << (config.enableHotReload ? "true" : "false"));

        if (!bootstrap.initialize(config))
        {
            ERROR_LOG("CODE PACKAGE NOT PRESENT - core package required");
            ERROR_LOG("The KERNEL package 'core' is required but not found in: " << config.packagesDirectory);
            std::cerr << "❌ CODE PACKAGE NOT PRESENT" << std::endl;
            std::cerr << "   The KERNEL package 'core' is required but not found." << std::endl;
            MessageBoxA(NULL, "CODE PACKAGE NOT PRESENT - core package required", "Error", MB_OK);
            return 1;
        }

        auto stats = bootstrap.getStats();
        DEBUG_LOG("✅ KERNEL package system initialized successfully!");
        DEBUG_LOG("   - Packages loaded: " << stats.packagesLoaded);

        // ====================================================================
        // Step 2: Register Enhanced Behaviors
        // ====================================================================
        DEBUG_LOG("\n📦 Registering enhanced behaviors...");

        auto &behaviorRegistry = Factory::BehaviorRegistry::instance();
        behaviorRegistry.registerBehavior("SpinBehavior", []()
                                          { return std::make_unique<Behaviors::SpinBehavior>(); });
        behaviorRegistry.registerBehavior("DebugOverlayBehavior", []()
                                          { return std::make_unique<DebugOverlayBehavior>(); });

        DEBUG_LOG("✅ SpinBehavior registered successfully!");
        DEBUG_LOG("✅ DebugOverlayBehavior registered successfully!");

        // ====================================================================
        // Step 3: Create OpenGL Window
        // ====================================================================
        std::cout << "\n🖥️ Creating OpenGL window..." << std::endl;

        // Register window class
        WNDCLASSEX wc = {};
        wc.cbSize = sizeof(WNDCLASSEX);
        wc.style = CS_HREDRAW | CS_VREDRAW;
        wc.lpfnWndProc = WindowProc;
        wc.hInstance = hInstance;
        wc.hIcon = LoadIcon(NULL, IDI_APPLICATION);
        wc.hCursor = LoadCursor(NULL, IDC_ARROW);
        wc.hbrBackground = (HBRUSH)(COLOR_WINDOW + 1);
        wc.lpszClassName = "FPVSimWindow";
        wc.hIconSm = LoadIcon(NULL, IDI_APPLICATION);

        if (!RegisterClassEx(&wc))
        {
            MessageBoxA(NULL, "Failed to register window class", "Error", MB_OK);
            return 1;
        }

        // Create window
        HWND hwnd = CreateWindowEx(
            WS_EX_CLIENTEDGE,
            "FPVSimWindow",
            "FPV Flight Simulator - Red Cube Demo",
            WS_OVERLAPPEDWINDOW,
            CW_USEDEFAULT, CW_USEDEFAULT,
            800, 600,
            NULL, NULL, hInstance, NULL);

        if (!hwnd)
        {
            MessageBoxA(NULL, "Failed to create window", "Error", MB_OK);
            return 1;
        }

        // Setup OpenGL
        if (!setupOpenGL(hwnd))
        {
            MessageBoxA(NULL, "Failed to setup OpenGL", "Error", MB_OK);
            return 1;
        }

        ShowWindow(hwnd, nShowCmd);
        UpdateWindow(hwnd);

        std::cout << "✅ OpenGL window created successfully!" << std::endl;

        // ====================================================================
        // Step 4: Create Red Cube Entity with Behavior
        // ====================================================================
        std::cout << "\n🎲 Creating red cube entity..." << std::endl;

        EventBus eventBus;
        World world(eventBus);

        // Create entity directly in unique_ptr to avoid copy issues
        auto redCubeEntity = std::make_unique<Entity>(1);
        redCubeEntity->setName("Red Cube");

        // Attach SpinBehavior
        auto spinBehavior = behaviorRegistry.createBehavior("SpinBehavior");
        if (spinBehavior)
        {
            Assets::BehaviorParams params;
            params.setParameter("rotationSpeed", "45.0");
            params.setParameter("axis", "0,1,0");

            spinBehavior->initialize(*redCubeEntity, params);
            // Note: For now we'll track behaviors separately since Entity doesn't have attachBehavior

            std::cout << "✅ SpinBehavior created for red cube!" << std::endl;
        }

        // Add entity to world
        world.addEntity(std::move(redCubeEntity));

        std::cout << "✅ Red cube entity created with spinning behavior!" << std::endl;

        // ====================================================================
        // Step 5: Main Loop
        // ====================================================================
        std::cout << "\n🎮 Starting main loop..." << std::endl;
        std::cout << "   🖥️  OpenGL window should now be visible with spinning red cube" << std::endl;
        std::cout << "   ⌨️  Close window to exit" << std::endl;

        MSG msg = {};
        auto lastTime = std::chrono::steady_clock::now();

        while (running)
        {
            // Process Windows messages
            while (PeekMessage(&msg, NULL, 0, 0, PM_REMOVE))
            {
                if (msg.message == WM_QUIT)
                {
                    running = false;
                    break;
                }
                TranslateMessage(&msg);
                DispatchMessage(&msg);
            }

            if (!running)
                break;

            // Calculate delta time
            auto currentTime = std::chrono::steady_clock::now();
            float deltaTime = std::chrono::duration<float>(currentTime - lastTime).count();
            lastTime = currentTime;

            // Update behavior system (this will update SpinBehavior)
            auto &behaviorSystem = bootstrap.getBehaviorSystem();
            behaviorSystem.update(deltaTime);

            // Update the scene renderer
            sceneRenderer.update(deltaTime);

            // Render the scene
            sceneRenderer.render();

            // Cap frame rate
            std::this_thread::sleep_for(std::chrono::milliseconds(16)); // ~60 FPS
        }

        // ====================================================================
        // Cleanup
        // ====================================================================
        wglMakeCurrent(NULL, NULL);
        wglDeleteContext(hglrc);
        ReleaseDC(hwnd, hdc);

        std::cout << "\n✅ Simulation completed successfully!" << std::endl;
        return 0;
    }
    catch (const std::exception &e)
    {
        std::cerr << "\n❌ Fatal error: " << e.what() << std::endl;
        MessageBoxA(NULL, ("Fatal error: " + std::string(e.what())).c_str(), "Error", MB_OK);
        return 1;
    }
    catch (...)
    {
        std::cerr << "\n❌ Unknown fatal error occurred" << std::endl;
        MessageBoxA(NULL, "Unknown fatal error occurred", "Error", MB_OK);
        return 1;
    }
}

LRESULT CALLBACK WindowProc(HWND hwnd, UINT uMsg, WPARAM wParam, LPARAM lParam)
{
    switch (uMsg)
    {
    case WM_CLOSE:
        DestroyWindow(hwnd);
        break;
    case WM_DESTROY:
        running = false;
        PostQuitMessage(0);
        break;
    case WM_SIZE:
    {
        RECT rect;
        GetClientRect(hwnd, &rect);
        glViewport(0, 0, rect.right, rect.bottom);
    }
    break;
    default:
        return DefWindowProc(hwnd, uMsg, wParam, lParam);
    }
    return 0;
}

bool setupOpenGL(HWND hwnd)
{
    hdc = GetDC(hwnd);
    if (!hdc)
        return false;

    PIXELFORMATDESCRIPTOR pfd = {};
    pfd.nSize = sizeof(PIXELFORMATDESCRIPTOR);
    pfd.nVersion = 1;
    pfd.dwFlags = PFD_DRAW_TO_WINDOW | PFD_SUPPORT_OPENGL | PFD_DOUBLEBUFFER;
    pfd.iPixelType = PFD_TYPE_RGBA;
    pfd.cColorBits = 32;
    pfd.cDepthBits = 24;
    pfd.cStencilBits = 8;

    int pixelFormat = ChoosePixelFormat(hdc, &pfd);
    if (!pixelFormat)
        return false;

    if (!SetPixelFormat(hdc, pixelFormat, &pfd))
        return false;

    hglrc = wglCreateContext(hdc);
    if (!hglrc)
        return false;

    if (!wglMakeCurrent(hdc, hglrc))
        return false;

    // Setup OpenGL state
    glEnable(GL_DEPTH_TEST);
    glClearColor(0.1f, 0.1f, 0.2f, 1.0f); // Dark blue background

    return true;
}

void renderRedCube()
{
    glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);

    // Setup projection matrix
    glMatrixMode(GL_PROJECTION);
    glLoadIdentity();

    RECT rect;
    GetClientRect(WindowFromDC(hdc), &rect);
    float aspect = (float)(rect.right) / (float)(rect.bottom);

    // Simple perspective projection
    glFrustum(-0.1f * aspect, 0.1f * aspect, -0.1f, 0.1f, 0.1f, 100.0f);

    // Setup model-view matrix
    glMatrixMode(GL_MODELVIEW);
    glLoadIdentity();

    // Move camera back and look at center
    glTranslatef(0.0f, 0.0f, -5.0f);

    // Rotate the cube
    glRotatef(cubeRotation, 0.0f, 1.0f, 0.0f);

    // Draw red cube
    glColor3f(1.0f, 0.0f, 0.0f); // Red color

    glBegin(GL_QUADS);

    // Front face
    glVertex3f(-0.5f, -0.5f, 0.5f);
    glVertex3f(0.5f, -0.5f, 0.5f);
    glVertex3f(0.5f, 0.5f, 0.5f);
    glVertex3f(-0.5f, 0.5f, 0.5f);

    // Back face
    glVertex3f(-0.5f, -0.5f, -0.5f);
    glVertex3f(-0.5f, 0.5f, -0.5f);
    glVertex3f(0.5f, 0.5f, -0.5f);
    glVertex3f(0.5f, -0.5f, -0.5f);

    // Top face
    glVertex3f(-0.5f, 0.5f, -0.5f);
    glVertex3f(-0.5f, 0.5f, 0.5f);
    glVertex3f(0.5f, 0.5f, 0.5f);
    glVertex3f(0.5f, 0.5f, -0.5f);

    // Bottom face
    glVertex3f(-0.5f, -0.5f, -0.5f);
    glVertex3f(0.5f, -0.5f, -0.5f);
    glVertex3f(0.5f, -0.5f, 0.5f);
    glVertex3f(-0.5f, -0.5f, 0.5f);

    // Right face
    glVertex3f(0.5f, -0.5f, -0.5f);
    glVertex3f(0.5f, 0.5f, -0.5f);
    glVertex3f(0.5f, 0.5f, 0.5f);
    glVertex3f(0.5f, -0.5f, 0.5f);

    // Left face
    glVertex3f(-0.5f, -0.5f, -0.5f);
    glVertex3f(-0.5f, -0.5f, 0.5f);
    glVertex3f(-0.5f, 0.5f, 0.5f);
    glVertex3f(-0.5f, 0.5f, -0.5f);

    glEnd();

    SwapBuffers(hdc);
}


================================================================================
FILE: tests\build\CMakeFiles\4.1.0\CompilerIdCXX\CMakeCXXCompilerId.cpp
================================================================================

/* This source file must have a .cpp extension so that all C++ compilers
   recognize the extension without flags.  Borland does not know .cxx for
   example.  */
#ifndef __cplusplus
# error "A C compiler has been selected for C++."
#endif

#if !defined(__has_include)
/* If the compiler does not have __has_include, pretend the answer is
   always no.  */
#  define __has_include(x) 0
#endif


/* Version number components: V=Version, R=Revision, P=Patch
   Version date components:   YYYY=Year, MM=Month,   DD=Day  */

#if defined(__INTEL_COMPILER) || defined(__ICC)
# define COMPILER_ID "Intel"
# if defined(_MSC_VER)
#  define SIMULATE_ID "MSVC"
# endif
# if defined(__GNUC__)
#  define SIMULATE_ID "GNU"
# endif
  /* __INTEL_COMPILER = VRP prior to 2021, and then VVVV for 2021 and later,
     except that a few beta releases use the old format with V=2021.  */
# if __INTEL_COMPILER < 2021 || __INTEL_COMPILER == 202110 || __INTEL_COMPILER == 202111
#  define COMPILER_VERSION_MAJOR DEC(__INTEL_COMPILER/100)
#  define COMPILER_VERSION_MINOR DEC(__INTEL_COMPILER/10 % 10)
#  if defined(__INTEL_COMPILER_UPDATE)
#   define COMPILER_VERSION_PATCH DEC(__INTEL_COMPILER_UPDATE)
#  else
#   define COMPILER_VERSION_PATCH DEC(__INTEL_COMPILER   % 10)
#  endif
# else
#  define COMPILER_VERSION_MAJOR DEC(__INTEL_COMPILER)
#  define COMPILER_VERSION_MINOR DEC(__INTEL_COMPILER_UPDATE)
   /* The third version component from --version is an update index,
      but no macro is provided for it.  */
#  define COMPILER_VERSION_PATCH DEC(0)
# endif
# if defined(__INTEL_COMPILER_BUILD_DATE)
   /* __INTEL_COMPILER_BUILD_DATE = YYYYMMDD */
#  define COMPILER_VERSION_TWEAK DEC(__INTEL_COMPILER_BUILD_DATE)
# endif
# if defined(_MSC_VER)
   /* _MSC_VER = VVRR */
#  define SIMULATE_VERSION_MAJOR DEC(_MSC_VER / 100)
#  define SIMULATE_VERSION_MINOR DEC(_MSC_VER % 100)
# endif
# if defined(__GNUC__)
#  define SIMULATE_VERSION_MAJOR DEC(__GNUC__)
# elif defined(__GNUG__)
#  define SIMULATE_VERSION_MAJOR DEC(__GNUG__)
# endif
# if defined(__GNUC_MINOR__)
#  define SIMULATE_VERSION_MINOR DEC(__GNUC_MINOR__)
# endif
# if defined(__GNUC_PATCHLEVEL__)
#  define SIMULATE_VERSION_PATCH DEC(__GNUC_PATCHLEVEL__)
# endif

#elif (defined(__clang__) && defined(__INTEL_CLANG_COMPILER)) || defined(__INTEL_LLVM_COMPILER)
# define COMPILER_ID "IntelLLVM"
#if defined(_MSC_VER)
# define SIMULATE_ID "MSVC"
#endif
#if defined(__GNUC__)
# define SIMULATE_ID "GNU"
#endif
/* __INTEL_LLVM_COMPILER = VVVVRP prior to 2021.2.0, VVVVRRPP for 2021.2.0 and
 * later.  Look for 6 digit vs. 8 digit version number to decide encoding.
 * VVVV is no smaller than the current year when a version is released.
 */
#if __INTEL_LLVM_COMPILER < 1000000L
# define COMPILER_VERSION_MAJOR DEC(__INTEL_LLVM_COMPILER/100)
# define COMPILER_VERSION_MINOR DEC(__INTEL_LLVM_COMPILER/10 % 10)
# define COMPILER_VERSION_PATCH DEC(__INTEL_LLVM_COMPILER    % 10)
#else
# define COMPILER_VERSION_MAJOR DEC(__INTEL_LLVM_COMPILER/10000)
# define COMPILER_VERSION_MINOR DEC(__INTEL_LLVM_COMPILER/100 % 100)
# define COMPILER_VERSION_PATCH DEC(__INTEL_LLVM_COMPILER     % 100)
#endif
#if defined(_MSC_VER)
  /* _MSC_VER = VVRR */
# define SIMULATE_VERSION_MAJOR DEC(_MSC_VER / 100)
# define SIMULATE_VERSION_MINOR DEC(_MSC_VER % 100)
#endif
#if defined(__GNUC__)
# define SIMULATE_VERSION_MAJOR DEC(__GNUC__)
#elif defined(__GNUG__)
# define SIMULATE_VERSION_MAJOR DEC(__GNUG__)
#endif
#if defined(__GNUC_MINOR__)
# define SIMULATE_VERSION_MINOR DEC(__GNUC_MINOR__)
#endif
#if defined(__GNUC_PATCHLEVEL__)
# define SIMULATE_VERSION_PATCH DEC(__GNUC_PATCHLEVEL__)
#endif

#elif defined(__PATHCC__)
# define COMPILER_ID "PathScale"
# define COMPILER_VERSION_MAJOR DEC(__PATHCC__)
# define COMPILER_VERSION_MINOR DEC(__PATHCC_MINOR__)
# if defined(__PATHCC_PATCHLEVEL__)
#  define COMPILER_VERSION_PATCH DEC(__PATHCC_PATCHLEVEL__)
# endif

#elif defined(__BORLANDC__) && defined(__CODEGEARC_VERSION__)
# define COMPILER_ID "Embarcadero"
# define COMPILER_VERSION_MAJOR HEX(__CODEGEARC_VERSION__>>24 & 0x00FF)
# define COMPILER_VERSION_MINOR HEX(__CODEGEARC_VERSION__>>16 & 0x00FF)
# define COMPILER_VERSION_PATCH DEC(__CODEGEARC_VERSION__     & 0xFFFF)

#elif defined(__BORLANDC__)
# define COMPILER_ID "Borland"
  /* __BORLANDC__ = 0xVRR */
# define COMPILER_VERSION_MAJOR HEX(__BORLANDC__>>8)
# define COMPILER_VERSION_MINOR HEX(__BORLANDC__ & 0xFF)

#elif defined(__WATCOMC__) && __WATCOMC__ < 1200
# define COMPILER_ID "Watcom"
   /* __WATCOMC__ = VVRR */
# define COMPILER_VERSION_MAJOR DEC(__WATCOMC__ / 100)
# define COMPILER_VERSION_MINOR DEC((__WATCOMC__ / 10) % 10)
# if (__WATCOMC__ % 10) > 0
#  define COMPILER_VERSION_PATCH DEC(__WATCOMC__ % 10)
# endif

#elif defined(__WATCOMC__)
# define COMPILER_ID "OpenWatcom"
   /* __WATCOMC__ = VVRP + 1100 */
# define COMPILER_VERSION_MAJOR DEC((__WATCOMC__ - 1100) / 100)
# define COMPILER_VERSION_MINOR DEC((__WATCOMC__ / 10) % 10)
# if (__WATCOMC__ % 10) > 0
#  define COMPILER_VERSION_PATCH DEC(__WATCOMC__ % 10)
# endif

#elif defined(__SUNPRO_CC)
# define COMPILER_ID "SunPro"
# if __SUNPRO_CC >= 0x5100
   /* __SUNPRO_CC = 0xVRRP */
#  define COMPILER_VERSION_MAJOR HEX(__SUNPRO_CC>>12)
#  define COMPILER_VERSION_MINOR HEX(__SUNPRO_CC>>4 & 0xFF)
#  define COMPILER_VERSION_PATCH HEX(__SUNPRO_CC    & 0xF)
# else
   /* __SUNPRO_CC = 0xVRP */
#  define COMPILER_VERSION_MAJOR HEX(__SUNPRO_CC>>8)
#  define COMPILER_VERSION_MINOR HEX(__SUNPRO_CC>>4 & 0xF)
#  define COMPILER_VERSION_PATCH HEX(__SUNPRO_CC    & 0xF)
# endif

#elif defined(__HP_aCC)
# define COMPILER_ID "HP"
  /* __HP_aCC = VVRRPP */
# define COMPILER_VERSION_MAJOR DEC(__HP_aCC/10000)
# define COMPILER_VERSION_MINOR DEC(__HP_aCC/100 % 100)
# define COMPILER_VERSION_PATCH DEC(__HP_aCC     % 100)

#elif defined(__DECCXX)
# define COMPILER_ID "Compaq"
  /* __DECCXX_VER = VVRRTPPPP */
# define COMPILER_VERSION_MAJOR DEC(__DECCXX_VER/10000000)
# define COMPILER_VERSION_MINOR DEC(__DECCXX_VER/100000  % 100)
# define COMPILER_VERSION_PATCH DEC(__DECCXX_VER         % 10000)

#elif defined(__IBMCPP__) && defined(__COMPILER_VER__)
# define COMPILER_ID "zOS"
  /* __IBMCPP__ = VRP */
# define COMPILER_VERSION_MAJOR DEC(__IBMCPP__/100)
# define COMPILER_VERSION_MINOR DEC(__IBMCPP__/10 % 10)
# define COMPILER_VERSION_PATCH DEC(__IBMCPP__    % 10)

#elif defined(__open_xl__) && defined(__clang__)
# define COMPILER_ID "IBMClang"
# define COMPILER_VERSION_MAJOR DEC(__open_xl_version__)
# define COMPILER_VERSION_MINOR DEC(__open_xl_release__)
# define COMPILER_VERSION_PATCH DEC(__open_xl_modification__)
# define COMPILER_VERSION_TWEAK DEC(__open_xl_ptf_fix_level__)
# define COMPILER_VERSION_INTERNAL_STR  __clang_version__


#elif defined(__ibmxl__) && defined(__clang__)
# define COMPILER_ID "XLClang"
# define COMPILER_VERSION_MAJOR DEC(__ibmxl_version__)
# define COMPILER_VERSION_MINOR DEC(__ibmxl_release__)
# define COMPILER_VERSION_PATCH DEC(__ibmxl_modification__)
# define COMPILER_VERSION_TWEAK DEC(__ibmxl_ptf_fix_level__)


#elif defined(__IBMCPP__) && !defined(__COMPILER_VER__) && __IBMCPP__ >= 800
# define COMPILER_ID "XL"
  /* __IBMCPP__ = VRP */
# define COMPILER_VERSION_MAJOR DEC(__IBMCPP__/100)
# define COMPILER_VERSION_MINOR DEC(__IBMCPP__/10 % 10)
# define COMPILER_VERSION_PATCH DEC(__IBMCPP__    % 10)

#elif defined(__IBMCPP__) && !defined(__COMPILER_VER__) && __IBMCPP__ < 800
# define COMPILER_ID "VisualAge"
  /* __IBMCPP__ = VRP */
# define COMPILER_VERSION_MAJOR DEC(__IBMCPP__/100)
# define COMPILER_VERSION_MINOR DEC(__IBMCPP__/10 % 10)
# define COMPILER_VERSION_PATCH DEC(__IBMCPP__    % 10)

#elif defined(__NVCOMPILER)
# define COMPILER_ID "NVHPC"
# define COMPILER_VERSION_MAJOR DEC(__NVCOMPILER_MAJOR__)
# define COMPILER_VERSION_MINOR DEC(__NVCOMPILER_MINOR__)
# if defined(__NVCOMPILER_PATCHLEVEL__)
#  define COMPILER_VERSION_PATCH DEC(__NVCOMPILER_PATCHLEVEL__)
# endif

#elif defined(__PGI)
# define COMPILER_ID "PGI"
# define COMPILER_VERSION_MAJOR DEC(__PGIC__)
# define COMPILER_VERSION_MINOR DEC(__PGIC_MINOR__)
# if defined(__PGIC_PATCHLEVEL__)
#  define COMPILER_VERSION_PATCH DEC(__PGIC_PATCHLEVEL__)
# endif

#elif defined(__clang__) && defined(__cray__)
# define COMPILER_ID "CrayClang"
# define COMPILER_VERSION_MAJOR DEC(__cray_major__)
# define COMPILER_VERSION_MINOR DEC(__cray_minor__)
# define COMPILER_VERSION_PATCH DEC(__cray_patchlevel__)
# define COMPILER_VERSION_INTERNAL_STR __clang_version__


#elif defined(_CRAYC)
# define COMPILER_ID "Cray"
# define COMPILER_VERSION_MAJOR DEC(_RELEASE_MAJOR)
# define COMPILER_VERSION_MINOR DEC(_RELEASE_MINOR)

#elif defined(__TI_COMPILER_VERSION__)
# define COMPILER_ID "TI"
  /* __TI_COMPILER_VERSION__ = VVVRRRPPP */
# define COMPILER_VERSION_MAJOR DEC(__TI_COMPILER_VERSION__/1000000)
# define COMPILER_VERSION_MINOR DEC(__TI_COMPILER_VERSION__/1000   % 1000)
# define COMPILER_VERSION_PATCH DEC(__TI_COMPILER_VERSION__        % 1000)

#elif defined(__CLANG_FUJITSU)
# define COMPILER_ID "FujitsuClang"
# define COMPILER_VERSION_MAJOR DEC(__FCC_major__)
# define COMPILER_VERSION_MINOR DEC(__FCC_minor__)
# define COMPILER_VERSION_PATCH DEC(__FCC_patchlevel__)
# define COMPILER_VERSION_INTERNAL_STR __clang_version__


#elif defined(__FUJITSU)
# define COMPILER_ID "Fujitsu"
# if defined(__FCC_version__)
#   define COMPILER_VERSION __FCC_version__
# elif defined(__FCC_major__)
#   define COMPILER_VERSION_MAJOR DEC(__FCC_major__)
#   define COMPILER_VERSION_MINOR DEC(__FCC_minor__)
#   define COMPILER_VERSION_PATCH DEC(__FCC_patchlevel__)
# endif
# if defined(__fcc_version)
#   define COMPILER_VERSION_INTERNAL DEC(__fcc_version)
# elif defined(__FCC_VERSION)
#   define COMPILER_VERSION_INTERNAL DEC(__FCC_VERSION)
# endif


#elif defined(__ghs__)
# define COMPILER_ID "GHS"
/* __GHS_VERSION_NUMBER = VVVVRP */
# ifdef __GHS_VERSION_NUMBER
# define COMPILER_VERSION_MAJOR DEC(__GHS_VERSION_NUMBER / 100)
# define COMPILER_VERSION_MINOR DEC(__GHS_VERSION_NUMBER / 10 % 10)
# define COMPILER_VERSION_PATCH DEC(__GHS_VERSION_NUMBER      % 10)
# endif

#elif defined(__TASKING__)
# define COMPILER_ID "Tasking"
  # define COMPILER_VERSION_MAJOR DEC(__VERSION__/1000)
  # define COMPILER_VERSION_MINOR DEC(__VERSION__ % 100)
# define COMPILER_VERSION_INTERNAL DEC(__VERSION__)

#elif defined(__ORANGEC__)
# define COMPILER_ID "OrangeC"
# define COMPILER_VERSION_MAJOR DEC(__ORANGEC_MAJOR__)
# define COMPILER_VERSION_MINOR DEC(__ORANGEC_MINOR__)
# define COMPILER_VERSION_PATCH DEC(__ORANGEC_PATCHLEVEL__)

#elif defined(__RENESAS__)
# define COMPILER_ID "Renesas"
/* __RENESAS_VERSION__ = 0xVVRRPP00 */
# define COMPILER_VERSION_MAJOR HEX(__RENESAS_VERSION__ >> 24 & 0xFF)
# define COMPILER_VERSION_MINOR HEX(__RENESAS_VERSION__ >> 16 & 0xFF)
# define COMPILER_VERSION_PATCH HEX(__RENESAS_VERSION__ >> 8  & 0xFF)

#elif defined(__SCO_VERSION__)
# define COMPILER_ID "SCO"

#elif defined(__ARMCC_VERSION) && !defined(__clang__)
# define COMPILER_ID "ARMCC"
#if __ARMCC_VERSION >= 1000000
  /* __ARMCC_VERSION = VRRPPPP */
  # define COMPILER_VERSION_MAJOR DEC(__ARMCC_VERSION/1000000)
  # define COMPILER_VERSION_MINOR DEC(__ARMCC_VERSION/10000 % 100)
  # define COMPILER_VERSION_PATCH DEC(__ARMCC_VERSION     % 10000)
#else
  /* __ARMCC_VERSION = VRPPPP */
  # define COMPILER_VERSION_MAJOR DEC(__ARMCC_VERSION/100000)
  # define COMPILER_VERSION_MINOR DEC(__ARMCC_VERSION/10000 % 10)
  # define COMPILER_VERSION_PATCH DEC(__ARMCC_VERSION    % 10000)
#endif


#elif defined(__clang__) && defined(__apple_build_version__)
# define COMPILER_ID "AppleClang"
# if defined(_MSC_VER)
#  define SIMULATE_ID "MSVC"
# endif
# define COMPILER_VERSION_MAJOR DEC(__clang_major__)
# define COMPILER_VERSION_MINOR DEC(__clang_minor__)
# define COMPILER_VERSION_PATCH DEC(__clang_patchlevel__)
# if defined(_MSC_VER)
   /* _MSC_VER = VVRR */
#  define SIMULATE_VERSION_MAJOR DEC(_MSC_VER / 100)
#  define SIMULATE_VERSION_MINOR DEC(_MSC_VER % 100)
# endif
# define COMPILER_VERSION_TWEAK DEC(__apple_build_version__)

#elif defined(__clang__) && defined(__ARMCOMPILER_VERSION)
# define COMPILER_ID "ARMClang"
  # define COMPILER_VERSION_MAJOR DEC(__ARMCOMPILER_VERSION/1000000)
  # define COMPILER_VERSION_MINOR DEC(__ARMCOMPILER_VERSION/10000 % 100)
  # define COMPILER_VERSION_PATCH DEC(__ARMCOMPILER_VERSION/100   % 100)
# define COMPILER_VERSION_INTERNAL DEC(__ARMCOMPILER_VERSION)

#elif defined(__clang__) && defined(__ti__)
# define COMPILER_ID "TIClang"
  # define COMPILER_VERSION_MAJOR DEC(__ti_major__)
  # define COMPILER_VERSION_MINOR DEC(__ti_minor__)
  # define COMPILER_VERSION_PATCH DEC(__ti_patchlevel__)
# define COMPILER_VERSION_INTERNAL DEC(__ti_version__)

#elif defined(__clang__)
# define COMPILER_ID "Clang"
# if defined(_MSC_VER)
#  define SIMULATE_ID "MSVC"
# endif
# define COMPILER_VERSION_MAJOR DEC(__clang_major__)
# define COMPILER_VERSION_MINOR DEC(__clang_minor__)
# define COMPILER_VERSION_PATCH DEC(__clang_patchlevel__)
# if defined(_MSC_VER)
   /* _MSC_VER = VVRR */
#  define SIMULATE_VERSION_MAJOR DEC(_MSC_VER / 100)
#  define SIMULATE_VERSION_MINOR DEC(_MSC_VER % 100)
# endif

#elif defined(__LCC__) && (defined(__GNUC__) || defined(__GNUG__) || defined(__MCST__))
# define COMPILER_ID "LCC"
# define COMPILER_VERSION_MAJOR DEC(__LCC__ / 100)
# define COMPILER_VERSION_MINOR DEC(__LCC__ % 100)
# if defined(__LCC_MINOR__)
#  define COMPILER_VERSION_PATCH DEC(__LCC_MINOR__)
# endif
# if defined(__GNUC__) && defined(__GNUC_MINOR__)
#  define SIMULATE_ID "GNU"
#  define SIMULATE_VERSION_MAJOR DEC(__GNUC__)
#  define SIMULATE_VERSION_MINOR DEC(__GNUC_MINOR__)
#  if defined(__GNUC_PATCHLEVEL__)
#   define SIMULATE_VERSION_PATCH DEC(__GNUC_PATCHLEVEL__)
#  endif
# endif

#elif defined(__GNUC__) || defined(__GNUG__)
# define COMPILER_ID "GNU"
# if defined(__GNUC__)
#  define COMPILER_VERSION_MAJOR DEC(__GNUC__)
# else
#  define COMPILER_VERSION_MAJOR DEC(__GNUG__)
# endif
# if defined(__GNUC_MINOR__)
#  define COMPILER_VERSION_MINOR DEC(__GNUC_MINOR__)
# endif
# if defined(__GNUC_PATCHLEVEL__)
#  define COMPILER_VERSION_PATCH DEC(__GNUC_PATCHLEVEL__)
# endif

#elif defined(_MSC_VER)
# define COMPILER_ID "MSVC"
  /* _MSC_VER = VVRR */
# define COMPILER_VERSION_MAJOR DEC(_MSC_VER / 100)
# define COMPILER_VERSION_MINOR DEC(_MSC_VER % 100)
# if defined(_MSC_FULL_VER)
#  if _MSC_VER >= 1400
    /* _MSC_FULL_VER = VVRRPPPPP */
#   define COMPILER_VERSION_PATCH DEC(_MSC_FULL_VER % 100000)
#  else
    /* _MSC_FULL_VER = VVRRPPPP */
#   define COMPILER_VERSION_PATCH DEC(_MSC_FULL_VER % 10000)
#  endif
# endif
# if defined(_MSC_BUILD)
#  define COMPILER_VERSION_TWEAK DEC(_MSC_BUILD)
# endif

#elif defined(_ADI_COMPILER)
# define COMPILER_ID "ADSP"
#if defined(__VERSIONNUM__)
  /* __VERSIONNUM__ = 0xVVRRPPTT */
#  define COMPILER_VERSION_MAJOR DEC(__VERSIONNUM__ >> 24 & 0xFF)
#  define COMPILER_VERSION_MINOR DEC(__VERSIONNUM__ >> 16 & 0xFF)
#  define COMPILER_VERSION_PATCH DEC(__VERSIONNUM__ >> 8 & 0xFF)
#  define COMPILER_VERSION_TWEAK DEC(__VERSIONNUM__ & 0xFF)
#endif

#elif defined(__IAR_SYSTEMS_ICC__) || defined(__IAR_SYSTEMS_ICC)
# define COMPILER_ID "IAR"
# if defined(__VER__) && defined(__ICCARM__)
#  define COMPILER_VERSION_MAJOR DEC((__VER__) / 1000000)
#  define COMPILER_VERSION_MINOR DEC(((__VER__) / 1000) % 1000)
#  define COMPILER_VERSION_PATCH DEC((__VER__) % 1000)
#  define COMPILER_VERSION_INTERNAL DEC(__IAR_SYSTEMS_ICC__)
# elif defined(__VER__) && (defined(__ICCAVR__) || defined(__ICCRX__) || defined(__ICCRH850__) || defined(__ICCRL78__) || defined(__ICC430__) || defined(__ICCRISCV__) || defined(__ICCV850__) || defined(__ICC8051__) || defined(__ICCSTM8__))
#  define COMPILER_VERSION_MAJOR DEC((__VER__) / 100)
#  define COMPILER_VERSION_MINOR DEC((__VER__) - (((__VER__) / 100)*100))
#  define COMPILER_VERSION_PATCH DEC(__SUBVERSION__)
#  define COMPILER_VERSION_INTERNAL DEC(__IAR_SYSTEMS_ICC__)
# endif

#elif defined(__DCC__) && defined(_DIAB_TOOL)
# define COMPILER_ID "Diab"
  # define COMPILER_VERSION_MAJOR DEC(__VERSION_MAJOR_NUMBER__)
  # define COMPILER_VERSION_MINOR DEC(__VERSION_MINOR_NUMBER__)
  # define COMPILER_VERSION_PATCH DEC(__VERSION_ARCH_FEATURE_NUMBER__)
  # define COMPILER_VERSION_TWEAK DEC(__VERSION_BUG_FIX_NUMBER__)



/* These compilers are either not known or too old to define an
  identification macro.  Try to identify the platform and guess that
  it is the native compiler.  */
#elif defined(__hpux) || defined(__hpua)
# define COMPILER_ID "HP"

#else /* unknown compiler */
# define COMPILER_ID ""
#endif

/* Construct the string literal in pieces to prevent the source from
   getting matched.  Store it in a pointer rather than an array
   because some compilers will just produce instructions to fill the
   array rather than assigning a pointer to a static array.  */
char const* info_compiler = "INFO" ":" "compiler[" COMPILER_ID "]";
#ifdef SIMULATE_ID
char const* info_simulate = "INFO" ":" "simulate[" SIMULATE_ID "]";
#endif

#ifdef __QNXNTO__
char const* qnxnto = "INFO" ":" "qnxnto[]";
#endif

#if defined(__CRAYXT_COMPUTE_LINUX_TARGET)
char const *info_cray = "INFO" ":" "compiler_wrapper[CrayPrgEnv]";
#endif

#define STRINGIFY_HELPER(X) #X
#define STRINGIFY(X) STRINGIFY_HELPER(X)

/* Identify known platforms by name.  */
#if defined(__linux) || defined(__linux__) || defined(linux)
# define PLATFORM_ID "Linux"

#elif defined(__MSYS__)
# define PLATFORM_ID "MSYS"

#elif defined(__CYGWIN__)
# define PLATFORM_ID "Cygwin"

#elif defined(__MINGW32__)
# define PLATFORM_ID "MinGW"

#elif defined(__APPLE__)
# define PLATFORM_ID "Darwin"

#elif defined(_WIN32) || defined(__WIN32__) || defined(WIN32)
# define PLATFORM_ID "Windows"

#elif defined(__FreeBSD__) || defined(__FreeBSD)
# define PLATFORM_ID "FreeBSD"

#elif defined(__NetBSD__) || defined(__NetBSD)
# define PLATFORM_ID "NetBSD"

#elif defined(__OpenBSD__) || defined(__OPENBSD)
# define PLATFORM_ID "OpenBSD"

#elif defined(__sun) || defined(sun)
# define PLATFORM_ID "SunOS"

#elif defined(_AIX) || defined(__AIX) || defined(__AIX__) || defined(__aix) || defined(__aix__)
# define PLATFORM_ID "AIX"

#elif defined(__hpux) || defined(__hpux__)
# define PLATFORM_ID "HP-UX"

#elif defined(__HAIKU__)
# define PLATFORM_ID "Haiku"

#elif defined(__BeOS) || defined(__BEOS__) || defined(_BEOS)
# define PLATFORM_ID "BeOS"

#elif defined(__QNX__) || defined(__QNXNTO__)
# define PLATFORM_ID "QNX"

#elif defined(__tru64) || defined(_tru64) || defined(__TRU64__)
# define PLATFORM_ID "Tru64"

#elif defined(__riscos) || defined(__riscos__)
# define PLATFORM_ID "RISCos"

#elif defined(__sinix) || defined(__sinix__) || defined(__SINIX__)
# define PLATFORM_ID "SINIX"

#elif defined(__UNIX_SV__)
# define PLATFORM_ID "UNIX_SV"

#elif defined(__bsdos__)
# define PLATFORM_ID "BSDOS"

#elif defined(_MPRAS) || defined(MPRAS)
# define PLATFORM_ID "MP-RAS"

#elif defined(__osf) || defined(__osf__)
# define PLATFORM_ID "OSF1"

#elif defined(_SCO_SV) || defined(SCO_SV) || defined(sco_sv)
# define PLATFORM_ID "SCO_SV"

#elif defined(__ultrix) || defined(__ultrix__) || defined(_ULTRIX)
# define PLATFORM_ID "ULTRIX"

#elif defined(__XENIX__) || defined(_XENIX) || defined(XENIX)
# define PLATFORM_ID "Xenix"

#elif defined(__WATCOMC__)
# if defined(__LINUX__)
#  define PLATFORM_ID "Linux"

# elif defined(__DOS__)
#  define PLATFORM_ID "DOS"

# elif defined(__OS2__)
#  define PLATFORM_ID "OS2"

# elif defined(__WINDOWS__)
#  define PLATFORM_ID "Windows3x"

# elif defined(__VXWORKS__)
#  define PLATFORM_ID "VxWorks"

# else /* unknown platform */
#  define PLATFORM_ID
# endif

#elif defined(__INTEGRITY)
# if defined(INT_178B)
#  define PLATFORM_ID "Integrity178"

# else /* regular Integrity */
#  define PLATFORM_ID "Integrity"
# endif

# elif defined(_ADI_COMPILER)
#  define PLATFORM_ID "ADSP"

#else /* unknown platform */
# define PLATFORM_ID

#endif

/* For windows compilers MSVC and Intel we can determine
   the architecture of the compiler being used.  This is because
   the compilers do not have flags that can change the architecture,
   but rather depend on which compiler is being used
*/
#if defined(_WIN32) && defined(_MSC_VER)
# if defined(_M_IA64)
#  define ARCHITECTURE_ID "IA64"

# elif defined(_M_ARM64EC)
#  define ARCHITECTURE_ID "ARM64EC"

# elif defined(_M_X64) || defined(_M_AMD64)
#  define ARCHITECTURE_ID "x64"

# elif defined(_M_IX86)
#  define ARCHITECTURE_ID "X86"

# elif defined(_M_ARM64)
#  define ARCHITECTURE_ID "ARM64"

# elif defined(_M_ARM)
#  if _M_ARM == 4
#   define ARCHITECTURE_ID "ARMV4I"
#  elif _M_ARM == 5
#   define ARCHITECTURE_ID "ARMV5I"
#  else
#   define ARCHITECTURE_ID "ARMV" STRINGIFY(_M_ARM)
#  endif

# elif defined(_M_MIPS)
#  define ARCHITECTURE_ID "MIPS"

# elif defined(_M_SH)
#  define ARCHITECTURE_ID "SHx"

# else /* unknown architecture */
#  define ARCHITECTURE_ID ""
# endif

#elif defined(__WATCOMC__)
# if defined(_M_I86)
#  define ARCHITECTURE_ID "I86"

# elif defined(_M_IX86)
#  define ARCHITECTURE_ID "X86"

# else /* unknown architecture */
#  define ARCHITECTURE_ID ""
# endif

#elif defined(__IAR_SYSTEMS_ICC__) || defined(__IAR_SYSTEMS_ICC)
# if defined(__ICCARM__)
#  define ARCHITECTURE_ID "ARM"

# elif defined(__ICCRX__)
#  define ARCHITECTURE_ID "RX"

# elif defined(__ICCRH850__)
#  define ARCHITECTURE_ID "RH850"

# elif defined(__ICCRL78__)
#  define ARCHITECTURE_ID "RL78"

# elif defined(__ICCRISCV__)
#  define ARCHITECTURE_ID "RISCV"

# elif defined(__ICCAVR__)
#  define ARCHITECTURE_ID "AVR"

# elif defined(__ICC430__)
#  define ARCHITECTURE_ID "MSP430"

# elif defined(__ICCV850__)
#  define ARCHITECTURE_ID "V850"

# elif defined(__ICC8051__)
#  define ARCHITECTURE_ID "8051"

# elif defined(__ICCSTM8__)
#  define ARCHITECTURE_ID "STM8"

# else /* unknown architecture */
#  define ARCHITECTURE_ID ""
# endif

#elif defined(__ghs__)
# if defined(__PPC64__)
#  define ARCHITECTURE_ID "PPC64"

# elif defined(__ppc__)
#  define ARCHITECTURE_ID "PPC"

# elif defined(__ARM__)
#  define ARCHITECTURE_ID "ARM"

# elif defined(__x86_64__)
#  define ARCHITECTURE_ID "x64"

# elif defined(__i386__)
#  define ARCHITECTURE_ID "X86"

# else /* unknown architecture */
#  define ARCHITECTURE_ID ""
# endif

#elif defined(__clang__) && defined(__ti__)
# if defined(__ARM_ARCH)
#  define ARCHITECTURE_ID "ARM"

# else /* unknown architecture */
#  define ARCHITECTURE_ID ""
# endif

#elif defined(__TI_COMPILER_VERSION__)
# if defined(__TI_ARM__)
#  define ARCHITECTURE_ID "ARM"

# elif defined(__MSP430__)
#  define ARCHITECTURE_ID "MSP430"

# elif defined(__TMS320C28XX__)
#  define ARCHITECTURE_ID "TMS320C28x"

# elif defined(__TMS320C6X__) || defined(_TMS320C6X)
#  define ARCHITECTURE_ID "TMS320C6x"

# else /* unknown architecture */
#  define ARCHITECTURE_ID ""
# endif

# elif defined(__ADSPSHARC__)
#  define ARCHITECTURE_ID "SHARC"

# elif defined(__ADSPBLACKFIN__)
#  define ARCHITECTURE_ID "Blackfin"

#elif defined(__TASKING__)

# if defined(__CTC__) || defined(__CPTC__)
#  define ARCHITECTURE_ID "TriCore"

# elif defined(__CMCS__)
#  define ARCHITECTURE_ID "MCS"

# elif defined(__CARM__) || defined(__CPARM__)
#  define ARCHITECTURE_ID "ARM"

# elif defined(__CARC__)
#  define ARCHITECTURE_ID "ARC"

# elif defined(__C51__)
#  define ARCHITECTURE_ID "8051"

# elif defined(__CPCP__)
#  define ARCHITECTURE_ID "PCP"

# else
#  define ARCHITECTURE_ID ""
# endif

#elif defined(__RENESAS__)
# if defined(__CCRX__)
#  define ARCHITECTURE_ID "RX"

# elif defined(__CCRL__)
#  define ARCHITECTURE_ID "RL78"

# elif defined(__CCRH__)
#  define ARCHITECTURE_ID "RH850"

# else
#  define ARCHITECTURE_ID ""
# endif

#else
#  define ARCHITECTURE_ID
#endif

/* Convert integer to decimal digit literals.  */
#define DEC(n)                   \
  ('0' + (((n) / 10000000)%10)), \
  ('0' + (((n) / 1000000)%10)),  \
  ('0' + (((n) / 100000)%10)),   \
  ('0' + (((n) / 10000)%10)),    \
  ('0' + (((n) / 1000)%10)),     \
  ('0' + (((n) / 100)%10)),      \
  ('0' + (((n) / 10)%10)),       \
  ('0' +  ((n) % 10))

/* Convert integer to hex digit literals.  */
#define HEX(n)             \
  ('0' + ((n)>>28 & 0xF)), \
  ('0' + ((n)>>24 & 0xF)), \
  ('0' + ((n)>>20 & 0xF)), \
  ('0' + ((n)>>16 & 0xF)), \
  ('0' + ((n)>>12 & 0xF)), \
  ('0' + ((n)>>8  & 0xF)), \
  ('0' + ((n)>>4  & 0xF)), \
  ('0' + ((n)     & 0xF))

/* Construct a string literal encoding the version number. */
#ifdef COMPILER_VERSION
char const* info_version = "INFO" ":" "compiler_version[" COMPILER_VERSION "]";

/* Construct a string literal encoding the version number components. */
#elif defined(COMPILER_VERSION_MAJOR)
char const info_version[] = {
  'I', 'N', 'F', 'O', ':',
  'c','o','m','p','i','l','e','r','_','v','e','r','s','i','o','n','[',
  COMPILER_VERSION_MAJOR,
# ifdef COMPILER_VERSION_MINOR
  '.', COMPILER_VERSION_MINOR,
#  ifdef COMPILER_VERSION_PATCH
   '.', COMPILER_VERSION_PATCH,
#   ifdef COMPILER_VERSION_TWEAK
    '.', COMPILER_VERSION_TWEAK,
#   endif
#  endif
# endif
  ']','\0'};
#endif

/* Construct a string literal encoding the internal version number. */
#ifdef COMPILER_VERSION_INTERNAL
char const info_version_internal[] = {
  'I', 'N', 'F', 'O', ':',
  'c','o','m','p','i','l','e','r','_','v','e','r','s','i','o','n','_',
  'i','n','t','e','r','n','a','l','[',
  COMPILER_VERSION_INTERNAL,']','\0'};
#elif defined(COMPILER_VERSION_INTERNAL_STR)
char const* info_version_internal = "INFO" ":" "compiler_version_internal[" COMPILER_VERSION_INTERNAL_STR "]";
#endif

/* Construct a string literal encoding the version number components. */
#ifdef SIMULATE_VERSION_MAJOR
char const info_simulate_version[] = {
  'I', 'N', 'F', 'O', ':',
  's','i','m','u','l','a','t','e','_','v','e','r','s','i','o','n','[',
  SIMULATE_VERSION_MAJOR,
# ifdef SIMULATE_VERSION_MINOR
  '.', SIMULATE_VERSION_MINOR,
#  ifdef SIMULATE_VERSION_PATCH
   '.', SIMULATE_VERSION_PATCH,
#   ifdef SIMULATE_VERSION_TWEAK
    '.', SIMULATE_VERSION_TWEAK,
#   endif
#  endif
# endif
  ']','\0'};
#endif

/* Construct the string literal in pieces to prevent the source from
   getting matched.  Store it in a pointer rather than an array
   because some compilers will just produce instructions to fill the
   array rather than assigning a pointer to a static array.  */
char const* info_platform = "INFO" ":" "platform[" PLATFORM_ID "]";
char const* info_arch = "INFO" ":" "arch[" ARCHITECTURE_ID "]";



#define CXX_STD_98 199711L
#define CXX_STD_11 201103L
#define CXX_STD_14 201402L
#define CXX_STD_17 201703L
#define CXX_STD_20 202002L
#define CXX_STD_23 202302L

#if defined(__INTEL_COMPILER) && defined(_MSVC_LANG)
#  if _MSVC_LANG > CXX_STD_17
#    define CXX_STD _MSVC_LANG
#  elif _MSVC_LANG == CXX_STD_17 && defined(__cpp_aggregate_paren_init)
#    define CXX_STD CXX_STD_20
#  elif _MSVC_LANG > CXX_STD_14 && __cplusplus > CXX_STD_17
#    define CXX_STD CXX_STD_20
#  elif _MSVC_LANG > CXX_STD_14
#    define CXX_STD CXX_STD_17
#  elif defined(__INTEL_CXX11_MODE__) && defined(__cpp_aggregate_nsdmi)
#    define CXX_STD CXX_STD_14
#  elif defined(__INTEL_CXX11_MODE__)
#    define CXX_STD CXX_STD_11
#  else
#    define CXX_STD CXX_STD_98
#  endif
#elif defined(_MSC_VER) && defined(_MSVC_LANG)
#  if _MSVC_LANG > __cplusplus
#    define CXX_STD _MSVC_LANG
#  else
#    define CXX_STD __cplusplus
#  endif
#elif defined(__NVCOMPILER)
#  if __cplusplus == CXX_STD_17 && defined(__cpp_aggregate_paren_init)
#    define CXX_STD CXX_STD_20
#  else
#    define CXX_STD __cplusplus
#  endif
#elif defined(__INTEL_COMPILER) || defined(__PGI)
#  if __cplusplus == CXX_STD_11 && defined(__cpp_namespace_attributes)
#    define CXX_STD CXX_STD_17
#  elif __cplusplus == CXX_STD_11 && defined(__cpp_aggregate_nsdmi)
#    define CXX_STD CXX_STD_14
#  else
#    define CXX_STD __cplusplus
#  endif
#elif (defined(__IBMCPP__) || defined(__ibmxl__)) && defined(__linux__)
#  if __cplusplus == CXX_STD_11 && defined(__cpp_aggregate_nsdmi)
#    define CXX_STD CXX_STD_14
#  else
#    define CXX_STD __cplusplus
#  endif
#elif __cplusplus == 1 && defined(__GXX_EXPERIMENTAL_CXX0X__)
#  define CXX_STD CXX_STD_11
#else
#  define CXX_STD __cplusplus
#endif

const char* info_language_standard_default = "INFO" ":" "standard_default["
#if CXX_STD > CXX_STD_23
  "26"
#elif CXX_STD > CXX_STD_20
  "23"
#elif CXX_STD > CXX_STD_17
  "20"
#elif CXX_STD > CXX_STD_14
  "17"
#elif CXX_STD > CXX_STD_11
  "14"
#elif CXX_STD >= CXX_STD_11
  "11"
#else
  "98"
#endif
"]";

const char* info_language_extensions_default = "INFO" ":" "extensions_default["
#if (defined(__clang__) || defined(__GNUC__) || defined(__xlC__) ||           \
     defined(__TI_COMPILER_VERSION__) || defined(__RENESAS__)) &&             \
  !defined(__STRICT_ANSI__)
  "ON"
#else
  "OFF"
#endif
"]";

/*--------------------------------------------------------------------------*/

int main(int argc, char* argv[])
{
  int require = 0;
  require += info_compiler[argc];
  require += info_platform[argc];
  require += info_arch[argc];
#ifdef COMPILER_VERSION_MAJOR
  require += info_version[argc];
#endif
#if defined(COMPILER_VERSION_INTERNAL) || defined(COMPILER_VERSION_INTERNAL_STR)
  require += info_version_internal[argc];
#endif
#ifdef SIMULATE_ID
  require += info_simulate[argc];
#endif
#ifdef SIMULATE_VERSION_MAJOR
  require += info_simulate_version[argc];
#endif
#if defined(__CRAYXT_COMPUTE_LINUX_TARGET)
  require += info_cray[argc];
#endif
  require += info_language_standard_default[argc];
  require += info_language_extensions_default[argc];
  (void)argv;
  return require;
}


================================================================================
FILE: tests\behavior_tests.cpp
================================================================================

#include <gtest/gtest.h>
#include "../src/components/EntityBehavior.h"
#include "../src/factory/BehaviorRegistry.h"
#include "../src/systems/BehaviorSystem.h"
#include "../src/behaviors/CubeSpinBehavior.h"
#include "../src/behaviors/MovementBehavior.h"
#include "../src/core/Entity.h"
#include "../src/components/Transform.h"

namespace BehaviorTests
{

    // Mock Entity class for testing
    class MockEntity : public Core::Entity
    {
    public:
        MockEntity(Core::EntityId id) : entityId(id) {}

        Core::EntityId getId() const override { return entityId; }

        template <typename T>
        bool hasComponent() const { return components.find(typeid(T).name()) != components.end(); }

        template <typename T>
        T &getComponent()
        {
            auto it = components.find(typeid(T).name());
            if (it == components.end())
            {
                throw std::runtime_error("Component not found");
            }
            return *static_cast<T *>(it->second.get());
        }

        template <typename T>
        void addComponent(std::unique_ptr<T> component)
        {
            components[typeid(T).name()] = std::move(component);
        }

    private:
        Core::EntityId entityId;
        std::unordered_map<std::string, std::unique_ptr<void>> components;
    };

    // Test Behavior for testing purposes
    class TestBehavior : public Components::EntityBehavior
    {
    public:
        void initialize(Core::Entity &entity, const Assets::BehaviorParams &params) override
        {
            initialized = true;
            testValue = getParameter<float>("testValue", 0.0f);
            testString = getParameter<std::string>("testString", "default");
        }

        void update(float deltaTime) override
        {
            updateCount++;
            lastDeltaTime = deltaTime;
        }

        void cleanup() override
        {
            cleanedUp = true;
        }

        bool initialized = false;
        bool cleanedUp = false;
        int updateCount = 0;
        float lastDeltaTime = 0.0f;
        float testValue = 0.0f;
        std::string testString;
    };

    class BehaviorSystemTest : public ::testing::Test
    {
    protected:
        void SetUp() override
        {
            // Register test behavior
            Factory::BehaviorRegistry::instance().registerBehavior(
                "TestBehavior",
                []() -> std::unique_ptr<Components::EntityBehavior>
                {
                    return std::make_unique<TestBehavior>();
                });

            behaviorSystem.initialize();
        }

        void TearDown() override
        {
            behaviorSystem.shutdown();
            Factory::BehaviorRegistry::instance().clear();
        }

        Systems::BehaviorSystem behaviorSystem;
    };

    // Test Behavior Registry
    TEST_F(BehaviorSystemTest, BehaviorRegistryRegistersBehaviors)
    {
        auto &registry = Factory::BehaviorRegistry::instance();

        EXPECT_TRUE(registry.isBehaviorRegistered("TestBehavior"));

        auto behavior = registry.createBehavior("TestBehavior");
        EXPECT_NE(behavior, nullptr);

        auto nullBehavior = registry.createBehavior("NonExistentBehavior");
        EXPECT_EQ(nullBehavior, nullptr);

        auto registeredBehaviors = registry.getRegisteredBehaviors();
        EXPECT_GE(registeredBehaviors.size(), 1);
        EXPECT_TRUE(std::find(registeredBehaviors.begin(), registeredBehaviors.end(), "TestBehavior") != registeredBehaviors.end());
    }

    // Test Behavior Parameters
    TEST_F(BehaviorSystemTest, BehaviorParametersWork)
    {
        Assets::BehaviorParams params;
        params.setParameter("testValue", 42.5f);
        params.setParameter("testString", std::string("hello"));
        params.setParameter("testBool", true);

        EXPECT_EQ(params.getParameter<float>("testValue", 0.0f), 42.5f);
        EXPECT_EQ(params.getParameter<std::string>("testString", ""), "hello");
        EXPECT_EQ(params.getParameter<bool>("testBool", false), true);

        // Test default values
        EXPECT_EQ(params.getParameter<int>("nonExistent", 99), 99);
        EXPECT_EQ(params.getParameter<std::string>("nonExistent", "default"), "default");
    }

    // Test Behavior System
    TEST_F(BehaviorSystemTest, BehaviorSystemAttachesBehaviors)
    {
        MockEntity entity(1);
        entity.addComponent(std::make_unique<Components::Transform>());

        Assets::BehaviorParams params;
        params.setParameter("testValue", 123.45f);
        params.setParameter("testString", std::string("test"));

        bool attached = behaviorSystem.attachBehavior(entity, "TestBehavior", params);
        EXPECT_TRUE(attached);

        EXPECT_TRUE(behaviorSystem.hasBehaviors(entity.getId()));

        auto behaviors = behaviorSystem.getBehaviors(entity.getId());
        EXPECT_EQ(behaviors.size(), 1);

        auto *testBehavior = dynamic_cast<TestBehavior *>(behaviors[0]);
        ASSERT_NE(testBehavior, nullptr);
        EXPECT_TRUE(testBehavior->initialized);
        EXPECT_EQ(testBehavior->testValue, 123.45f);
        EXPECT_EQ(testBehavior->testString, "test");
    }

    TEST_F(BehaviorSystemTest, BehaviorSystemUpdatesBehaviors)
    {
        MockEntity entity(1);
        entity.addComponent(std::make_unique<Components::Transform>());

        Assets::BehaviorParams params;
        behaviorSystem.attachBehavior(entity, "TestBehavior", params);

        // Update behaviors
        float deltaTime = 0.016f; // ~60 FPS
        behaviorSystem.update(deltaTime);

        auto behaviors = behaviorSystem.getBehaviors(entity.getId());
        auto *testBehavior = dynamic_cast<TestBehavior *>(behaviors[0]);

        EXPECT_EQ(testBehavior->updateCount, 1);
        EXPECT_EQ(testBehavior->lastDeltaTime, deltaTime);

        // Update again
        behaviorSystem.update(deltaTime);
        EXPECT_EQ(testBehavior->updateCount, 2);
    }

    TEST_F(BehaviorSystemTest, BehaviorSystemRemovesBehaviors)
    {
        MockEntity entity(1);
        entity.addComponent(std::make_unique<Components::Transform>());

        Assets::BehaviorParams params;
        behaviorSystem.attachBehavior(entity, "TestBehavior", params);

        EXPECT_TRUE(behaviorSystem.hasBehaviors(entity.getId()));

        behaviorSystem.removeBehavior(entity.getId(), "TestBehavior");

        EXPECT_FALSE(behaviorSystem.hasBehaviors(entity.getId()));

        auto behaviors = behaviorSystem.getBehaviors(entity.getId());
        EXPECT_EQ(behaviors.size(), 0);
    }

    TEST_F(BehaviorSystemTest, BehaviorSystemCleansUpOnRemoval)
    {
        MockEntity entity(1);
        entity.addComponent(std::make_unique<Components::Transform>());

        Assets::BehaviorParams params;
        behaviorSystem.attachBehavior(entity, "TestBehavior", params);

        auto behaviors = behaviorSystem.getBehaviors(entity.getId());
        auto *testBehavior = dynamic_cast<TestBehavior *>(behaviors[0]);

        EXPECT_FALSE(testBehavior->cleanedUp);

        behaviorSystem.removeBehaviors(entity.getId());

        // Note: testBehavior pointer is now invalid, but we tested cleanup was called
    }

    // Test Multiple Behaviors on Same Entity
    TEST_F(BehaviorSystemTest, MultipleBehaviorsOnSameEntity)
    {
        MockEntity entity(1);
        entity.addComponent(std::make_unique<Components::Transform>());

        Assets::BehaviorParams params1;
        params1.setParameter("testValue", 1.0f);

        Assets::BehaviorParams params2;
        params2.setParameter("testValue", 2.0f);

        // Register a second behavior type
        Factory::BehaviorRegistry::instance().registerBehavior(
            "TestBehavior2",
            []() -> std::unique_ptr<Components::EntityBehavior>
            {
                return std::make_unique<TestBehavior>();
            });

        behaviorSystem.attachBehavior(entity, "TestBehavior", params1);
        behaviorSystem.attachBehavior(entity, "TestBehavior2", params2);

        auto behaviors = behaviorSystem.getBehaviors(entity.getId());
        EXPECT_EQ(behaviors.size(), 2);

        // Update and verify both behaviors are updated
        behaviorSystem.update(0.016f);

        for (auto *behavior : behaviors)
        {
            auto *testBehavior = dynamic_cast<TestBehavior *>(behavior);
            EXPECT_EQ(testBehavior->updateCount, 1);
        }
    }

    // Test Behavior System Statistics
    TEST_F(BehaviorSystemTest, BehaviorSystemProvidesBehaviorCount)
    {
        EXPECT_EQ(behaviorSystem.getBehaviorCount(), 0);

        MockEntity entity1(1);
        MockEntity entity2(2);
        entity1.addComponent(std::make_unique<Components::Transform>());
        entity2.addComponent(std::make_unique<Components::Transform>());

        Assets::BehaviorParams params;
        behaviorSystem.attachBehavior(entity1, "TestBehavior", params);
        behaviorSystem.attachBehavior(entity2, "TestBehavior", params);

        EXPECT_EQ(behaviorSystem.getBehaviorCount(), 2);

        behaviorSystem.removeBehaviors(entity1.getId());
        EXPECT_EQ(behaviorSystem.getBehaviorCount(), 1);
    }

    // Test Built-in Behaviors
    class BuiltinBehaviorTest : public ::testing::Test
    {
    protected:
        void SetUp() override
        {
            // CubeSpinBehavior and MovementBehavior are automatically registered
            // via REGISTER_BEHAVIOR macro in their implementation files
        }
    };

    TEST_F(BuiltinBehaviorTest, CubeSpinBehaviorIsRegistered)
    {
        auto &registry = Factory::BehaviorRegistry::instance();
        EXPECT_TRUE(registry.isBehaviorRegistered("CubeSpinBehavior"));

        auto behavior = registry.createBehavior("CubeSpinBehavior");
        EXPECT_NE(behavior, nullptr);

        auto *cubeSpin = dynamic_cast<Behaviors::CubeSpinBehavior *>(behavior.get());
        EXPECT_NE(cubeSpin, nullptr);
    }

    TEST_F(BuiltinBehaviorTest, MovementBehaviorIsRegistered)
    {
        auto &registry = Factory::BehaviorRegistry::instance();
        EXPECT_TRUE(registry.isBehaviorRegistered("MovementBehavior"));

        auto behavior = registry.createBehavior("MovementBehavior");
        EXPECT_NE(behavior, nullptr);

        auto *movement = dynamic_cast<Behaviors::MovementBehavior *>(behavior.get());
        EXPECT_NE(movement, nullptr);
    }

    // Integration Test: Scene Behavior Creation
    TEST_F(BehaviorSystemTest, CreateSceneBehaviorsWorks)
    {
        // Create a mock package with scene
        Assets::Package package;
        package.metadata.id = "test_package";

        // Create scene with entities that have behaviors
        Assets::SceneDefinition scene;
        scene.id = "TestScene";

        Assets::EntityDefinition entity;
        entity.id = "test_entity";

        Assets::BehaviorDefinition behavior;
        behavior.className = "TestBehavior";
        behavior.params.setParameter("testValue", 99.0f);

        entity.behaviors.push_back(behavior);
        scene.entities.push_back(entity);
        package.scenes.push_back(scene);

        // Create entity map
        MockEntity mockEntity(1);
        mockEntity.addComponent(std::make_unique<Components::Transform>());
        std::unordered_map<std::string, Core::Entity *> entities;
        entities["test_entity"] = &mockEntity;

        // Create scene behaviors
        size_t behaviorCount = behaviorSystem.createSceneBehaviors(package, "TestScene", entities);

        EXPECT_EQ(behaviorCount, 1);
        EXPECT_TRUE(behaviorSystem.hasBehaviors(mockEntity.getId()));

        auto behaviors = behaviorSystem.getBehaviors(mockEntity.getId());
        EXPECT_EQ(behaviors.size(), 1);

        auto *testBehavior = dynamic_cast<TestBehavior *>(behaviors[0]);
        EXPECT_EQ(testBehavior->testValue, 99.0f);
    }

} // namespace BehaviorTests


================================================================================
FILE: tests\package_tests.cpp
================================================================================

#include <gtest/gtest.h>
#include "../src/assets/PackageManager.h"
#include "../src/assets/PackageParser.h"
#include "../src/assets/AssetRegistry.h"
#include "../src/core/PackageBootstrap.h"
#include <filesystem>
#include <fstream>

namespace PackageTests
{

    class PackageSystemTest : public ::testing::Test
    {
    protected:
        void SetUp() override
        {
            // Create test directory structure
            testDir = std::filesystem::temp_directory_path() / "package_tests";
            std::filesystem::create_directories(testDir);
            std::filesystem::create_directories(testDir / "test_package");
            std::filesystem::create_directories(testDir / "test_package" / "assets" / "meshes");
            std::filesystem::create_directories(testDir / "test_package" / "assets" / "materials");

            // Create test package.xml
            createTestPackageXml();
            createTestAssetFiles();
        }

        void TearDown() override
        {
            // Cleanup test directory
            std::filesystem::remove_all(testDir);
        }

        void createTestPackageXml()
        {
            std::ofstream packageXml(testDir / "test_package" / "package.xml");
            packageXml << R"(<?xml version="1.0" encoding="UTF-8"?>
<package id="test_package" version="1.0.0" name="Test Package">
    <metadata>
        <description>Test package for unit testing</description>
        <author>Test Framework</author>
    </metadata>
    
    <dependencies>
        <dependency package="core" version="1.0.0" required="true" />
    </dependencies>
    
    <assets>
        <asset id="test_cube" type="mesh" path="assets/meshes/cube.obj" />
        <asset id="red_material" type="material" path="assets/materials/red.mat" />
        <asset id="test_texture" type="texture" path="assets/textures/test.png" />
    </assets>
    
    <scenes>
        <scene id="TestScene" name="Test Scene">
            <entities>
                <entity id="spinning_cube" name="Spinning Cube">
                    <transform position="0,0,0" rotation="0,0,0,1" scale="1,1,1" />
                    <mesh asset="test_cube" />
                    <material asset="red_material" />
                    <behavior codeBehind="CubeSpinBehavior">
                        <param name="speed" value="45.0" />
                        <param name="axisY" value="1.0" />
                    </behavior>
                </entity>
                
                <entity id="moving_object" name="Moving Object">
                    <transform position="5,0,0" rotation="0,0,0,1" scale="0.5,0.5,0.5" />
                    <mesh asset="test_cube" />
                    <behavior codeBehind="MovementBehavior">
                        <param name="type" value="linear" />
                        <param name="speed" value="2.0" />
                        <param name="directionX" value="1.0" />
                    </behavior>
                </entity>
            </entities>
        </scene>
    </scenes>
</package>)";
            packageXml.close();
        }

        void createTestAssetFiles()
        {
            // Create dummy asset files
            std::ofstream(testDir / "test_package" / "assets" / "meshes" / "cube.obj") << "# Test cube mesh\n";
            std::ofstream(testDir / "test_package" / "assets" / "materials" / "red.mat") << "# Test red material\n";
            std::ofstream(testDir / "test_package" / "assets" / "textures" / "test.png") << "# Test texture data\n";
        }

        std::filesystem::path testDir;
    };

    // Test Package Parser
    TEST_F(PackageSystemTest, PackageParserLoadsValidPackage)
    {
        Assets::PackageParser parser;
        auto result = parser.loadPackage((testDir / "test_package" / "package.xml").string());

        EXPECT_TRUE(result.success);
        EXPECT_TRUE(result.errors.empty());
        EXPECT_EQ(result.package.metadata.id, "test_package");
        EXPECT_EQ(result.package.metadata.version, "1.0.0");
        EXPECT_EQ(result.package.metadata.name, "Test Package");
        EXPECT_EQ(result.package.assets.size(), 3);
        EXPECT_EQ(result.package.scenes.size(), 1);

        // Check asset details
        const auto *cubeAsset = result.package.findAsset("test_cube");
        ASSERT_NE(cubeAsset, nullptr);
        EXPECT_EQ(cubeAsset->type, Assets::AssetType::Mesh);
        EXPECT_EQ(cubeAsset->path, "assets/meshes/cube.obj");

        // Check scene details
        const auto *testScene = result.package.findScene("TestScene");
        ASSERT_NE(testScene, nullptr);
        EXPECT_EQ(testScene->entities.size(), 2);

        // Check entity with behavior
        const auto &spinningCube = testScene->entities[0];
        EXPECT_EQ(spinningCube.id, "spinning_cube");
        EXPECT_EQ(spinningCube.behaviors.size(), 1);
        EXPECT_EQ(spinningCube.behaviors[0].className, "CubeSpinBehavior");
        EXPECT_EQ(spinningCube.behaviors[0].params.getParameter<float>("speed", 0.0f), 45.0f);
    }

    TEST_F(PackageSystemTest, PackageParserHandlesInvalidXml)
    {
        // Create invalid XML file
        std::ofstream invalidXml(testDir / "invalid.xml");
        invalidXml << "<?xml version=\"1.0\"?>\n<invalid><unclosed>";
        invalidXml.close();

        Assets::PackageParser parser;
        auto result = parser.loadPackage((testDir / "invalid.xml").string());

        EXPECT_FALSE(result.success);
        EXPECT_FALSE(result.errors.empty());
    }

    // Test Package Manager
    TEST_F(PackageSystemTest, PackageManagerLoadsPackage)
    {
        Assets::PackageManager manager;
        auto result = manager.loadPackage((testDir / "test_package" / "package.xml").string());

        EXPECT_TRUE(result.success);
        EXPECT_TRUE(manager.isPackageLoaded("test_package"));

        const auto *package = manager.getPackage("test_package");
        ASSERT_NE(package, nullptr);
        EXPECT_EQ(package->metadata.id, "test_package");
    }

    TEST_F(PackageSystemTest, PackageManagerDiscovery)
    {
        Assets::PackageManager manager;
        auto discoveryResult = manager.discoverPackages(testDir.string());

        EXPECT_TRUE(discoveryResult.errors.empty());
        EXPECT_EQ(discoveryResult.packagePaths.size(), 1);
        EXPECT_EQ(discoveryResult.packagePaths[0], (testDir / "test_package" / "package.xml").string());
    }

    TEST_F(PackageSystemTest, PackageManagerUnloadsPackage)
    {
        Assets::PackageManager manager;
        auto result = manager.loadPackage((testDir / "test_package" / "package.xml").string());
        EXPECT_TRUE(result.success);

        bool unloaded = manager.unloadPackage("test_package");
        EXPECT_TRUE(unloaded);
        EXPECT_FALSE(manager.isPackageLoaded("test_package"));
    }

    // Test Asset Registry
    TEST_F(PackageSystemTest, AssetRegistryRegistersPackageAssets)
    {
        // Load package first
        Assets::PackageParser parser;
        auto parseResult = parser.loadPackage((testDir / "test_package" / "package.xml").string());
        ASSERT_TRUE(parseResult.success);

        // Register assets
        Assets::AssetRegistry registry;
        registry.initialize();
        registry.registerPackageAssets(parseResult.package);

        // Check if assets are registered
        auto assetsByPackage = registry.getAssetsByPackage("test_package");
        EXPECT_EQ(assetsByPackage.size(), 3);

        auto meshAssets = registry.getAssetsByType(Assets::AssetType::Mesh);
        EXPECT_GE(meshAssets.size(), 1);

        // Test asset resolution
        auto assetId = registry.resolveAssetReference("test_package", "test_cube");
        EXPECT_TRUE(assetId.has_value());

        const auto *assetInfo = registry.getAssetInfo(assetId.value());
        ASSERT_NE(assetInfo, nullptr);
        EXPECT_EQ(assetInfo->assetName, "test_cube");
        EXPECT_EQ(assetInfo->type, Assets::AssetType::Mesh);

        registry.shutdown();
    }

    // Test Bootstrap System
    TEST_F(PackageSystemTest, BootstrapInitializesSuccessfully)
    {
        Core::PackageBootstrap bootstrap;
        Core::PackageBootstrap::BootstrapConfig config;
        config.packagesDirectory = testDir.string();
        config.requiredPackages = {"test_package"};
        config.enableHotReload = false;
        config.preloadAssets = false;

        bool initialized = bootstrap.initialize(config);
        EXPECT_TRUE(initialized);

        auto stats = bootstrap.getStats();
        EXPECT_EQ(stats.packagesLoaded, 1);

        // Test container access
        auto &container = bootstrap.getContainer();
        auto packageManager = container.resolve<Assets::PackageManager>();
        EXPECT_NE(packageManager, nullptr);
        EXPECT_TRUE(packageManager->isPackageLoaded("test_package"));

        bootstrap.shutdown();
    }

    // Test Asset ID Generation
    TEST_F(PackageSystemTest, AssetIdGenerationIsConsistent)
    {
        std::string packageId = "test_package";
        std::string assetName = "test_cube";

        Assets::AssetId id1 = Assets::AssetIdGenerator::generateAssetId(packageId, assetName);
        Assets::AssetId id2 = Assets::AssetIdGenerator::generateAssetId(packageId, assetName);

        EXPECT_EQ(id1, id2); // Same inputs should produce same ID

        Assets::AssetId id3 = Assets::AssetIdGenerator::generateAssetId(packageId, "different_asset");
        EXPECT_NE(id1, id3); // Different inputs should produce different IDs
    }

    // Test Dependency Resolution
    TEST_F(PackageSystemTest, DependencyValidationWorks)
    {
        // Create a package with dependencies
        std::filesystem::create_directories(testDir / "dependent_package");

        std::ofstream depPackageXml(testDir / "dependent_package" / "package.xml");
        depPackageXml << R"(<?xml version="1.0" encoding="UTF-8"?>
<package id="dependent_package" version="1.0.0" name="Dependent Package">
    <dependencies>
        <dependency package="test_package" version="1.0.0" required="true" />
    </dependencies>
    <assets></assets>
    <scenes></scenes>
</package>)";
        depPackageXml.close();

        Assets::PackageManager manager;

        // Load dependency first
        auto result1 = manager.loadPackage((testDir / "test_package" / "package.xml").string());
        EXPECT_TRUE(result1.success);

        // Load dependent package
        auto result2 = manager.loadPackage((testDir / "dependent_package" / "package.xml").string());
        EXPECT_TRUE(result2.success);

        // Test load order calculation
        auto loadOrder = manager.getLoadOrder({"test_package", "dependent_package"});
        EXPECT_EQ(loadOrder.size(), 2);
        EXPECT_EQ(loadOrder[0], "test_package"); // Dependency should come first
        EXPECT_EQ(loadOrder[1], "dependent_package");
    }

} // namespace PackageTests


================================================================================
FILE: tests\scene_renderer_test.cpp
================================================================================

#include <gtest/gtest.h>
#include "../src/rendering/SceneRenderer.h"
#include "../src/core/AssetManager.h"

class SceneRendererTest : public ::testing::Test
{
protected:
    void SetUp() override
    {
        // Set up the asset manager
        assetManager.initialize("internal_assets", "assets");
    }

    AssetManager assetManager;
    SceneRenderer sceneRenderer;
};

// Test that the renderer initializes correctly
TEST_F(SceneRendererTest, InitializeWorks)
{
    bool result = sceneRenderer.initialize("scene.green_cubes", assetManager);
    EXPECT_TRUE(result);
}

// Test the update method changes rotation values
TEST_F(SceneRendererTest, UpdateChangesRotation)
{
    // Initialize the renderer
    sceneRenderer.initialize("scene.green_cubes", assetManager);

    // Get access to the private members for testing
    auto &objects = *reinterpret_cast<std::vector<SceneRenderer::RenderObject> *>(
        reinterpret_cast<char *>(&sceneRenderer) + offsetof(SceneRenderer, objects_));

    // Store initial rotations
    std::vector<float> initialRotationsY;
    for (const auto &obj : objects)
    {
        initialRotationsY.push_back(obj.rotationY);
    }

    // Update with a time delta
    const float deltaTime = 1.0f / 60.0f; // 1/60th of a second
    sceneRenderer.update(deltaTime);

    // Check that rotations have changed
    for (size_t i = 0; i < objects.size(); ++i)
    {
        EXPECT_NE(initialRotationsY[i], objects[i].rotationY);
    }
}

// Test we have 4 cubes in the scene (3 green and 1 red)
TEST_F(SceneRendererTest, HasFourCubes)
{
    // Initialize the renderer
    sceneRenderer.initialize("scene.green_cubes", assetManager);

    // Get access to the private members for testing
    auto &objects = *reinterpret_cast<std::vector<SceneRenderer::RenderObject> *>(
        reinterpret_cast<char *>(&sceneRenderer) + offsetof(SceneRenderer, objects_));

    // Check we have exactly 4 objects
    EXPECT_EQ(objects.size(), 4);

    // Count green and red cubes
    int greenCount = 0;
    int redCount = 0;

    for (const auto &obj : objects)
    {
        if (obj.materialId == "material.green")
        {
            greenCount++;
        }
        else if (obj.materialId == "material.red")
        {
            redCount++;
        }
    }

    // Check we have 3 green cubes and 1 red cube
    EXPECT_EQ(greenCount, 3);
    EXPECT_EQ(redCount, 1);
}

// Test the red cube rotates in the opposite direction
TEST_F(SceneRendererTest, RedCubeRotatesOpposite)
{
    // Initialize the renderer
    sceneRenderer.initialize("scene.green_cubes", assetManager);

    // Get access to the private members for testing
    auto &objects = *reinterpret_cast<std::vector<SceneRenderer::RenderObject> *>(
        reinterpret_cast<char *>(&sceneRenderer) + offsetof(SceneRenderer, objects_));

    // Find the red cube
    const SceneRenderer::RenderObject *redCube = nullptr;
    for (const auto &obj : objects)
    {
        if (obj.materialId == "material.red")
        {
            redCube = &obj;
            break;
        }
    }

    // Make sure we found the red cube
    ASSERT_NE(redCube, nullptr);

    // Check that its rotation speed is negative (opposite direction)
    EXPECT_LT(redCube->rotationSpeedY, 0.0f);
}

// Test the objects have different positions
TEST_F(SceneRendererTest, CubesHaveDifferentPositions)
{
    // Initialize the renderer
    sceneRenderer.initialize("scene.green_cubes", assetManager);

    // Get access to the private members for testing
    auto &objects = *reinterpret_cast<std::vector<SceneRenderer::RenderObject> *>(
        reinterpret_cast<char *>(&sceneRenderer) + offsetof(SceneRenderer, objects_));

    // Check that each cube has a unique position
    for (size_t i = 0; i < objects.size(); ++i)
    {
        for (size_t j = i + 1; j < objects.size(); ++j)
        {
            EXPECT_NE(objects[i].transform.position.x, objects[j].transform.position.x);
        }
    }
}


================================================================================
FILE: tests\simple_scene_test.cpp
================================================================================

#include <iostream>
#include <vector>
#include "../src/rendering/SceneRenderer.h"
#include "../src/core/AssetManager.h"

// Simple test framework
#define TEST_ASSERT(condition, message)                  \
    if (!(condition))                                    \
    {                                                    \
        std::cerr << "FAILED: " << message << std::endl; \
        return false;                                    \
    }

// Test initialization
bool testInitialize()
{
    AssetManager assetManager;
    SceneRenderer sceneRenderer;

    bool result = sceneRenderer.initialize("scene.green_cubes", assetManager);
    TEST_ASSERT(result, "Initialization should succeed");

    std::cout << "PASSED: SceneRenderer initializes correctly" << std::endl;
    return true;
}

// Test that we have 4 cubes (3 green, 1 red)
bool testHasFourCubes()
{
    AssetManager assetManager;
    SceneRenderer sceneRenderer;
    sceneRenderer.initialize("scene.green_cubes", assetManager);

    // Get the objects using the getter method
    const auto &objects = sceneRenderer.getObjects();

    TEST_ASSERT(objects.size() == 4, "Should have 4 objects");

    // Count green and red cubes
    int greenCount = 0;
    int redCount = 0;

    for (const auto &obj : objects)
    {
        if (obj.materialId == "material.green")
        {
            greenCount++;
        }
        else if (obj.materialId == "material.red")
        {
            redCount++;
        }
    }

    TEST_ASSERT(greenCount == 3, "Should have 3 green cubes");
    TEST_ASSERT(redCount == 1, "Should have 1 red cube");

    std::cout << "PASSED: Scene has 3 green cubes and 1 red cube" << std::endl;
    return true;
}

// Test the red cube rotates in the opposite direction
bool testRedCubeRotatesOpposite()
{
    AssetManager assetManager;
    SceneRenderer sceneRenderer;
    sceneRenderer.initialize("scene.green_cubes", assetManager);

    // Get the objects using the getter method
    const auto &objects = sceneRenderer.getObjects();

    // Find the red cube
    const SceneRenderer::RenderObject *redCube = nullptr;
    for (const auto &obj : objects)
    {
        if (obj.materialId == "material.red")
        {
            redCube = &obj;
            break;
        }
    }

    TEST_ASSERT(redCube != nullptr, "Red cube should exist");
    TEST_ASSERT(redCube->rotationSpeedY < 0.0f, "Red cube should rotate in opposite direction");

    std::cout << "PASSED: Red cube rotates in the opposite direction" << std::endl;
    return true;
}

// Test that all cubes have different positions
bool testCubesHaveDifferentPositions()
{
    AssetManager assetManager;
    SceneRenderer sceneRenderer;
    sceneRenderer.initialize("scene.green_cubes", assetManager);

    // Get the objects using the getter method
    const auto &objects = sceneRenderer.getObjects();

    for (size_t i = 0; i < objects.size(); ++i)
    {
        for (size_t j = i + 1; j < objects.size(); ++j)
        {
            // Check that no two cubes have the same position
            if (objects[i].transform.position.x == objects[j].transform.position.x &&
                objects[i].transform.position.y == objects[j].transform.position.y &&
                objects[i].transform.position.z == objects[j].transform.position.z)
            {
                std::cerr << "FAILED: Cubes " << i << " and " << j << " have the same position" << std::endl;
                return false;
            }
        }
    }

    std::cout << "PASSED: All cubes have unique positions" << std::endl;
    return true;
}

int main()
{
    std::cout << "=== Running Scene Renderer Tests ===" << std::endl;

    int passed = 0;
    int failed = 0;

    if (testInitialize())
        passed++;
    else
        failed++;
    if (testHasFourCubes())
        passed++;
    else
        failed++;
    if (testRedCubeRotatesOpposite())
        passed++;
    else
        failed++;
    if (testCubesHaveDifferentPositions())
        passed++;
    else
        failed++;

    std::cout << "\n=== Test Results ===" << std::endl;
    std::cout << "Passed: " << passed << std::endl;
    std::cout << "Failed: " << failed << std::endl;

    return failed;
}


================================================================================
FILE: tests\simple_test.cpp
================================================================================

#include <iostream>

namespace EntityFactory
{
    class EntityFactory
    {
    public:
        EntityFactory() = default;
    };
}

int main()
{
    EntityFactory::EntityFactory test;
    DEBUG_LOG("Test passed");
    return 0;
}


================================================================================
FILE: tests\test_entity.cpp
================================================================================

#include "src/core/Entity.h"
#include <iostream>

int main()
{
    DEBUG_LOG("Entity header test passed");
    return 0;
}


================================================================================
FILE: tests\test_entityconfig.cpp
================================================================================

#include "src/config/EntityConfig.h"
#include <iostream>

int main()
{
    EntityConfig::Transform test;
    DEBUG_LOG("EntityConfig test passed");
    return 0;
}


================================================================================
FILE: tests\test_entityfactory_2.h
================================================================================

#ifndef TEST_ENTITY_FACTORY_H
#define TEST_ENTITY_FACTORY_H

#include "src/config/EntityConfig.h"
#include "src/core/Entity.h"

namespace EntityFactory
{
    class EntityFactory
    {
    public:
        EntityFactory() = default;
    };
}

#endif


================================================================================
FILE: tests\test_entityfactory_3.h
================================================================================

#ifndef TEST_ENTITY_FACTORY_H
#define TEST_ENTITY_FACTORY_H

#include "src/config/EntityConfig.h"
#include "src/core/Entity.h"
#include "src/core/EventBus.h"
#include "src/core/World.h"
#include "src/systems/MaterialManager.h"

namespace EntityFactory
{
    class EntityFactory
    {
    public:
        EntityFactory() = default;
    };
}

#endif


================================================================================
FILE: tests\test_entityfactory_minimal.h
================================================================================

#ifndef TEST_ENTITY_FACTORY_H
#define TEST_ENTITY_FACTORY_H

#include "src/config/EntityConfig.h"

namespace EntityFactory
{
    class EntityFactory
    {
    public:
        EntityFactory() = default;
    };
}

#endif


================================================================================
FILE: tests\test_entityfactory.cpp
================================================================================

#include "src/config/EntityConfig.h"
#include <iostream>

int main()
{
    EntityConfig::Transform test;
    DEBUG_LOG("EntityConfig accessible directly");
    return 0;
}


================================================================================
FILE: tests\test_eventbus.cpp
================================================================================

#include "src/core/EventBus.h"
#include <iostream>

int main()
{
    DEBUG_LOG("EventBus header test passed");
    return 0;
}


================================================================================
FILE: tests\test_factory_ptr.cpp
================================================================================

#include "factory/EntityFactory.h"

int main()
{
    EntityFactory::EntityFactory *factory = nullptr;
    return 0;
}


================================================================================
FILE: tests\test_factory.cpp
================================================================================

#include "../factory/EntityFactory.h"

int main()
{
    EntityFactory::EntityFactory factory;
    return 0;
}


================================================================================
FILE: tests\test_include.cpp
================================================================================

#include "src/factory/EntityFactory.h"

int main()
{
    return 0;
}


================================================================================
FILE: tests\test_materialmanager.cpp
================================================================================

#include "src/systems/MaterialManager.h"
#include <iostream>

int main()
{
    DEBUG_LOG("MaterialManager header test passed");
    return 0;
}


================================================================================
FILE: tests\test_math.cpp
================================================================================

#include <iostream>
#include "src/math/MathUtils.h"

int main()
{
    DEBUG_LOG("=== Testing Orbital Mechanics Math Implementation ===");

    // Test basic vector operations
    Math::float3 v1{1.0f, 2.0f, 3.0f};
    Math::float3 v2{4.0f, 5.0f, 6.0f};

    Math::float3 sum = Math::add(v1, v2);
    DEBUG_LOG("Vector addition: (" << sum.x << ", " << sum.y << ", " << sum.z << ")");

    float dot = Math::dot(v1, v2);
    DEBUG_LOG("Dot product: " << dot);

    Math::float3 cross = Math::cross(v1, v2);
    DEBUG_LOG("Cross product: (" << cross.x << ", " << cross.y << ", " << cross.z << ")");

    // Test orbital mechanics
    Math::OrbitParams orbit;
    orbit.semiMajorAxis = 5.0f;
    orbit.eccentricity = 0.2f;
    orbit.angularRate = 1.0f;
    orbit.inclination = 0.0f;
    orbit.phaseOffset = 0.0f;

    float time = 0.0f;
    Math::float3 position = Math::calculateOrbitPosition(orbit, time);
    DEBUG_LOG("Orbital position at t=0: (" << position.x << ", " << position.y << ", " << position.z << ")");

    Math::float3 velocity = Math::calculateOrbitVelocity(orbit, time);
    DEBUG_LOG("Orbital velocity at t=0: (" << velocity.x << ", " << velocity.y << ", " << velocity.z << ")");

    // Test cel-shading
    std::vector<float> bands = {0.2f, 0.5f, 0.8f, 1.0f};
    float intensity = 0.6f;
    float quantized = Math::quantizeToBands(intensity, bands, 0.1f);
    DEBUG_LOG("Cel-shading quantized intensity: " << quantized);

    // Test quaternions
    Math::quat q1{0.0f, 0.0f, 0.0f, 1.0f};
    Math::quat q2{0.0f, 0.5f, 0.0f, 0.866f}; // 60 degree rotation around Y
    Math::quat result = Math::q_mul(q1, q2);
    DEBUG_LOG("Quaternion multiplication: (" << result.x << ", " << result.y << ", " << result.z << ", " << result.w << ")");

    DEBUG_LOG("=== All tests completed ===");
    return 0;
}


================================================================================
FILE: tests\test_minimal.cpp
================================================================================

#include "test_entityfactory_minimal.h"
#include <iostream>

int main()
{
    EntityFactory::EntityFactory test;
    DEBUG_LOG("Minimal EntityFactory test passed");
    return 0;
}


================================================================================
FILE: tests\test_world.cpp
================================================================================

#include "src/core/World.h"
#include <iostream>

int main()
{
    DEBUG_LOG("World header test passed");
    return 0;
}


================================================================================
FILE: tests\test_worldgen.cpp
================================================================================

#include "systems/WorldGenSystem.h"

int main()
{
    return 0;
}


================================================================================
FILE: tests\test2.cpp
================================================================================

#include "test_entityfactory_2.h"
#include <iostream>

int main()
{
    EntityFactory::EntityFactory test;
    DEBUG_LOG("EntityFactory test 2 passed");
    return 0;
}


================================================================================
FILE: tests\test3.cpp
================================================================================

#include "test_entityfactory_3.h"
#include <iostream>

int main()
{
    EntityFactory::EntityFactory test;
    DEBUG_LOG("EntityFactory test 3 passed");
    return 0;
}


================================================================================
FILE: third_party\nlohmann\json.hpp
================================================================================

//     __ _____ _____ _____
//  __|  |   __|     |   | |  JSON for Modern C++
// |  |  |__   |  |  | | | |  version 3.11.2
// |_____|_____|_____|_|___|  https://github.com/nlohmann/json
//
// SPDX-FileCopyrightText: 2013-2022 Niels Lohmann <https://nlohmann.me>
// SPDX-License-Identifier: MIT

/****************************************************************************\
 * Note on documentation: The source files contain links to the online      *
 * documentation of the public API at https://json.nlohmann.me. This URL    *
 * contains the most recent documentation and should also be applicable to  *
 * previous versions; documentation for deprecated functions is not         *
 * removed, but marked deprecated. See "Generate documentation" section in  *
 * file docs/README.md.                                                     *
\****************************************************************************/

#ifndef INCLUDE_NLOHMANN_JSON_HPP_
#define INCLUDE_NLOHMANN_JSON_HPP_

#include <algorithm> // all_of, find, for_each
#include <cstddef> // nullptr_t, ptrdiff_t, size_t
#include <functional> // hash, less
#include <initializer_list> // initializer_list
#ifndef JSON_NO_IO
    #include <iosfwd> // istream, ostream
#endif  // JSON_NO_IO
#include <iterator> // random_access_iterator_tag
#include <memory> // unique_ptr
#include <numeric> // accumulate
#include <string> // string, stoi, to_string
#include <utility> // declval, forward, move, pair, swap
#include <vector> // vector

// #include <nlohmann/adl_serializer.hpp>
//     __ _____ _____ _____
//  __|  |   __|     |   | |  JSON for Modern C++
// |  |  |__   |  |  | | | |  version 3.11.2
// |_____|_____|_____|_|___|  https://github.com/nlohmann/json
//
// SPDX-FileCopyrightText: 2013-2022 Niels Lohmann <https://nlohmann.me>
// SPDX-License-Identifier: MIT



#include <utility>

// #include <nlohmann/detail/abi_macros.hpp>
//     __ _____ _____ _____
//  __|  |   __|     |   | |  JSON for Modern C++
// |  |  |__   |  |  | | | |  version 3.11.2
// |_____|_____|_____|_|___|  https://github.com/nlohmann/json
//
// SPDX-FileCopyrightText: 2013-2022 Niels Lohmann <https://nlohmann.me>
// SPDX-License-Identifier: MIT



// This file contains all macro definitions affecting or depending on the ABI

#ifndef JSON_SKIP_LIBRARY_VERSION_CHECK
    #if defined(NLOHMANN_JSON_VERSION_MAJOR) && defined(NLOHMANN_JSON_VERSION_MINOR) && defined(NLOHMANN_JSON_VERSION_PATCH)
        #if NLOHMANN_JSON_VERSION_MAJOR != 3 || NLOHMANN_JSON_VERSION_MINOR != 11 || NLOHMANN_JSON_VERSION_PATCH != 2
            #warning "Already included a different version of the library!"
        #endif
    #endif
#endif

#define NLOHMANN_JSON_VERSION_MAJOR 3   // NOLINT(modernize-macro-to-enum)
#define NLOHMANN_JSON_VERSION_MINOR 11  // NOLINT(modernize-macro-to-enum)
#define NLOHMANN_JSON_VERSION_PATCH 2   // NOLINT(modernize-macro-to-enum)

#ifndef JSON_DIAGNOSTICS
    #define JSON_DIAGNOSTICS 0
#endif

#ifndef JSON_USE_LEGACY_DISCARDED_VALUE_COMPARISON
    #define JSON_USE_LEGACY_DISCARDED_VALUE_COMPARISON 0
#endif

#if JSON_DIAGNOSTICS
    #define NLOHMANN_JSON_ABI_TAG_DIAGNOSTICS _diag
#else
    #define NLOHMANN_JSON_ABI_TAG_DIAGNOSTICS
#endif

#if JSON_USE_LEGACY_DISCARDED_VALUE_COMPARISON
    #define NLOHMANN_JSON_ABI_TAG_LEGACY_DISCARDED_VALUE_COMPARISON _ldvcmp
#else
    #define NLOHMANN_JSON_ABI_TAG_LEGACY_DISCARDED_VALUE_COMPARISON
#endif

#ifndef NLOHMANN_JSON_NAMESPACE_NO_VERSION
    #define NLOHMANN_JSON_NAMESPACE_NO_VERSION 0
#endif

// Construct the namespace ABI tags component
#define NLOHMANN_JSON_ABI_TAGS_CONCAT_EX(a, b) json_abi ## a ## b
#define NLOHMANN_JSON_ABI_TAGS_CONCAT(a, b) \
    NLOHMANN_JSON_ABI_TAGS_CONCAT_EX(a, b)

#define NLOHMANN_JSON_ABI_TAGS                                       \
    NLOHMANN_JSON_ABI_TAGS_CONCAT(                                   \
            NLOHMANN_JSON_ABI_TAG_DIAGNOSTICS,                       \
            NLOHMANN_JSON_ABI_TAG_LEGACY_DISCARDED_VALUE_COMPARISON)

// Construct the namespace version component
#define NLOHMANN_JSON_NAMESPACE_VERSION_CONCAT_EX(major, minor, patch) \
    _v ## major ## _ ## minor ## _ ## patch
#define NLOHMANN_JSON_NAMESPACE_VERSION_CONCAT(major, minor, patch) \
    NLOHMANN_JSON_NAMESPACE_VERSION_CONCAT_EX(major, minor, patch)

#if NLOHMANN_JSON_NAMESPACE_NO_VERSION
#define NLOHMANN_JSON_NAMESPACE_VERSION
#else
#define NLOHMANN_JSON_NAMESPACE_VERSION                                 \
    NLOHMANN_JSON_NAMESPACE_VERSION_CONCAT(NLOHMANN_JSON_VERSION_MAJOR, \
                                           NLOHMANN_JSON_VERSION_MINOR, \
                                           NLOHMANN_JSON_VERSION_PATCH)
#endif

// Combine namespace components
#define NLOHMANN_JSON_NAMESPACE_CONCAT_EX(a, b) a ## b
#define NLOHMANN_JSON_NAMESPACE_CONCAT(a, b) \
    NLOHMANN_JSON_NAMESPACE_CONCAT_EX(a, b)

#ifndef NLOHMANN_JSON_NAMESPACE
#define NLOHMANN_JSON_NAMESPACE               \
    nlohmann::NLOHMANN_JSON_NAMESPACE_CONCAT( \
            NLOHMANN_JSON_ABI_TAGS,           \
            NLOHMANN_JSON_NAMESPACE_VERSION)
#endif

#ifndef NLOHMANN_JSON_NAMESPACE_BEGIN
#define NLOHMANN_JSON_NAMESPACE_BEGIN                \
    namespace nlohmann                               \
    {                                                \
    inline namespace NLOHMANN_JSON_NAMESPACE_CONCAT( \
                NLOHMANN_JSON_ABI_TAGS,              \
                NLOHMANN_JSON_NAMESPACE_VERSION)     \
    {
#endif

#ifndef NLOHMANN_JSON_NAMESPACE_END
#define NLOHMANN_JSON_NAMESPACE_END                                     \
    }  /* namespace (inline namespace) NOLINT(readability/namespace) */ \
    }  // namespace nlohmann
#endif

// #include <nlohmann/detail/conversions/from_json.hpp>
//     __ _____ _____ _____
//  __|  |   __|     |   | |  JSON for Modern C++
// |  |  |__   |  |  | | | |  version 3.11.2
// |_____|_____|_____|_|___|  https://github.com/nlohmann/json
//
// SPDX-FileCopyrightText: 2013-2022 Niels Lohmann <https://nlohmann.me>
// SPDX-License-Identifier: MIT



#include <algorithm> // transform
#include <array> // array
#include <forward_list> // forward_list
#include <iterator> // inserter, front_inserter, end
#include <map> // map
#include <string> // string
#include <tuple> // tuple, make_tuple
#include <type_traits> // is_arithmetic, is_same, is_enum, underlying_type, is_convertible
#include <unordered_map> // unordered_map
#include <utility> // pair, declval
#include <valarray> // valarray

// #include <nlohmann/detail/exceptions.hpp>
//     __ _____ _____ _____
//  __|  |   __|     |   | |  JSON for Modern C++
// |  |  |__   |  |  | | | |  version 3.11.2
// |_____|_____|_____|_|___|  https://github.com/nlohmann/json
//
// SPDX-FileCopyrightText: 2013-2022 Niels Lohmann <https://nlohmann.me>
// SPDX-License-Identifier: MIT



#include <cstddef> // nullptr_t
#include <exception> // exception
#include <stdexcept> // runtime_error
#include <string> // to_string
#include <vector> // vector

// #include <nlohmann/detail/value_t.hpp>
//     __ _____ _____ _____
//  __|  |   __|     |   | |  JSON for Modern C++
// |  |  |__   |  |  | | | |  version 3.11.2
// |_____|_____|_____|_|___|  https://github.com/nlohmann/json
//
// SPDX-FileCopyrightText: 2013-2022 Niels Lohmann <https://nlohmann.me>
// SPDX-License-Identifier: MIT



#include <array> // array
#include <cstddef> // size_t
#include <cstdint> // uint8_t
#include <string> // string

// #include <nlohmann/detail/macro_scope.hpp>
//     __ _____ _____ _____
//  __|  |   __|     |   | |  JSON for Modern C++
// |  |  |__   |  |  | | | |  version 3.11.2
// |_____|_____|_____|_|___|  https://github.com/nlohmann/json
//
// SPDX-FileCopyrightText: 2013-2022 Niels Lohmann <https://nlohmann.me>
// SPDX-License-Identifier: MIT



#include <utility> // declval, pair
// #include <nlohmann/detail/meta/detected.hpp>
//     __ _____ _____ _____
//  __|  |   __|     |   | |  JSON for Modern C++
// |  |  |__   |  |  | | | |  version 3.11.2
// |_____|_____|_____|_|___|  https://github.com/nlohmann/json
//
// SPDX-FileCopyrightText: 2013-2022 Niels Lohmann <https://nlohmann.me>
// SPDX-License-Identifier: MIT



#include <type_traits>

// #include <nlohmann/detail/meta/void_t.hpp>
//     __ _____ _____ _____
//  __|  |   __|     |   | |  JSON for Modern C++
// |  |  |__   |  |  | | | |  version 3.11.2
// |_____|_____|_____|_|___|  https://github.com/nlohmann/json
//
// SPDX-FileCopyrightText: 2013-2022 Niels Lohmann <https://nlohmann.me>
// SPDX-License-Identifier: MIT



// #include <nlohmann/detail/abi_macros.hpp>


NLOHMANN_JSON_NAMESPACE_BEGIN
namespace detail
{

template<typename ...Ts> struct make_void
{
    using type = void;
};
template<typename ...Ts> using void_t = typename make_void<Ts...>::type;

}  // namespace detail
NLOHMANN_JSON_NAMESPACE_END


NLOHMANN_JSON_NAMESPACE_BEGIN
namespace detail
{

// https://en.cppreference.com/w/cpp/experimental/is_detected
struct nonesuch
{
    nonesuch() = delete;
    ~nonesuch() = delete;
    nonesuch(nonesuch const&) = delete;
    nonesuch(nonesuch const&&) = delete;
    void operator=(nonesuch const&) = delete;
    void operator=(nonesuch&&) = delete;
};

template<class Default,
         class AlwaysVoid,
         template<class...> class Op,
         class... Args>
struct detector
{
    using value_t = std::false_type;
    using type = Default;
};

template<class Default, template<class...> class Op, class... Args>
struct detector<Default, void_t<Op<Args...>>, Op, Args...>
{
    using value_t = std::true_type;
    using type = Op<Args...>;
};

template<template<class...> class Op, class... Args>
using is_detected = typename detector<nonesuch, void, Op, Args...>::value_t;

template<template<class...> class Op, class... Args>
struct is_detected_lazy : is_detected<Op, Args...> { };

template<template<class...> class Op, class... Args>
using detected_t = typename detector<nonesuch, void, Op, Args...>::type;

template<class Default, template<class...> class Op, class... Args>
using detected_or = detector<Default, void, Op, Args...>;

template<class Default, template<class...> class Op, class... Args>
using detected_or_t = typename detected_or<Default, Op, Args...>::type;

template<class Expected, template<class...> class Op, class... Args>
using is_detected_exact = std::is_same<Expected, detected_t<Op, Args...>>;

template<class To, template<class...> class Op, class... Args>
using is_detected_convertible =
    std::is_convertible<detected_t<Op, Args...>, To>;

}  // namespace detail
NLOHMANN_JSON_NAMESPACE_END

// #include <nlohmann/thirdparty/hedley/hedley.hpp>


//     __ _____ _____ _____
//  __|  |   __|     |   | |  JSON for Modern C++
// |  |  |__   |  |  | | | |  version 3.11.2
// |_____|_____|_____|_|___|  https://github.com/nlohmann/json
//
// SPDX-FileCopyrightText: 2013-2022 Niels Lohmann <https://nlohmann.me>
// SPDX-FileCopyrightText: 2016-2021 Evan Nemerson <evan@nemerson.com>
// SPDX-License-Identifier: MIT

/* Hedley - https://nemequ.github.io/hedley
 * Created by Evan Nemerson <evan@nemerson.com>
 */

#if !defined(JSON_HEDLEY_VERSION) || (JSON_HEDLEY_VERSION < 15)
#if defined(JSON_HEDLEY_VERSION)
    #undef JSON_HEDLEY_VERSION
#endif
#define JSON_HEDLEY_VERSION 15

#if defined(JSON_HEDLEY_STRINGIFY_EX)
    #undef JSON_HEDLEY_STRINGIFY_EX
#endif
#define JSON_HEDLEY_STRINGIFY_EX(x) #x

#if defined(JSON_HEDLEY_STRINGIFY)
    #undef JSON_HEDLEY_STRINGIFY
#endif
#define JSON_HEDLEY_STRINGIFY(x) JSON_HEDLEY_STRINGIFY_EX(x)

#if defined(JSON_HEDLEY_CONCAT_EX)
    #undef JSON_HEDLEY_CONCAT_EX
#endif
#define JSON_HEDLEY_CONCAT_EX(a,b) a##b

#if defined(JSON_HEDLEY_CONCAT)
    #undef JSON_HEDLEY_CONCAT
#endif
#define JSON_HEDLEY_CONCAT(a,b) JSON_HEDLEY_CONCAT_EX(a,b)

#if defined(JSON_HEDLEY_CONCAT3_EX)
    #undef JSON_HEDLEY_CONCAT3_EX
#endif
#define JSON_HEDLEY_CONCAT3_EX(a,b,c) a##b##c

#if defined(JSON_HEDLEY_CONCAT3)
    #undef JSON_HEDLEY_CONCAT3
#endif
#define JSON_HEDLEY_CONCAT3(a,b,c) JSON_HEDLEY_CONCAT3_EX(a,b,c)

#if defined(JSON_HEDLEY_VERSION_ENCODE)
    #undef JSON_HEDLEY_VERSION_ENCODE
#endif
#define JSON_HEDLEY_VERSION_ENCODE(major,minor,revision) (((major) * 1000000) + ((minor) * 1000) + (revision))

#if defined(JSON_HEDLEY_VERSION_DECODE_MAJOR)
    #undef JSON_HEDLEY_VERSION_DECODE_MAJOR
#endif
#define JSON_HEDLEY_VERSION_DECODE_MAJOR(version) ((version) / 1000000)

#if defined(JSON_HEDLEY_VERSION_DECODE_MINOR)
    #undef JSON_HEDLEY_VERSION_DECODE_MINOR
#endif
#define JSON_HEDLEY_VERSION_DECODE_MINOR(version) (((version) % 1000000) / 1000)

#if defined(JSON_HEDLEY_VERSION_DECODE_REVISION)
    #undef JSON_HEDLEY_VERSION_DECODE_REVISION
#endif
#define JSON_HEDLEY_VERSION_DECODE_REVISION(version) ((version) % 1000)

#if defined(JSON_HEDLEY_GNUC_VERSION)
    #undef JSON_HEDLEY_GNUC_VERSION
#endif
#if defined(__GNUC__) && defined(__GNUC_PATCHLEVEL__)
    #define JSON_HEDLEY_GNUC_VERSION JSON_HEDLEY_VERSION_ENCODE(__GNUC__, __GNUC_MINOR__, __GNUC_PATCHLEVEL__)
#elif defined(__GNUC__)
    #define JSON_HEDLEY_GNUC_VERSION JSON_HEDLEY_VERSION_ENCODE(__GNUC__, __GNUC_MINOR__, 0)
#endif

#if defined(JSON_HEDLEY_GNUC_VERSION_CHECK)
    #undef JSON_HEDLEY_GNUC_VERSION_CHECK
#endif
#if defined(JSON_HEDLEY_GNUC_VERSION)
    #define JSON_HEDLEY_GNUC_VERSION_CHECK(major,minor,patch) (JSON_HEDLEY_GNUC_VERSION >= JSON_HEDLEY_VERSION_ENCODE(major, minor, patch))
#else
    #define JSON_HEDLEY_GNUC_VERSION_CHECK(major,minor,patch) (0)
#endif

#if defined(JSON_HEDLEY_MSVC_VERSION)
    #undef JSON_HEDLEY_MSVC_VERSION
#endif
#if defined(_MSC_FULL_VER) && (_MSC_FULL_VER >= 140000000) && !defined(__ICL)
    #define JSON_HEDLEY_MSVC_VERSION JSON_HEDLEY_VERSION_ENCODE(_MSC_FULL_VER / 10000000, (_MSC_FULL_VER % 10000000) / 100000, (_MSC_FULL_VER % 100000) / 100)
#elif defined(_MSC_FULL_VER) && !defined(__ICL)
    #define JSON_HEDLEY_MSVC_VERSION JSON_HEDLEY_VERSION_ENCODE(_MSC_FULL_VER / 1000000, (_MSC_FULL_VER % 1000000) / 10000, (_MSC_FULL_VER % 10000) / 10)
#elif defined(_MSC_VER) && !defined(__ICL)
    #define JSON_HEDLEY_MSVC_VERSION JSON_HEDLEY_VERSION_ENCODE(_MSC_VER / 100, _MSC_VER % 100, 0)
#endif

#if defined(JSON_HEDLEY_MSVC_VERSION_CHECK)
    #undef JSON_HEDLEY_MSVC_VERSION_CHECK
#endif
#if !defined(JSON_HEDLEY_MSVC_VERSION)
    #define JSON_HEDLEY_MSVC_VERSION_CHECK(major,minor,patch) (0)
#elif defined(_MSC_VER) && (_MSC_VER >= 1400)
    #define JSON_HEDLEY_MSVC_VERSION_CHECK(major,minor,patch) (_MSC_FULL_VER >= ((major * 10000000) + (minor * 100000) + (patch)))
#elif defined(_MSC_VER) && (_MSC_VER >= 1200)
    #define JSON_HEDLEY_MSVC_VERSION_CHECK(major,minor,patch) (_MSC_FULL_VER >= ((major * 1000000) + (minor * 10000) + (patch)))
#else
    #define JSON_HEDLEY_MSVC_VERSION_CHECK(major,minor,patch) (_MSC_VER >= ((major * 100) + (minor)))
#endif

#if defined(JSON_HEDLEY_INTEL_VERSION)
    #undef JSON_HEDLEY_INTEL_VERSION
#endif
#if defined(__INTEL_COMPILER) && defined(__INTEL_COMPILER_UPDATE) && !defined(__ICL)
    #define JSON_HEDLEY_INTEL_VERSION JSON_HEDLEY_VERSION_ENCODE(__INTEL_COMPILER / 100, __INTEL_COMPILER % 100, __INTEL_COMPILER_UPDATE)
#elif defined(__INTEL_COMPILER) && !defined(__ICL)
    #define JSON_HEDLEY_INTEL_VERSION JSON_HEDLEY_VERSION_ENCODE(__INTEL_COMPILER / 100, __INTEL_COMPILER % 100, 0)
#endif

#if defined(JSON_HEDLEY_INTEL_VERSION_CHECK)
    #undef JSON_HEDLEY_INTEL_VERSION_CHECK
#endif
#if defined(JSON_HEDLEY_INTEL_VERSION)
    #define JSON_HEDLEY_INTEL_VERSION_CHECK(major,minor,patch) (JSON_HEDLEY_INTEL_VERSION >= JSON_HEDLEY_VERSION_ENCODE(major, minor, patch))
#else
    #define JSON_HEDLEY_INTEL_VERSION_CHECK(major,minor,patch) (0)
#endif

#if defined(JSON_HEDLEY_INTEL_CL_VERSION)
    #undef JSON_HEDLEY_INTEL_CL_VERSION
#endif
#if defined(__INTEL_COMPILER) && defined(__INTEL_COMPILER_UPDATE) && defined(__ICL)
    #define JSON_HEDLEY_INTEL_CL_VERSION JSON_HEDLEY_VERSION_ENCODE(__INTEL_COMPILER, __INTEL_COMPILER_UPDATE, 0)
#endif

#if defined(JSON_HEDLEY_INTEL_CL_VERSION_CHECK)
    #undef JSON_HEDLEY_INTEL_CL_VERSION_CHECK
#endif
#if defined(JSON_HEDLEY_INTEL_CL_VERSION)
    #define JSON_HEDLEY_INTEL_CL_VERSION_CHECK(major,minor,patch) (JSON_HEDLEY_INTEL_CL_VERSION >= JSON_HEDLEY_VERSION_ENCODE(major, minor, patch))
#else
    #define JSON_HEDLEY_INTEL_CL_VERSION_CHECK(major,minor,patch) (0)
#endif

#if defined(JSON_HEDLEY_PGI_VERSION)
    #undef JSON_HEDLEY_PGI_VERSION
#endif
#if defined(__PGI) && defined(__PGIC__) && defined(__PGIC_MINOR__) && defined(__PGIC_PATCHLEVEL__)
    #define JSON_HEDLEY_PGI_VERSION JSON_HEDLEY_VERSION_ENCODE(__PGIC__, __PGIC_MINOR__, __PGIC_PATCHLEVEL__)
#endif

#if defined(JSON_HEDLEY_PGI_VERSION_CHECK)
    #undef JSON_HEDLEY_PGI_VERSION_CHECK
#endif
#if defined(JSON_HEDLEY_PGI_VERSION)
    #define JSON_HEDLEY_PGI_VERSION_CHECK(major,minor,patch) (JSON_HEDLEY_PGI_VERSION >= JSON_HEDLEY_VERSION_ENCODE(major, minor, patch))
#else
    #define JSON_HEDLEY_PGI_VERSION_CHECK(major,minor,patch) (0)
#endif

#if defined(JSON_HEDLEY_SUNPRO_VERSION)
    #undef JSON_HEDLEY_SUNPRO_VERSION
#endif
#if defined(__SUNPRO_C) && (__SUNPRO_C > 0x1000)
    #define JSON_HEDLEY_SUNPRO_VERSION JSON_HEDLEY_VERSION_ENCODE((((__SUNPRO_C >> 16) & 0xf) * 10) + ((__SUNPRO_C >> 12) & 0xf), (((__SUNPRO_C >> 8) & 0xf) * 10) + ((__SUNPRO_C >> 4) & 0xf), (__SUNPRO_C & 0xf) * 10)
#elif defined(__SUNPRO_C)
    #define JSON_HEDLEY_SUNPRO_VERSION JSON_HEDLEY_VERSION_ENCODE((__SUNPRO_C >> 8) & 0xf, (__SUNPRO_C >> 4) & 0xf, (__SUNPRO_C) & 0xf)
#elif defined(__SUNPRO_CC) && (__SUNPRO_CC > 0x1000)
    #define JSON_HEDLEY_SUNPRO_VERSION JSON_HEDLEY_VERSION_ENCODE((((__SUNPRO_CC >> 16) & 0xf) * 10) + ((__SUNPRO_CC >> 12) & 0xf), (((__SUNPRO_CC >> 8) & 0xf) * 10) + ((__SUNPRO_CC >> 4) & 0xf), (__SUNPRO_CC & 0xf) * 10)
#elif defined(__SUNPRO_CC)
    #define JSON_HEDLEY_SUNPRO_VERSION JSON_HEDLEY_VERSION_ENCODE((__SUNPRO_CC >> 8) & 0xf, (__SUNPRO_CC >> 4) & 0xf, (__SUNPRO_CC) & 0xf)
#endif

#if defined(JSON_HEDLEY_SUNPRO_VERSION_CHECK)
    #undef JSON_HEDLEY_SUNPRO_VERSION_CHECK
#endif
#if defined(JSON_HEDLEY_SUNPRO_VERSION)
    #define JSON_HEDLEY_SUNPRO_VERSION_CHECK(major,minor,patch) (JSON_HEDLEY_SUNPRO_VERSION >= JSON_HEDLEY_VERSION_ENCODE(major, minor, patch))
#else
    #define JSON_HEDLEY_SUNPRO_VERSION_CHECK(major,minor,patch) (0)
#endif

#if defined(JSON_HEDLEY_EMSCRIPTEN_VERSION)
    #undef JSON_HEDLEY_EMSCRIPTEN_VERSION
#endif
#if defined(__EMSCRIPTEN__)
    #define JSON_HEDLEY_EMSCRIPTEN_VERSION JSON_HEDLEY_VERSION_ENCODE(__EMSCRIPTEN_major__, __EMSCRIPTEN_minor__, __EMSCRIPTEN_tiny__)
#endif

#if defined(JSON_HEDLEY_EMSCRIPTEN_VERSION_CHECK)
    #undef JSON_HEDLEY_EMSCRIPTEN_VERSION_CHECK
#endif
#if defined(JSON_HEDLEY_EMSCRIPTEN_VERSION)
    #define JSON_HEDLEY_EMSCRIPTEN_VERSION_CHECK(major,minor,patch) (JSON_HEDLEY_EMSCRIPTEN_VERSION >= JSON_HEDLEY_VERSION_ENCODE(major, minor, patch))
#else
    #define JSON_HEDLEY_EMSCRIPTEN_VERSION_CHECK(major,minor,patch) (0)
#endif

#if defined(JSON_HEDLEY_ARM_VERSION)
    #undef JSON_HEDLEY_ARM_VERSION
#endif
#if defined(__CC_ARM) && defined(__ARMCOMPILER_VERSION)
    #define JSON_HEDLEY_ARM_VERSION JSON_HEDLEY_VERSION_ENCODE(__ARMCOMPILER_VERSION / 1000000, (__ARMCOMPILER_VERSION % 1000000) / 10000, (__ARMCOMPILER_VERSION % 10000) / 100)
#elif defined(__CC_ARM) && defined(__ARMCC_VERSION)
    #define JSON_HEDLEY_ARM_VERSION JSON_HEDLEY_VERSION_ENCODE(__ARMCC_VERSION / 1000000, (__ARMCC_VERSION % 1000000) / 10000, (__ARMCC_VERSION % 10000) / 100)
#endif

#if defined(JSON_HEDLEY_ARM_VERSION_CHECK)
    #undef JSON_HEDLEY_ARM_VERSION_CHECK
#endif
#if defined(JSON_HEDLEY_ARM_VERSION)
    #define JSON_HEDLEY_ARM_VERSION_CHECK(major,minor,patch) (JSON_HEDLEY_ARM_VERSION >= JSON_HEDLEY_VERSION_ENCODE(major, minor, patch))
#else
    #define JSON_HEDLEY_ARM_VERSION_CHECK(major,minor,patch) (0)
#endif

#if defined(JSON_HEDLEY_IBM_VERSION)
    #undef JSON_HEDLEY_IBM_VERSION
#endif
#if defined(__ibmxl__)
    #define JSON_HEDLEY_IBM_VERSION JSON_HEDLEY_VERSION_ENCODE(__ibmxl_version__, __ibmxl_release__, __ibmxl_modification__)
#elif defined(__xlC__) && defined(__xlC_ver__)
    #define JSON_HEDLEY_IBM_VERSION JSON_HEDLEY_VERSION_ENCODE(__xlC__ >> 8, __xlC__ & 0xff, (__xlC_ver__ >> 8) & 0xff)
#elif defined(__xlC__)
    #define JSON_HEDLEY_IBM_VERSION JSON_HEDLEY_VERSION_ENCODE(__xlC__ >> 8, __xlC__ & 0xff, 0)
#endif

#if defined(JSON_HEDLEY_IBM_VERSION_CHECK)
    #undef JSON_HEDLEY_IBM_VERSION_CHECK
#endif
#if defined(JSON_HEDLEY_IBM_VERSION)
    #define JSON_HEDLEY_IBM_VERSION_CHECK(major,minor,patch) (JSON_HEDLEY_IBM_VERSION >= JSON_HEDLEY_VERSION_ENCODE(major, minor, patch))
#else
    #define JSON_HEDLEY_IBM_VERSION_CHECK(major,minor,patch) (0)
#endif

#if defined(JSON_HEDLEY_TI_VERSION)
    #undef JSON_HEDLEY_TI_VERSION
#endif
#if \
    defined(__TI_COMPILER_VERSION__) && \
    ( \
      defined(__TMS470__) || defined(__TI_ARM__) || \
      defined(__MSP430__) || \
      defined(__TMS320C2000__) \
    )
#if (__TI_COMPILER_VERSION__ >= 16000000)
    #define JSON_HEDLEY_TI_VERSION JSON_HEDLEY_VERSION_ENCODE(__TI_COMPILER_VERSION__ / 1000000, (__TI_COMPILER_VERSION__ % 1000000) / 1000, (__TI_COMPILER_VERSION__ % 1000))
#endif
#endif

#if defined(JSON_HEDLEY_TI_VERSION_CHECK)
    #undef JSON_HEDLEY_TI_VERSION_CHECK
#endif
#if defined(JSON_HEDLEY_TI_VERSION)
    #define JSON_HEDLEY_TI_VERSION_CHECK(major,minor,patch) (JSON_HEDLEY_TI_VERSION >= JSON_HEDLEY_VERSION_ENCODE(major, minor, patch))
#else
    #define JSON_HEDLEY_TI_VERSION_CHECK(major,minor,patch) (0)
#endif

#if defined(JSON_HEDLEY_TI_CL2000_VERSION)
    #undef JSON_HEDLEY_TI_CL2000_VERSION
#endif
#if defined(__TI_COMPILER_VERSION__) && defined(__TMS320C2000__)
    #define JSON_HEDLEY_TI_CL2000_VERSION JSON_HEDLEY_VERSION_ENCODE(__TI_COMPILER_VERSION__ / 1000000, (__TI_COMPILER_VERSION__ % 1000000) / 1000, (__TI_COMPILER_VERSION__ % 1000))
#endif

#if defined(JSON_HEDLEY_TI_CL2000_VERSION_CHECK)
    #undef JSON_HEDLEY_TI_CL2000_VERSION_CHECK
#endif
#if defined(JSON_HEDLEY_TI_CL2000_VERSION)
    #define JSON_HEDLEY_TI_CL2000_VERSION_CHECK(major,minor,patch) (JSON_HEDLEY_TI_CL2000_VERSION >= JSON_HEDLEY_VERSION_ENCODE(major, minor, patch))
#else
    #define JSON_HEDLEY_TI_CL2000_VERSION_CHECK(major,minor,patch) (0)
#endif

#if defined(JSON_HEDLEY_TI_CL430_VERSION)
    #undef JSON_HEDLEY_TI_CL430_VERSION
#endif
#if defined(__TI_COMPILER_VERSION__) && defined(__MSP430__)
    #define JSON_HEDLEY_TI_CL430_VERSION JSON_HEDLEY_VERSION_ENCODE(__TI_COMPILER_VERSION__ / 1000000, (__TI_COMPILER_VERSION__ % 1000000) / 1000, (__TI_COMPILER_VERSION__ % 1000))
#endif

#if defined(JSON_HEDLEY_TI_CL430_VERSION_CHECK)
    #undef JSON_HEDLEY_TI_CL430_VERSION_CHECK
#endif
#if defined(JSON_HEDLEY_TI_CL430_VERSION)
    #define JSON_HEDLEY_TI_CL430_VERSION_CHECK(major,minor,patch) (JSON_HEDLEY_TI_CL430_VERSION >= JSON_HEDLEY_VERSION_ENCODE(major, minor, patch))
#else
    #define JSON_HEDLEY_TI_CL430_VERSION_CHECK(major,minor,patch) (0)
#endif

#if defined(JSON_HEDLEY_TI_ARMCL_VERSION)
    #undef JSON_HEDLEY_TI_ARMCL_VERSION
#endif
#if defined(__TI_COMPILER_VERSION__) && (defined(__TMS470__) || defined(__TI_ARM__))
    #define JSON_HEDLEY_TI_ARMCL_VERSION JSON_HEDLEY_VERSION_ENCODE(__TI_COMPILER_VERSION__ / 1000000, (__TI_COMPILER_VERSION__ % 1000000) / 1000, (__TI_COMPILER_VERSION__ % 1000))
#endif

#if defined(JSON_HEDLEY_TI_ARMCL_VERSION_CHECK)
    #undef JSON_HEDLEY_TI_ARMCL_VERSION_CHECK
#endif
#if defined(JSON_HEDLEY_TI_ARMCL_VERSION)
    #define JSON_HEDLEY_TI_ARMCL_VERSION_CHECK(major,minor,patch) (JSON_HEDLEY_TI_ARMCL_VERSION >= JSON_HEDLEY_VERSION_ENCODE(major, minor, patch))
#else
    #define JSON_HEDLEY_TI_ARMCL_VERSION_CHECK(major,minor,patch) (0)
#endif

#if defined(JSON_HEDLEY_TI_CL6X_VERSION)
    #undef JSON_HEDLEY_TI_CL6X_VERSION
#endif
#if defined(__TI_COMPILER_VERSION__) && defined(__TMS320C6X__)
    #define JSON_HEDLEY_TI_CL6X_VERSION JSON_HEDLEY_VERSION_ENCODE(__TI_COMPILER_VERSION__ / 1000000, (__TI_COMPILER_VERSION__ % 1000000) / 1000, (__TI_COMPILER_VERSION__ % 1000))
#endif

#if defined(JSON_HEDLEY_TI_CL6X_VERSION_CHECK)
    #undef JSON_HEDLEY_TI_CL6X_VERSION_CHECK
#endif
#if defined(JSON_HEDLEY_TI_CL6X_VERSION)
    #define JSON_HEDLEY_TI_CL6X_VERSION_CHECK(major,minor,patch) (JSON_HEDLEY_TI_CL6X_VERSION >= JSON_HEDLEY_VERSION_ENCODE(major, minor, patch))
#else
    #define JSON_HEDLEY_TI_CL6X_VERSION_CHECK(major,minor,patch) (0)
#endif

#if defined(JSON_HEDLEY_TI_CL7X_VERSION)
    #undef JSON_HEDLEY_TI_CL7X_VERSION
#endif
#if defined(__TI_COMPILER_VERSION__) && defined(__C7000__)
    #define JSON_HEDLEY_TI_CL7X_VERSION JSON_HEDLEY_VERSION_ENCODE(__TI_COMPILER_VERSION__ / 1000000, (__TI_COMPILER_VERSION__ % 1000000) / 1000, (__TI_COMPILER_VERSION__ % 1000))
#endif

#if defined(JSON_HEDLEY_TI_CL7X_VERSION_CHECK)
    #undef JSON_HEDLEY_TI_CL7X_VERSION_CHECK
#endif
#if defined(JSON_HEDLEY_TI_CL7X_VERSION)
    #define JSON_HEDLEY_TI_CL7X_VERSION_CHECK(major,minor,patch) (JSON_HEDLEY_TI_CL7X_VERSION >= JSON_HEDLEY_VERSION_ENCODE(major, minor, patch))
#else
    #define JSON_HEDLEY_TI_CL7X_VERSION_CHECK(major,minor,patch) (0)
#endif

#if defined(JSON_HEDLEY_TI_CLPRU_VERSION)
    #undef JSON_HEDLEY_TI_CLPRU_VERSION
#endif
#if defined(__TI_COMPILER_VERSION__) && defined(__PRU__)
    #define JSON_HEDLEY_TI_CLPRU_VERSION JSON_HEDLEY_VERSION_ENCODE(__TI_COMPILER_VERSION__ / 1000000, (__TI_COMPILER_VERSION__ % 1000000) / 1000, (__TI_COMPILER_VERSION__ % 1000))
#endif

#if defined(JSON_HEDLEY_TI_CLPRU_VERSION_CHECK)
    #undef JSON_HEDLEY_TI_CLPRU_VERSION_CHECK
#endif
#if defined(JSON_HEDLEY_TI_CLPRU_VERSION)
    #define JSON_HEDLEY_TI_CLPRU_VERSION_CHECK(major,minor,patch) (JSON_HEDLEY_TI_CLPRU_VERSION >= JSON_HEDLEY_VERSION_ENCODE(major, minor, patch))
#else
    #define JSON_HEDLEY_TI_CLPRU_VERSION_CHECK(major,minor,patch) (0)
#endif

#if defined(JSON_HEDLEY_CRAY_VERSION)
    #undef JSON_HEDLEY_CRAY_VERSION
#endif
#if defined(_CRAYC)
    #if defined(_RELEASE_PATCHLEVEL)
        #define JSON_HEDLEY_CRAY_VERSION JSON_HEDLEY_VERSION_ENCODE(_RELEASE_MAJOR, _RELEASE_MINOR, _RELEASE_PATCHLEVEL)
    #else
        #define JSON_HEDLEY_CRAY_VERSION JSON_HEDLEY_VERSION_ENCODE(_RELEASE_MAJOR, _RELEASE_MINOR, 0)
    #endif
#endif

#if defined(JSON_HEDLEY_CRAY_VERSION_CHECK)
    #undef JSON_HEDLEY_CRAY_VERSION_CHECK
#endif
#if defined(JSON_HEDLEY_CRAY_VERSION)
    #define JSON_HEDLEY_CRAY_VERSION_CHECK(major,minor,patch) (JSON_HEDLEY_CRAY_VERSION >= JSON_HEDLEY_VERSION_ENCODE(major, minor, patch))
#else
    #define JSON_HEDLEY_CRAY_VERSION_CHECK(major,minor,patch) (0)
#endif

#if defined(JSON_HEDLEY_IAR_VERSION)
    #undef JSON_HEDLEY_IAR_VERSION
#endif
#if defined(__IAR_SYSTEMS_ICC__)
    #if __VER__ > 1000
        #define JSON_HEDLEY_IAR_VERSION JSON_HEDLEY_VERSION_ENCODE((__VER__ / 1000000), ((__VER__ / 1000) % 1000), (__VER__ % 1000))
    #else
        #define JSON_HEDLEY_IAR_VERSION JSON_HEDLEY_VERSION_ENCODE(__VER__ / 100, __VER__ % 100, 0)
    #endif
#endif

#if defined(JSON_HEDLEY_IAR_VERSION_CHECK)
    #undef JSON_HEDLEY_IAR_VERSION_CHECK
#endif
#if defined(JSON_HEDLEY_IAR_VERSION)
    #define JSON_HEDLEY_IAR_VERSION_CHECK(major,minor,patch) (JSON_HEDLEY_IAR_VERSION >= JSON_HEDLEY_VERSION_ENCODE(major, minor, patch))
#else
    #define JSON_HEDLEY_IAR_VERSION_CHECK(major,minor,patch) (0)
#endif

#if defined(JSON_HEDLEY_TINYC_VERSION)
    #undef JSON_HEDLEY_TINYC_VERSION
#endif
#if defined(__TINYC__)
    #define JSON_HEDLEY_TINYC_VERSION JSON_HEDLEY_VERSION_ENCODE(__TINYC__ / 1000, (__TINYC__ / 100) % 10, __TINYC__ % 100)
#endif

#if defined(JSON_HEDLEY_TINYC_VERSION_CHECK)
    #undef JSON_HEDLEY_TINYC_VERSION_CHECK
#endif
#if defined(JSON_HEDLEY_TINYC_VERSION)
    #define JSON_HEDLEY_TINYC_VERSION_CHECK(major,minor,patch) (JSON_HEDLEY_TINYC_VERSION >= JSON_HEDLEY_VERSION_ENCODE(major, minor, patch))
#else
    #define JSON_HEDLEY_TINYC_VERSION_CHECK(major,minor,patch) (0)
#endif

#if defined(JSON_HEDLEY_DMC_VERSION)
    #undef JSON_HEDLEY_DMC_VERSION
#endif
#if defined(__DMC__)
    #define JSON_HEDLEY_DMC_VERSION JSON_HEDLEY_VERSION_ENCODE(__DMC__ >> 8, (__DMC__ >> 4) & 0xf, __DMC__ & 0xf)
#endif

#if defined(JSON_HEDLEY_DMC_VERSION_CHECK)
    #undef JSON_HEDLEY_DMC_VERSION_CHECK
#endif
#if defined(JSON_HEDLEY_DMC_VERSION)
    #define JSON_HEDLEY_DMC_VERSION_CHECK(major,minor,patch) (JSON_HEDLEY_DMC_VERSION >= JSON_HEDLEY_VERSION_ENCODE(major, minor, patch))
#else
    #define JSON_HEDLEY_DMC_VERSION_CHECK(major,minor,patch) (0)
#endif

#if defined(JSON_HEDLEY_COMPCERT_VERSION)
    #undef JSON_HEDLEY_COMPCERT_VERSION
#endif
#if defined(__COMPCERT_VERSION__)
    #define JSON_HEDLEY_COMPCERT_VERSION JSON_HEDLEY_VERSION_ENCODE(__COMPCERT_VERSION__ / 10000, (__COMPCERT_VERSION__ / 100) % 100, __COMPCERT_VERSION__ % 100)
#endif

#if defined(JSON_HEDLEY_COMPCERT_VERSION_CHECK)
    #undef JSON_HEDLEY_COMPCERT_VERSION_CHECK
#endif
#if defined(JSON_HEDLEY_COMPCERT_VERSION)
    #define JSON_HEDLEY_COMPCERT_VERSION_CHECK(major,minor,patch) (JSON_HEDLEY_COMPCERT_VERSION >= JSON_HEDLEY_VERSION_ENCODE(major, minor, patch))
#else
    #define JSON_HEDLEY_COMPCERT_VERSION_CHECK(major,minor,patch) (0)
#endif

#if defined(JSON_HEDLEY_PELLES_VERSION)
    #undef JSON_HEDLEY_PELLES_VERSION
#endif
#if defined(__POCC__)
    #define JSON_HEDLEY_PELLES_VERSION JSON_HEDLEY_VERSION_ENCODE(__POCC__ / 100, __POCC__ % 100, 0)
#endif

#if defined(JSON_HEDLEY_PELLES_VERSION_CHECK)
    #undef JSON_HEDLEY_PELLES_VERSION_CHECK
#endif
#if defined(JSON_HEDLEY_PELLES_VERSION)
    #define JSON_HEDLEY_PELLES_VERSION_CHECK(major,minor,patch) (JSON_HEDLEY_PELLES_VERSION >= JSON_HEDLEY_VERSION_ENCODE(major, minor, patch))
#else
    #define JSON_HEDLEY_PELLES_VERSION_CHECK(major,minor,patch) (0)
#endif

#if defined(JSON_HEDLEY_MCST_LCC_VERSION)
    #undef JSON_HEDLEY_MCST_LCC_VERSION
#endif
#if defined(__LCC__) && defined(__LCC_MINOR__)
    #define JSON_HEDLEY_MCST_LCC_VERSION JSON_HEDLEY_VERSION_ENCODE(__LCC__ / 100, __LCC__ % 100, __LCC_MINOR__)
#endif

#if defined(JSON_HEDLEY_MCST_LCC_VERSION_CHECK)
    #undef JSON_HEDLEY_MCST_LCC_VERSION_CHECK
#endif
#if defined(JSON_HEDLEY_MCST_LCC_VERSION)
    #define JSON_HEDLEY_MCST_LCC_VERSION_CHECK(major,minor,patch) (JSON_HEDLEY_MCST_LCC_VERSION >= JSON_HEDLEY_VERSION_ENCODE(major, minor, patch))
#else
    #define JSON_HEDLEY_MCST_LCC_VERSION_CHECK(major,minor,patch) (0)
#endif

#if defined(JSON_HEDLEY_GCC_VERSION)
    #undef JSON_HEDLEY_GCC_VERSION
#endif
#if \
    defined(JSON_HEDLEY_GNUC_VERSION) && \
    !defined(__clang__) && \
    !defined(JSON_HEDLEY_INTEL_VERSION) && \
    !defined(JSON_HEDLEY_PGI_VERSION) && \
    !defined(JSON_HEDLEY_ARM_VERSION) && \
    !defined(JSON_HEDLEY_CRAY_VERSION) && \
    !defined(JSON_HEDLEY_TI_VERSION) && \
    !defined(JSON_HEDLEY_TI_ARMCL_VERSION) && \
    !defined(JSON_HEDLEY_TI_CL430_VERSION) && \
    !defined(JSON_HEDLEY_TI_CL2000_VERSION) && \
    !defined(JSON_HEDLEY_TI_CL6X_VERSION) && \
    !defined(JSON_HEDLEY_TI_CL7X_VERSION) && \
    !defined(JSON_HEDLEY_TI_CLPRU_VERSION) && \
    !defined(__COMPCERT__) && \
    !defined(JSON_HEDLEY_MCST_LCC_VERSION)
    #define JSON_HEDLEY_GCC_VERSION JSON_HEDLEY_GNUC_VERSION
#endif

#if defined(JSON_HEDLEY_GCC_VERSION_CHECK)
    #undef JSON_HEDLEY_GCC_VERSION_CHECK
#endif
#if defined(JSON_HEDLEY_GCC_VERSION)
    #define JSON_HEDLEY_GCC_VERSION_CHECK(major,minor,patch) (JSON_HEDLEY_GCC_VERSION >= JSON_HEDLEY_VERSION_ENCODE(major, minor, patch))
#else
    #define JSON_HEDLEY_GCC_VERSION_CHECK(major,minor,patch) (0)
#endif

#if defined(JSON_HEDLEY_HAS_ATTRIBUTE)
    #undef JSON_HEDLEY_HAS_ATTRIBUTE
#endif
#if \
  defined(__has_attribute) && \
  ( \
    (!defined(JSON_HEDLEY_IAR_VERSION) || JSON_HEDLEY_IAR_VERSION_CHECK(8,5,9)) \
  )
#  define JSON_HEDLEY_HAS_ATTRIBUTE(attribute) __has_attribute(attribute)
#else
#  define JSON_HEDLEY_HAS_ATTRIBUTE(attribute) (0)
#endif

#if defined(JSON_HEDLEY_GNUC_HAS_ATTRIBUTE)
    #undef JSON_HEDLEY_GNUC_HAS_ATTRIBUTE
#endif
#if defined(__has_attribute)
    #define JSON_HEDLEY_GNUC_HAS_ATTRIBUTE(attribute,major,minor,patch) JSON_HEDLEY_HAS_ATTRIBUTE(attribute)
#else
    #define JSON_HEDLEY_GNUC_HAS_ATTRIBUTE(attribute,major,minor,patch) JSON_HEDLEY_GNUC_VERSION_CHECK(major,minor,patch)
#endif

#if defined(JSON_HEDLEY_GCC_HAS_ATTRIBUTE)
    #undef JSON_HEDLEY_GCC_HAS_ATTRIBUTE
#endif
#if defined(__has_attribute)
    #define JSON_HEDLEY_GCC_HAS_ATTRIBUTE(attribute,major,minor,patch) JSON_HEDLEY_HAS_ATTRIBUTE(attribute)
#else
    #define JSON_HEDLEY_GCC_HAS_ATTRIBUTE(attribute,major,minor,patch) JSON_HEDLEY_GCC_VERSION_CHECK(major,minor,patch)
#endif

#if defined(JSON_HEDLEY_HAS_CPP_ATTRIBUTE)
    #undef JSON_HEDLEY_HAS_CPP_ATTRIBUTE
#endif
#if \
    defined(__has_cpp_attribute) && \
    defined(__cplusplus) && \
    (!defined(JSON_HEDLEY_SUNPRO_VERSION) || JSON_HEDLEY_SUNPRO_VERSION_CHECK(5,15,0))
    #define JSON_HEDLEY_HAS_CPP_ATTRIBUTE(attribute) __has_cpp_attribute(attribute)
#else
    #define JSON_HEDLEY_HAS_CPP_ATTRIBUTE(attribute) (0)
#endif

#if defined(JSON_HEDLEY_HAS_CPP_ATTRIBUTE_NS)
    #undef JSON_HEDLEY_HAS_CPP_ATTRIBUTE_NS
#endif
#if !defined(__cplusplus) || !defined(__has_cpp_attribute)
    #define JSON_HEDLEY_HAS_CPP_ATTRIBUTE_NS(ns,attribute) (0)
#elif \
    !defined(JSON_HEDLEY_PGI_VERSION) && \
    !defined(JSON_HEDLEY_IAR_VERSION) && \
    (!defined(JSON_HEDLEY_SUNPRO_VERSION) || JSON_HEDLEY_SUNPRO_VERSION_CHECK(5,15,0)) && \
    (!defined(JSON_HEDLEY_MSVC_VERSION) || JSON_HEDLEY_MSVC_VERSION_CHECK(19,20,0))
    #define JSON_HEDLEY_HAS_CPP_ATTRIBUTE_NS(ns,attribute) JSON_HEDLEY_HAS_CPP_ATTRIBUTE(ns::attribute)
#else
    #define JSON_HEDLEY_HAS_CPP_ATTRIBUTE_NS(ns,attribute) (0)
#endif

#if defined(JSON_HEDLEY_GNUC_HAS_CPP_ATTRIBUTE)
    #undef JSON_HEDLEY_GNUC_HAS_CPP_ATTRIBUTE
#endif
#if defined(__has_cpp_attribute) && defined(__cplusplus)
    #define JSON_HEDLEY_GNUC_HAS_CPP_ATTRIBUTE(attribute,major,minor,patch) __has_cpp_attribute(attribute)
#else
    #define JSON_HEDLEY_GNUC_HAS_CPP_ATTRIBUTE(attribute,major,minor,patch) JSON_HEDLEY_GNUC_VERSION_CHECK(major,minor,patch)
#endif

#if defined(JSON_HEDLEY_GCC_HAS_CPP_ATTRIBUTE)
    #undef JSON_HEDLEY_GCC_HAS_CPP_ATTRIBUTE
#endif
#if defined(__has_cpp_attribute) && defined(__cplusplus)
    #define JSON_HEDLEY_GCC_HAS_CPP_ATTRIBUTE(attribute,major,minor,patch) __has_cpp_attribute(attribute)
#else
    #define JSON_HEDLEY_GCC_HAS_CPP_ATTRIBUTE(attribute,major,minor,patch) JSON_HEDLEY_GCC_VERSION_CHECK(major,minor,patch)
#endif

#if defined(JSON_HEDLEY_HAS_BUILTIN)
    #undef JSON_HEDLEY_HAS_BUILTIN
#endif
#if defined(__has_builtin)
    #define JSON_HEDLEY_HAS_BUILTIN(builtin) __has_builtin(builtin)
#else
    #define JSON_HEDLEY_HAS_BUILTIN(builtin) (0)
#endif

#if defined(JSON_HEDLEY_GNUC_HAS_BUILTIN)
    #undef JSON_HEDLEY_GNUC_HAS_BUILTIN
#endif
#if defined(__has_builtin)
    #define JSON_HEDLEY_GNUC_HAS_BUILTIN(builtin,major,minor,patch) __has_builtin(builtin)
#else
    #define JSON_HEDLEY_GNUC_HAS_BUILTIN(builtin,major,minor,patch) JSON_HEDLEY_GNUC_VERSION_CHECK(major,minor,patch)
#endif

#if defined(JSON_HEDLEY_GCC_HAS_BUILTIN)
    #undef JSON_HEDLEY_GCC_HAS_BUILTIN
#endif
#if defined(__has_builtin)
    #define JSON_HEDLEY_GCC_HAS_BUILTIN(builtin,major,minor,patch) __has_builtin(builtin)
#else
    #define JSON_HEDLEY_GCC_HAS_BUILTIN(builtin,major,minor,patch) JSON_HEDLEY_GCC_VERSION_CHECK(major,minor,patch)
#endif

#if defined(JSON_HEDLEY_HAS_FEATURE)
    #undef JSON_HEDLEY_HAS_FEATURE
#endif
#if defined(__has_feature)
    #define JSON_HEDLEY_HAS_FEATURE(feature) __has_feature(feature)
#else
    #define JSON_HEDLEY_HAS_FEATURE(feature) (0)
#endif

#if defined(JSON_HEDLEY_GNUC_HAS_FEATURE)
    #undef JSON_HEDLEY_GNUC_HAS_FEATURE
#endif
#if defined(__has_feature)
    #define JSON_HEDLEY_GNUC_HAS_FEATURE(feature,major,minor,patch) __has_feature(feature)
#else
    #define JSON_HEDLEY_GNUC_HAS_FEATURE(feature,major,minor,patch) JSON_HEDLEY_GNUC_VERSION_CHECK(major,minor,patch)
#endif

#if defined(JSON_HEDLEY_GCC_HAS_FEATURE)
    #undef JSON_HEDLEY_GCC_HAS_FEATURE
#endif
#if defined(__has_feature)
    #define JSON_HEDLEY_GCC_HAS_FEATURE(feature,major,minor,patch) __has_feature(feature)
#else
    #define JSON_HEDLEY_GCC_HAS_FEATURE(feature,major,minor,patch) JSON_HEDLEY_GCC_VERSION_CHECK(major,minor,patch)
#endif

#if defined(JSON_HEDLEY_HAS_EXTENSION)
    #undef JSON_HEDLEY_HAS_EXTENSION
#endif
#if defined(__has_extension)
    #define JSON_HEDLEY_HAS_EXTENSION(extension) __has_extension(extension)
#else
    #define JSON_HEDLEY_HAS_EXTENSION(extension) (0)
#endif

#if defined(JSON_HEDLEY_GNUC_HAS_EXTENSION)
    #undef JSON_HEDLEY_GNUC_HAS_EXTENSION
#endif
#if defined(__has_extension)
    #define JSON_HEDLEY_GNUC_HAS_EXTENSION(extension,major,minor,patch) __has_extension(extension)
#else
    #define JSON_HEDLEY_GNUC_HAS_EXTENSION(extension,major,minor,patch) JSON_HEDLEY_GNUC_VERSION_CHECK(major,minor,patch)
#endif

#if defined(JSON_HEDLEY_GCC_HAS_EXTENSION)
    #undef JSON_HEDLEY_GCC_HAS_EXTENSION
#endif
#if defined(__has_extension)
    #define JSON_HEDLEY_GCC_HAS_EXTENSION(extension,major,minor,patch) __has_extension(extension)
#else
    #define JSON_HEDLEY_GCC_HAS_EXTENSION(extension,major,minor,patch) JSON_HEDLEY_GCC_VERSION_CHECK(major,minor,patch)
#endif

#if defined(JSON_HEDLEY_HAS_DECLSPEC_ATTRIBUTE)
    #undef JSON_HEDLEY_HAS_DECLSPEC_ATTRIBUTE
#endif
#if defined(__has_declspec_attribute)
    #define JSON_HEDLEY_HAS_DECLSPEC_ATTRIBUTE(attribute) __has_declspec_attribute(attribute)
#else
    #define JSON_HEDLEY_HAS_DECLSPEC_ATTRIBUTE(attribute) (0)
#endif

#if defined(JSON_HEDLEY_GNUC_HAS_DECLSPEC_ATTRIBUTE)
    #undef JSON_HEDLEY_GNUC_HAS_DECLSPEC_ATTRIBUTE
#endif
#if defined(__has_declspec_attribute)
    #define JSON_HEDLEY_GNUC_HAS_DECLSPEC_ATTRIBUTE(attribute,major,minor,patch) __has_declspec_attribute(attribute)
#else
    #define JSON_HEDLEY_GNUC_HAS_DECLSPEC_ATTRIBUTE(attribute,major,minor,patch) JSON_HEDLEY_GNUC_VERSION_CHECK(major,minor,patch)
#endif

#if defined(JSON_HEDLEY_GCC_HAS_DECLSPEC_ATTRIBUTE)
    #undef JSON_HEDLEY_GCC_HAS_DECLSPEC_ATTRIBUTE
#endif
#if defined(__has_declspec_attribute)
    #define JSON_HEDLEY_GCC_HAS_DECLSPEC_ATTRIBUTE(attribute,major,minor,patch) __has_declspec_attribute(attribute)
#else
    #define JSON_HEDLEY_GCC_HAS_DECLSPEC_ATTRIBUTE(attribute,major,minor,patch) JSON_HEDLEY_GCC_VERSION_CHECK(major,minor,patch)
#endif

#if defined(JSON_HEDLEY_HAS_WARNING)
    #undef JSON_HEDLEY_HAS_WARNING
#endif
#if defined(__has_warning)
    #define JSON_HEDLEY_HAS_WARNING(warning) __has_warning(warning)
#else
    #define JSON_HEDLEY_HAS_WARNING(warning) (0)
#endif

#if defined(JSON_HEDLEY_GNUC_HAS_WARNING)
    #undef JSON_HEDLEY_GNUC_HAS_WARNING
#endif
#if defined(__has_warning)
    #define JSON_HEDLEY_GNUC_HAS_WARNING(warning,major,minor,patch) __has_warning(warning)
#else
    #define JSON_HEDLEY_GNUC_HAS_WARNING(warning,major,minor,patch) JSON_HEDLEY_GNUC_VERSION_CHECK(major,minor,patch)
#endif

#if defined(JSON_HEDLEY_GCC_HAS_WARNING)
    #undef JSON_HEDLEY_GCC_HAS_WARNING
#endif
#if defined(__has_warning)
    #define JSON_HEDLEY_GCC_HAS_WARNING(warning,major,minor,patch) __has_warning(warning)
#else
    #define JSON_HEDLEY_GCC_HAS_WARNING(warning,major,minor,patch) JSON_HEDLEY_GCC_VERSION_CHECK(major,minor,patch)
#endif

#if \
    (defined(__STDC_VERSION__) && (__STDC_VERSION__ >= 199901L)) || \
    defined(__clang__) || \
    JSON_HEDLEY_GCC_VERSION_CHECK(3,0,0) || \
    JSON_HEDLEY_INTEL_VERSION_CHECK(13,0,0) || \
    JSON_HEDLEY_IAR_VERSION_CHECK(8,0,0) || \
    JSON_HEDLEY_PGI_VERSION_CHECK(18,4,0) || \
    JSON_HEDLEY_ARM_VERSION_CHECK(4,1,0) || \
    JSON_HEDLEY_TI_VERSION_CHECK(15,12,0) || \
    JSON_HEDLEY_TI_ARMCL_VERSION_CHECK(4,7,0) || \
    JSON_HEDLEY_TI_CL430_VERSION_CHECK(2,0,1) || \
    JSON_HEDLEY_TI_CL2000_VERSION_CHECK(6,1,0) || \
    JSON_HEDLEY_TI_CL6X_VERSION_CHECK(7,0,0) || \
    JSON_HEDLEY_TI_CL7X_VERSION_CHECK(1,2,0) || \
    JSON_HEDLEY_TI_CLPRU_VERSION_CHECK(2,1,0) || \
    JSON_HEDLEY_CRAY_VERSION_CHECK(5,0,0) || \
    JSON_HEDLEY_TINYC_VERSION_CHECK(0,9,17) || \
    JSON_HEDLEY_SUNPRO_VERSION_CHECK(8,0,0) || \
    (JSON_HEDLEY_IBM_VERSION_CHECK(10,1,0) && defined(__C99_PRAGMA_OPERATOR))
    #define JSON_HEDLEY_PRAGMA(value) _Pragma(#value)
#elif JSON_HEDLEY_MSVC_VERSION_CHECK(15,0,0)
    #define JSON_HEDLEY_PRAGMA(value) __pragma(value)
#else
    #define JSON_HEDLEY_PRAGMA(value)
#endif

#if defined(JSON_HEDLEY_DIAGNOSTIC_PUSH)
    #undef JSON_HEDLEY_DIAGNOSTIC_PUSH
#endif
#if defined(JSON_HEDLEY_DIAGNOSTIC_POP)
    #undef JSON_HEDLEY_DIAGNOSTIC_POP
#endif
#if defined(__clang__)
    #define JSON_HEDLEY_DIAGNOSTIC_PUSH _Pragma("clang diagnostic push")
    #define JSON_HEDLEY_DIAGNOSTIC_POP _Pragma("clang diagnostic pop")
#elif JSON_HEDLEY_INTEL_VERSION_CHECK(13,0,0)
    #define JSON_HEDLEY_DIAGNOSTIC_PUSH _Pragma("warning(push)")
    #define JSON_HEDLEY_DIAGNOSTIC_POP _Pragma("warning(pop)")
#elif JSON_HEDLEY_GCC_VERSION_CHECK(4,6,0)
    #define JSON_HEDLEY_DIAGNOSTIC_PUSH _Pragma("GCC diagnostic push")
    #define JSON_HEDLEY_DIAGNOSTIC_POP _Pragma("GCC diagnostic pop")
#elif \
    JSON_HEDLEY_MSVC_VERSION_CHECK(15,0,0) || \
    JSON_HEDLEY_INTEL_CL_VERSION_CHECK(2021,1,0)
    #define JSON_HEDLEY_DIAGNOSTIC_PUSH __pragma(warning(push))
    #define JSON_HEDLEY_DIAGNOSTIC_POP __pragma(warning(pop))
#elif JSON_HEDLEY_ARM_VERSION_CHECK(5,6,0)
    #define JSON_HEDLEY_DIAGNOSTIC_PUSH _Pragma("push")
    #define JSON_HEDLEY_DIAGNOSTIC_POP _Pragma("pop")
#elif \
    JSON_HEDLEY_TI_VERSION_CHECK(15,12,0) || \
    JSON_HEDLEY_TI_ARMCL_VERSION_CHECK(5,2,0) || \
    JSON_HEDLEY_TI_CL430_VERSION_CHECK(4,4,0) || \
    JSON_HEDLEY_TI_CL6X_VERSION_CHECK(8,1,0) || \
    JSON_HEDLEY_TI_CL7X_VERSION_CHECK(1,2,0) || \
    JSON_HEDLEY_TI_CLPRU_VERSION_CHECK(2,1,0)
    #define JSON_HEDLEY_DIAGNOSTIC_PUSH _Pragma("diag_push")
    #define JSON_HEDLEY_DIAGNOSTIC_POP _Pragma("diag_pop")
#elif JSON_HEDLEY_PELLES_VERSION_CHECK(2,90,0)
    #define JSON_HEDLEY_DIAGNOSTIC_PUSH _Pragma("warning(push)")
    #define JSON_HEDLEY_DIAGNOSTIC_POP _Pragma("warning(pop)")
#else
    #define JSON_HEDLEY_DIAGNOSTIC_PUSH
    #define JSON_HEDLEY_DIAGNOSTIC_POP
#endif

/* JSON_HEDLEY_DIAGNOSTIC_DISABLE_CPP98_COMPAT_WRAP_ is for
   HEDLEY INTERNAL USE ONLY.  API subject to change without notice. */
#if defined(JSON_HEDLEY_DIAGNOSTIC_DISABLE_CPP98_COMPAT_WRAP_)
    #undef JSON_HEDLEY_DIAGNOSTIC_DISABLE_CPP98_COMPAT_WRAP_
#endif
#if defined(__cplusplus)
#  if JSON_HEDLEY_HAS_WARNING("-Wc++98-compat")
#    if JSON_HEDLEY_HAS_WARNING("-Wc++17-extensions")
#      if JSON_HEDLEY_HAS_WARNING("-Wc++1z-extensions")
#        define JSON_HEDLEY_DIAGNOSTIC_DISABLE_CPP98_COMPAT_WRAP_(xpr) \
    JSON_HEDLEY_DIAGNOSTIC_PUSH \
    _Pragma("clang diagnostic ignored \"-Wc++98-compat\"") \
    _Pragma("clang diagnostic ignored \"-Wc++17-extensions\"") \
    _Pragma("clang diagnostic ignored \"-Wc++1z-extensions\"") \
    xpr \
    JSON_HEDLEY_DIAGNOSTIC_POP
#      else
#        define JSON_HEDLEY_DIAGNOSTIC_DISABLE_CPP98_COMPAT_WRAP_(xpr) \
    JSON_HEDLEY_DIAGNOSTIC_PUSH \
    _Pragma("clang diagnostic ignored \"-Wc++98-compat\"") \
    _Pragma("clang diagnostic ignored \"-Wc++17-extensions\"") \
    xpr \
    JSON_HEDLEY_DIAGNOSTIC_POP
#      endif
#    else
#      define JSON_HEDLEY_DIAGNOSTIC_DISABLE_CPP98_COMPAT_WRAP_(xpr) \
    JSON_HEDLEY_DIAGNOSTIC_PUSH \
    _Pragma("clang diagnostic ignored \"-Wc++98-compat\"") \
    xpr \
    JSON_HEDLEY_DIAGNOSTIC_POP
#    endif
#  endif
#endif
#if !defined(JSON_HEDLEY_DIAGNOSTIC_DISABLE_CPP98_COMPAT_WRAP_)
    #define JSON_HEDLEY_DIAGNOSTIC_DISABLE_CPP98_COMPAT_WRAP_(x) x
#endif

#if defined(JSON_HEDLEY_CONST_CAST)
    #undef JSON_HEDLEY_CONST_CAST
#endif
#if defined(__cplusplus)
#  define JSON_HEDLEY_CONST_CAST(T, expr) (const_cast<T>(expr))
#elif \
  JSON_HEDLEY_HAS_WARNING("-Wcast-qual") || \
  JSON_HEDLEY_GCC_VERSION_CHECK(4,6,0) || \
  JSON_HEDLEY_INTEL_VERSION_CHECK(13,0,0)
#  define JSON_HEDLEY_CONST_CAST(T, expr) (__extension__ ({ \
        JSON_HEDLEY_DIAGNOSTIC_PUSH \
        JSON_HEDLEY_DIAGNOSTIC_DISABLE_CAST_QUAL \
        ((T) (expr)); \
        JSON_HEDLEY_DIAGNOSTIC_POP \
    }))
#else
#  define JSON_HEDLEY_CONST_CAST(T, expr) ((T) (expr))
#endif

#if defined(JSON_HEDLEY_REINTERPRET_CAST)
    #undef JSON_HEDLEY_REINTERPRET_CAST
#endif
#if defined(__cplusplus)
    #define JSON_HEDLEY_REINTERPRET_CAST(T, expr) (reinterpret_cast<T>(expr))
#else
    #define JSON_HEDLEY_REINTERPRET_CAST(T, expr) ((T) (expr))
#endif

#if defined(JSON_HEDLEY_STATIC_CAST)
    #undef JSON_HEDLEY_STATIC_CAST
#endif
#if defined(__cplusplus)
    #define JSON_HEDLEY_STATIC_CAST(T, expr) (static_cast<T>(expr))
#else
    #define JSON_HEDLEY_STATIC_CAST(T, expr) ((T) (expr))
#endif

#if defined(JSON_HEDLEY_CPP_CAST)
    #undef JSON_HEDLEY_CPP_CAST
#endif
#if defined(__cplusplus)
#  if JSON_HEDLEY_HAS_WARNING("-Wold-style-cast")
#    define JSON_HEDLEY_CPP_CAST(T, expr) \
    JSON_HEDLEY_DIAGNOSTIC_PUSH \
    _Pragma("clang diagnostic ignored \"-Wold-style-cast\"") \
    ((T) (expr)) \
    JSON_HEDLEY_DIAGNOSTIC_POP
#  elif JSON_HEDLEY_IAR_VERSION_CHECK(8,3,0)
#    define JSON_HEDLEY_CPP_CAST(T, expr) \
    JSON_HEDLEY_DIAGNOSTIC_PUSH \
    _Pragma("diag_suppress=Pe137") \
    JSON_HEDLEY_DIAGNOSTIC_POP
#  else
#    define JSON_HEDLEY_CPP_CAST(T, expr) ((T) (expr))
#  endif
#else
#  define JSON_HEDLEY_CPP_CAST(T, expr) (expr)
#endif

#if defined(JSON_HEDLEY_DIAGNOSTIC_DISABLE_DEPRECATED)
    #undef JSON_HEDLEY_DIAGNOSTIC_DISABLE_DEPRECATED
#endif
#if JSON_HEDLEY_HAS_WARNING("-Wdeprecated-declarations")
    #define JSON_HEDLEY_DIAGNOSTIC_DISABLE_DEPRECATED _Pragma("clang diagnostic ignored \"-Wdeprecated-declarations\"")
#elif JSON_HEDLEY_INTEL_VERSION_CHECK(13,0,0)
    #define JSON_HEDLEY_DIAGNOSTIC_DISABLE_DEPRECATED _Pragma("warning(disable:1478 1786)")
#elif JSON_HEDLEY_INTEL_CL_VERSION_CHECK(2021,1,0)
    #define JSON_HEDLEY_DIAGNOSTIC_DISABLE_DEPRECATED __pragma(warning(disable:1478 1786))
#elif JSON_HEDLEY_PGI_VERSION_CHECK(20,7,0)
    #define JSON_HEDLEY_DIAGNOSTIC_DISABLE_DEPRECATED _Pragma("diag_suppress 1215,1216,1444,1445")
#elif JSON_HEDLEY_PGI_VERSION_CHECK(17,10,0)
    #define JSON_HEDLEY_DIAGNOSTIC_DISABLE_DEPRECATED _Pragma("diag_suppress 1215,1444")
#elif JSON_HEDLEY_GCC_VERSION_CHECK(4,3,0)
    #define JSON_HEDLEY_DIAGNOSTIC_DISABLE_DEPRECATED _Pragma("GCC diagnostic ignored \"-Wdeprecated-declarations\"")
#elif JSON_HEDLEY_MSVC_VERSION_CHECK(15,0,0)
    #define JSON_HEDLEY_DIAGNOSTIC_DISABLE_DEPRECATED __pragma(warning(disable:4996))
#elif JSON_HEDLEY_MCST_LCC_VERSION_CHECK(1,25,10)
    #define JSON_HEDLEY_DIAGNOSTIC_DISABLE_DEPRECATED _Pragma("diag_suppress 1215,1444")
#elif \
    JSON_HEDLEY_TI_VERSION_CHECK(15,12,0) || \
    (JSON_HEDLEY_TI_ARMCL_VERSION_CHECK(4,8,0) && defined(__TI_GNU_ATTRIBUTE_SUPPORT__)) || \
    JSON_HEDLEY_TI_ARMCL_VERSION_CHECK(5,2,0) || \
    (JSON_HEDLEY_TI_CL2000_VERSION_CHECK(6,0,0) && defined(__TI_GNU_ATTRIBUTE_SUPPORT__)) || \
    JSON_HEDLEY_TI_CL2000_VERSION_CHECK(6,4,0) || \
    (JSON_HEDLEY_TI_CL430_VERSION_CHECK(4,0,0) && defined(__TI_GNU_ATTRIBUTE_SUPPORT__)) || \
    JSON_HEDLEY_TI_CL430_VERSION_CHECK(4,3,0) || \
    (JSON_HEDLEY_TI_CL6X_VERSION_CHECK(7,2,0) && defined(__TI_GNU_ATTRIBUTE_SUPPORT__)) || \
    JSON_HEDLEY_TI_CL6X_VERSION_CHECK(7,5,0) || \
    JSON_HEDLEY_TI_CL7X_VERSION_CHECK(1,2,0) || \
    JSON_HEDLEY_TI_CLPRU_VERSION_CHECK(2,1,0)
    #define JSON_HEDLEY_DIAGNOSTIC_DISABLE_DEPRECATED _Pragma("diag_suppress 1291,1718")
#elif JSON_HEDLEY_SUNPRO_VERSION_CHECK(5,13,0) && !defined(__cplusplus)
    #define JSON_HEDLEY_DIAGNOSTIC_DISABLE_DEPRECATED _Pragma("error_messages(off,E_DEPRECATED_ATT,E_DEPRECATED_ATT_MESS)")
#elif JSON_HEDLEY_SUNPRO_VERSION_CHECK(5,13,0) && defined(__cplusplus)
    #define JSON_HEDLEY_DIAGNOSTIC_DISABLE_DEPRECATED _Pragma("error_messages(off,symdeprecated,symdeprecated2)")
#elif JSON_HEDLEY_IAR_VERSION_CHECK(8,0,0)
    #define JSON_HEDLEY_DIAGNOSTIC_DISABLE_DEPRECATED _Pragma("diag_suppress=Pe1444,Pe1215")
#elif JSON_HEDLEY_PELLES_VERSION_CHECK(2,90,0)
    #define JSON_HEDLEY_DIAGNOSTIC_DISABLE_DEPRECATED _Pragma("warn(disable:2241)")
#else
    #define JSON_HEDLEY_DIAGNOSTIC_DISABLE_DEPRECATED
#endif

#if defined(JSON_HEDLEY_DIAGNOSTIC_DISABLE_UNKNOWN_PRAGMAS)
    #undef JSON_HEDLEY_DIAGNOSTIC_DISABLE_UNKNOWN_PRAGMAS
#endif
#if JSON_HEDLEY_HAS_WARNING("-Wunknown-pragmas")
    #define JSON_HEDLEY_DIAGNOSTIC_DISABLE_UNKNOWN_PRAGMAS _Pragma("clang diagnostic ignored \"-Wunknown-pragmas\"")
#elif JSON_HEDLEY_INTEL_VERSION_CHECK(13,0,0)
    #define JSON_HEDLEY_DIAGNOSTIC_DISABLE_UNKNOWN_PRAGMAS _Pragma("warning(disable:161)")
#elif JSON_HEDLEY_INTEL_CL_VERSION_CHECK(2021,1,0)
    #define JSON_HEDLEY_DIAGNOSTIC_DISABLE_UNKNOWN_PRAGMAS __pragma(warning(disable:161))
#elif JSON_HEDLEY_PGI_VERSION_CHECK(17,10,0)
    #define JSON_HEDLEY_DIAGNOSTIC_DISABLE_UNKNOWN_PRAGMAS _Pragma("diag_suppress 1675")
#elif JSON_HEDLEY_GCC_VERSION_CHECK(4,3,0)
    #define JSON_HEDLEY_DIAGNOSTIC_DISABLE_UNKNOWN_PRAGMAS _Pragma("GCC diagnostic ignored \"-Wunknown-pragmas\"")
#elif JSON_HEDLEY_MSVC_VERSION_CHECK(15,0,0)
    #define JSON_HEDLEY_DIAGNOSTIC_DISABLE_UNKNOWN_PRAGMAS __pragma(warning(disable:4068))
#elif \
    JSON_HEDLEY_TI_VERSION_CHECK(16,9,0) || \
    JSON_HEDLEY_TI_CL6X_VERSION_CHECK(8,0,0) || \
    JSON_HEDLEY_TI_CL7X_VERSION_CHECK(1,2,0) || \
    JSON_HEDLEY_TI_CLPRU_VERSION_CHECK(2,3,0)
    #define JSON_HEDLEY_DIAGNOSTIC_DISABLE_UNKNOWN_PRAGMAS _Pragma("diag_suppress 163")
#elif JSON_HEDLEY_TI_CL6X_VERSION_CHECK(8,0,0)
    #define JSON_HEDLEY_DIAGNOSTIC_DISABLE_UNKNOWN_PRAGMAS _Pragma("diag_suppress 163")
#elif JSON_HEDLEY_IAR_VERSION_CHECK(8,0,0)
    #define JSON_HEDLEY_DIAGNOSTIC_DISABLE_UNKNOWN_PRAGMAS _Pragma("diag_suppress=Pe161")
#elif JSON_HEDLEY_MCST_LCC_VERSION_CHECK(1,25,10)
    #define JSON_HEDLEY_DIAGNOSTIC_DISABLE_UNKNOWN_PRAGMAS _Pragma("diag_suppress 161")
#else
    #define JSON_HEDLEY_DIAGNOSTIC_DISABLE_UNKNOWN_PRAGMAS
#endif

#if defined(JSON_HEDLEY_DIAGNOSTIC_DISABLE_UNKNOWN_CPP_ATTRIBUTES)
    #undef JSON_HEDLEY_DIAGNOSTIC_DISABLE_UNKNOWN_CPP_ATTRIBUTES
#endif
#if JSON_HEDLEY_HAS_WARNING("-Wunknown-attributes")
    #define JSON_HEDLEY_DIAGNOSTIC_DISABLE_UNKNOWN_CPP_ATTRIBUTES _Pragma("clang diagnostic ignored \"-Wunknown-attributes\"")
#elif JSON_HEDLEY_GCC_VERSION_CHECK(4,6,0)
    #define JSON_HEDLEY_DIAGNOSTIC_DISABLE_UNKNOWN_CPP_ATTRIBUTES _Pragma("GCC diagnostic ignored \"-Wdeprecated-declarations\"")
#elif JSON_HEDLEY_INTEL_VERSION_CHECK(17,0,0)
    #define JSON_HEDLEY_DIAGNOSTIC_DISABLE_UNKNOWN_CPP_ATTRIBUTES _Pragma("warning(disable:1292)")
#elif JSON_HEDLEY_INTEL_CL_VERSION_CHECK(2021,1,0)
    #define JSON_HEDLEY_DIAGNOSTIC_DISABLE_UNKNOWN_CPP_ATTRIBUTES __pragma(warning(disable:1292))
#elif JSON_HEDLEY_MSVC_VERSION_CHECK(19,0,0)
    #define JSON_HEDLEY_DIAGNOSTIC_DISABLE_UNKNOWN_CPP_ATTRIBUTES __pragma(warning(disable:5030))
#elif JSON_HEDLEY_PGI_VERSION_CHECK(20,7,0)
    #define JSON_HEDLEY_DIAGNOSTIC_DISABLE_UNKNOWN_CPP_ATTRIBUTES _Pragma("diag_suppress 1097,1098")
#elif JSON_HEDLEY_PGI_VERSION_CHECK(17,10,0)
    #define JSON_HEDLEY_DIAGNOSTIC_DISABLE_UNKNOWN_CPP_ATTRIBUTES _Pragma("diag_suppress 1097")
#elif JSON_HEDLEY_SUNPRO_VERSION_CHECK(5,14,0) && defined(__cplusplus)
    #define JSON_HEDLEY_DIAGNOSTIC_DISABLE_UNKNOWN_CPP_ATTRIBUTES _Pragma("error_messages(off,attrskipunsup)")
#elif \
    JSON_HEDLEY_TI_VERSION_CHECK(18,1,0) || \
    JSON_HEDLEY_TI_CL6X_VERSION_CHECK(8,3,0) || \
    JSON_HEDLEY_TI_CL7X_VERSION_CHECK(1,2,0)
    #define JSON_HEDLEY_DIAGNOSTIC_DISABLE_UNKNOWN_CPP_ATTRIBUTES _Pragma("diag_suppress 1173")
#elif JSON_HEDLEY_IAR_VERSION_CHECK(8,0,0)
    #define JSON_HEDLEY_DIAGNOSTIC_DISABLE_UNKNOWN_CPP_ATTRIBUTES _Pragma("diag_suppress=Pe1097")
#elif JSON_HEDLEY_MCST_LCC_VERSION_CHECK(1,25,10)
    #define JSON_HEDLEY_DIAGNOSTIC_DISABLE_UNKNOWN_CPP_ATTRIBUTES _Pragma("diag_suppress 1097")
#else
    #define JSON_HEDLEY_DIAGNOSTIC_DISABLE_UNKNOWN_CPP_ATTRIBUTES
#endif

#if defined(JSON_HEDLEY_DIAGNOSTIC_DISABLE_CAST_QUAL)
    #undef JSON_HEDLEY_DIAGNOSTIC_DISABLE_CAST_QUAL
#endif
#if JSON_HEDLEY_HAS_WARNING("-Wcast-qual")
    #define JSON_HEDLEY_DIAGNOSTIC_DISABLE_CAST_QUAL _Pragma("clang diagnostic ignored \"-Wcast-qual\"")
#elif JSON_HEDLEY_INTEL_VERSION_CHECK(13,0,0)
    #define JSON_HEDLEY_DIAGNOSTIC_DISABLE_CAST_QUAL _Pragma("warning(disable:2203 2331)")
#elif JSON_HEDLEY_GCC_VERSION_CHECK(3,0,0)
    #define JSON_HEDLEY_DIAGNOSTIC_DISABLE_CAST_QUAL _Pragma("GCC diagnostic ignored \"-Wcast-qual\"")
#else
    #define JSON_HEDLEY_DIAGNOSTIC_DISABLE_CAST_QUAL
#endif

#if defined(JSON_HEDLEY_DIAGNOSTIC_DISABLE_UNUSED_FUNCTION)
    #undef JSON_HEDLEY_DIAGNOSTIC_DISABLE_UNUSED_FUNCTION
#endif
#if JSON_HEDLEY_HAS_WARNING("-Wunused-function")
    #define JSON_HEDLEY_DIAGNOSTIC_DISABLE_UNUSED_FUNCTION _Pragma("clang diagnostic ignored \"-Wunused-function\"")
#elif JSON_HEDLEY_GCC_VERSION_CHECK(3,4,0)
    #define JSON_HEDLEY_DIAGNOSTIC_DISABLE_UNUSED_FUNCTION _Pragma("GCC diagnostic ignored \"-Wunused-function\"")
#elif JSON_HEDLEY_MSVC_VERSION_CHECK(1,0,0)
    #define JSON_HEDLEY_DIAGNOSTIC_DISABLE_UNUSED_FUNCTION __pragma(warning(disable:4505))
#elif JSON_HEDLEY_MCST_LCC_VERSION_CHECK(1,25,10)
    #define JSON_HEDLEY_DIAGNOSTIC_DISABLE_UNUSED_FUNCTION _Pragma("diag_suppress 3142")
#else
    #define JSON_HEDLEY_DIAGNOSTIC_DISABLE_UNUSED_FUNCTION
#endif

#if defined(JSON_HEDLEY_DEPRECATED)
    #undef JSON_HEDLEY_DEPRECATED
#endif
#if defined(JSON_HEDLEY_DEPRECATED_FOR)
    #undef JSON_HEDLEY_DEPRECATED_FOR
#endif
#if \
    JSON_HEDLEY_MSVC_VERSION_CHECK(14,0,0) || \
    JSON_HEDLEY_INTEL_CL_VERSION_CHECK(2021,1,0)
    #define JSON_HEDLEY_DEPRECATED(since) __declspec(deprecated("Since " # since))
    #define JSON_HEDLEY_DEPRECATED_FOR(since, replacement) __declspec(deprecated("Since " #since "; use " #replacement))
#elif \
    (JSON_HEDLEY_HAS_EXTENSION(attribute_deprecated_with_message) && !defined(JSON_HEDLEY_IAR_VERSION)) || \
    JSON_HEDLEY_GCC_VERSION_CHECK(4,5,0) || \
    JSON_HEDLEY_INTEL_VERSION_CHECK(13,0,0) || \
    JSON_HEDLEY_ARM_VERSION_CHECK(5,6,0) || \
    JSON_HEDLEY_SUNPRO_VERSION_CHECK(5,13,0) || \
    JSON_HEDLEY_PGI_VERSION_CHECK(17,10,0) || \
    JSON_HEDLEY_TI_VERSION_CHECK(18,1,0) || \
    JSON_HEDLEY_TI_ARMCL_VERSION_CHECK(18,1,0) || \
    JSON_HEDLEY_TI_CL6X_VERSION_CHECK(8,3,0) || \
    JSON_HEDLEY_TI_CL7X_VERSION_CHECK(1,2,0) || \
    JSON_HEDLEY_TI_CLPRU_VERSION_CHECK(2,3,0) || \
    JSON_HEDLEY_MCST_LCC_VERSION_CHECK(1,25,10)
    #define JSON_HEDLEY_DEPRECATED(since) __attribute__((__deprecated__("Since " #since)))
    #define JSON_HEDLEY_DEPRECATED_FOR(since, replacement) __attribute__((__deprecated__("Since " #since "; use " #replacement)))
#elif defined(__cplusplus) && (__cplusplus >= 201402L)
    #define JSON_HEDLEY_DEPRECATED(since) JSON_HEDLEY_DIAGNOSTIC_DISABLE_CPP98_COMPAT_WRAP_([[deprecated("Since " #since)]])
    #define JSON_HEDLEY_DEPRECATED_FOR(since, replacement) JSON_HEDLEY_DIAGNOSTIC_DISABLE_CPP98_COMPAT_WRAP_([[deprecated("Since " #since "; use " #replacement)]])
#elif \
    JSON_HEDLEY_HAS_ATTRIBUTE(deprecated) || \
    JSON_HEDLEY_GCC_VERSION_CHECK(3,1,0) || \
    JSON_HEDLEY_ARM_VERSION_CHECK(4,1,0) || \
    JSON_HEDLEY_TI_VERSION_CHECK(15,12,0) || \
    (JSON_HEDLEY_TI_ARMCL_VERSION_CHECK(4,8,0) && defined(__TI_GNU_ATTRIBUTE_SUPPORT__)) || \
    JSON_HEDLEY_TI_ARMCL_VERSION_CHECK(5,2,0) || \
    (JSON_HEDLEY_TI_CL2000_VERSION_CHECK(6,0,0) && defined(__TI_GNU_ATTRIBUTE_SUPPORT__)) || \
    JSON_HEDLEY_TI_CL2000_VERSION_CHECK(6,4,0) || \
    (JSON_HEDLEY_TI_CL430_VERSION_CHECK(4,0,0) && defined(__TI_GNU_ATTRIBUTE_SUPPORT__)) || \
    JSON_HEDLEY_TI_CL430_VERSION_CHECK(4,3,0) || \
    (JSON_HEDLEY_TI_CL6X_VERSION_CHECK(7,2,0) && defined(__TI_GNU_ATTRIBUTE_SUPPORT__)) || \
    JSON_HEDLEY_TI_CL6X_VERSION_CHECK(7,5,0) || \
    JSON_HEDLEY_TI_CL7X_VERSION_CHECK(1,2,0) || \
    JSON_HEDLEY_TI_CLPRU_VERSION_CHECK(2,1,0) || \
    JSON_HEDLEY_MCST_LCC_VERSION_CHECK(1,25,10) || \
    JSON_HEDLEY_IAR_VERSION_CHECK(8,10,0)
    #define JSON_HEDLEY_DEPRECATED(since) __attribute__((__deprecated__))
    #define JSON_HEDLEY_DEPRECATED_FOR(since, replacement) __attribute__((__deprecated__))
#elif \
    JSON_HEDLEY_MSVC_VERSION_CHECK(13,10,0) || \
    JSON_HEDLEY_PELLES_VERSION_CHECK(6,50,0) || \
    JSON_HEDLEY_INTEL_CL_VERSION_CHECK(2021,1,0)
    #define JSON_HEDLEY_DEPRECATED(since) __declspec(deprecated)
    #define JSON_HEDLEY_DEPRECATED_FOR(since, replacement) __declspec(deprecated)
#elif JSON_HEDLEY_IAR_VERSION_CHECK(8,0,0)
    #define JSON_HEDLEY_DEPRECATED(since) _Pragma("deprecated")
    #define JSON_HEDLEY_DEPRECATED_FOR(since, replacement) _Pragma("deprecated")
#else
    #define JSON_HEDLEY_DEPRECATED(since)
    #define JSON_HEDLEY_DEPRECATED_FOR(since, replacement)
#endif

#if defined(JSON_HEDLEY_UNAVAILABLE)
    #undef JSON_HEDLEY_UNAVAILABLE
#endif
#if \
    JSON_HEDLEY_HAS_ATTRIBUTE(warning) || \
    JSON_HEDLEY_GCC_VERSION_CHECK(4,3,0) || \
    JSON_HEDLEY_INTEL_VERSION_CHECK(13,0,0) || \
    JSON_HEDLEY_MCST_LCC_VERSION_CHECK(1,25,10)
    #define JSON_HEDLEY_UNAVAILABLE(available_since) __attribute__((__warning__("Not available until " #available_since)))
#else
    #define JSON_HEDLEY_UNAVAILABLE(available_since)
#endif

#if defined(JSON_HEDLEY_WARN_UNUSED_RESULT)
    #undef JSON_HEDLEY_WARN_UNUSED_RESULT
#endif
#if defined(JSON_HEDLEY_WARN_UNUSED_RESULT_MSG)
    #undef JSON_HEDLEY_WARN_UNUSED_RESULT_MSG
#endif
#if \
    JSON_HEDLEY_HAS_ATTRIBUTE(warn_unused_result) || \
    JSON_HEDLEY_GCC_VERSION_CHECK(3,4,0) || \
    JSON_HEDLEY_INTEL_VERSION_CHECK(13,0,0) || \
    JSON_HEDLEY_TI_VERSION_CHECK(15,12,0) || \
    (JSON_HEDLEY_TI_ARMCL_VERSION_CHECK(4,8,0) && defined(__TI_GNU_ATTRIBUTE_SUPPORT__)) || \
    JSON_HEDLEY_TI_ARMCL_VERSION_CHECK(5,2,0) || \
    (JSON_HEDLEY_TI_CL2000_VERSION_CHECK(6,0,0) && defined(__TI_GNU_ATTRIBUTE_SUPPORT__)) || \
    JSON_HEDLEY_TI_CL2000_VERSION_CHECK(6,4,0) || \
    (JSON_HEDLEY_TI_CL430_VERSION_CHECK(4,0,0) && defined(__TI_GNU_ATTRIBUTE_SUPPORT__)) || \
    JSON_HEDLEY_TI_CL430_VERSION_CHECK(4,3,0) || \
    (JSON_HEDLEY_TI_CL6X_VERSION_CHECK(7,2,0) && defined(__TI_GNU_ATTRIBUTE_SUPPORT__)) || \
    JSON_HEDLEY_TI_CL6X_VERSION_CHECK(7,5,0) || \
    JSON_HEDLEY_TI_CL7X_VERSION_CHECK(1,2,0) || \
    JSON_HEDLEY_TI_CLPRU_VERSION_CHECK(2,1,0) || \
    (JSON_HEDLEY_SUNPRO_VERSION_CHECK(5,15,0) && defined(__cplusplus)) || \
    JSON_HEDLEY_PGI_VERSION_CHECK(17,10,0) || \
    JSON_HEDLEY_MCST_LCC_VERSION_CHECK(1,25,10)
    #define JSON_HEDLEY_WARN_UNUSED_RESULT __attribute__((__warn_unused_result__))
    #define JSON_HEDLEY_WARN_UNUSED_RESULT_MSG(msg) __attribute__((__warn_unused_result__))
#elif (JSON_HEDLEY_HAS_CPP_ATTRIBUTE(nodiscard) >= 201907L)
    #define JSON_HEDLEY_WARN_UNUSED_RESULT JSON_HEDLEY_DIAGNOSTIC_DISABLE_CPP98_COMPAT_WRAP_([[nodiscard]])
    #define JSON_HEDLEY_WARN_UNUSED_RESULT_MSG(msg) JSON_HEDLEY_DIAGNOSTIC_DISABLE_CPP98_COMPAT_WRAP_([[nodiscard(msg)]])
#elif JSON_HEDLEY_HAS_CPP_ATTRIBUTE(nodiscard)
    #define JSON_HEDLEY_WARN_UNUSED_RESULT JSON_HEDLEY_DIAGNOSTIC_DISABLE_CPP98_COMPAT_WRAP_([[nodiscard]])
    #define JSON_HEDLEY_WARN_UNUSED_RESULT_MSG(msg) JSON_HEDLEY_DIAGNOSTIC_DISABLE_CPP98_COMPAT_WRAP_([[nodiscard]])
#elif defined(_Check_return_) /* SAL */
    #define JSON_HEDLEY_WARN_UNUSED_RESULT _Check_return_
    #define JSON_HEDLEY_WARN_UNUSED_RESULT_MSG(msg) _Check_return_
#else
    #define JSON_HEDLEY_WARN_UNUSED_RESULT
    #define JSON_HEDLEY_WARN_UNUSED_RESULT_MSG(msg)
#endif

#if defined(JSON_HEDLEY_SENTINEL)
    #undef JSON_HEDLEY_SENTINEL
#endif
#if \
    JSON_HEDLEY_HAS_ATTRIBUTE(sentinel) || \
    JSON_HEDLEY_GCC_VERSION_CHECK(4,0,0) || \
    JSON_HEDLEY_INTEL_VERSION_CHECK(13,0,0) || \
    JSON_HEDLEY_ARM_VERSION_CHECK(5,4,0) || \
    JSON_HEDLEY_MCST_LCC_VERSION_CHECK(1,25,10)
    #define JSON_HEDLEY_SENTINEL(position) __attribute__((__sentinel__(position)))
#else
    #define JSON_HEDLEY_SENTINEL(position)
#endif

#if defined(JSON_HEDLEY_NO_RETURN)
    #undef JSON_HEDLEY_NO_RETURN
#endif
#if JSON_HEDLEY_IAR_VERSION_CHECK(8,0,0)
    #define JSON_HEDLEY_NO_RETURN __noreturn
#elif \
    JSON_HEDLEY_INTEL_VERSION_CHECK(13,0,0) || \
    JSON_HEDLEY_MCST_LCC_VERSION_CHECK(1,25,10)
    #define JSON_HEDLEY_NO_RETURN __attribute__((__noreturn__))
#elif defined(__STDC_VERSION__) && __STDC_VERSION__ >= 201112L
    #define JSON_HEDLEY_NO_RETURN _Noreturn
#elif defined(__cplusplus) && (__cplusplus >= 201103L)
    #define JSON_HEDLEY_NO_RETURN JSON_HEDLEY_DIAGNOSTIC_DISABLE_CPP98_COMPAT_WRAP_([[noreturn]])
#elif \
    JSON_HEDLEY_HAS_ATTRIBUTE(noreturn) || \
    JSON_HEDLEY_GCC_VERSION_CHECK(3,2,0) || \
    JSON_HEDLEY_SUNPRO_VERSION_CHECK(5,11,0) || \
    JSON_HEDLEY_ARM_VERSION_CHECK(4,1,0) || \
    JSON_HEDLEY_IBM_VERSION_CHECK(10,1,0) || \
    JSON_HEDLEY_TI_VERSION_CHECK(15,12,0) || \
    (JSON_HEDLEY_TI_ARMCL_VERSION_CHECK(4,8,0) && defined(__TI_GNU_ATTRIBUTE_SUPPORT__)) || \
    JSON_HEDLEY_TI_ARMCL_VERSION_CHECK(5,2,0) || \
    (JSON_HEDLEY_TI_CL2000_VERSION_CHECK(6,0,0) && defined(__TI_GNU_ATTRIBUTE_SUPPORT__)) || \
    JSON_HEDLEY_TI_CL2000_VERSION_CHECK(6,4,0) || \
    (JSON_HEDLEY_TI_CL430_VERSION_CHECK(4,0,0) && defined(__TI_GNU_ATTRIBUTE_SUPPORT__)) || \
    JSON_HEDLEY_TI_CL430_VERSION_CHECK(4,3,0) || \
    (JSON_HEDLEY_TI_CL6X_VERSION_CHECK(7,2,0) && defined(__TI_GNU_ATTRIBUTE_SUPPORT__)) || \
    JSON_HEDLEY_TI_CL6X_VERSION_CHECK(7,5,0) || \
    JSON_HEDLEY_TI_CL7X_VERSION_CHECK(1,2,0) || \
    JSON_HEDLEY_TI_CLPRU_VERSION_CHECK(2,1,0) || \
    JSON_HEDLEY_IAR_VERSION_CHECK(8,10,0)
    #define JSON_HEDLEY_NO_RETURN __attribute__((__noreturn__))
#elif JSON_HEDLEY_SUNPRO_VERSION_CHECK(5,10,0)
    #define JSON_HEDLEY_NO_RETURN _Pragma("does_not_return")
#elif \
    JSON_HEDLEY_MSVC_VERSION_CHECK(13,10,0) || \
    JSON_HEDLEY_INTEL_CL_VERSION_CHECK(2021,1,0)
    #define JSON_HEDLEY_NO_RETURN __declspec(noreturn)
#elif JSON_HEDLEY_TI_CL6X_VERSION_CHECK(6,0,0) && defined(__cplusplus)
    #define JSON_HEDLEY_NO_RETURN _Pragma("FUNC_NEVER_RETURNS;")
#elif JSON_HEDLEY_COMPCERT_VERSION_CHECK(3,2,0)
    #define JSON_HEDLEY_NO_RETURN __attribute((noreturn))
#elif JSON_HEDLEY_PELLES_VERSION_CHECK(9,0,0)
    #define JSON_HEDLEY_NO_RETURN __declspec(noreturn)
#else
    #define JSON_HEDLEY_NO_RETURN
#endif

#if defined(JSON_HEDLEY_NO_ESCAPE)
    #undef JSON_HEDLEY_NO_ESCAPE
#endif
#if JSON_HEDLEY_HAS_ATTRIBUTE(noescape)
    #define JSON_HEDLEY_NO_ESCAPE __attribute__((__noescape__))
#else
    #define JSON_HEDLEY_NO_ESCAPE
#endif

#if defined(JSON_HEDLEY_UNREACHABLE)
    #undef JSON_HEDLEY_UNREACHABLE
#endif
#if defined(JSON_HEDLEY_UNREACHABLE_RETURN)
    #undef JSON_HEDLEY_UNREACHABLE_RETURN
#endif
#if defined(JSON_HEDLEY_ASSUME)
    #undef JSON_HEDLEY_ASSUME
#endif
#if \
    JSON_HEDLEY_MSVC_VERSION_CHECK(13,10,0) || \
    JSON_HEDLEY_INTEL_VERSION_CHECK(13,0,0) || \
    JSON_HEDLEY_INTEL_CL_VERSION_CHECK(2021,1,0)
    #define JSON_HEDLEY_ASSUME(expr) __assume(expr)
#elif JSON_HEDLEY_HAS_BUILTIN(__builtin_assume)
    #define JSON_HEDLEY_ASSUME(expr) __builtin_assume(expr)
#elif \
    JSON_HEDLEY_TI_CL2000_VERSION_CHECK(6,2,0) || \
    JSON_HEDLEY_TI_CL6X_VERSION_CHECK(4,0,0)
    #if defined(__cplusplus)
        #define JSON_HEDLEY_ASSUME(expr) std::_nassert(expr)
    #else
        #define JSON_HEDLEY_ASSUME(expr) _nassert(expr)
    #endif
#endif
#if \
    (JSON_HEDLEY_HAS_BUILTIN(__builtin_unreachable) && (!defined(JSON_HEDLEY_ARM_VERSION))) || \
    JSON_HEDLEY_GCC_VERSION_CHECK(4,5,0) || \
    JSON_HEDLEY_PGI_VERSION_CHECK(18,10,0) || \
    JSON_HEDLEY_INTEL_VERSION_CHECK(13,0,0) || \
    JSON_HEDLEY_IBM_VERSION_CHECK(13,1,5) || \
    JSON_HEDLEY_CRAY_VERSION_CHECK(10,0,0) || \
    JSON_HEDLEY_MCST_LCC_VERSION_CHECK(1,25,10)
    #define JSON_HEDLEY_UNREACHABLE() __builtin_unreachable()
#elif defined(JSON_HEDLEY_ASSUME)
    #define JSON_HEDLEY_UNREACHABLE() JSON_HEDLEY_ASSUME(0)
#endif
#if !defined(JSON_HEDLEY_ASSUME)
    #if defined(JSON_HEDLEY_UNREACHABLE)
        #define JSON_HEDLEY_ASSUME(expr) JSON_HEDLEY_STATIC_CAST(void, ((expr) ? 1 : (JSON_HEDLEY_UNREACHABLE(), 1)))
    #else
        #define JSON_HEDLEY_ASSUME(expr) JSON_HEDLEY_STATIC_CAST(void, expr)
    #endif
#endif
#if defined(JSON_HEDLEY_UNREACHABLE)
    #if  \
        JSON_HEDLEY_TI_CL2000_VERSION_CHECK(6,2,0) || \
        JSON_HEDLEY_TI_CL6X_VERSION_CHECK(4,0,0)
        #define JSON_HEDLEY_UNREACHABLE_RETURN(value) return (JSON_HEDLEY_STATIC_CAST(void, JSON_HEDLEY_ASSUME(0)), (value))
    #else
        #define JSON_HEDLEY_UNREACHABLE_RETURN(value) JSON_HEDLEY_UNREACHABLE()
    #endif
#else
    #define JSON_HEDLEY_UNREACHABLE_RETURN(value) return (value)
#endif
#if !defined(JSON_HEDLEY_UNREACHABLE)
    #define JSON_HEDLEY_UNREACHABLE() JSON_HEDLEY_ASSUME(0)
#endif

JSON_HEDLEY_DIAGNOSTIC_PUSH
#if JSON_HEDLEY_HAS_WARNING("-Wpedantic")
    #pragma clang diagnostic ignored "-Wpedantic"
#endif
#if JSON_HEDLEY_HAS_WARNING("-Wc++98-compat-pedantic") && defined(__cplusplus)
    #pragma clang diagnostic ignored "-Wc++98-compat-pedantic"
#endif
#if JSON_HEDLEY_GCC_HAS_WARNING("-Wvariadic-macros",4,0,0)
    #if defined(__clang__)
        #pragma clang diagnostic ignored "-Wvariadic-macros"
    #elif defined(JSON_HEDLEY_GCC_VERSION)
        #pragma GCC diagnostic ignored "-Wvariadic-macros"
    #endif
#endif
#if defined(JSON_HEDLEY_NON_NULL)
    #undef JSON_HEDLEY_NON_NULL
#endif
#if \
    JSON_HEDLEY_HAS_ATTRIBUTE(nonnull) || \
    JSON_HEDLEY_GCC_VERSION_CHECK(3,3,0) || \
    JSON_HEDLEY_INTEL_VERSION_CHECK(13,0,0) || \
    JSON_HEDLEY_ARM_VERSION_CHECK(4,1,0)
    #define JSON_HEDLEY_NON_NULL(...) __attribute__((__nonnull__(__VA_ARGS__)))
#else
    #define JSON_HEDLEY_NON_NULL(...)
#endif
JSON_HEDLEY_DIAGNOSTIC_POP

#if defined(JSON_HEDLEY_PRINTF_FORMAT)
    #undef JSON_HEDLEY_PRINTF_FORMAT
#endif
#if defined(__MINGW32__) && JSON_HEDLEY_GCC_HAS_ATTRIBUTE(format,4,4,0) && !defined(__USE_MINGW_ANSI_STDIO)
    #define JSON_HEDLEY_PRINTF_FORMAT(string_idx,first_to_check) __attribute__((__format__(ms_printf, string_idx, first_to_check)))
#elif defined(__MINGW32__) && JSON_HEDLEY_GCC_HAS_ATTRIBUTE(format,4,4,0) && defined(__USE_MINGW_ANSI_STDIO)
    #define JSON_HEDLEY_PRINTF_FORMAT(string_idx,first_to_check) __attribute__((__format__(gnu_printf, string_idx, first_to_check)))
#elif \
    JSON_HEDLEY_HAS_ATTRIBUTE(format) || \
    JSON_HEDLEY_GCC_VERSION_CHECK(3,1,0) || \
    JSON_HEDLEY_INTEL_VERSION_CHECK(13,0,0) || \
    JSON_HEDLEY_ARM_VERSION_CHECK(5,6,0) || \
    JSON_HEDLEY_IBM_VERSION_CHECK(10,1,0) || \
    JSON_HEDLEY_TI_VERSION_CHECK(15,12,0) || \
    (JSON_HEDLEY_TI_ARMCL_VERSION_CHECK(4,8,0) && defined(__TI_GNU_ATTRIBUTE_SUPPORT__)) || \
    JSON_HEDLEY_TI_ARMCL_VERSION_CHECK(5,2,0) || \
    (JSON_HEDLEY_TI_CL2000_VERSION_CHECK(6,0,0) && defined(__TI_GNU_ATTRIBUTE_SUPPORT__)) || \
    JSON_HEDLEY_TI_CL2000_VERSION_CHECK(6,4,0) || \
    (JSON_HEDLEY_TI_CL430_VERSION_CHECK(4,0,0) && defined(__TI_GNU_ATTRIBUTE_SUPPORT__)) || \
    JSON_HEDLEY_TI_CL430_VERSION_CHECK(4,3,0) || \
    (JSON_HEDLEY_TI_CL6X_VERSION_CHECK(7,2,0) && defined(__TI_GNU_ATTRIBUTE_SUPPORT__)) || \
    JSON_HEDLEY_TI_CL6X_VERSION_CHECK(7,5,0) || \
    JSON_HEDLEY_TI_CL7X_VERSION_CHECK(1,2,0) || \
    JSON_HEDLEY_TI_CLPRU_VERSION_CHECK(2,1,0) || \
    JSON_HEDLEY_MCST_LCC_VERSION_CHECK(1,25,10)
    #define JSON_HEDLEY_PRINTF_FORMAT(string_idx,first_to_check) __attribute__((__format__(__printf__, string_idx, first_to_check)))
#elif JSON_HEDLEY_PELLES_VERSION_CHECK(6,0,0)
    #define JSON_HEDLEY_PRINTF_FORMAT(string_idx,first_to_check) __declspec(vaformat(printf,string_idx,first_to_check))
#else
    #define JSON_HEDLEY_PRINTF_FORMAT(string_idx,first_to_check)
#endif

#if defined(JSON_HEDLEY_CONSTEXPR)
    #undef JSON_HEDLEY_CONSTEXPR
#endif
#if defined(__cplusplus)
    #if __cplusplus >= 201103L
        #define JSON_HEDLEY_CONSTEXPR JSON_HEDLEY_DIAGNOSTIC_DISABLE_CPP98_COMPAT_WRAP_(constexpr)
    #endif
#endif
#if !defined(JSON_HEDLEY_CONSTEXPR)
    #define JSON_HEDLEY_CONSTEXPR
#endif

#if defined(JSON_HEDLEY_PREDICT)
    #undef JSON_HEDLEY_PREDICT
#endif
#if defined(JSON_HEDLEY_LIKELY)
    #undef JSON_HEDLEY_LIKELY
#endif
#if defined(JSON_HEDLEY_UNLIKELY)
    #undef JSON_HEDLEY_UNLIKELY
#endif
#if defined(JSON_HEDLEY_UNPREDICTABLE)
    #undef JSON_HEDLEY_UNPREDICTABLE
#endif
#if JSON_HEDLEY_HAS_BUILTIN(__builtin_unpredictable)
    #define JSON_HEDLEY_UNPREDICTABLE(expr) __builtin_unpredictable((expr))
#endif
#if \
  (JSON_HEDLEY_HAS_BUILTIN(__builtin_expect_with_probability) && !defined(JSON_HEDLEY_PGI_VERSION)) || \
  JSON_HEDLEY_GCC_VERSION_CHECK(9,0,0) || \
  JSON_HEDLEY_MCST_LCC_VERSION_CHECK(1,25,10)
#  define JSON_HEDLEY_PREDICT(expr, value, probability) __builtin_expect_with_probability(  (expr), (value), (probability))
#  define JSON_HEDLEY_PREDICT_TRUE(expr, probability)   __builtin_expect_with_probability(!!(expr),    1   , (probability))
#  define JSON_HEDLEY_PREDICT_FALSE(expr, probability)  __builtin_expect_with_probability(!!(expr),    0   , (probability))
#  define JSON_HEDLEY_LIKELY(expr)                      __builtin_expect                 (!!(expr),    1                  )
#  define JSON_HEDLEY_UNLIKELY(expr)                    __builtin_expect                 (!!(expr),    0                  )
#elif \
  (JSON_HEDLEY_HAS_BUILTIN(__builtin_expect) && !defined(JSON_HEDLEY_INTEL_CL_VERSION)) || \
  JSON_HEDLEY_GCC_VERSION_CHECK(3,0,0) || \
  JSON_HEDLEY_INTEL_VERSION_CHECK(13,0,0) || \
  (JSON_HEDLEY_SUNPRO_VERSION_CHECK(5,15,0) && defined(__cplusplus)) || \
  JSON_HEDLEY_ARM_VERSION_CHECK(4,1,0) || \
  JSON_HEDLEY_IBM_VERSION_CHECK(10,1,0) || \
  JSON_HEDLEY_TI_VERSION_CHECK(15,12,0) || \
  JSON_HEDLEY_TI_ARMCL_VERSION_CHECK(4,7,0) || \
  JSON_HEDLEY_TI_CL430_VERSION_CHECK(3,1,0) || \
  JSON_HEDLEY_TI_CL2000_VERSION_CHECK(6,1,0) || \
  JSON_HEDLEY_TI_CL6X_VERSION_CHECK(6,1,0) || \
  JSON_HEDLEY_TI_CL7X_VERSION_CHECK(1,2,0) || \
  JSON_HEDLEY_TI_CLPRU_VERSION_CHECK(2,1,0) || \
  JSON_HEDLEY_TINYC_VERSION_CHECK(0,9,27) || \
  JSON_HEDLEY_CRAY_VERSION_CHECK(8,1,0) || \
  JSON_HEDLEY_MCST_LCC_VERSION_CHECK(1,25,10)
#  define JSON_HEDLEY_PREDICT(expr, expected, probability) \
    (((probability) >= 0.9) ? __builtin_expect((expr), (expected)) : (JSON_HEDLEY_STATIC_CAST(void, expected), (expr)))
#  define JSON_HEDLEY_PREDICT_TRUE(expr, probability) \
    (__extension__ ({ \
        double hedley_probability_ = (probability); \
        ((hedley_probability_ >= 0.9) ? __builtin_expect(!!(expr), 1) : ((hedley_probability_ <= 0.1) ? __builtin_expect(!!(expr), 0) : !!(expr))); \
    }))
#  define JSON_HEDLEY_PREDICT_FALSE(expr, probability) \
    (__extension__ ({ \
        double hedley_probability_ = (probability); \
        ((hedley_probability_ >= 0.9) ? __builtin_expect(!!(expr), 0) : ((hedley_probability_ <= 0.1) ? __builtin_expect(!!(expr), 1) : !!(expr))); \
    }))
#  define JSON_HEDLEY_LIKELY(expr)   __builtin_expect(!!(expr), 1)
#  define JSON_HEDLEY_UNLIKELY(expr) __builtin_expect(!!(expr), 0)
#else
#  define JSON_HEDLEY_PREDICT(expr, expected, probability) (JSON_HEDLEY_STATIC_CAST(void, expected), (expr))
#  define JSON_HEDLEY_PREDICT_TRUE(expr, probability) (!!(expr))
#  define JSON_HEDLEY_PREDICT_FALSE(expr, probability) (!!(expr))
#  define JSON_HEDLEY_LIKELY(expr) (!!(expr))
#  define JSON_HEDLEY_UNLIKELY(expr) (!!(expr))
#endif
#if !defined(JSON_HEDLEY_UNPREDICTABLE)
    #define JSON_HEDLEY_UNPREDICTABLE(expr) JSON_HEDLEY_PREDICT(expr, 1, 0.5)
#endif

#if defined(JSON_HEDLEY_MALLOC)
    #undef JSON_HEDLEY_MALLOC
#endif
#if \
    JSON_HEDLEY_HAS_ATTRIBUTE(malloc) || \
    JSON_HEDLEY_GCC_VERSION_CHECK(3,1,0) || \
    JSON_HEDLEY_INTEL_VERSION_CHECK(13,0,0) || \
    JSON_HEDLEY_SUNPRO_VERSION_CHECK(5,11,0) || \
    JSON_HEDLEY_ARM_VERSION_CHECK(4,1,0) || \
    JSON_HEDLEY_IBM_VERSION_CHECK(12,1,0) || \
    JSON_HEDLEY_TI_VERSION_CHECK(15,12,0) || \
    (JSON_HEDLEY_TI_ARMCL_VERSION_CHECK(4,8,0) && defined(__TI_GNU_ATTRIBUTE_SUPPORT__)) || \
    JSON_HEDLEY_TI_ARMCL_VERSION_CHECK(5,2,0) || \
    (JSON_HEDLEY_TI_CL2000_VERSION_CHECK(6,0,0) && defined(__TI_GNU_ATTRIBUTE_SUPPORT__)) || \
    JSON_HEDLEY_TI_CL2000_VERSION_CHECK(6,4,0) || \
    (JSON_HEDLEY_TI_CL430_VERSION_CHECK(4,0,0) && defined(__TI_GNU_ATTRIBUTE_SUPPORT__)) || \
    JSON_HEDLEY_TI_CL430_VERSION_CHECK(4,3,0) || \
    (JSON_HEDLEY_TI_CL6X_VERSION_CHECK(7,2,0) && defined(__TI_GNU_ATTRIBUTE_SUPPORT__)) || \
    JSON_HEDLEY_TI_CL6X_VERSION_CHECK(7,5,0) || \
    JSON_HEDLEY_TI_CL7X_VERSION_CHECK(1,2,0) || \
    JSON_HEDLEY_TI_CLPRU_VERSION_CHECK(2,1,0) || \
    JSON_HEDLEY_MCST_LCC_VERSION_CHECK(1,25,10)
    #define JSON_HEDLEY_MALLOC __attribute__((__malloc__))
#elif JSON_HEDLEY_SUNPRO_VERSION_CHECK(5,10,0)
    #define JSON_HEDLEY_MALLOC _Pragma("returns_new_memory")
#elif \
    JSON_HEDLEY_MSVC_VERSION_CHECK(14,0,0) || \
    JSON_HEDLEY_INTEL_CL_VERSION_CHECK(2021,1,0)
    #define JSON_HEDLEY_MALLOC __declspec(restrict)
#else
    #define JSON_HEDLEY_MALLOC
#endif

#if defined(JSON_HEDLEY_PURE)
    #undef JSON_HEDLEY_PURE
#endif
#if \
  JSON_HEDLEY_HAS_ATTRIBUTE(pure) || \
  JSON_HEDLEY_GCC_VERSION_CHECK(2,96,0) || \
  JSON_HEDLEY_INTEL_VERSION_CHECK(13,0,0) || \
  JSON_HEDLEY_SUNPRO_VERSION_CHECK(5,11,0) || \
  JSON_HEDLEY_ARM_VERSION_CHECK(4,1,0) || \
  JSON_HEDLEY_IBM_VERSION_CHECK(10,1,0) || \
  JSON_HEDLEY_TI_VERSION_CHECK(15,12,0) || \
  (JSON_HEDLEY_TI_ARMCL_VERSION_CHECK(4,8,0) && defined(__TI_GNU_ATTRIBUTE_SUPPORT__)) || \
  JSON_HEDLEY_TI_ARMCL_VERSION_CHECK(5,2,0) || \
  (JSON_HEDLEY_TI_CL2000_VERSION_CHECK(6,0,0) && defined(__TI_GNU_ATTRIBUTE_SUPPORT__)) || \
  JSON_HEDLEY_TI_CL2000_VERSION_CHECK(6,4,0) || \
  (JSON_HEDLEY_TI_CL430_VERSION_CHECK(4,0,0) && defined(__TI_GNU_ATTRIBUTE_SUPPORT__)) || \
  JSON_HEDLEY_TI_CL430_VERSION_CHECK(4,3,0) || \
  (JSON_HEDLEY_TI_CL6X_VERSION_CHECK(7,2,0) && defined(__TI_GNU_ATTRIBUTE_SUPPORT__)) || \
  JSON_HEDLEY_TI_CL6X_VERSION_CHECK(7,5,0) || \
  JSON_HEDLEY_TI_CL7X_VERSION_CHECK(1,2,0) || \
  JSON_HEDLEY_TI_CLPRU_VERSION_CHECK(2,1,0) || \
  JSON_HEDLEY_PGI_VERSION_CHECK(17,10,0) || \
  JSON_HEDLEY_MCST_LCC_VERSION_CHECK(1,25,10)
#  define JSON_HEDLEY_PURE __attribute__((__pure__))
#elif JSON_HEDLEY_SUNPRO_VERSION_CHECK(5,10,0)
#  define JSON_HEDLEY_PURE _Pragma("does_not_write_global_data")
#elif defined(__cplusplus) && \
    ( \
      JSON_HEDLEY_TI_CL430_VERSION_CHECK(2,0,1) || \
      JSON_HEDLEY_TI_CL6X_VERSION_CHECK(4,0,0) || \
      JSON_HEDLEY_TI_CL7X_VERSION_CHECK(1,2,0) \
    )
#  define JSON_HEDLEY_PURE _Pragma("FUNC_IS_PURE;")
#else
#  define JSON_HEDLEY_PURE
#endif

#if defined(JSON_HEDLEY_CONST)
    #undef JSON_HEDLEY_CONST
#endif
#if \
    JSON_HEDLEY_HAS_ATTRIBUTE(const) || \
    JSON_HEDLEY_GCC_VERSION_CHECK(2,5,0) || \
    JSON_HEDLEY_INTEL_VERSION_CHECK(13,0,0) || \
    JSON_HEDLEY_SUNPRO_VERSION_CHECK(5,11,0) || \
    JSON_HEDLEY_ARM_VERSION_CHECK(4,1,0) || \
    JSON_HEDLEY_IBM_VERSION_CHECK(10,1,0) || \
    JSON_HEDLEY_TI_VERSION_CHECK(15,12,0) || \
    (JSON_HEDLEY_TI_ARMCL_VERSION_CHECK(4,8,0) && defined(__TI_GNU_ATTRIBUTE_SUPPORT__)) || \
    JSON_HEDLEY_TI_ARMCL_VERSION_CHECK(5,2,0) || \
    (JSON_HEDLEY_TI_CL2000_VERSION_CHECK(6,0,0) && defined(__TI_GNU_ATTRIBUTE_SUPPORT__)) || \
    JSON_HEDLEY_TI_CL2000_VERSION_CHECK(6,4,0) || \
    (JSON_HEDLEY_TI_CL430_VERSION_CHECK(4,0,0) && defined(__TI_GNU_ATTRIBUTE_SUPPORT__)) || \
    JSON_HEDLEY_TI_CL430_VERSION_CHECK(4,3,0) || \
    (JSON_HEDLEY_TI_CL6X_VERSION_CHECK(7,2,0) && defined(__TI_GNU_ATTRIBUTE_SUPPORT__)) || \
    JSON_HEDLEY_TI_CL6X_VERSION_CHECK(7,5,0) || \
    JSON_HEDLEY_TI_CL7X_VERSION_CHECK(1,2,0) || \
    JSON_HEDLEY_TI_CLPRU_VERSION_CHECK(2,1,0) || \
    JSON_HEDLEY_PGI_VERSION_CHECK(17,10,0) || \
    JSON_HEDLEY_MCST_LCC_VERSION_CHECK(1,25,10)
    #define JSON_HEDLEY_CONST __attribute__((__const__))
#elif \
    JSON_HEDLEY_SUNPRO_VERSION_CHECK(5,10,0)
    #define JSON_HEDLEY_CONST _Pragma("no_side_effect")
#else
    #define JSON_HEDLEY_CONST JSON_HEDLEY_PURE
#endif

#if defined(JSON_HEDLEY_RESTRICT)
    #undef JSON_HEDLEY_RESTRICT
#endif
#if defined(__STDC_VERSION__) && (__STDC_VERSION__ >= 199901L) && !defined(__cplusplus)
    #define JSON_HEDLEY_RESTRICT restrict
#elif \
    JSON_HEDLEY_GCC_VERSION_CHECK(3,1,0) || \
    JSON_HEDLEY_MSVC_VERSION_CHECK(14,0,0) || \
    JSON_HEDLEY_INTEL_VERSION_CHECK(13,0,0) || \
    JSON_HEDLEY_INTEL_CL_VERSION_CHECK(2021,1,0) || \
    JSON_HEDLEY_ARM_VERSION_CHECK(4,1,0) || \
    JSON_HEDLEY_IBM_VERSION_CHECK(10,1,0) || \
    JSON_HEDLEY_PGI_VERSION_CHECK(17,10,0) || \
    JSON_HEDLEY_TI_CL430_VERSION_CHECK(4,3,0) || \
    JSON_HEDLEY_TI_CL2000_VERSION_CHECK(6,2,4) || \
    JSON_HEDLEY_TI_CL6X_VERSION_CHECK(8,1,0) || \
    JSON_HEDLEY_TI_CL7X_VERSION_CHECK(1,2,0) || \
    (JSON_HEDLEY_SUNPRO_VERSION_CHECK(5,14,0) && defined(__cplusplus)) || \
    JSON_HEDLEY_IAR_VERSION_CHECK(8,0,0) || \
    defined(__clang__) || \
    JSON_HEDLEY_MCST_LCC_VERSION_CHECK(1,25,10)
    #define JSON_HEDLEY_RESTRICT __restrict
#elif JSON_HEDLEY_SUNPRO_VERSION_CHECK(5,3,0) && !defined(__cplusplus)
    #define JSON_HEDLEY_RESTRICT _Restrict
#else
    #define JSON_HEDLEY_RESTRICT
#endif

#if defined(JSON_HEDLEY_INLINE)
    #undef JSON_HEDLEY_INLINE
#endif
#if \
    (defined(__STDC_VERSION__) && (__STDC_VERSION__ >= 199901L)) || \
    (defined(__cplusplus) && (__cplusplus >= 199711L))
    #define JSON_HEDLEY_INLINE inline
#elif \
    defined(JSON_HEDLEY_GCC_VERSION) || \
    JSON_HEDLEY_ARM_VERSION_CHECK(6,2,0)
    #define JSON_HEDLEY_INLINE __inline__
#elif \
    JSON_HEDLEY_MSVC_VERSION_CHECK(12,0,0) || \
    JSON_HEDLEY_INTEL_CL_VERSION_CHECK(2021,1,0) || \
    JSON_HEDLEY_ARM_VERSION_CHECK(4,1,0) || \
    JSON_HEDLEY_TI_ARMCL_VERSION_CHECK(5,1,0) || \
    JSON_HEDLEY_TI_CL430_VERSION_CHECK(3,1,0) || \
    JSON_HEDLEY_TI_CL2000_VERSION_CHECK(6,2,0) || \
    JSON_HEDLEY_TI_CL6X_VERSION_CHECK(8,0,0) || \
    JSON_HEDLEY_TI_CL7X_VERSION_CHECK(1,2,0) || \
    JSON_HEDLEY_TI_CLPRU_VERSION_CHECK(2,1,0) || \
    JSON_HEDLEY_MCST_LCC_VERSION_CHECK(1,25,10)
    #define JSON_HEDLEY_INLINE __inline
#else
    #define JSON_HEDLEY_INLINE
#endif

#if defined(JSON_HEDLEY_ALWAYS_INLINE)
    #undef JSON_HEDLEY_ALWAYS_INLINE
#endif
#if \
  JSON_HEDLEY_HAS_ATTRIBUTE(always_inline) || \
  JSON_HEDLEY_GCC_VERSION_CHECK(4,0,0) || \
  JSON_HEDLEY_INTEL_VERSION_CHECK(13,0,0) || \
  JSON_HEDLEY_SUNPRO_VERSION_CHECK(5,11,0) || \
  JSON_HEDLEY_ARM_VERSION_CHECK(4,1,0) || \
  JSON_HEDLEY_IBM_VERSION_CHECK(10,1,0) || \
  JSON_HEDLEY_TI_VERSION_CHECK(15,12,0) || \
  (JSON_HEDLEY_TI_ARMCL_VERSION_CHECK(4,8,0) && defined(__TI_GNU_ATTRIBUTE_SUPPORT__)) || \
  JSON_HEDLEY_TI_ARMCL_VERSION_CHECK(5,2,0) || \
  (JSON_HEDLEY_TI_CL2000_VERSION_CHECK(6,0,0) && defined(__TI_GNU_ATTRIBUTE_SUPPORT__)) || \
  JSON_HEDLEY_TI_CL2000_VERSION_CHECK(6,4,0) || \
  (JSON_HEDLEY_TI_CL430_VERSION_CHECK(4,0,0) && defined(__TI_GNU_ATTRIBUTE_SUPPORT__)) || \
  JSON_HEDLEY_TI_CL430_VERSION_CHECK(4,3,0) || \
  (JSON_HEDLEY_TI_CL6X_VERSION_CHECK(7,2,0) && defined(__TI_GNU_ATTRIBUTE_SUPPORT__)) || \
  JSON_HEDLEY_TI_CL6X_VERSION_CHECK(7,5,0) || \
  JSON_HEDLEY_TI_CL7X_VERSION_CHECK(1,2,0) || \
  JSON_HEDLEY_TI_CLPRU_VERSION_CHECK(2,1,0) || \
  JSON_HEDLEY_MCST_LCC_VERSION_CHECK(1,25,10) || \
  JSON_HEDLEY_IAR_VERSION_CHECK(8,10,0)
#  define JSON_HEDLEY_ALWAYS_INLINE __attribute__((__always_inline__)) JSON_HEDLEY_INLINE
#elif \
  JSON_HEDLEY_MSVC_VERSION_CHECK(12,0,0) || \
  JSON_HEDLEY_INTEL_CL_VERSION_CHECK(2021,1,0)
#  define JSON_HEDLEY_ALWAYS_INLINE __forceinline
#elif defined(__cplusplus) && \
    ( \
      JSON_HEDLEY_TI_ARMCL_VERSION_CHECK(5,2,0) || \
      JSON_HEDLEY_TI_CL430_VERSION_CHECK(4,3,0) || \
      JSON_HEDLEY_TI_CL2000_VERSION_CHECK(6,4,0) || \
      JSON_HEDLEY_TI_CL6X_VERSION_CHECK(6,1,0) || \
      JSON_HEDLEY_TI_CL7X_VERSION_CHECK(1,2,0) || \
      JSON_HEDLEY_TI_CLPRU_VERSION_CHECK(2,1,0) \
    )
#  define JSON_HEDLEY_ALWAYS_INLINE _Pragma("FUNC_ALWAYS_INLINE;")
#elif JSON_HEDLEY_IAR_VERSION_CHECK(8,0,0)
#  define JSON_HEDLEY_ALWAYS_INLINE _Pragma("inline=forced")
#else
#  define JSON_HEDLEY_ALWAYS_INLINE JSON_HEDLEY_INLINE
#endif

#if defined(JSON_HEDLEY_NEVER_INLINE)
    #undef JSON_HEDLEY_NEVER_INLINE
#endif
#if \
    JSON_HEDLEY_HAS_ATTRIBUTE(noinline) || \
    JSON_HEDLEY_GCC_VERSION_CHECK(4,0,0) || \
    JSON_HEDLEY_INTEL_VERSION_CHECK(13,0,0) || \
    JSON_HEDLEY_SUNPRO_VERSION_CHECK(5,11,0) || \
    JSON_HEDLEY_ARM_VERSION_CHECK(4,1,0) || \
    JSON_HEDLEY_IBM_VERSION_CHECK(10,1,0) || \
    JSON_HEDLEY_TI_VERSION_CHECK(15,12,0) || \
    (JSON_HEDLEY_TI_ARMCL_VERSION_CHECK(4,8,0) && defined(__TI_GNU_ATTRIBUTE_SUPPORT__)) || \
    JSON_HEDLEY_TI_ARMCL_VERSION_CHECK(5,2,0) || \
    (JSON_HEDLEY_TI_CL2000_VERSION_CHECK(6,0,0) && defined(__TI_GNU_ATTRIBUTE_SUPPORT__)) || \
    JSON_HEDLEY_TI_CL2000_VERSION_CHECK(6,4,0) || \
    (JSON_HEDLEY_TI_CL430_VERSION_CHECK(4,0,0) && defined(__TI_GNU_ATTRIBUTE_SUPPORT__)) || \
    JSON_HEDLEY_TI_CL430_VERSION_CHECK(4,3,0) || \
    (JSON_HEDLEY_TI_CL6X_VERSION_CHECK(7,2,0) && defined(__TI_GNU_ATTRIBUTE_SUPPORT__)) || \
    JSON_HEDLEY_TI_CL6X_VERSION_CHECK(7,5,0) || \
    JSON_HEDLEY_TI_CL7X_VERSION_CHECK(1,2,0) || \
    JSON_HEDLEY_TI_CLPRU_VERSION_CHECK(2,1,0) || \
    JSON_HEDLEY_MCST_LCC_VERSION_CHECK(1,25,10) || \
    JSON_HEDLEY_IAR_VERSION_CHECK(8,10,0)
    #define JSON_HEDLEY_NEVER_INLINE __attribute__((__noinline__))
#elif \
    JSON_HEDLEY_MSVC_VERSION_CHECK(13,10,0) || \
    JSON_HEDLEY_INTEL_CL_VERSION_CHECK(2021,1,0)
    #define JSON_HEDLEY_NEVER_INLINE __declspec(noinline)
#elif JSON_HEDLEY_PGI_VERSION_CHECK(10,2,0)
    #define JSON_HEDLEY_NEVER_INLINE _Pragma("noinline")
#elif JSON_HEDLEY_TI_CL6X_VERSION_CHECK(6,0,0) && defined(__cplusplus)
    #define JSON_HEDLEY_NEVER_INLINE _Pragma("FUNC_CANNOT_INLINE;")
#elif JSON_HEDLEY_IAR_VERSION_CHECK(8,0,0)
    #define JSON_HEDLEY_NEVER_INLINE _Pragma("inline=never")
#elif JSON_HEDLEY_COMPCERT_VERSION_CHECK(3,2,0)
    #define JSON_HEDLEY_NEVER_INLINE __attribute((noinline))
#elif JSON_HEDLEY_PELLES_VERSION_CHECK(9,0,0)
    #define JSON_HEDLEY_NEVER_INLINE __declspec(noinline)
#else
    #define JSON_HEDLEY_NEVER_INLINE
#endif

#if defined(JSON_HEDLEY_PRIVATE)
    #undef JSON_HEDLEY_PRIVATE
#endif
#if defined(JSON_HEDLEY_PUBLIC)
    #undef JSON_HEDLEY_PUBLIC
#endif
#if defined(JSON_HEDLEY_IMPORT)
    #undef JSON_HEDLEY_IMPORT
#endif
#if defined(_WIN32) || defined(__CYGWIN__)
#  define JSON_HEDLEY_PRIVATE
#  define JSON_HEDLEY_PUBLIC   __declspec(dllexport)
#  define JSON_HEDLEY_IMPORT   __declspec(dllimport)
#else
#  if \
    JSON_HEDLEY_HAS_ATTRIBUTE(visibility) || \
    JSON_HEDLEY_GCC_VERSION_CHECK(3,3,0) || \
    JSON_HEDLEY_SUNPRO_VERSION_CHECK(5,11,0) || \
    JSON_HEDLEY_INTEL_VERSION_CHECK(13,0,0) || \
    JSON_HEDLEY_ARM_VERSION_CHECK(4,1,0) || \
    JSON_HEDLEY_IBM_VERSION_CHECK(13,1,0) || \
    ( \
      defined(__TI_EABI__) && \
      ( \
        (JSON_HEDLEY_TI_CL6X_VERSION_CHECK(7,2,0) && defined(__TI_GNU_ATTRIBUTE_SUPPORT__)) || \
        JSON_HEDLEY_TI_CL6X_VERSION_CHECK(7,5,0) \
      ) \
    ) || \
    JSON_HEDLEY_MCST_LCC_VERSION_CHECK(1,25,10)
#    define JSON_HEDLEY_PRIVATE __attribute__((__visibility__("hidden")))
#    define JSON_HEDLEY_PUBLIC  __attribute__((__visibility__("default")))
#  else
#    define JSON_HEDLEY_PRIVATE
#    define JSON_HEDLEY_PUBLIC
#  endif
#  define JSON_HEDLEY_IMPORT    extern
#endif

#if defined(JSON_HEDLEY_NO_THROW)
    #undef JSON_HEDLEY_NO_THROW
#endif
#if \
    JSON_HEDLEY_HAS_ATTRIBUTE(nothrow) || \
    JSON_HEDLEY_GCC_VERSION_CHECK(3,3,0) || \
    JSON_HEDLEY_INTEL_VERSION_CHECK(13,0,0) || \
    JSON_HEDLEY_MCST_LCC_VERSION_CHECK(1,25,10)
    #define JSON_HEDLEY_NO_THROW __attribute__((__nothrow__))
#elif \
    JSON_HEDLEY_MSVC_VERSION_CHECK(13,1,0) || \
    JSON_HEDLEY_INTEL_CL_VERSION_CHECK(2021,1,0) || \
    JSON_HEDLEY_ARM_VERSION_CHECK(4,1,0)
    #define JSON_HEDLEY_NO_THROW __declspec(nothrow)
#else
    #define JSON_HEDLEY_NO_THROW
#endif

#if defined(JSON_HEDLEY_FALL_THROUGH)
    #undef JSON_HEDLEY_FALL_THROUGH
#endif
#if \
    JSON_HEDLEY_HAS_ATTRIBUTE(fallthrough) || \
    JSON_HEDLEY_GCC_VERSION_CHECK(7,0,0) || \
    JSON_HEDLEY_MCST_LCC_VERSION_CHECK(1,25,10)
    #define JSON_HEDLEY_FALL_THROUGH __attribute__((__fallthrough__))
#elif JSON_HEDLEY_HAS_CPP_ATTRIBUTE_NS(clang,fallthrough)
    #define JSON_HEDLEY_FALL_THROUGH JSON_HEDLEY_DIAGNOSTIC_DISABLE_CPP98_COMPAT_WRAP_([[clang::fallthrough]])
#elif JSON_HEDLEY_HAS_CPP_ATTRIBUTE(fallthrough)
    #define JSON_HEDLEY_FALL_THROUGH JSON_HEDLEY_DIAGNOSTIC_DISABLE_CPP98_COMPAT_WRAP_([[fallthrough]])
#elif defined(__fallthrough) /* SAL */
    #define JSON_HEDLEY_FALL_THROUGH __fallthrough
#else
    #define JSON_HEDLEY_FALL_THROUGH
#endif

#if defined(JSON_HEDLEY_RETURNS_NON_NULL)
    #undef JSON_HEDLEY_RETURNS_NON_NULL
#endif
#if \
    JSON_HEDLEY_HAS_ATTRIBUTE(returns_nonnull) || \
    JSON_HEDLEY_GCC_VERSION_CHECK(4,9,0) || \
    JSON_HEDLEY_MCST_LCC_VERSION_CHECK(1,25,10)
    #define JSON_HEDLEY_RETURNS_NON_NULL __attribute__((__returns_nonnull__))
#elif defined(_Ret_notnull_) /* SAL */
    #define JSON_HEDLEY_RETURNS_NON_NULL _Ret_notnull_
#else
    #define JSON_HEDLEY_RETURNS_NON_NULL
#endif

#if defined(JSON_HEDLEY_ARRAY_PARAM)
    #undef JSON_HEDLEY_ARRAY_PARAM
#endif
#if \
    defined(__STDC_VERSION__) && (__STDC_VERSION__ >= 199901L) && \
    !defined(__STDC_NO_VLA__) && \
    !defined(__cplusplus) && \
    !defined(JSON_HEDLEY_PGI_VERSION) && \
    !defined(JSON_HEDLEY_TINYC_VERSION)
    #define JSON_HEDLEY_ARRAY_PARAM(name) (name)
#else
    #define JSON_HEDLEY_ARRAY_PARAM(name)
#endif

#if defined(JSON_HEDLEY_IS_CONSTANT)
    #undef JSON_HEDLEY_IS_CONSTANT
#endif
#if defined(JSON_HEDLEY_REQUIRE_CONSTEXPR)
    #undef JSON_HEDLEY_REQUIRE_CONSTEXPR
#endif
/* JSON_HEDLEY_IS_CONSTEXPR_ is for
   HEDLEY INTERNAL USE ONLY.  API subject to change without notice. */
#if defined(JSON_HEDLEY_IS_CONSTEXPR_)
    #undef JSON_HEDLEY_IS_CONSTEXPR_
#endif
#if \
    JSON_HEDLEY_HAS_BUILTIN(__builtin_constant_p) || \
    JSON_HEDLEY_GCC_VERSION_CHECK(3,4,0) || \
    JSON_HEDLEY_INTEL_VERSION_CHECK(13,0,0) || \
    JSON_HEDLEY_TINYC_VERSION_CHECK(0,9,19) || \
    JSON_HEDLEY_ARM_VERSION_CHECK(4,1,0) || \
    JSON_HEDLEY_IBM_VERSION_CHECK(13,1,0) || \
    JSON_HEDLEY_TI_CL6X_VERSION_CHECK(6,1,0) || \
    (JSON_HEDLEY_SUNPRO_VERSION_CHECK(5,10,0) && !defined(__cplusplus)) || \
    JSON_HEDLEY_CRAY_VERSION_CHECK(8,1,0) || \
    JSON_HEDLEY_MCST_LCC_VERSION_CHECK(1,25,10)
    #define JSON_HEDLEY_IS_CONSTANT(expr) __builtin_constant_p(expr)
#endif
#if !defined(__cplusplus)
#  if \
       JSON_HEDLEY_HAS_BUILTIN(__builtin_types_compatible_p) || \
       JSON_HEDLEY_GCC_VERSION_CHECK(3,4,0) || \
       JSON_HEDLEY_INTEL_VERSION_CHECK(13,0,0) || \
       JSON_HEDLEY_IBM_VERSION_CHECK(13,1,0) || \
       JSON_HEDLEY_CRAY_VERSION_CHECK(8,1,0) || \
       JSON_HEDLEY_ARM_VERSION_CHECK(5,4,0) || \
       JSON_HEDLEY_TINYC_VERSION_CHECK(0,9,24)
#if defined(__INTPTR_TYPE__)
    #define JSON_HEDLEY_IS_CONSTEXPR_(expr) __builtin_types_compatible_p(__typeof__((1 ? (void*) ((__INTPTR_TYPE__) ((expr) * 0)) : (int*) 0)), int*)
#else
    #include <stdint.h>
    #define JSON_HEDLEY_IS_CONSTEXPR_(expr) __builtin_types_compatible_p(__typeof__((1 ? (void*) ((intptr_t) ((expr) * 0)) : (int*) 0)), int*)
#endif
#  elif \
       ( \
          defined(__STDC_VERSION__) && (__STDC_VERSION__ >= 201112L) && \
          !defined(JSON_HEDLEY_SUNPRO_VERSION) && \
          !defined(JSON_HEDLEY_PGI_VERSION) && \
          !defined(JSON_HEDLEY_IAR_VERSION)) || \
       (JSON_HEDLEY_HAS_EXTENSION(c_generic_selections) && !defined(JSON_HEDLEY_IAR_VERSION)) || \
       JSON_HEDLEY_GCC_VERSION_CHECK(4,9,0) || \
       JSON_HEDLEY_INTEL_VERSION_CHECK(17,0,0) || \
       JSON_HEDLEY_IBM_VERSION_CHECK(12,1,0) || \
       JSON_HEDLEY_ARM_VERSION_CHECK(5,3,0)
#if defined(__INTPTR_TYPE__)
    #define JSON_HEDLEY_IS_CONSTEXPR_(expr) _Generic((1 ? (void*) ((__INTPTR_TYPE__) ((expr) * 0)) : (int*) 0), int*: 1, void*: 0)
#else
    #include <stdint.h>
    #define JSON_HEDLEY_IS_CONSTEXPR_(expr) _Generic((1 ? (void*) ((intptr_t) * 0) : (int*) 0), int*: 1, void*: 0)
#endif
#  elif \
       defined(JSON_HEDLEY_GCC_VERSION) || \
       defined(JSON_HEDLEY_INTEL_VERSION) || \
       defined(JSON_HEDLEY_TINYC_VERSION) || \
       defined(JSON_HEDLEY_TI_ARMCL_VERSION) || \
       JSON_HEDLEY_TI_CL430_VERSION_CHECK(18,12,0) || \
       defined(JSON_HEDLEY_TI_CL2000_VERSION) || \
       defined(JSON_HEDLEY_TI_CL6X_VERSION) || \
       defined(JSON_HEDLEY_TI_CL7X_VERSION) || \
       defined(JSON_HEDLEY_TI_CLPRU_VERSION) || \
       defined(__clang__)
#    define JSON_HEDLEY_IS_CONSTEXPR_(expr) ( \
        sizeof(void) != \
        sizeof(*( \
                  1 ? \
                  ((void*) ((expr) * 0L) ) : \
((struct { char v[sizeof(void) * 2]; } *) 1) \
                ) \
              ) \
                                            )
#  endif
#endif
#if defined(JSON_HEDLEY_IS_CONSTEXPR_)
    #if !defined(JSON_HEDLEY_IS_CONSTANT)
        #define JSON_HEDLEY_IS_CONSTANT(expr) JSON_HEDLEY_IS_CONSTEXPR_(expr)
    #endif
    #define JSON_HEDLEY_REQUIRE_CONSTEXPR(expr) (JSON_HEDLEY_IS_CONSTEXPR_(expr) ? (expr) : (-1))
#else
    #if !defined(JSON_HEDLEY_IS_CONSTANT)
        #define JSON_HEDLEY_IS_CONSTANT(expr) (0)
    #endif
    #define JSON_HEDLEY_REQUIRE_CONSTEXPR(expr) (expr)
#endif

#if defined(JSON_HEDLEY_BEGIN_C_DECLS)
    #undef JSON_HEDLEY_BEGIN_C_DECLS
#endif
#if defined(JSON_HEDLEY_END_C_DECLS)
    #undef JSON_HEDLEY_END_C_DECLS
#endif
#if defined(JSON_HEDLEY_C_DECL)
    #undef JSON_HEDLEY_C_DECL
#endif
#if defined(__cplusplus)
    #define JSON_HEDLEY_BEGIN_C_DECLS extern "C" {
    #define JSON_HEDLEY_END_C_DECLS }
    #define JSON_HEDLEY_C_DECL extern "C"
#else
    #define JSON_HEDLEY_BEGIN_C_DECLS
    #define JSON_HEDLEY_END_C_DECLS
    #define JSON_HEDLEY_C_DECL
#endif

#if defined(JSON_HEDLEY_STATIC_ASSERT)
    #undef JSON_HEDLEY_STATIC_ASSERT
#endif
#if \
  !defined(__cplusplus) && ( \
      (defined(__STDC_VERSION__) && (__STDC_VERSION__ >= 201112L)) || \
      (JSON_HEDLEY_HAS_FEATURE(c_static_assert) && !defined(JSON_HEDLEY_INTEL_CL_VERSION)) || \
      JSON_HEDLEY_GCC_VERSION_CHECK(6,0,0) || \
      JSON_HEDLEY_INTEL_VERSION_CHECK(13,0,0) || \
      defined(_Static_assert) \
    )
#  define JSON_HEDLEY_STATIC_ASSERT(expr, message) _Static_assert(expr, message)
#elif \
  (defined(__cplusplus) && (__cplusplus >= 201103L)) || \
  JSON_HEDLEY_MSVC_VERSION_CHECK(16,0,0) || \
  JSON_HEDLEY_INTEL_CL_VERSION_CHECK(2021,1,0)
#  define JSON_HEDLEY_STATIC_ASSERT(expr, message) JSON_HEDLEY_DIAGNOSTIC_DISABLE_CPP98_COMPAT_WRAP_(static_assert(expr, message))
#else
#  define JSON_HEDLEY_STATIC_ASSERT(expr, message)
#endif

#if defined(JSON_HEDLEY_NULL)
    #undef JSON_HEDLEY_NULL
#endif
#if defined(__cplusplus)
    #if __cplusplus >= 201103L
        #define JSON_HEDLEY_NULL JSON_HEDLEY_DIAGNOSTIC_DISABLE_CPP98_COMPAT_WRAP_(nullptr)
    #elif defined(NULL)
        #define JSON_HEDLEY_NULL NULL
    #else
        #define JSON_HEDLEY_NULL JSON_HEDLEY_STATIC_CAST(void*, 0)
    #endif
#elif defined(NULL)
    #define JSON_HEDLEY_NULL NULL
#else
    #define JSON_HEDLEY_NULL ((void*) 0)
#endif

#if defined(JSON_HEDLEY_MESSAGE)
    #undef JSON_HEDLEY_MESSAGE
#endif
#if JSON_HEDLEY_HAS_WARNING("-Wunknown-pragmas")
#  define JSON_HEDLEY_MESSAGE(msg) \
    JSON_HEDLEY_DIAGNOSTIC_PUSH \
    JSON_HEDLEY_DIAGNOSTIC_DISABLE_UNKNOWN_PRAGMAS \
    JSON_HEDLEY_PRAGMA(message msg) \
    JSON_HEDLEY_DIAGNOSTIC_POP
#elif \
  JSON_HEDLEY_GCC_VERSION_CHECK(4,4,0) || \
  JSON_HEDLEY_INTEL_VERSION_CHECK(13,0,0)
#  define JSON_HEDLEY_MESSAGE(msg) JSON_HEDLEY_PRAGMA(message msg)
#elif JSON_HEDLEY_CRAY_VERSION_CHECK(5,0,0)
#  define JSON_HEDLEY_MESSAGE(msg) JSON_HEDLEY_PRAGMA(_CRI message msg)
#elif JSON_HEDLEY_IAR_VERSION_CHECK(8,0,0)
#  define JSON_HEDLEY_MESSAGE(msg) JSON_HEDLEY_PRAGMA(message(msg))
#elif JSON_HEDLEY_PELLES_VERSION_CHECK(2,0,0)
#  define JSON_HEDLEY_MESSAGE(msg) JSON_HEDLEY_PRAGMA(message(msg))
#else
#  define JSON_HEDLEY_MESSAGE(msg)
#endif

#if defined(JSON_HEDLEY_WARNING)
    #undef JSON_HEDLEY_WARNING
#endif
#if JSON_HEDLEY_HAS_WARNING("-Wunknown-pragmas")
#  define JSON_HEDLEY_WARNING(msg) \
    JSON_HEDLEY_DIAGNOSTIC_PUSH \
    JSON_HEDLEY_DIAGNOSTIC_DISABLE_UNKNOWN_PRAGMAS \
    JSON_HEDLEY_PRAGMA(clang warning msg) \
    JSON_HEDLEY_DIAGNOSTIC_POP
#elif \
  JSON_HEDLEY_GCC_VERSION_CHECK(4,8,0) || \
  JSON_HEDLEY_PGI_VERSION_CHECK(18,4,0) || \
  JSON_HEDLEY_INTEL_VERSION_CHECK(13,0,0)
#  define JSON_HEDLEY_WARNING(msg) JSON_HEDLEY_PRAGMA(GCC warning msg)
#elif \
  JSON_HEDLEY_MSVC_VERSION_CHECK(15,0,0) || \
  JSON_HEDLEY_INTEL_CL_VERSION_CHECK(2021,1,0)
#  define JSON_HEDLEY_WARNING(msg) JSON_HEDLEY_PRAGMA(message(msg))
#else
#  define JSON_HEDLEY_WARNING(msg) JSON_HEDLEY_MESSAGE(msg)
#endif

#if defined(JSON_HEDLEY_REQUIRE)
    #undef JSON_HEDLEY_REQUIRE
#endif
#if defined(JSON_HEDLEY_REQUIRE_MSG)
    #undef JSON_HEDLEY_REQUIRE_MSG
#endif
#if JSON_HEDLEY_HAS_ATTRIBUTE(diagnose_if)
#  if JSON_HEDLEY_HAS_WARNING("-Wgcc-compat")
#    define JSON_HEDLEY_REQUIRE(expr) \
    JSON_HEDLEY_DIAGNOSTIC_PUSH \
    _Pragma("clang diagnostic ignored \"-Wgcc-compat\"") \
    __attribute__((diagnose_if(!(expr), #expr, "error"))) \
    JSON_HEDLEY_DIAGNOSTIC_POP
#    define JSON_HEDLEY_REQUIRE_MSG(expr,msg) \
    JSON_HEDLEY_DIAGNOSTIC_PUSH \
    _Pragma("clang diagnostic ignored \"-Wgcc-compat\"") \
    __attribute__((diagnose_if(!(expr), msg, "error"))) \
    JSON_HEDLEY_DIAGNOSTIC_POP
#  else
#    define JSON_HEDLEY_REQUIRE(expr) __attribute__((diagnose_if(!(expr), #expr, "error")))
#    define JSON_HEDLEY_REQUIRE_MSG(expr,msg) __attribute__((diagnose_if(!(expr), msg, "error")))
#  endif
#else
#  define JSON_HEDLEY_REQUIRE(expr)
#  define JSON_HEDLEY_REQUIRE_MSG(expr,msg)
#endif

#if defined(JSON_HEDLEY_FLAGS)
    #undef JSON_HEDLEY_FLAGS
#endif
#if JSON_HEDLEY_HAS_ATTRIBUTE(flag_enum) && (!defined(__cplusplus) || JSON_HEDLEY_HAS_WARNING("-Wbitfield-enum-conversion"))
    #define JSON_HEDLEY_FLAGS __attribute__((__flag_enum__))
#else
    #define JSON_HEDLEY_FLAGS
#endif

#if defined(JSON_HEDLEY_FLAGS_CAST)
    #undef JSON_HEDLEY_FLAGS_CAST
#endif
#if JSON_HEDLEY_INTEL_VERSION_CHECK(19,0,0)
#  define JSON_HEDLEY_FLAGS_CAST(T, expr) (__extension__ ({ \
        JSON_HEDLEY_DIAGNOSTIC_PUSH \
        _Pragma("warning(disable:188)") \
        ((T) (expr)); \
        JSON_HEDLEY_DIAGNOSTIC_POP \
    }))
#else
#  define JSON_HEDLEY_FLAGS_CAST(T, expr) JSON_HEDLEY_STATIC_CAST(T, expr)
#endif

#if defined(JSON_HEDLEY_EMPTY_BASES)
    #undef JSON_HEDLEY_EMPTY_BASES
#endif
#if \
    (JSON_HEDLEY_MSVC_VERSION_CHECK(19,0,23918) && !JSON_HEDLEY_MSVC_VERSION_CHECK(20,0,0)) || \
    JSON_HEDLEY_INTEL_CL_VERSION_CHECK(2021,1,0)
    #define JSON_HEDLEY_EMPTY_BASES __declspec(empty_bases)
#else
    #define JSON_HEDLEY_EMPTY_BASES
#endif

/* Remaining macros are deprecated. */

#if defined(JSON_HEDLEY_GCC_NOT_CLANG_VERSION_CHECK)
    #undef JSON_HEDLEY_GCC_NOT_CLANG_VERSION_CHECK
#endif
#if defined(__clang__)
    #define JSON_HEDLEY_GCC_NOT_CLANG_VERSION_CHECK(major,minor,patch) (0)
#else
    #define JSON_HEDLEY_GCC_NOT_CLANG_VERSION_CHECK(major,minor,patch) JSON_HEDLEY_GCC_VERSION_CHECK(major,minor,patch)
#endif

#if defined(JSON_HEDLEY_CLANG_HAS_ATTRIBUTE)
    #undef JSON_HEDLEY_CLANG_HAS_ATTRIBUTE
#endif
#define JSON_HEDLEY_CLANG_HAS_ATTRIBUTE(attribute) JSON_HEDLEY_HAS_ATTRIBUTE(attribute)

#if defined(JSON_HEDLEY_CLANG_HAS_CPP_ATTRIBUTE)
    #undef JSON_HEDLEY_CLANG_HAS_CPP_ATTRIBUTE
#endif
#define JSON_HEDLEY_CLANG_HAS_CPP_ATTRIBUTE(attribute) JSON_HEDLEY_HAS_CPP_ATTRIBUTE(attribute)

#if defined(JSON_HEDLEY_CLANG_HAS_BUILTIN)
    #undef JSON_HEDLEY_CLANG_HAS_BUILTIN
#endif
#define JSON_HEDLEY_CLANG_HAS_BUILTIN(builtin) JSON_HEDLEY_HAS_BUILTIN(builtin)

#if defined(JSON_HEDLEY_CLANG_HAS_FEATURE)
    #undef JSON_HEDLEY_CLANG_HAS_FEATURE
#endif
#define JSON_HEDLEY_CLANG_HAS_FEATURE(feature) JSON_HEDLEY_HAS_FEATURE(feature)

#if defined(JSON_HEDLEY_CLANG_HAS_EXTENSION)
    #undef JSON_HEDLEY_CLANG_HAS_EXTENSION
#endif
#define JSON_HEDLEY_CLANG_HAS_EXTENSION(extension) JSON_HEDLEY_HAS_EXTENSION(extension)

#if defined(JSON_HEDLEY_CLANG_HAS_DECLSPEC_DECLSPEC_ATTRIBUTE)
    #undef JSON_HEDLEY_CLANG_HAS_DECLSPEC_DECLSPEC_ATTRIBUTE
#endif
#define JSON_HEDLEY_CLANG_HAS_DECLSPEC_ATTRIBUTE(attribute) JSON_HEDLEY_HAS_DECLSPEC_ATTRIBUTE(attribute)

#if defined(JSON_HEDLEY_CLANG_HAS_WARNING)
    #undef JSON_HEDLEY_CLANG_HAS_WARNING
#endif
#define JSON_HEDLEY_CLANG_HAS_WARNING(warning) JSON_HEDLEY_HAS_WARNING(warning)

#endif /* !defined(JSON_HEDLEY_VERSION) || (JSON_HEDLEY_VERSION < X) */


// This file contains all internal macro definitions (except those affecting ABI)
// You MUST include macro_unscope.hpp at the end of json.hpp to undef all of them

// #include <nlohmann/detail/abi_macros.hpp>


// exclude unsupported compilers
#if !defined(JSON_SKIP_UNSUPPORTED_COMPILER_CHECK)
    #if defined(__clang__)
        #if (__clang_major__ * 10000 + __clang_minor__ * 100 + __clang_patchlevel__) < 30400
            #error "unsupported Clang version - see https://github.com/nlohmann/json#supported-compilers"
        #endif
    #elif defined(__GNUC__) && !(defined(__ICC) || defined(__INTEL_COMPILER))
        #if (__GNUC__ * 10000 + __GNUC_MINOR__ * 100 + __GNUC_PATCHLEVEL__) < 40800
            #error "unsupported GCC version - see https://github.com/nlohmann/json#supported-compilers"
        #endif
    #endif
#endif

// C++ language standard detection
// if the user manually specified the used c++ version this is skipped
#if !defined(JSON_HAS_CPP_20) && !defined(JSON_HAS_CPP_17) && !defined(JSON_HAS_CPP_14) && !defined(JSON_HAS_CPP_11)
    #if (defined(__cplusplus) && __cplusplus >= 202002L) || (defined(_MSVC_LANG) && _MSVC_LANG >= 202002L)
        #define JSON_HAS_CPP_20
        #define JSON_HAS_CPP_17
        #define JSON_HAS_CPP_14
    #elif (defined(__cplusplus) && __cplusplus >= 201703L) || (defined(_HAS_CXX17) && _HAS_CXX17 == 1) // fix for issue #464
        #define JSON_HAS_CPP_17
        #define JSON_HAS_CPP_14
    #elif (defined(__cplusplus) && __cplusplus >= 201402L) || (defined(_HAS_CXX14) && _HAS_CXX14 == 1)
        #define JSON_HAS_CPP_14
    #endif
    // the cpp 11 flag is always specified because it is the minimal required version
    #define JSON_HAS_CPP_11
#endif

#ifdef __has_include
    #if __has_include(<version>)
        #include <version>
    #endif
#endif

#if !defined(JSON_HAS_FILESYSTEM) && !defined(JSON_HAS_EXPERIMENTAL_FILESYSTEM)
    #ifdef JSON_HAS_CPP_17
        #if defined(__cpp_lib_filesystem)
            #define JSON_HAS_FILESYSTEM 1
        #elif defined(__cpp_lib_experimental_filesystem)
            #define JSON_HAS_EXPERIMENTAL_FILESYSTEM 1
        #elif !defined(__has_include)
            #define JSON_HAS_EXPERIMENTAL_FILESYSTEM 1
        #elif __has_include(<filesystem>)
            #define JSON_HAS_FILESYSTEM 1
        #elif __has_include(<experimental/filesystem>)
            #define JSON_HAS_EXPERIMENTAL_FILESYSTEM 1
        #endif

        // std::filesystem does not work on MinGW GCC 8: https://sourceforge.net/p/mingw-w64/bugs/737/
        #if defined(__MINGW32__) && defined(__GNUC__) && __GNUC__ == 8
            #undef JSON_HAS_FILESYSTEM
            #undef JSON_HAS_EXPERIMENTAL_FILESYSTEM
        #endif

        // no filesystem support before GCC 8: https://en.cppreference.com/w/cpp/compiler_support
        #if defined(__GNUC__) && !defined(__clang__) && __GNUC__ < 8
            #undef JSON_HAS_FILESYSTEM
            #undef JSON_HAS_EXPERIMENTAL_FILESYSTEM
        #endif

        // no filesystem support before Clang 7: https://en.cppreference.com/w/cpp/compiler_support
        #if defined(__clang_major__) && __clang_major__ < 7
            #undef JSON_HAS_FILESYSTEM
            #undef JSON_HAS_EXPERIMENTAL_FILESYSTEM
        #endif

        // no filesystem support before MSVC 19.14: https://en.cppreference.com/w/cpp/compiler_support
        #if defined(_MSC_VER) && _MSC_VER < 1914
            #undef JSON_HAS_FILESYSTEM
            #undef JSON_HAS_EXPERIMENTAL_FILESYSTEM
        #endif

        // no filesystem support before iOS 13
        #if defined(__IPHONE_OS_VERSION_MIN_REQUIRED) && __IPHONE_OS_VERSION_MIN_REQUIRED < 130000
            #undef JSON_HAS_FILESYSTEM
            #undef JSON_HAS_EXPERIMENTAL_FILESYSTEM
        #endif

        // no filesystem support before macOS Catalina
        #if defined(__MAC_OS_X_VERSION_MIN_REQUIRED) && __MAC_OS_X_VERSION_MIN_REQUIRED < 101500
            #undef JSON_HAS_FILESYSTEM
            #undef JSON_HAS_EXPERIMENTAL_FILESYSTEM
        #endif
    #endif
#endif

#ifndef JSON_HAS_EXPERIMENTAL_FILESYSTEM
    #define JSON_HAS_EXPERIMENTAL_FILESYSTEM 0
#endif

#ifndef JSON_HAS_FILESYSTEM
    #define JSON_HAS_FILESYSTEM 0
#endif

#ifndef JSON_HAS_THREE_WAY_COMPARISON
    #if defined(__cpp_impl_three_way_comparison) && __cpp_impl_three_way_comparison >= 201907L \
        && defined(__cpp_lib_three_way_comparison) && __cpp_lib_three_way_comparison >= 201907L
        #define JSON_HAS_THREE_WAY_COMPARISON 1
    #else
        #define JSON_HAS_THREE_WAY_COMPARISON 0
    #endif
#endif

#ifndef JSON_HAS_RANGES
    // ranges header shipping in GCC 11.1.0 (released 2021-04-27) has syntax error
    #if defined(__GLIBCXX__) && __GLIBCXX__ == 20210427
        #define JSON_HAS_RANGES 0
    #elif defined(__cpp_lib_ranges)
        #define JSON_HAS_RANGES 1
    #else
        #define JSON_HAS_RANGES 0
    #endif
#endif

#ifdef JSON_HAS_CPP_17
    #define JSON_INLINE_VARIABLE inline
#else
    #define JSON_INLINE_VARIABLE
#endif

#if JSON_HEDLEY_HAS_ATTRIBUTE(no_unique_address)
    #define JSON_NO_UNIQUE_ADDRESS [[no_unique_address]]
#else
    #define JSON_NO_UNIQUE_ADDRESS
#endif

// disable documentation warnings on clang
#if defined(__clang__)
    #pragma clang diagnostic push
    #pragma clang diagnostic ignored "-Wdocumentation"
    #pragma clang diagnostic ignored "-Wdocumentation-unknown-command"
#endif

// allow disabling exceptions
#if (defined(__cpp_exceptions) || defined(__EXCEPTIONS) || defined(_CPPUNWIND)) && !defined(JSON_NOEXCEPTION)
    #define JSON_THROW(exception) throw exception
    #define JSON_TRY try
    #define JSON_CATCH(exception) catch(exception)
    #define JSON_INTERNAL_CATCH(exception) catch(exception)
#else
    #include <cstdlib>
    #define JSON_THROW(exception) std::abort()
    #define JSON_TRY if(true)
    #define JSON_CATCH(exception) if(false)
    #define JSON_INTERNAL_CATCH(exception) if(false)
#endif

// override exception macros
#if defined(JSON_THROW_USER)
    #undef JSON_THROW
    #define JSON_THROW JSON_THROW_USER
#endif
#if defined(JSON_TRY_USER)
    #undef JSON_TRY
    #define JSON_TRY JSON_TRY_USER
#endif
#if defined(JSON_CATCH_USER)
    #undef JSON_CATCH
    #define JSON_CATCH JSON_CATCH_USER
    #undef JSON_INTERNAL_CATCH
    #define JSON_INTERNAL_CATCH JSON_CATCH_USER
#endif
#if defined(JSON_INTERNAL_CATCH_USER)
    #undef JSON_INTERNAL_CATCH
    #define JSON_INTERNAL_CATCH JSON_INTERNAL_CATCH_USER
#endif

// allow overriding assert
#if !defined(JSON_ASSERT)
    #include <cassert> // assert
    #define JSON_ASSERT(x) assert(x)
#endif

// allow to access some private functions (needed by the test suite)
#if defined(JSON_TESTS_PRIVATE)
    #define JSON_PRIVATE_UNLESS_TESTED public
#else
    #define JSON_PRIVATE_UNLESS_TESTED private
#endif

/*!
@brief macro to briefly define a mapping between an enum and JSON
@def NLOHMANN_JSON_SERIALIZE_ENUM
@since version 3.4.0
*/
#define NLOHMANN_JSON_SERIALIZE_ENUM(ENUM_TYPE, ...)                                            \
    template<typename BasicJsonType>                                                            \
    inline void to_json(BasicJsonType& j, const ENUM_TYPE& e)                                   \
    {                                                                                           \
        static_assert(std::is_enum<ENUM_TYPE>::value, #ENUM_TYPE " must be an enum!");          \
        static const std::pair<ENUM_TYPE, BasicJsonType> m[] = __VA_ARGS__;                     \
        auto it = std::find_if(std::begin(m), std::end(m),                                      \
                               [e](const std::pair<ENUM_TYPE, BasicJsonType>& ej_pair) -> bool  \
        {                                                                                       \
            return ej_pair.first == e;                                                          \
        });                                                                                     \
        j = ((it != std::end(m)) ? it : std::begin(m))->second;                                 \
    }                                                                                           \
    template<typename BasicJsonType>                                                            \
    inline void from_json(const BasicJsonType& j, ENUM_TYPE& e)                                 \
    {                                                                                           \
        static_assert(std::is_enum<ENUM_TYPE>::value, #ENUM_TYPE " must be an enum!");          \
        static const std::pair<ENUM_TYPE, BasicJsonType> m[] = __VA_ARGS__;                     \
        auto it = std::find_if(std::begin(m), std::end(m),                                      \
                               [&j](const std::pair<ENUM_TYPE, BasicJsonType>& ej_pair) -> bool \
        {                                                                                       \
            return ej_pair.second == j;                                                         \
        });                                                                                     \
        e = ((it != std::end(m)) ? it : std::begin(m))->first;                                  \
    }

// Ugly macros to avoid uglier copy-paste when specializing basic_json. They
// may be removed in the future once the class is split.

#define NLOHMANN_BASIC_JSON_TPL_DECLARATION                                \
    template<template<typename, typename, typename...> class ObjectType,   \
             template<typename, typename...> class ArrayType,              \
             class StringType, class BooleanType, class NumberIntegerType, \
             class NumberUnsignedType, class NumberFloatType,              \
             template<typename> class AllocatorType,                       \
             template<typename, typename = void> class JSONSerializer,     \
             class BinaryType>

#define NLOHMANN_BASIC_JSON_TPL                                            \
    basic_json<ObjectType, ArrayType, StringType, BooleanType,             \
    NumberIntegerType, NumberUnsignedType, NumberFloatType,                \
    AllocatorType, JSONSerializer, BinaryType>

// Macros to simplify conversion from/to types

#define NLOHMANN_JSON_EXPAND( x ) x
#define NLOHMANN_JSON_GET_MACRO(_1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14, _15, _16, _17, _18, _19, _20, _21, _22, _23, _24, _25, _26, _27, _28, _29, _30, _31, _32, _33, _34, _35, _36, _37, _38, _39, _40, _41, _42, _43, _44, _45, _46, _47, _48, _49, _50, _51, _52, _53, _54, _55, _56, _57, _58, _59, _60, _61, _62, _63, _64, NAME,...) NAME
#define NLOHMANN_JSON_PASTE(...) NLOHMANN_JSON_EXPAND(NLOHMANN_JSON_GET_MACRO(__VA_ARGS__, \
        NLOHMANN_JSON_PASTE64, \
        NLOHMANN_JSON_PASTE63, \
        NLOHMANN_JSON_PASTE62, \
        NLOHMANN_JSON_PASTE61, \
        NLOHMANN_JSON_PASTE60, \
        NLOHMANN_JSON_PASTE59, \
        NLOHMANN_JSON_PASTE58, \
        NLOHMANN_JSON_PASTE57, \
        NLOHMANN_JSON_PASTE56, \
        NLOHMANN_JSON_PASTE55, \
        NLOHMANN_JSON_PASTE54, \
        NLOHMANN_JSON_PASTE53, \
        NLOHMANN_JSON_PASTE52, \
        NLOHMANN_JSON_PASTE51, \
        NLOHMANN_JSON_PASTE50, \
        NLOHMANN_JSON_PASTE49, \
        NLOHMANN_JSON_PASTE48, \
        NLOHMANN_JSON_PASTE47, \
        NLOHMANN_JSON_PASTE46, \
        NLOHMANN_JSON_PASTE45, \
        NLOHMANN_JSON_PASTE44, \
        NLOHMANN_JSON_PASTE43, \
        NLOHMANN_JSON_PASTE42, \
        NLOHMANN_JSON_PASTE41, \
        NLOHMANN_JSON_PASTE40, \
        NLOHMANN_JSON_PASTE39, \
        NLOHMANN_JSON_PASTE38, \
        NLOHMANN_JSON_PASTE37, \
        NLOHMANN_JSON_PASTE36, \
        NLOHMANN_JSON_PASTE35, \
        NLOHMANN_JSON_PASTE34, \
        NLOHMANN_JSON_PASTE33, \
        NLOHMANN_JSON_PASTE32, \
        NLOHMANN_JSON_PASTE31, \
        NLOHMANN_JSON_PASTE30, \
        NLOHMANN_JSON_PASTE29, \
        NLOHMANN_JSON_PASTE28, \
        NLOHMANN_JSON_PASTE27, \
        NLOHMANN_JSON_PASTE26, \
        NLOHMANN_JSON_PASTE25, \
        NLOHMANN_JSON_PASTE24, \
        NLOHMANN_JSON_PASTE23, \
        NLOHMANN_JSON_PASTE22, \
        NLOHMANN_JSON_PASTE21, \
        NLOHMANN_JSON_PASTE20, \
        NLOHMANN_JSON_PASTE19, \
        NLOHMANN_JSON_PASTE18, \
        NLOHMANN_JSON_PASTE17, \
        NLOHMANN_JSON_PASTE16, \
        NLOHMANN_JSON_PASTE15, \
        NLOHMANN_JSON_PASTE14, \
        NLOHMANN_JSON_PASTE13, \
        NLOHMANN_JSON_PASTE12, \
        NLOHMANN_JSON_PASTE11, \
        NLOHMANN_JSON_PASTE10, \
        NLOHMANN_JSON_PASTE9, \
        NLOHMANN_JSON_PASTE8, \
        NLOHMANN_JSON_PASTE7, \
        NLOHMANN_JSON_PASTE6, \
        NLOHMANN_JSON_PASTE5, \
        NLOHMANN_JSON_PASTE4, \
        NLOHMANN_JSON_PASTE3, \
        NLOHMANN_JSON_PASTE2, \
        NLOHMANN_JSON_PASTE1)(__VA_ARGS__))
#define NLOHMANN_JSON_PASTE2(func, v1) func(v1)
#define NLOHMANN_JSON_PASTE3(func, v1, v2) NLOHMANN_JSON_PASTE2(func, v1) NLOHMANN_JSON_PASTE2(func, v2)
#define NLOHMANN_JSON_PASTE4(func, v1, v2, v3) NLOHMANN_JSON_PASTE2(func, v1) NLOHMANN_JSON_PASTE3(func, v2, v3)
#define NLOHMANN_JSON_PASTE5(func, v1, v2, v3, v4) NLOHMANN_JSON_PASTE2(func, v1) NLOHMANN_JSON_PASTE4(func, v2, v3, v4)
#define NLOHMANN_JSON_PASTE6(func, v1, v2, v3, v4, v5) NLOHMANN_JSON_PASTE2(func, v1) NLOHMANN_JSON_PASTE5(func, v2, v3, v4, v5)
#define NLOHMANN_JSON_PASTE7(func, v1, v2, v3, v4, v5, v6) NLOHMANN_JSON_PASTE2(func, v1) NLOHMANN_JSON_PASTE6(func, v2, v3, v4, v5, v6)
#define NLOHMANN_JSON_PASTE8(func, v1, v2, v3, v4, v5, v6, v7) NLOHMANN_JSON_PASTE2(func, v1) NLOHMANN_JSON_PASTE7(func, v2, v3, v4, v5, v6, v7)
#define NLOHMANN_JSON_PASTE9(func, v1, v2, v3, v4, v5, v6, v7, v8) NLOHMANN_JSON_PASTE2(func, v1) NLOHMANN_JSON_PASTE8(func, v2, v3, v4, v5, v6, v7, v8)
#define NLOHMANN_JSON_PASTE10(func, v1, v2, v3, v4, v5, v6, v7, v8, v9) NLOHMANN_JSON_PASTE2(func, v1) NLOHMANN_JSON_PASTE9(func, v2, v3, v4, v5, v6, v7, v8, v9)
#define NLOHMANN_JSON_PASTE11(func, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10) NLOHMANN_JSON_PASTE2(func, v1) NLOHMANN_JSON_PASTE10(func, v2, v3, v4, v5, v6, v7, v8, v9, v10)
#define NLOHMANN_JSON_PASTE12(func, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11) NLOHMANN_JSON_PASTE2(func, v1) NLOHMANN_JSON_PASTE11(func, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11)
#define NLOHMANN_JSON_PASTE13(func, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12) NLOHMANN_JSON_PASTE2(func, v1) NLOHMANN_JSON_PASTE12(func, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12)
#define NLOHMANN_JSON_PASTE14(func, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13) NLOHMANN_JSON_PASTE2(func, v1) NLOHMANN_JSON_PASTE13(func, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13)
#define NLOHMANN_JSON_PASTE15(func, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14) NLOHMANN_JSON_PASTE2(func, v1) NLOHMANN_JSON_PASTE14(func, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14)
#define NLOHMANN_JSON_PASTE16(func, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15) NLOHMANN_JSON_PASTE2(func, v1) NLOHMANN_JSON_PASTE15(func, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15)
#define NLOHMANN_JSON_PASTE17(func, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16) NLOHMANN_JSON_PASTE2(func, v1) NLOHMANN_JSON_PASTE16(func, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16)
#define NLOHMANN_JSON_PASTE18(func, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17) NLOHMANN_JSON_PASTE2(func, v1) NLOHMANN_JSON_PASTE17(func, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17)
#define NLOHMANN_JSON_PASTE19(func, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18) NLOHMANN_JSON_PASTE2(func, v1) NLOHMANN_JSON_PASTE18(func, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18)
#define NLOHMANN_JSON_PASTE20(func, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19) NLOHMANN_JSON_PASTE2(func, v1) NLOHMANN_JSON_PASTE19(func, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19)
#define NLOHMANN_JSON_PASTE21(func, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20) NLOHMANN_JSON_PASTE2(func, v1) NLOHMANN_JSON_PASTE20(func, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20)
#define NLOHMANN_JSON_PASTE22(func, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21) NLOHMANN_JSON_PASTE2(func, v1) NLOHMANN_JSON_PASTE21(func, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21)
#define NLOHMANN_JSON_PASTE23(func, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22) NLOHMANN_JSON_PASTE2(func, v1) NLOHMANN_JSON_PASTE22(func, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22)
#define NLOHMANN_JSON_PASTE24(func, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22, v23) NLOHMANN_JSON_PASTE2(func, v1) NLOHMANN_JSON_PASTE23(func, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22, v23)
#define NLOHMANN_JSON_PASTE25(func, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22, v23, v24) NLOHMANN_JSON_PASTE2(func, v1) NLOHMANN_JSON_PASTE24(func, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22, v23, v24)
#define NLOHMANN_JSON_PASTE26(func, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22, v23, v24, v25) NLOHMANN_JSON_PASTE2(func, v1) NLOHMANN_JSON_PASTE25(func, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22, v23, v24, v25)
#define NLOHMANN_JSON_PASTE27(func, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22, v23, v24, v25, v26) NLOHMANN_JSON_PASTE2(func, v1) NLOHMANN_JSON_PASTE26(func, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22, v23, v24, v25, v26)
#define NLOHMANN_JSON_PASTE28(func, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22, v23, v24, v25, v26, v27) NLOHMANN_JSON_PASTE2(func, v1) NLOHMANN_JSON_PASTE27(func, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22, v23, v24, v25, v26, v27)
#define NLOHMANN_JSON_PASTE29(func, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22, v23, v24, v25, v26, v27, v28) NLOHMANN_JSON_PASTE2(func, v1) NLOHMANN_JSON_PASTE28(func, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22, v23, v24, v25, v26, v27, v28)
#define NLOHMANN_JSON_PASTE30(func, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22, v23, v24, v25, v26, v27, v28, v29) NLOHMANN_JSON_PASTE2(func, v1) NLOHMANN_JSON_PASTE29(func, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22, v23, v24, v25, v26, v27, v28, v29)
#define NLOHMANN_JSON_PASTE31(func, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22, v23, v24, v25, v26, v27, v28, v29, v30) NLOHMANN_JSON_PASTE2(func, v1) NLOHMANN_JSON_PASTE30(func, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22, v23, v24, v25, v26, v27, v28, v29, v30)
#define NLOHMANN_JSON_PASTE32(func, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22, v23, v24, v25, v26, v27, v28, v29, v30, v31) NLOHMANN_JSON_PASTE2(func, v1) NLOHMANN_JSON_PASTE31(func, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22, v23, v24, v25, v26, v27, v28, v29, v30, v31)
#define NLOHMANN_JSON_PASTE33(func, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22, v23, v24, v25, v26, v27, v28, v29, v30, v31, v32) NLOHMANN_JSON_PASTE2(func, v1) NLOHMANN_JSON_PASTE32(func, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22, v23, v24, v25, v26, v27, v28, v29, v30, v31, v32)
#define NLOHMANN_JSON_PASTE34(func, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22, v23, v24, v25, v26, v27, v28, v29, v30, v31, v32, v33) NLOHMANN_JSON_PASTE2(func, v1) NLOHMANN_JSON_PASTE33(func, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22, v23, v24, v25, v26, v27, v28, v29, v30, v31, v32, v33)
#define NLOHMANN_JSON_PASTE35(func, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22, v23, v24, v25, v26, v27, v28, v29, v30, v31, v32, v33, v34) NLOHMANN_JSON_PASTE2(func, v1) NLOHMANN_JSON_PASTE34(func, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22, v23, v24, v25, v26, v27, v28, v29, v30, v31, v32, v33, v34)
#define NLOHMANN_JSON_PASTE36(func, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22, v23, v24, v25, v26, v27, v28, v29, v30, v31, v32, v33, v34, v35) NLOHMANN_JSON_PASTE2(func, v1) NLOHMANN_JSON_PASTE35(func, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22, v23, v24, v25, v26, v27, v28, v29, v30, v31, v32, v33, v34, v35)
#define NLOHMANN_JSON_PASTE37(func, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22, v23, v24, v25, v26, v27, v28, v29, v30, v31, v32, v33, v34, v35, v36) NLOHMANN_JSON_PASTE2(func, v1) NLOHMANN_JSON_PASTE36(func, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22, v23, v24, v25, v26, v27, v28, v29, v30, v31, v32, v33, v34, v35, v36)
#define NLOHMANN_JSON_PASTE38(func, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22, v23, v24, v25, v26, v27, v28, v29, v30, v31, v32, v33, v34, v35, v36, v37) NLOHMANN_JSON_PASTE2(func, v1) NLOHMANN_JSON_PASTE37(func, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22, v23, v24, v25, v26, v27, v28, v29, v30, v31, v32, v33, v34, v35, v36, v37)
#define NLOHMANN_JSON_PASTE39(func, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22, v23, v24, v25, v26, v27, v28, v29, v30, v31, v32, v33, v34, v35, v36, v37, v38) NLOHMANN_JSON_PASTE2(func, v1) NLOHMANN_JSON_PASTE38(func, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22, v23, v24, v25, v26, v27, v28, v29, v30, v31, v32, v33, v34, v35, v36, v37, v38)
#define NLOHMANN_JSON_PASTE40(func, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22, v23, v24, v25, v26, v27, v28, v29, v30, v31, v32, v33, v34, v35, v36, v37, v38, v39) NLOHMANN_JSON_PASTE2(func, v1) NLOHMANN_JSON_PASTE39(func, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22, v23, v24, v25, v26, v27, v28, v29, v30, v31, v32, v33, v34, v35, v36, v37, v38, v39)
#define NLOHMANN_JSON_PASTE41(func, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22, v23, v24, v25, v26, v27, v28, v29, v30, v31, v32, v33, v34, v35, v36, v37, v38, v39, v40) NLOHMANN_JSON_PASTE2(func, v1) NLOHMANN_JSON_PASTE40(func, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22, v23, v24, v25, v26, v27, v28, v29, v30, v31, v32, v33, v34, v35, v36, v37, v38, v39, v40)
#define NLOHMANN_JSON_PASTE42(func, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22, v23, v24, v25, v26, v27, v28, v29, v30, v31, v32, v33, v34, v35, v36, v37, v38, v39, v40, v41) NLOHMANN_JSON_PASTE2(func, v1) NLOHMANN_JSON_PASTE41(func, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22, v23, v24, v25, v26, v27, v28, v29, v30, v31, v32, v33, v34, v35, v36, v37, v38, v39, v40, v41)
#define NLOHMANN_JSON_PASTE43(func, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22, v23, v24, v25, v26, v27, v28, v29, v30, v31, v32, v33, v34, v35, v36, v37, v38, v39, v40, v41, v42) NLOHMANN_JSON_PASTE2(func, v1) NLOHMANN_JSON_PASTE42(func, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22, v23, v24, v25, v26, v27, v28, v29, v30, v31, v32, v33, v34, v35, v36, v37, v38, v39, v40, v41, v42)
#define NLOHMANN_JSON_PASTE44(func, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22, v23, v24, v25, v26, v27, v28, v29, v30, v31, v32, v33, v34, v35, v36, v37, v38, v39, v40, v41, v42, v43) NLOHMANN_JSON_PASTE2(func, v1) NLOHMANN_JSON_PASTE43(func, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22, v23, v24, v25, v26, v27, v28, v29, v30, v31, v32, v33, v34, v35, v36, v37, v38, v39, v40, v41, v42, v43)
#define NLOHMANN_JSON_PASTE45(func, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22, v23, v24, v25, v26, v27, v28, v29, v30, v31, v32, v33, v34, v35, v36, v37, v38, v39, v40, v41, v42, v43, v44) NLOHMANN_JSON_PASTE2(func, v1) NLOHMANN_JSON_PASTE44(func, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22, v23, v24, v25, v26, v27, v28, v29, v30, v31, v32, v33, v34, v35, v36, v37, v38, v39, v40, v41, v42, v43, v44)
#define NLOHMANN_JSON_PASTE46(func, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22, v23, v24, v25, v26, v27, v28, v29, v30, v31, v32, v33, v34, v35, v36, v37, v38, v39, v40, v41, v42, v43, v44, v45) NLOHMANN_JSON_PASTE2(func, v1) NLOHMANN_JSON_PASTE45(func, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22, v23, v24, v25, v26, v27, v28, v29, v30, v31, v32, v33, v34, v35, v36, v37, v38, v39, v40, v41, v42, v43, v44, v45)
#define NLOHMANN_JSON_PASTE47(func, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22, v23, v24, v25, v26, v27, v28, v29, v30, v31, v32, v33, v34, v35, v36, v37, v38, v39, v40, v41, v42, v43, v44, v45, v46) NLOHMANN_JSON_PASTE2(func, v1) NLOHMANN_JSON_PASTE46(func, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22, v23, v24, v25, v26, v27, v28, v29, v30, v31, v32, v33, v34, v35, v36, v37, v38, v39, v40, v41, v42, v43, v44, v45, v46)
#define NLOHMANN_JSON_PASTE48(func, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22, v23, v24, v25, v26, v27, v28, v29, v30, v31, v32, v33, v34, v35, v36, v37, v38, v39, v40, v41, v42, v43, v44, v45, v46, v47) NLOHMANN_JSON_PASTE2(func, v1) NLOHMANN_JSON_PASTE47(func, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22, v23, v24, v25, v26, v27, v28, v29, v30, v31, v32, v33, v34, v35, v36, v37, v38, v39, v40, v41, v42, v43, v44, v45, v46, v47)
#define NLOHMANN_JSON_PASTE49(func, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22, v23, v24, v25, v26, v27, v28, v29, v30, v31, v32, v33, v34, v35, v36, v37, v38, v39, v40, v41, v42, v43, v44, v45, v46, v47, v48) NLOHMANN_JSON_PASTE2(func, v1) NLOHMANN_JSON_PASTE48(func, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22, v23, v24, v25, v26, v27, v28, v29, v30, v31, v32, v33, v34, v35, v36, v37, v38, v39, v40, v41, v42, v43, v44, v45, v46, v47, v48)
#define NLOHMANN_JSON_PASTE50(func, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22, v23, v24, v25, v26, v27, v28, v29, v30, v31, v32, v33, v34, v35, v36, v37, v38, v39, v40, v41, v42, v43, v44, v45, v46, v47, v48, v49) NLOHMANN_JSON_PASTE2(func, v1) NLOHMANN_JSON_PASTE49(func, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22, v23, v24, v25, v26, v27, v28, v29, v30, v31, v32, v33, v34, v35, v36, v37, v38, v39, v40, v41, v42, v43, v44, v45, v46, v47, v48, v49)
#define NLOHMANN_JSON_PASTE51(func, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22, v23, v24, v25, v26, v27, v28, v29, v30, v31, v32, v33, v34, v35, v36, v37, v38, v39, v40, v41, v42, v43, v44, v45, v46, v47, v48, v49, v50) NLOHMANN_JSON_PASTE2(func, v1) NLOHMANN_JSON_PASTE50(func, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22, v23, v24, v25, v26, v27, v28, v29, v30, v31, v32, v33, v34, v35, v36, v37, v38, v39, v40, v41, v42, v43, v44, v45, v46, v47, v48, v49, v50)
#define NLOHMANN_JSON_PASTE52(func, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22, v23, v24, v25, v26, v27, v28, v29, v30, v31, v32, v33, v34, v35, v36, v37, v38, v39, v40, v41, v42, v43, v44, v45, v46, v47, v48, v49, v50, v51) NLOHMANN_JSON_PASTE2(func, v1) NLOHMANN_JSON_PASTE51(func, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22, v23, v24, v25, v26, v27, v28, v29, v30, v31, v32, v33, v34, v35, v36, v37, v38, v39, v40, v41, v42, v43, v44, v45, v46, v47, v48, v49, v50, v51)
#define NLOHMANN_JSON_PASTE53(func, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22, v23, v24, v25, v26, v27, v28, v29, v30, v31, v32, v33, v34, v35, v36, v37, v38, v39, v40, v41, v42, v43, v44, v45, v46, v47, v48, v49, v50, v51, v52) NLOHMANN_JSON_PASTE2(func, v1) NLOHMANN_JSON_PASTE52(func, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22, v23, v24, v25, v26, v27, v28, v29, v30, v31, v32, v33, v34, v35, v36, v37, v38, v39, v40, v41, v42, v43, v44, v45, v46, v47, v48, v49, v50, v51, v52)
#define NLOHMANN_JSON_PASTE54(func, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22, v23, v24, v25, v26, v27, v28, v29, v30, v31, v32, v33, v34, v35, v36, v37, v38, v39, v40, v41, v42, v43, v44, v45, v46, v47, v48, v49, v50, v51, v52, v53) NLOHMANN_JSON_PASTE2(func, v1) NLOHMANN_JSON_PASTE53(func, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22, v23, v24, v25, v26, v27, v28, v29, v30, v31, v32, v33, v34, v35, v36, v37, v38, v39, v40, v41, v42, v43, v44, v45, v46, v47, v48, v49, v50, v51, v52, v53)
#define NLOHMANN_JSON_PASTE55(func, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22, v23, v24, v25, v26, v27, v28, v29, v30, v31, v32, v33, v34, v35, v36, v37, v38, v39, v40, v41, v42, v43, v44, v45, v46, v47, v48, v49, v50, v51, v52, v53, v54) NLOHMANN_JSON_PASTE2(func, v1) NLOHMANN_JSON_PASTE54(func, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22, v23, v24, v25, v26, v27, v28, v29, v30, v31, v32, v33, v34, v35, v36, v37, v38, v39, v40, v41, v42, v43, v44, v45, v46, v47, v48, v49, v50, v51, v52, v53, v54)
#define NLOHMANN_JSON_PASTE56(func, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22, v23, v24, v25, v26, v27, v28, v29, v30, v31, v32, v33, v34, v35, v36, v37, v38, v39, v40, v41, v42, v43, v44, v45, v46, v47, v48, v49, v50, v51, v52, v53, v54, v55) NLOHMANN_JSON_PASTE2(func, v1) NLOHMANN_JSON_PASTE55(func, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22, v23, v24, v25, v26, v27, v28, v29, v30, v31, v32, v33, v34, v35, v36, v37, v38, v39, v40, v41, v42, v43, v44, v45, v46, v47, v48, v49, v50, v51, v52, v53, v54, v55)
#define NLOHMANN_JSON_PASTE57(func, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22, v23, v24, v25, v26, v27, v28, v29, v30, v31, v32, v33, v34, v35, v36, v37, v38, v39, v40, v41, v42, v43, v44, v45, v46, v47, v48, v49, v50, v51, v52, v53, v54, v55, v56) NLOHMANN_JSON_PASTE2(func, v1) NLOHMANN_JSON_PASTE56(func, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22, v23, v24, v25, v26, v27, v28, v29, v30, v31, v32, v33, v34, v35, v36, v37, v38, v39, v40, v41, v42, v43, v44, v45, v46, v47, v48, v49, v50, v51, v52, v53, v54, v55, v56)
#define NLOHMANN_JSON_PASTE58(func, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22, v23, v24, v25, v26, v27, v28, v29, v30, v31, v32, v33, v34, v35, v36, v37, v38, v39, v40, v41, v42, v43, v44, v45, v46, v47, v48, v49, v50, v51, v52, v53, v54, v55, v56, v57) NLOHMANN_JSON_PASTE2(func, v1) NLOHMANN_JSON_PASTE57(func, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22, v23, v24, v25, v26, v27, v28, v29, v30, v31, v32, v33, v34, v35, v36, v37, v38, v39, v40, v41, v42, v43, v44, v45, v46, v47, v48, v49, v50, v51, v52, v53, v54, v55, v56, v57)
#define NLOHMANN_JSON_PASTE59(func, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22, v23, v24, v25, v26, v27, v28, v29, v30, v31, v32, v33, v34, v35, v36, v37, v38, v39, v40, v41, v42, v43, v44, v45, v46, v47, v48, v49, v50, v51, v52, v53, v54, v55, v56, v57, v58) NLOHMANN_JSON_PASTE2(func, v1) NLOHMANN_JSON_PASTE58(func, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22, v23, v24, v25, v26, v27, v28, v29, v30, v31, v32, v33, v34, v35, v36, v37, v38, v39, v40, v41, v42, v43, v44, v45, v46, v47, v48, v49, v50, v51, v52, v53, v54, v55, v56, v57, v58)
#define NLOHMANN_JSON_PASTE60(func, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22, v23, v24, v25, v26, v27, v28, v29, v30, v31, v32, v33, v34, v35, v36, v37, v38, v39, v40, v41, v42, v43, v44, v45, v46, v47, v48, v49, v50, v51, v52, v53, v54, v55, v56, v57, v58, v59) NLOHMANN_JSON_PASTE2(func, v1) NLOHMANN_JSON_PASTE59(func, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22, v23, v24, v25, v26, v27, v28, v29, v30, v31, v32, v33, v34, v35, v36, v37, v38, v39, v40, v41, v42, v43, v44, v45, v46, v47, v48, v49, v50, v51, v52, v53, v54, v55, v56, v57, v58, v59)
#define NLOHMANN_JSON_PASTE61(func, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22, v23, v24, v25, v26, v27, v28, v29, v30, v31, v32, v33, v34, v35, v36, v37, v38, v39, v40, v41, v42, v43, v44, v45, v46, v47, v48, v49, v50, v51, v52, v53, v54, v55, v56, v57, v58, v59, v60) NLOHMANN_JSON_PASTE2(func, v1) NLOHMANN_JSON_PASTE60(func, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22, v23, v24, v25, v26, v27, v28, v29, v30, v31, v32, v33, v34, v35, v36, v37, v38, v39, v40, v41, v42, v43, v44, v45, v46, v47, v48, v49, v50, v51, v52, v53, v54, v55, v56, v57, v58, v59, v60)
#define NLOHMANN_JSON_PASTE62(func, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22, v23, v24, v25, v26, v27, v28, v29, v30, v31, v32, v33, v34, v35, v36, v37, v38, v39, v40, v41, v42, v43, v44, v45, v46, v47, v48, v49, v50, v51, v52, v53, v54, v55, v56, v57, v58, v59, v60, v61) NLOHMANN_JSON_PASTE2(func, v1) NLOHMANN_JSON_PASTE61(func, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22, v23, v24, v25, v26, v27, v28, v29, v30, v31, v32, v33, v34, v35, v36, v37, v38, v39, v40, v41, v42, v43, v44, v45, v46, v47, v48, v49, v50, v51, v52, v53, v54, v55, v56, v57, v58, v59, v60, v61)
#define NLOHMANN_JSON_PASTE63(func, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22, v23, v24, v25, v26, v27, v28, v29, v30, v31, v32, v33, v34, v35, v36, v37, v38, v39, v40, v41, v42, v43, v44, v45, v46, v47, v48, v49, v50, v51, v52, v53, v54, v55, v56, v57, v58, v59, v60, v61, v62) NLOHMANN_JSON_PASTE2(func, v1) NLOHMANN_JSON_PASTE62(func, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22, v23, v24, v25, v26, v27, v28, v29, v30, v31, v32, v33, v34, v35, v36, v37, v38, v39, v40, v41, v42, v43, v44, v45, v46, v47, v48, v49, v50, v51, v52, v53, v54, v55, v56, v57, v58, v59, v60, v61, v62)
#define NLOHMANN_JSON_PASTE64(func, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22, v23, v24, v25, v26, v27, v28, v29, v30, v31, v32, v33, v34, v35, v36, v37, v38, v39, v40, v41, v42, v43, v44, v45, v46, v47, v48, v49, v50, v51, v52, v53, v54, v55, v56, v57, v58, v59, v60, v61, v62, v63) NLOHMANN_JSON_PASTE2(func, v1) NLOHMANN_JSON_PASTE63(func, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22, v23, v24, v25, v26, v27, v28, v29, v30, v31, v32, v33, v34, v35, v36, v37, v38, v39, v40, v41, v42, v43, v44, v45, v46, v47, v48, v49, v50, v51, v52, v53, v54, v55, v56, v57, v58, v59, v60, v61, v62, v63)

#define NLOHMANN_JSON_TO(v1) nlohmann_json_j[#v1] = nlohmann_json_t.v1;
#define NLOHMANN_JSON_FROM(v1) nlohmann_json_j.at(#v1).get_to(nlohmann_json_t.v1);
#define NLOHMANN_JSON_FROM_WITH_DEFAULT(v1) nlohmann_json_t.v1 = nlohmann_json_j.value(#v1, nlohmann_json_default_obj.v1);

/*!
@brief macro
@def NLOHMANN_DEFINE_TYPE_INTRUSIVE
@since version 3.9.0
*/
#define NLOHMANN_DEFINE_TYPE_INTRUSIVE(Type, ...)  \
    friend void to_json(nlohmann::json& nlohmann_json_j, const Type& nlohmann_json_t) { NLOHMANN_JSON_EXPAND(NLOHMANN_JSON_PASTE(NLOHMANN_JSON_TO, __VA_ARGS__)) } \
    friend void from_json(const nlohmann::json& nlohmann_json_j, Type& nlohmann_json_t) { NLOHMANN_JSON_EXPAND(NLOHMANN_JSON_PASTE(NLOHMANN_JSON_FROM, __VA_ARGS__)) }

#define NLOHMANN_DEFINE_TYPE_INTRUSIVE_WITH_DEFAULT(Type, ...)  \
    friend void to_json(nlohmann::json& nlohmann_json_j, const Type& nlohmann_json_t) { NLOHMANN_JSON_EXPAND(NLOHMANN_JSON_PASTE(NLOHMANN_JSON_TO, __VA_ARGS__)) } \
    friend void from_json(const nlohmann::json& nlohmann_json_j, Type& nlohmann_json_t) { Type nlohmann_json_default_obj; NLOHMANN_JSON_EXPAND(NLOHMANN_JSON_PASTE(NLOHMANN_JSON_FROM_WITH_DEFAULT, __VA_ARGS__)) }

/*!
@brief macro
@def NLOHMANN_DEFINE_TYPE_NON_INTRUSIVE
@since version 3.9.0
*/
#define NLOHMANN_DEFINE_TYPE_NON_INTRUSIVE(Type, ...)  \
    inline void to_json(nlohmann::json& nlohmann_json_j, const Type& nlohmann_json_t) { NLOHMANN_JSON_EXPAND(NLOHMANN_JSON_PASTE(NLOHMANN_JSON_TO, __VA_ARGS__)) } \
    inline void from_json(const nlohmann::json& nlohmann_json_j, Type& nlohmann_json_t) { NLOHMANN_JSON_EXPAND(NLOHMANN_JSON_PASTE(NLOHMANN_JSON_FROM, __VA_ARGS__)) }

#define NLOHMANN_DEFINE_TYPE_NON_INTRUSIVE_WITH_DEFAULT(Type, ...)  \
    inline void to_json(nlohmann::json& nlohmann_json_j, const Type& nlohmann_json_t) { NLOHMANN_JSON_EXPAND(NLOHMANN_JSON_PASTE(NLOHMANN_JSON_TO, __VA_ARGS__)) } \
    inline void from_json(const nlohmann::json& nlohmann_json_j, Type& nlohmann_json_t) { Type nlohmann_json_default_obj; NLOHMANN_JSON_EXPAND(NLOHMANN_JSON_PASTE(NLOHMANN_JSON_FROM_WITH_DEFAULT, __VA_ARGS__)) }


// inspired from https://stackoverflow.com/a/26745591
// allows to call any std function as if (e.g. with begin):
// using std::begin; begin(x);
//
// it allows using the detected idiom to retrieve the return type
// of such an expression
#define NLOHMANN_CAN_CALL_STD_FUNC_IMPL(std_name)                                 \
    namespace detail {                                                            \
    using std::std_name;                                                          \
    \
    template<typename... T>                                                       \
    using result_of_##std_name = decltype(std_name(std::declval<T>()...));        \
    }                                                                             \
    \
    namespace detail2 {                                                           \
    struct std_name##_tag                                                         \
    {                                                                             \
    };                                                                            \
    \
    template<typename... T>                                                       \
    std_name##_tag std_name(T&&...);                                              \
    \
    template<typename... T>                                                       \
    using result_of_##std_name = decltype(std_name(std::declval<T>()...));        \
    \
    template<typename... T>                                                       \
    struct would_call_std_##std_name                                              \
    {                                                                             \
        static constexpr auto const value = ::nlohmann::detail::                  \
                                            is_detected_exact<std_name##_tag, result_of_##std_name, T...>::value; \
    };                                                                            \
    } /* namespace detail2 */ \
    \
    template<typename... T>                                                       \
    struct would_call_std_##std_name : detail2::would_call_std_##std_name<T...>   \
    {                                                                             \
    }

#ifndef JSON_USE_IMPLICIT_CONVERSIONS
    #define JSON_USE_IMPLICIT_CONVERSIONS 1
#endif

#if JSON_USE_IMPLICIT_CONVERSIONS
    #define JSON_EXPLICIT
#else
    #define JSON_EXPLICIT explicit
#endif

#ifndef JSON_DISABLE_ENUM_SERIALIZATION
    #define JSON_DISABLE_ENUM_SERIALIZATION 0
#endif

#ifndef JSON_USE_GLOBAL_UDLS
    #define JSON_USE_GLOBAL_UDLS 1
#endif

#if JSON_HAS_THREE_WAY_COMPARISON
    #include <compare> // partial_ordering
#endif

NLOHMANN_JSON_NAMESPACE_BEGIN
namespace detail
{

///////////////////////////
// JSON type enumeration //
///////////////////////////

/*!
@brief the JSON type enumeration

This enumeration collects the different JSON types. It is internally used to
distinguish the stored values, and the functions @ref basic_json::is_null(),
@ref basic_json::is_object(), @ref basic_json::is_array(),
@ref basic_json::is_string(), @ref basic_json::is_boolean(),
@ref basic_json::is_number() (with @ref basic_json::is_number_integer(),
@ref basic_json::is_number_unsigned(), and @ref basic_json::is_number_float()),
@ref basic_json::is_discarded(), @ref basic_json::is_primitive(), and
@ref basic_json::is_structured() rely on it.

@note There are three enumeration entries (number_integer, number_unsigned, and
number_float), because the library distinguishes these three types for numbers:
@ref basic_json::number_unsigned_t is used for unsigned integers,
@ref basic_json::number_integer_t is used for signed integers, and
@ref basic_json::number_float_t is used for floating-point numbers or to
approximate integers which do not fit in the limits of their respective type.

@sa see @ref basic_json::basic_json(const value_t value_type) -- create a JSON
value with the default value for a given type

@since version 1.0.0
*/
enum class value_t : std::uint8_t
{
    null,             ///< null value
    object,           ///< object (unordered set of name/value pairs)
    array,            ///< array (ordered collection of values)
    string,           ///< string value
    boolean,          ///< boolean value
    number_integer,   ///< number value (signed integer)
    number_unsigned,  ///< number value (unsigned integer)
    number_float,     ///< number value (floating-point)
    binary,           ///< binary array (ordered collection of bytes)
    discarded         ///< discarded by the parser callback function
};

/*!
@brief comparison operator for JSON types

Returns an ordering that is similar to Python:
- order: null < boolean < number < object < array < string < binary
- furthermore, each type is not smaller than itself
- discarded values are not comparable
- binary is represented as a b"" string in python and directly comparable to a
  string; however, making a binary array directly comparable with a string would
  be surprising behavior in a JSON file.

@since version 1.0.0
*/
#if JSON_HAS_THREE_WAY_COMPARISON
    inline std::partial_ordering operator<=>(const value_t lhs, const value_t rhs) noexcept // *NOPAD*
#else
    inline bool operator<(const value_t lhs, const value_t rhs) noexcept
#endif
{
    static constexpr std::array<std::uint8_t, 9> order = {{
            0 /* null */, 3 /* object */, 4 /* array */, 5 /* string */,
            1 /* boolean */, 2 /* integer */, 2 /* unsigned */, 2 /* float */,
            6 /* binary */
        }
    };

    const auto l_index = static_cast<std::size_t>(lhs);
    const auto r_index = static_cast<std::size_t>(rhs);
#if JSON_HAS_THREE_WAY_COMPARISON
    if (l_index < order.size() && r_index < order.size())
    {
        return order[l_index] <=> order[r_index]; // *NOPAD*
    }
    return std::partial_ordering::unordered;
#else
    return l_index < order.size() && r_index < order.size() && order[l_index] < order[r_index];
#endif
}

// GCC selects the built-in operator< over an operator rewritten from
// a user-defined spaceship operator
// Clang, MSVC, and ICC select the rewritten candidate
// (see GCC bug https://gcc.gnu.org/bugzilla/show_bug.cgi?id=105200)
#if JSON_HAS_THREE_WAY_COMPARISON && defined(__GNUC__)
inline bool operator<(const value_t lhs, const value_t rhs) noexcept
{
    return std::is_lt(lhs <=> rhs); // *NOPAD*
}
#endif

}  // namespace detail
NLOHMANN_JSON_NAMESPACE_END

// #include <nlohmann/detail/string_escape.hpp>
//     __ _____ _____ _____
//  __|  |   __|     |   | |  JSON for Modern C++
// |  |  |__   |  |  | | | |  version 3.11.2
// |_____|_____|_____|_|___|  https://github.com/nlohmann/json
//
// SPDX-FileCopyrightText: 2013-2022 Niels Lohmann <https://nlohmann.me>
// SPDX-License-Identifier: MIT



// #include <nlohmann/detail/abi_macros.hpp>


NLOHMANN_JSON_NAMESPACE_BEGIN
namespace detail
{

/*!
@brief replace all occurrences of a substring by another string

@param[in,out] s  the string to manipulate; changed so that all
               occurrences of @a f are replaced with @a t
@param[in]     f  the substring to replace with @a t
@param[in]     t  the string to replace @a f

@pre The search string @a f must not be empty. **This precondition is
enforced with an assertion.**

@since version 2.0.0
*/
template<typename StringType>
inline void replace_substring(StringType& s, const StringType& f,
                              const StringType& t)
{
    JSON_ASSERT(!f.empty());
    for (auto pos = s.find(f);                // find first occurrence of f
            pos != StringType::npos;          // make sure f was found
            s.replace(pos, f.size(), t),      // replace with t, and
            pos = s.find(f, pos + t.size()))  // find next occurrence of f
    {}
}

/*!
 * @brief string escaping as described in RFC 6901 (Sect. 4)
 * @param[in] s string to escape
 * @return    escaped string
 *
 * Note the order of escaping "~" to "~0" and "/" to "~1" is important.
 */
template<typename StringType>
inline StringType escape(StringType s)
{
    replace_substring(s, StringType{"~"}, StringType{"~0"});
    replace_substring(s, StringType{"/"}, StringType{"~1"});
    return s;
}

/*!
 * @brief string unescaping as described in RFC 6901 (Sect. 4)
 * @param[in] s string to unescape
 * @return    unescaped string
 *
 * Note the order of escaping "~1" to "/" and "~0" to "~" is important.
 */
template<typename StringType>
static void unescape(StringType& s)
{
    replace_substring(s, StringType{"~1"}, StringType{"/"});
    replace_substring(s, StringType{"~0"}, StringType{"~"});
}

}  // namespace detail
NLOHMANN_JSON_NAMESPACE_END

// #include <nlohmann/detail/input/position_t.hpp>
//     __ _____ _____ _____
//  __|  |   __|     |   | |  JSON for Modern C++
// |  |  |__   |  |  | | | |  version 3.11.2
// |_____|_____|_____|_|___|  https://github.com/nlohmann/json
//
// SPDX-FileCopyrightText: 2013-2022 Niels Lohmann <https://nlohmann.me>
// SPDX-License-Identifier: MIT



#include <cstddef> // size_t

// #include <nlohmann/detail/abi_macros.hpp>


NLOHMANN_JSON_NAMESPACE_BEGIN
namespace detail
{

/// struct to capture the start position of the current token
struct position_t
{
    /// the total number of characters read
    std::size_t chars_read_total = 0;
    /// the number of characters read in the current line
    std::size_t chars_read_current_line = 0;
    /// the number of lines read
    std::size_t lines_read = 0;

    /// conversion to size_t to preserve SAX interface
    constexpr operator size_t() const
    {
        return chars_read_total;
    }
};

}  // namespace detail
NLOHMANN_JSON_NAMESPACE_END

// #include <nlohmann/detail/macro_scope.hpp>

// #include <nlohmann/detail/meta/cpp_future.hpp>
//     __ _____ _____ _____
//  __|  |   __|     |   | |  JSON for Modern C++
// |  |  |__   |  |  | | | |  version 3.11.2
// |_____|_____|_____|_|___|  https://github.com/nlohmann/json
//
// SPDX-FileCopyrightText: 2013-2022 Niels Lohmann <https://nlohmann.me>
// SPDX-FileCopyrightText: 2018 The Abseil Authors
// SPDX-License-Identifier: MIT



#include <array> // array
#include <cstddef> // size_t
#include <type_traits> // conditional, enable_if, false_type, integral_constant, is_constructible, is_integral, is_same, remove_cv, remove_reference, true_type
#include <utility> // index_sequence, make_index_sequence, index_sequence_for

// #include <nlohmann/detail/macro_scope.hpp>


NLOHMANN_JSON_NAMESPACE_BEGIN
namespace detail
{

template<typename T>
using uncvref_t = typename std::remove_cv<typename std::remove_reference<T>::type>::type;

#ifdef JSON_HAS_CPP_14

// the following utilities are natively available in C++14
using std::enable_if_t;
using std::index_sequence;
using std::make_index_sequence;
using std::index_sequence_for;

#else

// alias templates to reduce boilerplate
template<bool B, typename T = void>
using enable_if_t = typename std::enable_if<B, T>::type;

// The following code is taken from https://github.com/abseil/abseil-cpp/blob/10cb35e459f5ecca5b2ff107635da0bfa41011b4/absl/utility/utility.h
// which is part of Google Abseil (https://github.com/abseil/abseil-cpp), licensed under the Apache License 2.0.

//// START OF CODE FROM GOOGLE ABSEIL

// integer_sequence
//
// Class template representing a compile-time integer sequence. An instantiation
// of `integer_sequence<T, Ints...>` has a sequence of integers encoded in its
// type through its template arguments (which is a common need when
// working with C++11 variadic templates). `absl::integer_sequence` is designed
// to be a drop-in replacement for C++14's `std::integer_sequence`.
//
// Example:
//
//   template< class T, T... Ints >
//   void user_function(integer_sequence<T, Ints...>);
//
//   int main()
//   {
//     // user_function's `T` will be deduced to `int` and `Ints...`
//     // will be deduced to `0, 1, 2, 3, 4`.
//     user_function(make_integer_sequence<int, 5>());
//   }
template <typename T, T... Ints>
struct integer_sequence
{
    using value_type = T;
    static constexpr std::size_t size() noexcept
    {
        return sizeof...(Ints);
    }
};

// index_sequence
//
// A helper template for an `integer_sequence` of `size_t`,
// `absl::index_sequence` is designed to be a drop-in replacement for C++14's
// `std::index_sequence`.
template <size_t... Ints>
using index_sequence = integer_sequence<size_t, Ints...>;

namespace utility_internal
{

template <typename Seq, size_t SeqSize, size_t Rem>
struct Extend;

// Note that SeqSize == sizeof...(Ints). It's passed explicitly for efficiency.
template <typename T, T... Ints, size_t SeqSize>
struct Extend<integer_sequence<T, Ints...>, SeqSize, 0>
{
    using type = integer_sequence < T, Ints..., (Ints + SeqSize)... >;
};

template <typename T, T... Ints, size_t SeqSize>
struct Extend<integer_sequence<T, Ints...>, SeqSize, 1>
{
    using type = integer_sequence < T, Ints..., (Ints + SeqSize)..., 2 * SeqSize >;
};

// Recursion helper for 'make_integer_sequence<T, N>'.
// 'Gen<T, N>::type' is an alias for 'integer_sequence<T, 0, 1, ... N-1>'.
template <typename T, size_t N>
struct Gen
{
    using type =
        typename Extend < typename Gen < T, N / 2 >::type, N / 2, N % 2 >::type;
};

template <typename T>
struct Gen<T, 0>
{
    using type = integer_sequence<T>;
};

}  // namespace utility_internal

// Compile-time sequences of integers

// make_integer_sequence
//
// This template alias is equivalent to
// `integer_sequence<int, 0, 1, ..., N-1>`, and is designed to be a drop-in
// replacement for C++14's `std::make_integer_sequence`.
template <typename T, T N>
using make_integer_sequence = typename utility_internal::Gen<T, N>::type;

// make_index_sequence
//
// This template alias is equivalent to `index_sequence<0, 1, ..., N-1>`,
// and is designed to be a drop-in replacement for C++14's
// `std::make_index_sequence`.
template <size_t N>
using make_index_sequence = make_integer_sequence<size_t, N>;

// index_sequence_for
//
// Converts a typename pack into an index sequence of the same length, and
// is designed to be a drop-in replacement for C++14's
// `std::index_sequence_for()`
template <typename... Ts>
using index_sequence_for = make_index_sequence<sizeof...(Ts)>;

//// END OF CODE FROM GOOGLE ABSEIL

#endif

// dispatch utility (taken from ranges-v3)
template<unsigned N> struct priority_tag : priority_tag < N - 1 > {};
template<> struct priority_tag<0> {};

// taken from ranges-v3
template<typename T>
struct static_const
{
    static JSON_INLINE_VARIABLE constexpr T value{};
};

#ifndef JSON_HAS_CPP_17
    template<typename T>
    constexpr T static_const<T>::value;
#endif

template<typename T, typename... Args>
inline constexpr std::array<T, sizeof...(Args)> make_array(Args&& ... args)
{
    return std::array<T, sizeof...(Args)> {{static_cast<T>(std::forward<Args>(args))...}};
}

}  // namespace detail
NLOHMANN_JSON_NAMESPACE_END

// #include <nlohmann/detail/meta/type_traits.hpp>
//     __ _____ _____ _____
//  __|  |   __|     |   | |  JSON for Modern C++
// |  |  |__   |  |  | | | |  version 3.11.2
// |_____|_____|_____|_|___|  https://github.com/nlohmann/json
//
// SPDX-FileCopyrightText: 2013-2022 Niels Lohmann <https://nlohmann.me>
// SPDX-License-Identifier: MIT



#include <limits> // numeric_limits
#include <type_traits> // false_type, is_constructible, is_integral, is_same, true_type
#include <utility> // declval
#include <tuple> // tuple

// #include <nlohmann/detail/iterators/iterator_traits.hpp>
//     __ _____ _____ _____
//  __|  |   __|     |   | |  JSON for Modern C++
// |  |  |__   |  |  | | | |  version 3.11.2
// |_____|_____|_____|_|___|  https://github.com/nlohmann/json
//
// SPDX-FileCopyrightText: 2013-2022 Niels Lohmann <https://nlohmann.me>
// SPDX-License-Identifier: MIT



#include <iterator> // random_access_iterator_tag

// #include <nlohmann/detail/abi_macros.hpp>

// #include <nlohmann/detail/meta/void_t.hpp>

// #include <nlohmann/detail/meta/cpp_future.hpp>


NLOHMANN_JSON_NAMESPACE_BEGIN
namespace detail
{

template<typename It, typename = void>
struct iterator_types {};

template<typename It>
struct iterator_types <
    It,
    void_t<typename It::difference_type, typename It::value_type, typename It::pointer,
    typename It::reference, typename It::iterator_category >>
{
    using difference_type = typename It::difference_type;
    using value_type = typename It::value_type;
    using pointer = typename It::pointer;
    using reference = typename It::reference;
    using iterator_category = typename It::iterator_category;
};

// This is required as some compilers implement std::iterator_traits in a way that
// doesn't work with SFINAE. See https://github.com/nlohmann/json/issues/1341.
template<typename T, typename = void>
struct iterator_traits
{
};

template<typename T>
struct iterator_traits < T, enable_if_t < !std::is_pointer<T>::value >>
            : iterator_types<T>
{
};

template<typename T>
struct iterator_traits<T*, enable_if_t<std::is_object<T>::value>>
{
    using iterator_category = std::random_access_iterator_tag;
    using value_type = T;
    using difference_type = ptrdiff_t;
    using pointer = T*;
    using reference = T&;
};

}  // namespace detail
NLOHMANN_JSON_NAMESPACE_END

// #include <nlohmann/detail/macro_scope.hpp>

// #include <nlohmann/detail/meta/call_std/begin.hpp>
//     __ _____ _____ _____
//  __|  |   __|     |   | |  JSON for Modern C++
// |  |  |__   |  |  | | | |  version 3.11.2
// |_____|_____|_____|_|___|  https://github.com/nlohmann/json
//
// SPDX-FileCopyrightText: 2013-2022 Niels Lohmann <https://nlohmann.me>
// SPDX-License-Identifier: MIT



// #include <nlohmann/detail/macro_scope.hpp>


NLOHMANN_JSON_NAMESPACE_BEGIN

NLOHMANN_CAN_CALL_STD_FUNC_IMPL(begin);

NLOHMANN_JSON_NAMESPACE_END

// #include <nlohmann/detail/meta/call_std/end.hpp>
//     __ _____ _____ _____
//  __|  |   __|     |   | |  JSON for Modern C++
// |  |  |__   |  |  | | | |  version 3.11.2
// |_____|_____|_____|_|___|  https://github.com/nlohmann/json
//
// SPDX-FileCopyrightText: 2013-2022 Niels Lohmann <https://nlohmann.me>
// SPDX-License-Identifier: MIT



// #include <nlohmann/detail/macro_scope.hpp>


NLOHMANN_JSON_NAMESPACE_BEGIN

NLOHMANN_CAN_CALL_STD_FUNC_IMPL(end);

NLOHMANN_JSON_NAMESPACE_END

// #include <nlohmann/detail/meta/cpp_future.hpp>

// #include <nlohmann/detail/meta/detected.hpp>

// #include <nlohmann/json_fwd.hpp>
//     __ _____ _____ _____
//  __|  |   __|     |   | |  JSON for Modern C++
// |  |  |__   |  |  | | | |  version 3.11.2
// |_____|_____|_____|_|___|  https://github.com/nlohmann/json
//
// SPDX-FileCopyrightText: 2013-2022 Niels Lohmann <https://nlohmann.me>
// SPDX-License-Identifier: MIT

#ifndef INCLUDE_NLOHMANN_JSON_FWD_HPP_
    #define INCLUDE_NLOHMANN_JSON_FWD_HPP_

    #include <cstdint> // int64_t, uint64_t
    #include <map> // map
    #include <memory> // allocator
    #include <string> // string
    #include <vector> // vector

    // #include <nlohmann/detail/abi_macros.hpp>


    /*!
    @brief namespace for Niels Lohmann
    @see https://github.com/nlohmann
    @since version 1.0.0
    */
    NLOHMANN_JSON_NAMESPACE_BEGIN

    /*!
    @brief default JSONSerializer template argument

    This serializer ignores the template arguments and uses ADL
    ([argument-dependent lookup](https://en.cppreference.com/w/cpp/language/adl))
    for serialization.
    */
    template<typename T = void, typename SFINAE = void>
    struct adl_serializer;

    /// a class to store JSON values
    /// @sa https://json.nlohmann.me/api/basic_json/
    template<template<typename U, typename V, typename... Args> class ObjectType =
    std::map,
    template<typename U, typename... Args> class ArrayType = std::vector,
    class StringType = std::string, class BooleanType = bool,
    class NumberIntegerType = std::int64_t,
    class NumberUnsignedType = std::uint64_t,
    class NumberFloatType = double,
    template<typename U> class AllocatorType = std::allocator,
    template<typename T, typename SFINAE = void> class JSONSerializer =
    adl_serializer,
    class BinaryType = std::vector<std::uint8_t>>
    class basic_json;

    /// @brief JSON Pointer defines a string syntax for identifying a specific value within a JSON document
    /// @sa https://json.nlohmann.me/api/json_pointer/
    template<typename RefStringType>
    class json_pointer;

    /*!
    @brief default specialization
    @sa https://json.nlohmann.me/api/json/
    */
    using json = basic_json<>;

    /// @brief a minimal map-like container that preserves insertion order
    /// @sa https://json.nlohmann.me/api/ordered_map/
    template<class Key, class T, class IgnoredLess, class Allocator>
    struct ordered_map;

    /// @brief specialization that maintains the insertion order of object keys
    /// @sa https://json.nlohmann.me/api/ordered_json/
    using ordered_json = basic_json<nlohmann::ordered_map>;

    NLOHMANN_JSON_NAMESPACE_END

#endif  // INCLUDE_NLOHMANN_JSON_FWD_HPP_


NLOHMANN_JSON_NAMESPACE_BEGIN
/*!
@brief detail namespace with internal helper functions

This namespace collects functions that should not be exposed,
implementations of some @ref basic_json methods, and meta-programming helpers.

@since version 2.1.0
*/
namespace detail
{

/////////////
// helpers //
/////////////

// Note to maintainers:
//
// Every trait in this file expects a non CV-qualified type.
// The only exceptions are in the 'aliases for detected' section
// (i.e. those of the form: decltype(T::member_function(std::declval<T>())))
//
// In this case, T has to be properly CV-qualified to constraint the function arguments
// (e.g. to_json(BasicJsonType&, const T&))

template<typename> struct is_basic_json : std::false_type {};

NLOHMANN_BASIC_JSON_TPL_DECLARATION
struct is_basic_json<NLOHMANN_BASIC_JSON_TPL> : std::true_type {};

// used by exceptions create() member functions
// true_type for pointer to possibly cv-qualified basic_json or std::nullptr_t
// false_type otherwise
template<typename BasicJsonContext>
struct is_basic_json_context :
    std::integral_constant < bool,
    is_basic_json<typename std::remove_cv<typename std::remove_pointer<BasicJsonContext>::type>::type>::value
    || std::is_same<BasicJsonContext, std::nullptr_t>::value >
{};

//////////////////////
// json_ref helpers //
//////////////////////

template<typename>
class json_ref;

template<typename>
struct is_json_ref : std::false_type {};

template<typename T>
struct is_json_ref<json_ref<T>> : std::true_type {};

//////////////////////////
// aliases for detected //
//////////////////////////

template<typename T>
using mapped_type_t = typename T::mapped_type;

template<typename T>
using key_type_t = typename T::key_type;

template<typename T>
using value_type_t = typename T::value_type;

template<typename T>
using difference_type_t = typename T::difference_type;

template<typename T>
using pointer_t = typename T::pointer;

template<typename T>
using reference_t = typename T::reference;

template<typename T>
using iterator_category_t = typename T::iterator_category;

template<typename T, typename... Args>
using to_json_function = decltype(T::to_json(std::declval<Args>()...));

template<typename T, typename... Args>
using from_json_function = decltype(T::from_json(std::declval<Args>()...));

template<typename T, typename U>
using get_template_function = decltype(std::declval<T>().template get<U>());

// trait checking if JSONSerializer<T>::from_json(json const&, udt&) exists
template<typename BasicJsonType, typename T, typename = void>
struct has_from_json : std::false_type {};

// trait checking if j.get<T> is valid
// use this trait instead of std::is_constructible or std::is_convertible,
// both rely on, or make use of implicit conversions, and thus fail when T
// has several constructors/operator= (see https://github.com/nlohmann/json/issues/958)
template <typename BasicJsonType, typename T>
struct is_getable
{
    static constexpr bool value = is_detected<get_template_function, const BasicJsonType&, T>::value;
};

template<typename BasicJsonType, typename T>
struct has_from_json < BasicJsonType, T, enable_if_t < !is_basic_json<T>::value >>
{
    using serializer = typename BasicJsonType::template json_serializer<T, void>;

    static constexpr bool value =
        is_detected_exact<void, from_json_function, serializer,
        const BasicJsonType&, T&>::value;
};

// This trait checks if JSONSerializer<T>::from_json(json const&) exists
// this overload is used for non-default-constructible user-defined-types
template<typename BasicJsonType, typename T, typename = void>
struct has_non_default_from_json : std::false_type {};

template<typename BasicJsonType, typename T>
struct has_non_default_from_json < BasicJsonType, T, enable_if_t < !is_basic_json<T>::value >>
{
    using serializer = typename BasicJsonType::template json_serializer<T, void>;

    static constexpr bool value =
        is_detected_exact<T, from_json_function, serializer,
        const BasicJsonType&>::value;
};

// This trait checks if BasicJsonType::json_serializer<T>::to_json exists
// Do not evaluate the trait when T is a basic_json type, to avoid template instantiation infinite recursion.
template<typename BasicJsonType, typename T, typename = void>
struct has_to_json : std::false_type {};

template<typename BasicJsonType, typename T>
struct has_to_json < BasicJsonType, T, enable_if_t < !is_basic_json<T>::value >>
{
    using serializer = typename BasicJsonType::template json_serializer<T, void>;

    static constexpr bool value =
        is_detected_exact<void, to_json_function, serializer, BasicJsonType&,
        T>::value;
};

template<typename T>
using detect_key_compare = typename T::key_compare;

template<typename T>
struct has_key_compare : std::integral_constant<bool, is_detected<detect_key_compare, T>::value> {};

// obtains the actual object key comparator
template<typename BasicJsonType>
struct actual_object_comparator
{
    using object_t = typename BasicJsonType::object_t;
    using object_comparator_t = typename BasicJsonType::default_object_comparator_t;
    using type = typename std::conditional < has_key_compare<object_t>::value,
          typename object_t::key_compare, object_comparator_t>::type;
};

template<typename BasicJsonType>
using actual_object_comparator_t = typename actual_object_comparator<BasicJsonType>::type;

///////////////////
// is_ functions //
///////////////////

// https://en.cppreference.com/w/cpp/types/conjunction
template<class...> struct conjunction : std::true_type { };
template<class B> struct conjunction<B> : B { };
template<class B, class... Bn>
struct conjunction<B, Bn...>
: std::conditional<static_cast<bool>(B::value), conjunction<Bn...>, B>::type {};

// https://en.cppreference.com/w/cpp/types/negation
template<class B> struct negation : std::integral_constant < bool, !B::value > { };

// Reimplementation of is_constructible and is_default_constructible, due to them being broken for
// std::pair and std::tuple until LWG 2367 fix (see https://cplusplus.github.io/LWG/lwg-defects.html#2367).
// This causes compile errors in e.g. clang 3.5 or gcc 4.9.
template <typename T>
struct is_default_constructible : std::is_default_constructible<T> {};

template <typename T1, typename T2>
struct is_default_constructible<std::pair<T1, T2>>
            : conjunction<is_default_constructible<T1>, is_default_constructible<T2>> {};

template <typename T1, typename T2>
struct is_default_constructible<const std::pair<T1, T2>>
            : conjunction<is_default_constructible<T1>, is_default_constructible<T2>> {};

template <typename... Ts>
struct is_default_constructible<std::tuple<Ts...>>
            : conjunction<is_default_constructible<Ts>...> {};

template <typename... Ts>
struct is_default_constructible<const std::tuple<Ts...>>
            : conjunction<is_default_constructible<Ts>...> {};


template <typename T, typename... Args>
struct is_constructible : std::is_constructible<T, Args...> {};

template <typename T1, typename T2>
struct is_constructible<std::pair<T1, T2>> : is_default_constructible<std::pair<T1, T2>> {};

template <typename T1, typename T2>
struct is_constructible<const std::pair<T1, T2>> : is_default_constructible<const std::pair<T1, T2>> {};

template <typename... Ts>
struct is_constructible<std::tuple<Ts...>> : is_default_constructible<std::tuple<Ts...>> {};

template <typename... Ts>
struct is_constructible<const std::tuple<Ts...>> : is_default_constructible<const std::tuple<Ts...>> {};


template<typename T, typename = void>
struct is_iterator_traits : std::false_type {};

template<typename T>
struct is_iterator_traits<iterator_traits<T>>
{
  private:
    using traits = iterator_traits<T>;

  public:
    static constexpr auto value =
        is_detected<value_type_t, traits>::value &&
        is_detected<difference_type_t, traits>::value &&
        is_detected<pointer_t, traits>::value &&
        is_detected<iterator_category_t, traits>::value &&
        is_detected<reference_t, traits>::value;
};

template<typename T>
struct is_range
{
  private:
    using t_ref = typename std::add_lvalue_reference<T>::type;

    using iterator = detected_t<result_of_begin, t_ref>;
    using sentinel = detected_t<result_of_end, t_ref>;

    // to be 100% correct, it should use https://en.cppreference.com/w/cpp/iterator/input_or_output_iterator
    // and https://en.cppreference.com/w/cpp/iterator/sentinel_for
    // but reimplementing these would be too much work, as a lot of other concepts are used underneath
    static constexpr auto is_iterator_begin =
        is_iterator_traits<iterator_traits<iterator>>::value;

  public:
    static constexpr bool value = !std::is_same<iterator, nonesuch>::value && !std::is_same<sentinel, nonesuch>::value && is_iterator_begin;
};

template<typename R>
using iterator_t = enable_if_t<is_range<R>::value, result_of_begin<decltype(std::declval<R&>())>>;

template<typename T>
using range_value_t = value_type_t<iterator_traits<iterator_t<T>>>;

// The following implementation of is_complete_type is taken from
// https://blogs.msdn.microsoft.com/vcblog/2015/12/02/partial-support-for-expression-sfinae-in-vs-2015-update-1/
// and is written by Xiang Fan who agreed to using it in this library.

template<typename T, typename = void>
struct is_complete_type : std::false_type {};

template<typename T>
struct is_complete_type<T, decltype(void(sizeof(T)))> : std::true_type {};

template<typename BasicJsonType, typename CompatibleObjectType,
         typename = void>
struct is_compatible_object_type_impl : std::false_type {};

template<typename BasicJsonType, typename CompatibleObjectType>
struct is_compatible_object_type_impl <
    BasicJsonType, CompatibleObjectType,
    enable_if_t < is_detected<mapped_type_t, CompatibleObjectType>::value&&
    is_detected<key_type_t, CompatibleObjectType>::value >>
{
    using object_t = typename BasicJsonType::object_t;

    // macOS's is_constructible does not play well with nonesuch...
    static constexpr bool value =
        is_constructible<typename object_t::key_type,
        typename CompatibleObjectType::key_type>::value &&
        is_constructible<typename object_t::mapped_type,
        typename CompatibleObjectType::mapped_type>::value;
};

template<typename BasicJsonType, typename CompatibleObjectType>
struct is_compatible_object_type
    : is_compatible_object_type_impl<BasicJsonType, CompatibleObjectType> {};

template<typename BasicJsonType, typename ConstructibleObjectType,
         typename = void>
struct is_constructible_object_type_impl : std::false_type {};

template<typename BasicJsonType, typename ConstructibleObjectType>
struct is_constructible_object_type_impl <
    BasicJsonType, ConstructibleObjectType,
    enable_if_t < is_detected<mapped_type_t, ConstructibleObjectType>::value&&
    is_detected<key_type_t, ConstructibleObjectType>::value >>
{
    using object_t = typename BasicJsonType::object_t;

    static constexpr bool value =
        (is_default_constructible<ConstructibleObjectType>::value &&
         (std::is_move_assignable<ConstructibleObjectType>::value ||
          std::is_copy_assignable<ConstructibleObjectType>::value) &&
         (is_constructible<typename ConstructibleObjectType::key_type,
          typename object_t::key_type>::value &&
          std::is_same <
          typename object_t::mapped_type,
          typename ConstructibleObjectType::mapped_type >::value)) ||
        (has_from_json<BasicJsonType,
         typename ConstructibleObjectType::mapped_type>::value ||
         has_non_default_from_json <
         BasicJsonType,
         typename ConstructibleObjectType::mapped_type >::value);
};

template<typename BasicJsonType, typename ConstructibleObjectType>
struct is_constructible_object_type
    : is_constructible_object_type_impl<BasicJsonType,
      ConstructibleObjectType> {};

template<typename BasicJsonType, typename CompatibleStringType>
struct is_compatible_string_type
{
    static constexpr auto value =
        is_constructible<typename BasicJsonType::string_t, CompatibleStringType>::value;
};

template<typename BasicJsonType, typename ConstructibleStringType>
struct is_constructible_string_type
{
    // launder type through decltype() to fix compilation failure on ICPC
#ifdef __INTEL_COMPILER
    using laundered_type = decltype(std::declval<ConstructibleStringType>());
#else
    using laundered_type = ConstructibleStringType;
#endif

    static constexpr auto value =
        conjunction <
        is_constructible<laundered_type, typename BasicJsonType::string_t>,
        is_detected_exact<typename BasicJsonType::string_t::value_type,
        value_type_t, laundered_type >>::value;
};

template<typename BasicJsonType, typename CompatibleArrayType, typename = void>
struct is_compatible_array_type_impl : std::false_type {};

template<typename BasicJsonType, typename CompatibleArrayType>
struct is_compatible_array_type_impl <
    BasicJsonType, CompatibleArrayType,
    enable_if_t <
    is_detected<iterator_t, CompatibleArrayType>::value&&
    is_iterator_traits<iterator_traits<detected_t<iterator_t, CompatibleArrayType>>>::value&&
// special case for types like std::filesystem::path whose iterator's value_type are themselves
// c.f. https://github.com/nlohmann/json/pull/3073
    !std::is_same<CompatibleArrayType, detected_t<range_value_t, CompatibleArrayType>>::value >>
{
    static constexpr bool value =
        is_constructible<BasicJsonType,
        range_value_t<CompatibleArrayType>>::value;
};

template<typename BasicJsonType, typename CompatibleArrayType>
struct is_compatible_array_type
    : is_compatible_array_type_impl<BasicJsonType, CompatibleArrayType> {};

template<typename BasicJsonType, typename ConstructibleArrayType, typename = void>
struct is_constructible_array_type_impl : std::false_type {};

template<typename BasicJsonType, typename ConstructibleArrayType>
struct is_constructible_array_type_impl <
    BasicJsonType, ConstructibleArrayType,
    enable_if_t<std::is_same<ConstructibleArrayType,
    typename BasicJsonType::value_type>::value >>
            : std::true_type {};

template<typename BasicJsonType, typename ConstructibleArrayType>
struct is_constructible_array_type_impl <
    BasicJsonType, ConstructibleArrayType,
    enable_if_t < !std::is_same<ConstructibleArrayType,
    typename BasicJsonType::value_type>::value&&
    !is_compatible_string_type<BasicJsonType, ConstructibleArrayType>::value&&
    is_default_constructible<ConstructibleArrayType>::value&&
(std::is_move_assignable<ConstructibleArrayType>::value ||
 std::is_copy_assignable<ConstructibleArrayType>::value)&&
is_detected<iterator_t, ConstructibleArrayType>::value&&
is_iterator_traits<iterator_traits<detected_t<iterator_t, ConstructibleArrayType>>>::value&&
is_detected<range_value_t, ConstructibleArrayType>::value&&
// special case for types like std::filesystem::path whose iterator's value_type are themselves
// c.f. https://github.com/nlohmann/json/pull/3073
!std::is_same<ConstructibleArrayType, detected_t<range_value_t, ConstructibleArrayType>>::value&&
        is_complete_type <
        detected_t<range_value_t, ConstructibleArrayType >>::value >>
{
    using value_type = range_value_t<ConstructibleArrayType>;

    static constexpr bool value =
        std::is_same<value_type,
        typename BasicJsonType::array_t::value_type>::value ||
        has_from_json<BasicJsonType,
        value_type>::value ||
        has_non_default_from_json <
        BasicJsonType,
        value_type >::value;
};

template<typename BasicJsonType, typename ConstructibleArrayType>
struct is_constructible_array_type
    : is_constructible_array_type_impl<BasicJsonType, ConstructibleArrayType> {};

template<typename RealIntegerType, typename CompatibleNumberIntegerType,
         typename = void>
struct is_compatible_integer_type_impl : std::false_type {};

template<typename RealIntegerType, typename CompatibleNumberIntegerType>
struct is_compatible_integer_type_impl <
    RealIntegerType, CompatibleNumberIntegerType,
    enable_if_t < std::is_integral<RealIntegerType>::value&&
    std::is_integral<CompatibleNumberIntegerType>::value&&
    !std::is_same<bool, CompatibleNumberIntegerType>::value >>
{
    // is there an assert somewhere on overflows?
    using RealLimits = std::numeric_limits<RealIntegerType>;
    using CompatibleLimits = std::numeric_limits<CompatibleNumberIntegerType>;

    static constexpr auto value =
        is_constructible<RealIntegerType,
        CompatibleNumberIntegerType>::value &&
        CompatibleLimits::is_integer &&
        RealLimits::is_signed == CompatibleLimits::is_signed;
};

template<typename RealIntegerType, typename CompatibleNumberIntegerType>
struct is_compatible_integer_type
    : is_compatible_integer_type_impl<RealIntegerType,
      CompatibleNumberIntegerType> {};

template<typename BasicJsonType, typename CompatibleType, typename = void>
struct is_compatible_type_impl: std::false_type {};

template<typename BasicJsonType, typename CompatibleType>
struct is_compatible_type_impl <
    BasicJsonType, CompatibleType,
    enable_if_t<is_complete_type<CompatibleType>::value >>
{
    static constexpr bool value =
        has_to_json<BasicJsonType, CompatibleType>::value;
};

template<typename BasicJsonType, typename CompatibleType>
struct is_compatible_type
    : is_compatible_type_impl<BasicJsonType, CompatibleType> {};

template<typename T1, typename T2>
struct is_constructible_tuple : std::false_type {};

template<typename T1, typename... Args>
struct is_constructible_tuple<T1, std::tuple<Args...>> : conjunction<is_constructible<T1, Args>...> {};

template<typename BasicJsonType, typename T>
struct is_json_iterator_of : std::false_type {};

template<typename BasicJsonType>
struct is_json_iterator_of<BasicJsonType, typename BasicJsonType::iterator> : std::true_type {};

template<typename BasicJsonType>
struct is_json_iterator_of<BasicJsonType, typename BasicJsonType::const_iterator> : std::true_type
{};

// checks if a given type T is a template specialization of Primary
template<template <typename...> class Primary, typename T>
struct is_specialization_of : std::false_type {};

template<template <typename...> class Primary, typename... Args>
struct is_specialization_of<Primary, Primary<Args...>> : std::true_type {};

template<typename T>
using is_json_pointer = is_specialization_of<::nlohmann::json_pointer, uncvref_t<T>>;

// checks if A and B are comparable using Compare functor
template<typename Compare, typename A, typename B, typename = void>
struct is_comparable : std::false_type {};

template<typename Compare, typename A, typename B>
struct is_comparable<Compare, A, B, void_t<
decltype(std::declval<Compare>()(std::declval<A>(), std::declval<B>())),
decltype(std::declval<Compare>()(std::declval<B>(), std::declval<A>()))
>> : std::true_type {};

template<typename T>
using detect_is_transparent = typename T::is_transparent;

// type trait to check if KeyType can be used as object key (without a BasicJsonType)
// see is_usable_as_basic_json_key_type below
template<typename Comparator, typename ObjectKeyType, typename KeyTypeCVRef, bool RequireTransparentComparator = true,
         bool ExcludeObjectKeyType = RequireTransparentComparator, typename KeyType = uncvref_t<KeyTypeCVRef>>
using is_usable_as_key_type = typename std::conditional <
                              is_comparable<Comparator, ObjectKeyType, KeyTypeCVRef>::value
                              && !(ExcludeObjectKeyType && std::is_same<KeyType,
                                   ObjectKeyType>::value)
                              && (!RequireTransparentComparator
                                  || is_detected <detect_is_transparent, Comparator>::value)
                              && !is_json_pointer<KeyType>::value,
                              std::true_type,
                              std::false_type >::type;

// type trait to check if KeyType can be used as object key
// true if:
//   - KeyType is comparable with BasicJsonType::object_t::key_type
//   - if ExcludeObjectKeyType is true, KeyType is not BasicJsonType::object_t::key_type
//   - the comparator is transparent or RequireTransparentComparator is false
//   - KeyType is not a JSON iterator or json_pointer
template<typename BasicJsonType, typename KeyTypeCVRef, bool RequireTransparentComparator = true,
         bool ExcludeObjectKeyType = RequireTransparentComparator, typename KeyType = uncvref_t<KeyTypeCVRef>>
using is_usable_as_basic_json_key_type = typename std::conditional <
        is_usable_as_key_type<typename BasicJsonType::object_comparator_t,
        typename BasicJsonType::object_t::key_type, KeyTypeCVRef,
        RequireTransparentComparator, ExcludeObjectKeyType>::value
        && !is_json_iterator_of<BasicJsonType, KeyType>::value,
        std::true_type,
        std::false_type >::type;

template<typename ObjectType, typename KeyType>
using detect_erase_with_key_type = decltype(std::declval<ObjectType&>().erase(std::declval<KeyType>()));

// type trait to check if object_t has an erase() member functions accepting KeyType
template<typename BasicJsonType, typename KeyType>
using has_erase_with_key_type = typename std::conditional <
                                is_detected <
                                detect_erase_with_key_type,
                                typename BasicJsonType::object_t, KeyType >::value,
                                std::true_type,
                                std::false_type >::type;

// a naive helper to check if a type is an ordered_map (exploits the fact that
// ordered_map inherits capacity() from std::vector)
template <typename T>
struct is_ordered_map
{
    using one = char;

    struct two
    {
        char x[2]; // NOLINT(cppcoreguidelines-avoid-c-arrays,hicpp-avoid-c-arrays,modernize-avoid-c-arrays)
    };

    template <typename C> static one test( decltype(&C::capacity) ) ;
    template <typename C> static two test(...);

    enum { value = sizeof(test<T>(nullptr)) == sizeof(char) }; // NOLINT(cppcoreguidelines-pro-type-vararg,hicpp-vararg)
};

// to avoid useless casts (see https://github.com/nlohmann/json/issues/2893#issuecomment-889152324)
template < typename T, typename U, enable_if_t < !std::is_same<T, U>::value, int > = 0 >
T conditional_static_cast(U value)
{
    return static_cast<T>(value);
}

template<typename T, typename U, enable_if_t<std::is_same<T, U>::value, int> = 0>
T conditional_static_cast(U value)
{
    return value;
}

template<typename... Types>
using all_integral = conjunction<std::is_integral<Types>...>;

template<typename... Types>
using all_signed = conjunction<std::is_signed<Types>...>;

template<typename... Types>
using all_unsigned = conjunction<std::is_unsigned<Types>...>;

// there's a disjunction trait in another PR; replace when merged
template<typename... Types>
using same_sign = std::integral_constant < bool,
      all_signed<Types...>::value || all_unsigned<Types...>::value >;

template<typename OfType, typename T>
using never_out_of_range = std::integral_constant < bool,
      (std::is_signed<OfType>::value && (sizeof(T) < sizeof(OfType)))
      || (same_sign<OfType, T>::value && sizeof(OfType) == sizeof(T)) >;

template<typename OfType, typename T,
         bool OfTypeSigned = std::is_signed<OfType>::value,
         bool TSigned = std::is_signed<T>::value>
struct value_in_range_of_impl2;

template<typename OfType, typename T>
struct value_in_range_of_impl2<OfType, T, false, false>
{
    static constexpr bool test(T val)
    {
        using CommonType = typename std::common_type<OfType, T>::type;
        return static_cast<CommonType>(val) <= static_cast<CommonType>((std::numeric_limits<OfType>::max)());
    }
};

template<typename OfType, typename T>
struct value_in_range_of_impl2<OfType, T, true, false>
{
    static constexpr bool test(T val)
    {
        using CommonType = typename std::common_type<OfType, T>::type;
        return static_cast<CommonType>(val) <= static_cast<CommonType>((std::numeric_limits<OfType>::max)());
    }
};

template<typename OfType, typename T>
struct value_in_range_of_impl2<OfType, T, false, true>
{
    static constexpr bool test(T val)
    {
        using CommonType = typename std::common_type<OfType, T>::type;
        return val >= 0 && static_cast<CommonType>(val) <= static_cast<CommonType>((std::numeric_limits<OfType>::max)());
    }
};


template<typename OfType, typename T>
struct value_in_range_of_impl2<OfType, T, true, true>
{
    static constexpr bool test(T val)
    {
        using CommonType = typename std::common_type<OfType, T>::type;
        return static_cast<CommonType>(val) >= static_cast<CommonType>((std::numeric_limits<OfType>::min)())
               && static_cast<CommonType>(val) <= static_cast<CommonType>((std::numeric_limits<OfType>::max)());
    }
};

template<typename OfType, typename T,
         bool NeverOutOfRange = never_out_of_range<OfType, T>::value,
         typename = detail::enable_if_t<all_integral<OfType, T>::value>>
struct value_in_range_of_impl1;

template<typename OfType, typename T>
struct value_in_range_of_impl1<OfType, T, false>
{
    static constexpr bool test(T val)
    {
        return value_in_range_of_impl2<OfType, T>::test(val);
    }
};

template<typename OfType, typename T>
struct value_in_range_of_impl1<OfType, T, true>
{
    static constexpr bool test(T /*val*/)
    {
        return true;
    }
};

template<typename OfType, typename T>
inline constexpr bool value_in_range_of(T val)
{
    return value_in_range_of_impl1<OfType, T>::test(val);
}

template<bool Value>
using bool_constant = std::integral_constant<bool, Value>;

///////////////////////////////////////////////////////////////////////////////
// is_c_string
///////////////////////////////////////////////////////////////////////////////

namespace impl
{

template<typename T>
inline constexpr bool is_c_string()
{
    using TUnExt = typename std::remove_extent<T>::type;
    using TUnCVExt = typename std::remove_cv<TUnExt>::type;
    using TUnPtr = typename std::remove_pointer<T>::type;
    using TUnCVPtr = typename std::remove_cv<TUnPtr>::type;
    return
        (std::is_array<T>::value && std::is_same<TUnCVExt, char>::value)
        || (std::is_pointer<T>::value && std::is_same<TUnCVPtr, char>::value);
}

}  // namespace impl

// checks whether T is a [cv] char */[cv] char[] C string
template<typename T>
struct is_c_string : bool_constant<impl::is_c_string<T>()> {};

template<typename T>
using is_c_string_uncvref = is_c_string<uncvref_t<T>>;

///////////////////////////////////////////////////////////////////////////////
// is_transparent
///////////////////////////////////////////////////////////////////////////////

namespace impl
{

template<typename T>
inline constexpr bool is_transparent()
{
    return is_detected<detect_is_transparent, T>::value;
}

}  // namespace impl

// checks whether T has a member named is_transparent
template<typename T>
struct is_transparent : bool_constant<impl::is_transparent<T>()> {};

///////////////////////////////////////////////////////////////////////////////

}  // namespace detail
NLOHMANN_JSON_NAMESPACE_END

// #include <nlohmann/detail/string_concat.hpp>
//     __ _____ _____ _____
//  __|  |   __|     |   | |  JSON for Modern C++
// |  |  |__   |  |  | | | |  version 3.11.2
// |_____|_____|_____|_|___|  https://github.com/nlohmann/json
//
// SPDX-FileCopyrightText: 2013-2022 Niels Lohmann <https://nlohmann.me>
// SPDX-License-Identifier: MIT



#include <cstring> // strlen
#include <string> // string
#include <utility> // forward

// #include <nlohmann/detail/meta/cpp_future.hpp>

// #include <nlohmann/detail/meta/detected.hpp>


NLOHMANN_JSON_NAMESPACE_BEGIN
namespace detail
{

inline std::size_t concat_length()
{
    return 0;
}

template<typename... Args>
inline std::size_t concat_length(const char* cstr, Args&& ... rest);

template<typename StringType, typename... Args>
inline std::size_t concat_length(const StringType& str, Args&& ... rest);

template<typename... Args>
inline std::size_t concat_length(const char /*c*/, Args&& ... rest)
{
    return 1 + concat_length(std::forward<Args>(rest)...);
}

template<typename... Args>
inline std::size_t concat_length(const char* cstr, Args&& ... rest)
{
    // cppcheck-suppress ignoredReturnValue
    return ::strlen(cstr) + concat_length(std::forward<Args>(rest)...);
}

template<typename StringType, typename... Args>
inline std::size_t concat_length(const StringType& str, Args&& ... rest)
{
    return str.size() + concat_length(std::forward<Args>(rest)...);
}

template<typename OutStringType>
inline void concat_into(OutStringType& /*out*/)
{}

template<typename StringType, typename Arg>
using string_can_append = decltype(std::declval<StringType&>().append(std::declval < Arg && > ()));

template<typename StringType, typename Arg>
using detect_string_can_append = is_detected<string_can_append, StringType, Arg>;

template<typename StringType, typename Arg>
using string_can_append_op = decltype(std::declval<StringType&>() += std::declval < Arg && > ());

template<typename StringType, typename Arg>
using detect_string_can_append_op = is_detected<string_can_append_op, StringType, Arg>;

template<typename StringType, typename Arg>
using string_can_append_iter = decltype(std::declval<StringType&>().append(std::declval<const Arg&>().begin(), std::declval<const Arg&>().end()));

template<typename StringType, typename Arg>
using detect_string_can_append_iter = is_detected<string_can_append_iter, StringType, Arg>;

template<typename StringType, typename Arg>
using string_can_append_data = decltype(std::declval<StringType&>().append(std::declval<const Arg&>().data(), std::declval<const Arg&>().size()));

template<typename StringType, typename Arg>
using detect_string_can_append_data = is_detected<string_can_append_data, StringType, Arg>;

template < typename OutStringType, typename Arg, typename... Args,
           enable_if_t < !detect_string_can_append<OutStringType, Arg>::value
                         && detect_string_can_append_op<OutStringType, Arg>::value, int > = 0 >
inline void concat_into(OutStringType& out, Arg && arg, Args && ... rest);

template < typename OutStringType, typename Arg, typename... Args,
           enable_if_t < !detect_string_can_append<OutStringType, Arg>::value
                         && !detect_string_can_append_op<OutStringType, Arg>::value
                         && detect_string_can_append_iter<OutStringType, Arg>::value, int > = 0 >
inline void concat_into(OutStringType& out, const Arg& arg, Args && ... rest);

template < typename OutStringType, typename Arg, typename... Args,
           enable_if_t < !detect_string_can_append<OutStringType, Arg>::value
                         && !detect_string_can_append_op<OutStringType, Arg>::value
                         && !detect_string_can_append_iter<OutStringType, Arg>::value
                         && detect_string_can_append_data<OutStringType, Arg>::value, int > = 0 >
inline void concat_into(OutStringType& out, const Arg& arg, Args && ... rest);

template<typename OutStringType, typename Arg, typename... Args,
         enable_if_t<detect_string_can_append<OutStringType, Arg>::value, int> = 0>
inline void concat_into(OutStringType& out, Arg && arg, Args && ... rest)
{
    out.append(std::forward<Arg>(arg));
    concat_into(out, std::forward<Args>(rest)...);
}

template < typename OutStringType, typename Arg, typename... Args,
           enable_if_t < !detect_string_can_append<OutStringType, Arg>::value
                         && detect_string_can_append_op<OutStringType, Arg>::value, int > >
inline void concat_into(OutStringType& out, Arg&& arg, Args&& ... rest)
{
    out += std::forward<Arg>(arg);
    concat_into(out, std::forward<Args>(rest)...);
}

template < typename OutStringType, typename Arg, typename... Args,
           enable_if_t < !detect_string_can_append<OutStringType, Arg>::value
                         && !detect_string_can_append_op<OutStringType, Arg>::value
                         && detect_string_can_append_iter<OutStringType, Arg>::value, int > >
inline void concat_into(OutStringType& out, const Arg& arg, Args&& ... rest)
{
    out.append(arg.begin(), arg.end());
    concat_into(out, std::forward<Args>(rest)...);
}

template < typename OutStringType, typename Arg, typename... Args,
           enable_if_t < !detect_string_can_append<OutStringType, Arg>::value
                         && !detect_string_can_append_op<OutStringType, Arg>::value
                         && !detect_string_can_append_iter<OutStringType, Arg>::value
                         && detect_string_can_append_data<OutStringType, Arg>::value, int > >
inline void concat_into(OutStringType& out, const Arg& arg, Args&& ... rest)
{
    out.append(arg.data(), arg.size());
    concat_into(out, std::forward<Args>(rest)...);
}

template<typename OutStringType = std::string, typename... Args>
inline OutStringType concat(Args && ... args)
{
    OutStringType str;
    str.reserve(concat_length(std::forward<Args>(args)...));
    concat_into(str, std::forward<Args>(args)...);
    return str;
}

}  // namespace detail
NLOHMANN_JSON_NAMESPACE_END



NLOHMANN_JSON_NAMESPACE_BEGIN
namespace detail
{

////////////////
// exceptions //
////////////////

/// @brief general exception of the @ref basic_json class
/// @sa https://json.nlohmann.me/api/basic_json/exception/
class exception : public std::exception
{
  public:
    /// returns the explanatory string
    const char* what() const noexcept override
    {
        return m.what();
    }

    /// the id of the exception
    const int id; // NOLINT(cppcoreguidelines-non-private-member-variables-in-classes)

  protected:
    JSON_HEDLEY_NON_NULL(3)
    exception(int id_, const char* what_arg) : id(id_), m(what_arg) {} // NOLINT(bugprone-throw-keyword-missing)

    static std::string name(const std::string& ename, int id_)
    {
        return concat("[json.exception.", ename, '.', std::to_string(id_), "] ");
    }

    static std::string diagnostics(std::nullptr_t /*leaf_element*/)
    {
        return "";
    }

    template<typename BasicJsonType>
    static std::string diagnostics(const BasicJsonType* leaf_element)
    {
#if JSON_DIAGNOSTICS
        std::vector<std::string> tokens;
        for (const auto* current = leaf_element; current != nullptr && current->m_parent != nullptr; current = current->m_parent)
        {
            switch (current->m_parent->type())
            {
                case value_t::array:
                {
                    for (std::size_t i = 0; i < current->m_parent->m_value.array->size(); ++i)
                    {
                        if (&current->m_parent->m_value.array->operator[](i) == current)
                        {
                            tokens.emplace_back(std::to_string(i));
                            break;
                        }
                    }
                    break;
                }

                case value_t::object:
                {
                    for (const auto& element : *current->m_parent->m_value.object)
                    {
                        if (&element.second == current)
                        {
                            tokens.emplace_back(element.first.c_str());
                            break;
                        }
                    }
                    break;
                }

                case value_t::null: // LCOV_EXCL_LINE
                case value_t::string: // LCOV_EXCL_LINE
                case value_t::boolean: // LCOV_EXCL_LINE
                case value_t::number_integer: // LCOV_EXCL_LINE
                case value_t::number_unsigned: // LCOV_EXCL_LINE
                case value_t::number_float: // LCOV_EXCL_LINE
                case value_t::binary: // LCOV_EXCL_LINE
                case value_t::discarded: // LCOV_EXCL_LINE
                default:   // LCOV_EXCL_LINE
                    break; // LCOV_EXCL_LINE
            }
        }

        if (tokens.empty())
        {
            return "";
        }

        auto str = std::accumulate(tokens.rbegin(), tokens.rend(), std::string{},
                                   [](const std::string & a, const std::string & b)
        {
            return concat(a, '/', detail::escape(b));
        });
        return concat('(', str, ") ");
#else
        static_cast<void>(leaf_element);
        return "";
#endif
    }

  private:
    /// an exception object as storage for error messages
    std::runtime_error m;
};

/// @brief exception indicating a parse error
/// @sa https://json.nlohmann.me/api/basic_json/parse_error/
class parse_error : public exception
{
  public:
    /*!
    @brief create a parse error exception
    @param[in] id_       the id of the exception
    @param[in] pos       the position where the error occurred (or with
                         chars_read_total=0 if the position cannot be
                         determined)
    @param[in] what_arg  the explanatory string
    @return parse_error object
    */
    template<typename BasicJsonContext, enable_if_t<is_basic_json_context<BasicJsonContext>::value, int> = 0>
    static parse_error create(int id_, const position_t& pos, const std::string& what_arg, BasicJsonContext context)
    {
        std::string w = concat(exception::name("parse_error", id_), "parse error",
                               position_string(pos), ": ", exception::diagnostics(context), what_arg);
        return {id_, pos.chars_read_total, w.c_str()};
    }

    template<typename BasicJsonContext, enable_if_t<is_basic_json_context<BasicJsonContext>::value, int> = 0>
    static parse_error create(int id_, std::size_t byte_, const std::string& what_arg, BasicJsonContext context)
    {
        std::string w = concat(exception::name("parse_error", id_), "parse error",
                               (byte_ != 0 ? (concat(" at byte ", std::to_string(byte_))) : ""),
                               ": ", exception::diagnostics(context), what_arg);
        return {id_, byte_, w.c_str()};
    }

    /*!
    @brief byte index of the parse error

    The byte index of the last read character in the input file.

    @note For an input with n bytes, 1 is the index of the first character and
          n+1 is the index of the terminating null byte or the end of file.
          This also holds true when reading a byte vector (CBOR or MessagePack).
    */
    const std::size_t byte;

  private:
    parse_error(int id_, std::size_t byte_, const char* what_arg)
        : exception(id_, what_arg), byte(byte_) {}

    static std::string position_string(const position_t& pos)
    {
        return concat(" at line ", std::to_string(pos.lines_read + 1),
                      ", column ", std::to_string(pos.chars_read_current_line));
    }
};

/// @brief exception indicating errors with iterators
/// @sa https://json.nlohmann.me/api/basic_json/invalid_iterator/
class invalid_iterator : public exception
{
  public:
    template<typename BasicJsonContext, enable_if_t<is_basic_json_context<BasicJsonContext>::value, int> = 0>
    static invalid_iterator create(int id_, const std::string& what_arg, BasicJsonContext context)
    {
        std::string w = concat(exception::name("invalid_iterator", id_), exception::diagnostics(context), what_arg);
        return {id_, w.c_str()};
    }

  private:
    JSON_HEDLEY_NON_NULL(3)
    invalid_iterator(int id_, const char* what_arg)
        : exception(id_, what_arg) {}
};

/// @brief exception indicating executing a member function with a wrong type
/// @sa https://json.nlohmann.me/api/basic_json/type_error/
class type_error : public exception
{
  public:
    template<typename BasicJsonContext, enable_if_t<is_basic_json_context<BasicJsonContext>::value, int> = 0>
    static type_error create(int id_, const std::string& what_arg, BasicJsonContext context)
    {
        std::string w = concat(exception::name("type_error", id_), exception::diagnostics(context), what_arg);
        return {id_, w.c_str()};
    }

  private:
    JSON_HEDLEY_NON_NULL(3)
    type_error(int id_, const char* what_arg) : exception(id_, what_arg) {}
};

/// @brief exception indicating access out of the defined range
/// @sa https://json.nlohmann.me/api/basic_json/out_of_range/
class out_of_range : public exception
{
  public:
    template<typename BasicJsonContext, enable_if_t<is_basic_json_context<BasicJsonContext>::value, int> = 0>
    static out_of_range create(int id_, const std::string& what_arg, BasicJsonContext context)
    {
        std::string w = concat(exception::name("out_of_range", id_), exception::diagnostics(context), what_arg);
        return {id_, w.c_str()};
    }

  private:
    JSON_HEDLEY_NON_NULL(3)
    out_of_range(int id_, const char* what_arg) : exception(id_, what_arg) {}
};

/// @brief exception indicating other library errors
/// @sa https://json.nlohmann.me/api/basic_json/other_error/
class other_error : public exception
{
  public:
    template<typename BasicJsonContext, enable_if_t<is_basic_json_context<BasicJsonContext>::value, int> = 0>
    static other_error create(int id_, const std::string& what_arg, BasicJsonContext context)
    {
        std::string w = concat(exception::name("other_error", id_), exception::diagnostics(context), what_arg);
        return {id_, w.c_str()};
    }

  private:
    JSON_HEDLEY_NON_NULL(3)
    other_error(int id_, const char* what_arg) : exception(id_, what_arg) {}
};

}  // namespace detail
NLOHMANN_JSON_NAMESPACE_END

// #include <nlohmann/detail/macro_scope.hpp>

// #include <nlohmann/detail/meta/cpp_future.hpp>

// #include <nlohmann/detail/meta/identity_tag.hpp>
//     __ _____ _____ _____
//  __|  |   __|     |   | |  JSON for Modern C++
// |  |  |__   |  |  | | | |  version 3.11.2
// |_____|_____|_____|_|___|  https://github.com/nlohmann/json
//
// SPDX-FileCopyrightText: 2013-2022 Niels Lohmann <https://nlohmann.me>
// SPDX-License-Identifier: MIT



// #include <nlohmann/detail/abi_macros.hpp>


NLOHMANN_JSON_NAMESPACE_BEGIN
namespace detail
{

// dispatching helper struct
template <class T> struct identity_tag {};

}  // namespace detail
NLOHMANN_JSON_NAMESPACE_END

// #include <nlohmann/detail/meta/std_fs.hpp>
//     __ _____ _____ _____
//  __|  |   __|     |   | |  JSON for Modern C++
// |  |  |__   |  |  | | | |  version 3.11.2
// |_____|_____|_____|_|___|  https://github.com/nlohmann/json
//
// SPDX-FileCopyrightText: 2013-2022 Niels Lohmann <https://nlohmann.me>
// SPDX-License-Identifier: MIT



// #include <nlohmann/detail/macro_scope.hpp>


#if JSON_HAS_EXPERIMENTAL_FILESYSTEM
#include <experimental/filesystem>
NLOHMANN_JSON_NAMESPACE_BEGIN
namespace detail
{
namespace std_fs = std::experimental::filesystem;
}  // namespace detail
NLOHMANN_JSON_NAMESPACE_END
#elif JSON_HAS_FILESYSTEM
#include <filesystem>
NLOHMANN_JSON_NAMESPACE_BEGIN
namespace detail
{
namespace std_fs = std::filesystem;
}  // namespace detail
NLOHMANN_JSON_NAMESPACE_END
#endif

// #include <nlohmann/detail/meta/type_traits.hpp>

// #include <nlohmann/detail/string_concat.hpp>

// #include <nlohmann/detail/value_t.hpp>


NLOHMANN_JSON_NAMESPACE_BEGIN
namespace detail
{

template<typename BasicJsonType>
inline void from_json(const BasicJsonType& j, typename std::nullptr_t& n)
{
    if (JSON_HEDLEY_UNLIKELY(!j.is_null()))
    {
        JSON_THROW(type_error::create(302, concat("type must be null, but is ", j.type_name()), &j));
    }
    n = nullptr;
}

// overloads for basic_json template parameters
template < typename BasicJsonType, typename ArithmeticType,
           enable_if_t < std::is_arithmetic<ArithmeticType>::value&&
                         !std::is_same<ArithmeticType, typename BasicJsonType::boolean_t>::value,
                         int > = 0 >
void get_arithmetic_value(const BasicJsonType& j, ArithmeticType& val)
{
    switch (static_cast<value_t>(j))
    {
        case value_t::number_unsigned:
        {
            val = static_cast<ArithmeticType>(*j.template get_ptr<const typename BasicJsonType::number_unsigned_t*>());
            break;
        }
        case value_t::number_integer:
        {
            val = static_cast<ArithmeticType>(*j.template get_ptr<const typename BasicJsonType::number_integer_t*>());
            break;
        }
        case value_t::number_float:
        {
            val = static_cast<ArithmeticType>(*j.template get_ptr<const typename BasicJsonType::number_float_t*>());
            break;
        }

        case value_t::null:
        case value_t::object:
        case value_t::array:
        case value_t::string:
        case value_t::boolean:
        case value_t::binary:
        case value_t::discarded:
        default:
            JSON_THROW(type_error::create(302, concat("type must be number, but is ", j.type_name()), &j));
    }
}

template<typename BasicJsonType>
inline void from_json(const BasicJsonType& j, typename BasicJsonType::boolean_t& b)
{
    if (JSON_HEDLEY_UNLIKELY(!j.is_boolean()))
    {
        JSON_THROW(type_error::create(302, concat("type must be boolean, but is ", j.type_name()), &j));
    }
    b = *j.template get_ptr<const typename BasicJsonType::boolean_t*>();
}

template<typename BasicJsonType>
inline void from_json(const BasicJsonType& j, typename BasicJsonType::string_t& s)
{
    if (JSON_HEDLEY_UNLIKELY(!j.is_string()))
    {
        JSON_THROW(type_error::create(302, concat("type must be string, but is ", j.type_name()), &j));
    }
    s = *j.template get_ptr<const typename BasicJsonType::string_t*>();
}

template <
    typename BasicJsonType, typename StringType,
    enable_if_t <
        std::is_assignable<StringType&, const typename BasicJsonType::string_t>::value
        && is_detected_exact<typename BasicJsonType::string_t::value_type, value_type_t, StringType>::value
        && !std::is_same<typename BasicJsonType::string_t, StringType>::value
        && !is_json_ref<StringType>::value, int > = 0 >
inline void from_json(const BasicJsonType& j, StringType& s)
{
    if (JSON_HEDLEY_UNLIKELY(!j.is_string()))
    {
        JSON_THROW(type_error::create(302, concat("type must be string, but is ", j.type_name()), &j));
    }

    s = *j.template get_ptr<const typename BasicJsonType::string_t*>();
}

template<typename BasicJsonType>
inline void from_json(const BasicJsonType& j, typename BasicJsonType::number_float_t& val)
{
    get_arithmetic_value(j, val);
}

template<typename BasicJsonType>
inline void from_json(const BasicJsonType& j, typename BasicJsonType::number_unsigned_t& val)
{
    get_arithmetic_value(j, val);
}

template<typename BasicJsonType>
inline void from_json(const BasicJsonType& j, typename BasicJsonType::number_integer_t& val)
{
    get_arithmetic_value(j, val);
}

#if !JSON_DISABLE_ENUM_SERIALIZATION
template<typename BasicJsonType, typename EnumType,
         enable_if_t<std::is_enum<EnumType>::value, int> = 0>
inline void from_json(const BasicJsonType& j, EnumType& e)
{
    typename std::underlying_type<EnumType>::type val;
    get_arithmetic_value(j, val);
    e = static_cast<EnumType>(val);
}
#endif  // JSON_DISABLE_ENUM_SERIALIZATION

// forward_list doesn't have an insert method
template<typename BasicJsonType, typename T, typename Allocator,
         enable_if_t<is_getable<BasicJsonType, T>::value, int> = 0>
inline void from_json(const BasicJsonType& j, std::forward_list<T, Allocator>& l)
{
    if (JSON_HEDLEY_UNLIKELY(!j.is_array()))
    {
        JSON_THROW(type_error::create(302, concat("type must be array, but is ", j.type_name()), &j));
    }
    l.clear();
    std::transform(j.rbegin(), j.rend(),
                   std::front_inserter(l), [](const BasicJsonType & i)
    {
        return i.template get<T>();
    });
}

// valarray doesn't have an insert method
template<typename BasicJsonType, typename T,
         enable_if_t<is_getable<BasicJsonType, T>::value, int> = 0>
inline void from_json(const BasicJsonType& j, std::valarray<T>& l)
{
    if (JSON_HEDLEY_UNLIKELY(!j.is_array()))
    {
        JSON_THROW(type_error::create(302, concat("type must be array, but is ", j.type_name()), &j));
    }
    l.resize(j.size());
    std::transform(j.begin(), j.end(), std::begin(l),
                   [](const BasicJsonType & elem)
    {
        return elem.template get<T>();
    });
}

template<typename BasicJsonType, typename T, std::size_t N>
auto from_json(const BasicJsonType& j, T (&arr)[N])  // NOLINT(cppcoreguidelines-avoid-c-arrays,hicpp-avoid-c-arrays,modernize-avoid-c-arrays)
-> decltype(j.template get<T>(), void())
{
    for (std::size_t i = 0; i < N; ++i)
    {
        arr[i] = j.at(i).template get<T>();
    }
}

template<typename BasicJsonType>
inline void from_json_array_impl(const BasicJsonType& j, typename BasicJsonType::array_t& arr, priority_tag<3> /*unused*/)
{
    arr = *j.template get_ptr<const typename BasicJsonType::array_t*>();
}

template<typename BasicJsonType, typename T, std::size_t N>
auto from_json_array_impl(const BasicJsonType& j, std::array<T, N>& arr,
                          priority_tag<2> /*unused*/)
-> decltype(j.template get<T>(), void())
{
    for (std::size_t i = 0; i < N; ++i)
    {
        arr[i] = j.at(i).template get<T>();
    }
}

template<typename BasicJsonType, typename ConstructibleArrayType,
         enable_if_t<
             std::is_assignable<ConstructibleArrayType&, ConstructibleArrayType>::value,
             int> = 0>
auto from_json_array_impl(const BasicJsonType& j, ConstructibleArrayType& arr, priority_tag<1> /*unused*/)
-> decltype(
    arr.reserve(std::declval<typename ConstructibleArrayType::size_type>()),
    j.template get<typename ConstructibleArrayType::value_type>(),
    void())
{
    using std::end;

    ConstructibleArrayType ret;
    ret.reserve(j.size());
    std::transform(j.begin(), j.end(),
                   std::inserter(ret, end(ret)), [](const BasicJsonType & i)
    {
        // get<BasicJsonType>() returns *this, this won't call a from_json
        // method when value_type is BasicJsonType
        return i.template get<typename ConstructibleArrayType::value_type>();
    });
    arr = std::move(ret);
}

template<typename BasicJsonType, typename ConstructibleArrayType,
         enable_if_t<
             std::is_assignable<ConstructibleArrayType&, ConstructibleArrayType>::value,
             int> = 0>
inline void from_json_array_impl(const BasicJsonType& j, ConstructibleArrayType& arr,
                                 priority_tag<0> /*unused*/)
{
    using std::end;

    ConstructibleArrayType ret;
    std::transform(
        j.begin(), j.end(), std::inserter(ret, end(ret)),
        [](const BasicJsonType & i)
    {
        // get<BasicJsonType>() returns *this, this won't call a from_json
        // method when value_type is BasicJsonType
        return i.template get<typename ConstructibleArrayType::value_type>();
    });
    arr = std::move(ret);
}

template < typename BasicJsonType, typename ConstructibleArrayType,
           enable_if_t <
               is_constructible_array_type<BasicJsonType, ConstructibleArrayType>::value&&
               !is_constructible_object_type<BasicJsonType, ConstructibleArrayType>::value&&
               !is_constructible_string_type<BasicJsonType, ConstructibleArrayType>::value&&
               !std::is_same<ConstructibleArrayType, typename BasicJsonType::binary_t>::value&&
               !is_basic_json<ConstructibleArrayType>::value,
               int > = 0 >
auto from_json(const BasicJsonType& j, ConstructibleArrayType& arr)
-> decltype(from_json_array_impl(j, arr, priority_tag<3> {}),
j.template get<typename ConstructibleArrayType::value_type>(),
void())
{
    if (JSON_HEDLEY_UNLIKELY(!j.is_array()))
    {
        JSON_THROW(type_error::create(302, concat("type must be array, but is ", j.type_name()), &j));
    }

    from_json_array_impl(j, arr, priority_tag<3> {});
}

template < typename BasicJsonType, typename T, std::size_t... Idx >
std::array<T, sizeof...(Idx)> from_json_inplace_array_impl(BasicJsonType&& j,
        identity_tag<std::array<T, sizeof...(Idx)>> /*unused*/, index_sequence<Idx...> /*unused*/)
{
    return { { std::forward<BasicJsonType>(j).at(Idx).template get<T>()... } };
}

template < typename BasicJsonType, typename T, std::size_t N >
auto from_json(BasicJsonType&& j, identity_tag<std::array<T, N>> tag)
-> decltype(from_json_inplace_array_impl(std::forward<BasicJsonType>(j), tag, make_index_sequence<N> {}))
{
    if (JSON_HEDLEY_UNLIKELY(!j.is_array()))
    {
        JSON_THROW(type_error::create(302, concat("type must be array, but is ", j.type_name()), &j));
    }

    return from_json_inplace_array_impl(std::forward<BasicJsonType>(j), tag, make_index_sequence<N> {});
}

template<typename BasicJsonType>
inline void from_json(const BasicJsonType& j, typename BasicJsonType::binary_t& bin)
{
    if (JSON_HEDLEY_UNLIKELY(!j.is_binary()))
    {
        JSON_THROW(type_error::create(302, concat("type must be binary, but is ", j.type_name()), &j));
    }

    bin = *j.template get_ptr<const typename BasicJsonType::binary_t*>();
}

template<typename BasicJsonType, typename ConstructibleObjectType,
         enable_if_t<is_constructible_object_type<BasicJsonType, ConstructibleObjectType>::value, int> = 0>
inline void from_json(const BasicJsonType& j, ConstructibleObjectType& obj)
{
    if (JSON_HEDLEY_UNLIKELY(!j.is_object()))
    {
        JSON_THROW(type_error::create(302, concat("type must be object, but is ", j.type_name()), &j));
    }

    ConstructibleObjectType ret;
    const auto* inner_object = j.template get_ptr<const typename BasicJsonType::object_t*>();
    using value_type = typename ConstructibleObjectType::value_type;
    std::transform(
        inner_object->begin(), inner_object->end(),
        std::inserter(ret, ret.begin()),
        [](typename BasicJsonType::object_t::value_type const & p)
    {
        return value_type(p.first, p.second.template get<typename ConstructibleObjectType::mapped_type>());
    });
    obj = std::move(ret);
}

// overload for arithmetic types, not chosen for basic_json template arguments
// (BooleanType, etc..); note: Is it really necessary to provide explicit
// overloads for boolean_t etc. in case of a custom BooleanType which is not
// an arithmetic type?
template < typename BasicJsonType, typename ArithmeticType,
           enable_if_t <
               std::is_arithmetic<ArithmeticType>::value&&
               !std::is_same<ArithmeticType, typename BasicJsonType::number_unsigned_t>::value&&
               !std::is_same<ArithmeticType, typename BasicJsonType::number_integer_t>::value&&
               !std::is_same<ArithmeticType, typename BasicJsonType::number_float_t>::value&&
               !std::is_same<ArithmeticType, typename BasicJsonType::boolean_t>::value,
               int > = 0 >
inline void from_json(const BasicJsonType& j, ArithmeticType& val)
{
    switch (static_cast<value_t>(j))
    {
        case value_t::number_unsigned:
        {
            val = static_cast<ArithmeticType>(*j.template get_ptr<const typename BasicJsonType::number_unsigned_t*>());
            break;
        }
        case value_t::number_integer:
        {
            val = static_cast<ArithmeticType>(*j.template get_ptr<const typename BasicJsonType::number_integer_t*>());
            break;
        }
        case value_t::number_float:
        {
            val = static_cast<ArithmeticType>(*j.template get_ptr<const typename BasicJsonType::number_float_t*>());
            break;
        }
        case value_t::boolean:
        {
            val = static_cast<ArithmeticType>(*j.template get_ptr<const typename BasicJsonType::boolean_t*>());
            break;
        }

        case value_t::null:
        case value_t::object:
        case value_t::array:
        case value_t::string:
        case value_t::binary:
        case value_t::discarded:
        default:
            JSON_THROW(type_error::create(302, concat("type must be number, but is ", j.type_name()), &j));
    }
}

template<typename BasicJsonType, typename... Args, std::size_t... Idx>
std::tuple<Args...> from_json_tuple_impl_base(BasicJsonType&& j, index_sequence<Idx...> /*unused*/)
{
    return std::make_tuple(std::forward<BasicJsonType>(j).at(Idx).template get<Args>()...);
}

template < typename BasicJsonType, class A1, class A2 >
std::pair<A1, A2> from_json_tuple_impl(BasicJsonType&& j, identity_tag<std::pair<A1, A2>> /*unused*/, priority_tag<0> /*unused*/)
{
    return {std::forward<BasicJsonType>(j).at(0).template get<A1>(),
            std::forward<BasicJsonType>(j).at(1).template get<A2>()};
}

template<typename BasicJsonType, typename A1, typename A2>
inline void from_json_tuple_impl(BasicJsonType&& j, std::pair<A1, A2>& p, priority_tag<1> /*unused*/)
{
    p = from_json_tuple_impl(std::forward<BasicJsonType>(j), identity_tag<std::pair<A1, A2>> {}, priority_tag<0> {});
}

template<typename BasicJsonType, typename... Args>
std::tuple<Args...> from_json_tuple_impl(BasicJsonType&& j, identity_tag<std::tuple<Args...>> /*unused*/, priority_tag<2> /*unused*/)
{
    return from_json_tuple_impl_base<BasicJsonType, Args...>(std::forward<BasicJsonType>(j), index_sequence_for<Args...> {});
}

template<typename BasicJsonType, typename... Args>
inline void from_json_tuple_impl(BasicJsonType&& j, std::tuple<Args...>& t, priority_tag<3> /*unused*/)
{
    t = from_json_tuple_impl_base<BasicJsonType, Args...>(std::forward<BasicJsonType>(j), index_sequence_for<Args...> {});
}

template<typename BasicJsonType, typename TupleRelated>
auto from_json(BasicJsonType&& j, TupleRelated&& t)
-> decltype(from_json_tuple_impl(std::forward<BasicJsonType>(j), std::forward<TupleRelated>(t), priority_tag<3> {}))
{
    if (JSON_HEDLEY_UNLIKELY(!j.is_array()))
    {
        JSON_THROW(type_error::create(302, concat("type must be array, but is ", j.type_name()), &j));
    }

    return from_json_tuple_impl(std::forward<BasicJsonType>(j), std::forward<TupleRelated>(t), priority_tag<3> {});
}

template < typename BasicJsonType, typename Key, typename Value, typename Compare, typename Allocator,
           typename = enable_if_t < !std::is_constructible <
                                        typename BasicJsonType::string_t, Key >::value >>
inline void from_json(const BasicJsonType& j, std::map<Key, Value, Compare, Allocator>& m)
{
    if (JSON_HEDLEY_UNLIKELY(!j.is_array()))
    {
        JSON_THROW(type_error::create(302, concat("type must be array, but is ", j.type_name()), &j));
    }
    m.clear();
    for (const auto& p : j)
    {
        if (JSON_HEDLEY_UNLIKELY(!p.is_array()))
        {
            JSON_THROW(type_error::create(302, concat("type must be array, but is ", p.type_name()), &j));
        }
        m.emplace(p.at(0).template get<Key>(), p.at(1).template get<Value>());
    }
}

template < typename BasicJsonType, typename Key, typename Value, typename Hash, typename KeyEqual, typename Allocator,
           typename = enable_if_t < !std::is_constructible <
                                        typename BasicJsonType::string_t, Key >::value >>
inline void from_json(const BasicJsonType& j, std::unordered_map<Key, Value, Hash, KeyEqual, Allocator>& m)
{
    if (JSON_HEDLEY_UNLIKELY(!j.is_array()))
    {
        JSON_THROW(type_error::create(302, concat("type must be array, but is ", j.type_name()), &j));
    }
    m.clear();
    for (const auto& p : j)
    {
        if (JSON_HEDLEY_UNLIKELY(!p.is_array()))
        {
            JSON_THROW(type_error::create(302, concat("type must be array, but is ", p.type_name()), &j));
        }
        m.emplace(p.at(0).template get<Key>(), p.at(1).template get<Value>());
    }
}

#if JSON_HAS_FILESYSTEM || JSON_HAS_EXPERIMENTAL_FILESYSTEM
template<typename BasicJsonType>
inline void from_json(const BasicJsonType& j, std_fs::path& p)
{
    if (JSON_HEDLEY_UNLIKELY(!j.is_string()))
    {
        JSON_THROW(type_error::create(302, concat("type must be string, but is ", j.type_name()), &j));
    }
    p = *j.template get_ptr<const typename BasicJsonType::string_t*>();
}
#endif

struct from_json_fn
{
    template<typename BasicJsonType, typename T>
    auto operator()(const BasicJsonType& j, T&& val) const
    noexcept(noexcept(from_json(j, std::forward<T>(val))))
    -> decltype(from_json(j, std::forward<T>(val)))
    {
        return from_json(j, std::forward<T>(val));
    }
};

}  // namespace detail

#ifndef JSON_HAS_CPP_17
/// namespace to hold default `from_json` function
/// to see why this is required:
/// http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2015/n4381.html
namespace // NOLINT(cert-dcl59-cpp,fuchsia-header-anon-namespaces,google-build-namespaces)
{
#endif
JSON_INLINE_VARIABLE constexpr const auto& from_json = // NOLINT(misc-definitions-in-headers)
    detail::static_const<detail::from_json_fn>::value;
#ifndef JSON_HAS_CPP_17
}  // namespace
#endif

NLOHMANN_JSON_NAMESPACE_END

// #include <nlohmann/detail/conversions/to_json.hpp>
//     __ _____ _____ _____
//  __|  |   __|     |   | |  JSON for Modern C++
// |  |  |__   |  |  | | | |  version 3.11.2
// |_____|_____|_____|_|___|  https://github.com/nlohmann/json
//
// SPDX-FileCopyrightText: 2013-2022 Niels Lohmann <https://nlohmann.me>
// SPDX-License-Identifier: MIT



#include <algorithm> // copy
#include <iterator> // begin, end
#include <string> // string
#include <tuple> // tuple, get
#include <type_traits> // is_same, is_constructible, is_floating_point, is_enum, underlying_type
#include <utility> // move, forward, declval, pair
#include <valarray> // valarray
#include <vector> // vector

// #include <nlohmann/detail/iterators/iteration_proxy.hpp>
//     __ _____ _____ _____
//  __|  |   __|     |   | |  JSON for Modern C++
// |  |  |__   |  |  | | | |  version 3.11.2
// |_____|_____|_____|_|___|  https://github.com/nlohmann/json
//
// SPDX-FileCopyrightText: 2013-2022 Niels Lohmann <https://nlohmann.me>
// SPDX-License-Identifier: MIT



#include <cstddef> // size_t
#include <iterator> // input_iterator_tag
#include <string> // string, to_string
#include <tuple> // tuple_size, get, tuple_element
#include <utility> // move

#if JSON_HAS_RANGES
    #include <ranges> // enable_borrowed_range
#endif

// #include <nlohmann/detail/abi_macros.hpp>

// #include <nlohmann/detail/meta/type_traits.hpp>

// #include <nlohmann/detail/value_t.hpp>


NLOHMANN_JSON_NAMESPACE_BEGIN
namespace detail
{

template<typename string_type>
void int_to_string( string_type& target, std::size_t value )
{
    // For ADL
    using std::to_string;
    target = to_string(value);
}
template<typename IteratorType> class iteration_proxy_value
{
  public:
    using difference_type = std::ptrdiff_t;
    using value_type = iteration_proxy_value;
    using pointer = value_type *;
    using reference = value_type &;
    using iterator_category = std::input_iterator_tag;
    using string_type = typename std::remove_cv< typename std::remove_reference<decltype( std::declval<IteratorType>().key() ) >::type >::type;

  private:
    /// the iterator
    IteratorType anchor{};
    /// an index for arrays (used to create key names)
    std::size_t array_index = 0;
    /// last stringified array index
    mutable std::size_t array_index_last = 0;
    /// a string representation of the array index
    mutable string_type array_index_str = "0";
    /// an empty string (to return a reference for primitive values)
    string_type empty_str{};

  public:
    explicit iteration_proxy_value() = default;
    explicit iteration_proxy_value(IteratorType it, std::size_t array_index_ = 0)
    noexcept(std::is_nothrow_move_constructible<IteratorType>::value
             && std::is_nothrow_default_constructible<string_type>::value)
        : anchor(std::move(it))
        , array_index(array_index_)
    {}

    iteration_proxy_value(iteration_proxy_value const&) = default;
    iteration_proxy_value& operator=(iteration_proxy_value const&) = default;
    // older GCCs are a bit fussy and require explicit noexcept specifiers on defaulted functions
    iteration_proxy_value(iteration_proxy_value&&)
    noexcept(std::is_nothrow_move_constructible<IteratorType>::value
             && std::is_nothrow_move_constructible<string_type>::value) = default;
    iteration_proxy_value& operator=(iteration_proxy_value&&)
    noexcept(std::is_nothrow_move_assignable<IteratorType>::value
             && std::is_nothrow_move_assignable<string_type>::value) = default;
    ~iteration_proxy_value() = default;

    /// dereference operator (needed for range-based for)
    const iteration_proxy_value& operator*() const
    {
        return *this;
    }

    /// increment operator (needed for range-based for)
    iteration_proxy_value& operator++()
    {
        ++anchor;
        ++array_index;

        return *this;
    }

    iteration_proxy_value operator++(int)& // NOLINT(cert-dcl21-cpp)
    {
        auto tmp = iteration_proxy_value(anchor, array_index);
        ++anchor;
        ++array_index;
        return tmp;
    }

    /// equality operator (needed for InputIterator)
    bool operator==(const iteration_proxy_value& o) const
    {
        return anchor == o.anchor;
    }

    /// inequality operator (needed for range-based for)
    bool operator!=(const iteration_proxy_value& o) const
    {
        return anchor != o.anchor;
    }

    /// return key of the iterator
    const string_type& key() const
    {
        JSON_ASSERT(anchor.m_object != nullptr);

        switch (anchor.m_object->type())
        {
            // use integer array index as key
            case value_t::array:
            {
                if (array_index != array_index_last)
                {
                    int_to_string( array_index_str, array_index );
                    array_index_last = array_index;
                }
                return array_index_str;
            }

            // use key from the object
            case value_t::object:
                return anchor.key();

            // use an empty key for all primitive types
            case value_t::null:
            case value_t::string:
            case value_t::boolean:
            case value_t::number_integer:
            case value_t::number_unsigned:
            case value_t::number_float:
            case value_t::binary:
            case value_t::discarded:
            default:
                return empty_str;
        }
    }

    /// return value of the iterator
    typename IteratorType::reference value() const
    {
        return anchor.value();
    }
};

/// proxy class for the items() function
template<typename IteratorType> class iteration_proxy
{
  private:
    /// the container to iterate
    typename IteratorType::pointer container = nullptr;

  public:
    explicit iteration_proxy() = default;

    /// construct iteration proxy from a container
    explicit iteration_proxy(typename IteratorType::reference cont) noexcept
        : container(&cont) {}

    iteration_proxy(iteration_proxy const&) = default;
    iteration_proxy& operator=(iteration_proxy const&) = default;
    iteration_proxy(iteration_proxy&&) noexcept = default;
    iteration_proxy& operator=(iteration_proxy&&) noexcept = default;
    ~iteration_proxy() = default;

    /// return iterator begin (needed for range-based for)
    iteration_proxy_value<IteratorType> begin() const noexcept
    {
        return iteration_proxy_value<IteratorType>(container->begin());
    }

    /// return iterator end (needed for range-based for)
    iteration_proxy_value<IteratorType> end() const noexcept
    {
        return iteration_proxy_value<IteratorType>(container->end());
    }
};

// Structured Bindings Support
// For further reference see https://blog.tartanllama.xyz/structured-bindings/
// And see https://github.com/nlohmann/json/pull/1391
template<std::size_t N, typename IteratorType, enable_if_t<N == 0, int> = 0>
auto get(const nlohmann::detail::iteration_proxy_value<IteratorType>& i) -> decltype(i.key())
{
    return i.key();
}
// Structured Bindings Support
// For further reference see https://blog.tartanllama.xyz/structured-bindings/
// And see https://github.com/nlohmann/json/pull/1391
template<std::size_t N, typename IteratorType, enable_if_t<N == 1, int> = 0>
auto get(const nlohmann::detail::iteration_proxy_value<IteratorType>& i) -> decltype(i.value())
{
    return i.value();
}

}  // namespace detail
NLOHMANN_JSON_NAMESPACE_END

// The Addition to the STD Namespace is required to add
// Structured Bindings Support to the iteration_proxy_value class
// For further reference see https://blog.tartanllama.xyz/structured-bindings/
// And see https://github.com/nlohmann/json/pull/1391
namespace std
{

#if defined(__clang__)
    // Fix: https://github.com/nlohmann/json/issues/1401
    #pragma clang diagnostic push
    #pragma clang diagnostic ignored "-Wmismatched-tags"
#endif
template<typename IteratorType>
class tuple_size<::nlohmann::detail::iteration_proxy_value<IteratorType>>
            : public std::integral_constant<std::size_t, 2> {};

template<std::size_t N, typename IteratorType>
class tuple_element<N, ::nlohmann::detail::iteration_proxy_value<IteratorType >>
{
  public:
    using type = decltype(
                     get<N>(std::declval <
                            ::nlohmann::detail::iteration_proxy_value<IteratorType >> ()));
};
#if defined(__clang__)
    #pragma clang diagnostic pop
#endif

}  // namespace std

#if JSON_HAS_RANGES
    template <typename IteratorType>
    inline constexpr bool ::std::ranges::enable_borrowed_range<::nlohmann::detail::iteration_proxy<IteratorType>> = true;
#endif

// #include <nlohmann/detail/macro_scope.hpp>

// #include <nlohmann/detail/meta/cpp_future.hpp>

// #include <nlohmann/detail/meta/std_fs.hpp>

// #include <nlohmann/detail/meta/type_traits.hpp>

// #include <nlohmann/detail/value_t.hpp>


NLOHMANN_JSON_NAMESPACE_BEGIN
namespace detail
{

//////////////////
// constructors //
//////////////////

/*
 * Note all external_constructor<>::construct functions need to call
 * j.m_value.destroy(j.m_type) to avoid a memory leak in case j contains an
 * allocated value (e.g., a string). See bug issue
 * https://github.com/nlohmann/json/issues/2865 for more information.
 */

template<value_t> struct external_constructor;

template<>
struct external_constructor<value_t::boolean>
{
    template<typename BasicJsonType>
    static void construct(BasicJsonType& j, typename BasicJsonType::boolean_t b) noexcept
    {
        j.m_value.destroy(j.m_type);
        j.m_type = value_t::boolean;
        j.m_value = b;
        j.assert_invariant();
    }
};

template<>
struct external_constructor<value_t::string>
{
    template<typename BasicJsonType>
    static void construct(BasicJsonType& j, const typename BasicJsonType::string_t& s)
    {
        j.m_value.destroy(j.m_type);
        j.m_type = value_t::string;
        j.m_value = s;
        j.assert_invariant();
    }

    template<typename BasicJsonType>
    static void construct(BasicJsonType& j, typename BasicJsonType::string_t&& s)
    {
        j.m_value.destroy(j.m_type);
        j.m_type = value_t::string;
        j.m_value = std::move(s);
        j.assert_invariant();
    }

    template < typename BasicJsonType, typename CompatibleStringType,
               enable_if_t < !std::is_same<CompatibleStringType, typename BasicJsonType::string_t>::value,
                             int > = 0 >
    static void construct(BasicJsonType& j, const CompatibleStringType& str)
    {
        j.m_value.destroy(j.m_type);
        j.m_type = value_t::string;
        j.m_value.string = j.template create<typename BasicJsonType::string_t>(str);
        j.assert_invariant();
    }
};

template<>
struct external_constructor<value_t::binary>
{
    template<typename BasicJsonType>
    static void construct(BasicJsonType& j, const typename BasicJsonType::binary_t& b)
    {
        j.m_value.destroy(j.m_type);
        j.m_type = value_t::binary;
        j.m_value = typename BasicJsonType::binary_t(b);
        j.assert_invariant();
    }

    template<typename BasicJsonType>
    static void construct(BasicJsonType& j, typename BasicJsonType::binary_t&& b)
    {
        j.m_value.destroy(j.m_type);
        j.m_type = value_t::binary;
        j.m_value = typename BasicJsonType::binary_t(std::move(b));
        j.assert_invariant();
    }
};

template<>
struct external_constructor<value_t::number_float>
{
    template<typename BasicJsonType>
    static void construct(BasicJsonType& j, typename BasicJsonType::number_float_t val) noexcept
    {
        j.m_value.destroy(j.m_type);
        j.m_type = value_t::number_float;
        j.m_value = val;
        j.assert_invariant();
    }
};

template<>
struct external_constructor<value_t::number_unsigned>
{
    template<typename BasicJsonType>
    static void construct(BasicJsonType& j, typename BasicJsonType::number_unsigned_t val) noexcept
    {
        j.m_value.destroy(j.m_type);
        j.m_type = value_t::number_unsigned;
        j.m_value = val;
        j.assert_invariant();
    }
};

template<>
struct external_constructor<value_t::number_integer>
{
    template<typename BasicJsonType>
    static void construct(BasicJsonType& j, typename BasicJsonType::number_integer_t val) noexcept
    {
        j.m_value.destroy(j.m_type);
        j.m_type = value_t::number_integer;
        j.m_value = val;
        j.assert_invariant();
    }
};

template<>
struct external_constructor<value_t::array>
{
    template<typename BasicJsonType>
    static void construct(BasicJsonType& j, const typename BasicJsonType::array_t& arr)
    {
        j.m_value.destroy(j.m_type);
        j.m_type = value_t::array;
        j.m_value = arr;
        j.set_parents();
        j.assert_invariant();
    }

    template<typename BasicJsonType>
    static void construct(BasicJsonType& j, typename BasicJsonType::array_t&& arr)
    {
        j.m_value.destroy(j.m_type);
        j.m_type = value_t::array;
        j.m_value = std::move(arr);
        j.set_parents();
        j.assert_invariant();
    }

    template < typename BasicJsonType, typename CompatibleArrayType,
               enable_if_t < !std::is_same<CompatibleArrayType, typename BasicJsonType::array_t>::value,
                             int > = 0 >
    static void construct(BasicJsonType& j, const CompatibleArrayType& arr)
    {
        using std::begin;
        using std::end;

        j.m_value.destroy(j.m_type);
        j.m_type = value_t::array;
        j.m_value.array = j.template create<typename BasicJsonType::array_t>(begin(arr), end(arr));
        j.set_parents();
        j.assert_invariant();
    }

    template<typename BasicJsonType>
    static void construct(BasicJsonType& j, const std::vector<bool>& arr)
    {
        j.m_value.destroy(j.m_type);
        j.m_type = value_t::array;
        j.m_value = value_t::array;
        j.m_value.array->reserve(arr.size());
        for (const bool x : arr)
        {
            j.m_value.array->push_back(x);
            j.set_parent(j.m_value.array->back());
        }
        j.assert_invariant();
    }

    template<typename BasicJsonType, typename T,
             enable_if_t<std::is_convertible<T, BasicJsonType>::value, int> = 0>
    static void construct(BasicJsonType& j, const std::valarray<T>& arr)
    {
        j.m_value.destroy(j.m_type);
        j.m_type = value_t::array;
        j.m_value = value_t::array;
        j.m_value.array->resize(arr.size());
        if (arr.size() > 0)
        {
            std::copy(std::begin(arr), std::end(arr), j.m_value.array->begin());
        }
        j.set_parents();
        j.assert_invariant();
    }
};

template<>
struct external_constructor<value_t::object>
{
    template<typename BasicJsonType>
    static void construct(BasicJsonType& j, const typename BasicJsonType::object_t& obj)
    {
        j.m_value.destroy(j.m_type);
        j.m_type = value_t::object;
        j.m_value = obj;
        j.set_parents();
        j.assert_invariant();
    }

    template<typename BasicJsonType>
    static void construct(BasicJsonType& j, typename BasicJsonType::object_t&& obj)
    {
        j.m_value.destroy(j.m_type);
        j.m_type = value_t::object;
        j.m_value = std::move(obj);
        j.set_parents();
        j.assert_invariant();
    }

    template < typename BasicJsonType, typename CompatibleObjectType,
               enable_if_t < !std::is_same<CompatibleObjectType, typename BasicJsonType::object_t>::value, int > = 0 >
    static void construct(BasicJsonType& j, const CompatibleObjectType& obj)
    {
        using std::begin;
        using std::end;

        j.m_value.destroy(j.m_type);
        j.m_type = value_t::object;
        j.m_value.object = j.template create<typename BasicJsonType::object_t>(begin(obj), end(obj));
        j.set_parents();
        j.assert_invariant();
    }
};

/////////////
// to_json //
/////////////

template<typename BasicJsonType, typename T,
         enable_if_t<std::is_same<T, typename BasicJsonType::boolean_t>::value, int> = 0>
inline void to_json(BasicJsonType& j, T b) noexcept
{
    external_constructor<value_t::boolean>::construct(j, b);
}

template < typename BasicJsonType, typename BoolRef,
           enable_if_t <
               ((std::is_same<std::vector<bool>::reference, BoolRef>::value
                 && !std::is_same <std::vector<bool>::reference, typename BasicJsonType::boolean_t&>::value)
                || (std::is_same<std::vector<bool>::const_reference, BoolRef>::value
                    && !std::is_same <detail::uncvref_t<std::vector<bool>::const_reference>,
                                      typename BasicJsonType::boolean_t >::value))
               && std::is_convertible<const BoolRef&, typename BasicJsonType::boolean_t>::value, int > = 0 >
inline void to_json(BasicJsonType& j, const BoolRef& b) noexcept
{
    external_constructor<value_t::boolean>::construct(j, static_cast<typename BasicJsonType::boolean_t>(b));
}

template<typename BasicJsonType, typename CompatibleString,
         enable_if_t<std::is_constructible<typename BasicJsonType::string_t, CompatibleString>::value, int> = 0>
inline void to_json(BasicJsonType& j, const CompatibleString& s)
{
    external_constructor<value_t::string>::construct(j, s);
}

template<typename BasicJsonType>
inline void to_json(BasicJsonType& j, typename BasicJsonType::string_t&& s)
{
    external_constructor<value_t::string>::construct(j, std::move(s));
}

template<typename BasicJsonType, typename FloatType,
         enable_if_t<std::is_floating_point<FloatType>::value, int> = 0>
inline void to_json(BasicJsonType& j, FloatType val) noexcept
{
    external_constructor<value_t::number_float>::construct(j, static_cast<typename BasicJsonType::number_float_t>(val));
}

template<typename BasicJsonType, typename CompatibleNumberUnsignedType,
         enable_if_t<is_compatible_integer_type<typename BasicJsonType::number_unsigned_t, CompatibleNumberUnsignedType>::value, int> = 0>
inline void to_json(BasicJsonType& j, CompatibleNumberUnsignedType val) noexcept
{
    external_constructor<value_t::number_unsigned>::construct(j, static_cast<typename BasicJsonType::number_unsigned_t>(val));
}

template<typename BasicJsonType, typename CompatibleNumberIntegerType,
         enable_if_t<is_compatible_integer_type<typename BasicJsonType::number_integer_t, CompatibleNumberIntegerType>::value, int> = 0>
inline void to_json(BasicJsonType& j, CompatibleNumberIntegerType val) noexcept
{
    external_constructor<value_t::number_integer>::construct(j, static_cast<typename BasicJsonType::number_integer_t>(val));
}

#if !JSON_DISABLE_ENUM_SERIALIZATION
template<typename BasicJsonType, typename EnumType,
         enable_if_t<std::is_enum<EnumType>::value, int> = 0>
inline void to_json(BasicJsonType& j, EnumType e) noexcept
{
    using underlying_type = typename std::underlying_type<EnumType>::type;
    external_constructor<value_t::number_integer>::construct(j, static_cast<underlying_type>(e));
}
#endif  // JSON_DISABLE_ENUM_SERIALIZATION

template<typename BasicJsonType>
inline void to_json(BasicJsonType& j, const std::vector<bool>& e)
{
    external_constructor<value_t::array>::construct(j, e);
}

template < typename BasicJsonType, typename CompatibleArrayType,
           enable_if_t < is_compatible_array_type<BasicJsonType,
                         CompatibleArrayType>::value&&
                         !is_compatible_object_type<BasicJsonType, CompatibleArrayType>::value&&
                         !is_compatible_string_type<BasicJsonType, CompatibleArrayType>::value&&
                         !std::is_same<typename BasicJsonType::binary_t, CompatibleArrayType>::value&&
                         !is_basic_json<CompatibleArrayType>::value,
                         int > = 0 >
inline void to_json(BasicJsonType& j, const CompatibleArrayType& arr)
{
    external_constructor<value_t::array>::construct(j, arr);
}

template<typename BasicJsonType>
inline void to_json(BasicJsonType& j, const typename BasicJsonType::binary_t& bin)
{
    external_constructor<value_t::binary>::construct(j, bin);
}

template<typename BasicJsonType, typename T,
         enable_if_t<std::is_convertible<T, BasicJsonType>::value, int> = 0>
inline void to_json(BasicJsonType& j, const std::valarray<T>& arr)
{
    external_constructor<value_t::array>::construct(j, std::move(arr));
}

template<typename BasicJsonType>
inline void to_json(BasicJsonType& j, typename BasicJsonType::array_t&& arr)
{
    external_constructor<value_t::array>::construct(j, std::move(arr));
}

template < typename BasicJsonType, typename CompatibleObjectType,
           enable_if_t < is_compatible_object_type<BasicJsonType, CompatibleObjectType>::value&& !is_basic_json<CompatibleObjectType>::value, int > = 0 >
inline void to_json(BasicJsonType& j, const CompatibleObjectType& obj)
{
    external_constructor<value_t::object>::construct(j, obj);
}

template<typename BasicJsonType>
inline void to_json(BasicJsonType& j, typename BasicJsonType::object_t&& obj)
{
    external_constructor<value_t::object>::construct(j, std::move(obj));
}

template <
    typename BasicJsonType, typename T, std::size_t N,
    enable_if_t < !std::is_constructible<typename BasicJsonType::string_t,
                  const T(&)[N]>::value, // NOLINT(cppcoreguidelines-avoid-c-arrays,hicpp-avoid-c-arrays,modernize-avoid-c-arrays)
                  int > = 0 >
inline void to_json(BasicJsonType& j, const T(&arr)[N]) // NOLINT(cppcoreguidelines-avoid-c-arrays,hicpp-avoid-c-arrays,modernize-avoid-c-arrays)
{
    external_constructor<value_t::array>::construct(j, arr);
}

template < typename BasicJsonType, typename T1, typename T2, enable_if_t < std::is_constructible<BasicJsonType, T1>::value&& std::is_constructible<BasicJsonType, T2>::value, int > = 0 >
inline void to_json(BasicJsonType& j, const std::pair<T1, T2>& p)
{
    j = { p.first, p.second };
}

// for https://github.com/nlohmann/json/pull/1134
template<typename BasicJsonType, typename T,
         enable_if_t<std::is_same<T, iteration_proxy_value<typename BasicJsonType::iterator>>::value, int> = 0>
inline void to_json(BasicJsonType& j, const T& b)
{
    j = { {b.key(), b.value()} };
}

template<typename BasicJsonType, typename Tuple, std::size_t... Idx>
inline void to_json_tuple_impl(BasicJsonType& j, const Tuple& t, index_sequence<Idx...> /*unused*/)
{
    j = { std::get<Idx>(t)... };
}

template<typename BasicJsonType, typename T, enable_if_t<is_constructible_tuple<BasicJsonType, T>::value, int > = 0>
inline void to_json(BasicJsonType& j, const T& t)
{
    to_json_tuple_impl(j, t, make_index_sequence<std::tuple_size<T>::value> {});
}

#if JSON_HAS_FILESYSTEM || JSON_HAS_EXPERIMENTAL_FILESYSTEM
template<typename BasicJsonType>
inline void to_json(BasicJsonType& j, const std_fs::path& p)
{
    j = p.string();
}
#endif

struct to_json_fn
{
    template<typename BasicJsonType, typename T>
    auto operator()(BasicJsonType& j, T&& val) const noexcept(noexcept(to_json(j, std::forward<T>(val))))
    -> decltype(to_json(j, std::forward<T>(val)), void())
    {
        return to_json(j, std::forward<T>(val));
    }
};
}  // namespace detail

#ifndef JSON_HAS_CPP_17
/// namespace to hold default `to_json` function
/// to see why this is required:
/// http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2015/n4381.html
namespace // NOLINT(cert-dcl59-cpp,fuchsia-header-anon-namespaces,google-build-namespaces)
{
#endif
JSON_INLINE_VARIABLE constexpr const auto& to_json = // NOLINT(misc-definitions-in-headers)
    detail::static_const<detail::to_json_fn>::value;
#ifndef JSON_HAS_CPP_17
}  // namespace
#endif

NLOHMANN_JSON_NAMESPACE_END

// #include <nlohmann/detail/meta/identity_tag.hpp>


NLOHMANN_JSON_NAMESPACE_BEGIN

/// @sa https://json.nlohmann.me/api/adl_serializer/
template<typename ValueType, typename>
struct adl_serializer
{
    /// @brief convert a JSON value to any value type
    /// @sa https://json.nlohmann.me/api/adl_serializer/from_json/
    template<typename BasicJsonType, typename TargetType = ValueType>
    static auto from_json(BasicJsonType && j, TargetType& val) noexcept(
        noexcept(::nlohmann::from_json(std::forward<BasicJsonType>(j), val)))
    -> decltype(::nlohmann::from_json(std::forward<BasicJsonType>(j), val), void())
    {
        ::nlohmann::from_json(std::forward<BasicJsonType>(j), val);
    }

    /// @brief convert a JSON value to any value type
    /// @sa https://json.nlohmann.me/api/adl_serializer/from_json/
    template<typename BasicJsonType, typename TargetType = ValueType>
    static auto from_json(BasicJsonType && j) noexcept(
    noexcept(::nlohmann::from_json(std::forward<BasicJsonType>(j), detail::identity_tag<TargetType> {})))
    -> decltype(::nlohmann::from_json(std::forward<BasicJsonType>(j), detail::identity_tag<TargetType> {}))
    {
        return ::nlohmann::from_json(std::forward<BasicJsonType>(j), detail::identity_tag<TargetType> {});
    }

    /// @brief convert any value type to a JSON value
    /// @sa https://json.nlohmann.me/api/adl_serializer/to_json/
    template<typename BasicJsonType, typename TargetType = ValueType>
    static auto to_json(BasicJsonType& j, TargetType && val) noexcept(
        noexcept(::nlohmann::to_json(j, std::forward<TargetType>(val))))
    -> decltype(::nlohmann::to_json(j, std::forward<TargetType>(val)), void())
    {
        ::nlohmann::to_json(j, std::forward<TargetType>(val));
    }
};

NLOHMANN_JSON_NAMESPACE_END

// #include <nlohmann/byte_container_with_subtype.hpp>
//     __ _____ _____ _____
//  __|  |   __|     |   | |  JSON for Modern C++
// |  |  |__   |  |  | | | |  version 3.11.2
// |_____|_____|_____|_|___|  https://github.com/nlohmann/json
//
// SPDX-FileCopyrightText: 2013-2022 Niels Lohmann <https://nlohmann.me>
// SPDX-License-Identifier: MIT



#include <cstdint> // uint8_t, uint64_t
#include <tuple> // tie
#include <utility> // move

// #include <nlohmann/detail/abi_macros.hpp>


NLOHMANN_JSON_NAMESPACE_BEGIN

/// @brief an internal type for a backed binary type
/// @sa https://json.nlohmann.me/api/byte_container_with_subtype/
template<typename BinaryType>
class byte_container_with_subtype : public BinaryType
{
  public:
    using container_type = BinaryType;
    using subtype_type = std::uint64_t;

    /// @sa https://json.nlohmann.me/api/byte_container_with_subtype/byte_container_with_subtype/
    byte_container_with_subtype() noexcept(noexcept(container_type()))
        : container_type()
    {}

    /// @sa https://json.nlohmann.me/api/byte_container_with_subtype/byte_container_with_subtype/
    byte_container_with_subtype(const container_type& b) noexcept(noexcept(container_type(b)))
        : container_type(b)
    {}

    /// @sa https://json.nlohmann.me/api/byte_container_with_subtype/byte_container_with_subtype/
    byte_container_with_subtype(container_type&& b) noexcept(noexcept(container_type(std::move(b))))
        : container_type(std::move(b))
    {}

    /// @sa https://json.nlohmann.me/api/byte_container_with_subtype/byte_container_with_subtype/
    byte_container_with_subtype(const container_type& b, subtype_type subtype_) noexcept(noexcept(container_type(b)))
        : container_type(b)
        , m_subtype(subtype_)
        , m_has_subtype(true)
    {}

    /// @sa https://json.nlohmann.me/api/byte_container_with_subtype/byte_container_with_subtype/
    byte_container_with_subtype(container_type&& b, subtype_type subtype_) noexcept(noexcept(container_type(std::move(b))))
        : container_type(std::move(b))
        , m_subtype(subtype_)
        , m_has_subtype(true)
    {}

    bool operator==(const byte_container_with_subtype& rhs) const
    {
        return std::tie(static_cast<const BinaryType&>(*this), m_subtype, m_has_subtype) ==
               std::tie(static_cast<const BinaryType&>(rhs), rhs.m_subtype, rhs.m_has_subtype);
    }

    bool operator!=(const byte_container_with_subtype& rhs) const
    {
        return !(rhs == *this);
    }

    /// @brief sets the binary subtype
    /// @sa https://json.nlohmann.me/api/byte_container_with_subtype/set_subtype/
    void set_subtype(subtype_type subtype_) noexcept
    {
        m_subtype = subtype_;
        m_has_subtype = true;
    }

    /// @brief return the binary subtype
    /// @sa https://json.nlohmann.me/api/byte_container_with_subtype/subtype/
    constexpr subtype_type subtype() const noexcept
    {
        return m_has_subtype ? m_subtype : static_cast<subtype_type>(-1);
    }

    /// @brief return whether the value has a subtype
    /// @sa https://json.nlohmann.me/api/byte_container_with_subtype/has_subtype/
    constexpr bool has_subtype() const noexcept
    {
        return m_has_subtype;
    }

    /// @brief clears the binary subtype
    /// @sa https://json.nlohmann.me/api/byte_container_with_subtype/clear_subtype/
    void clear_subtype() noexcept
    {
        m_subtype = 0;
        m_has_subtype = false;
    }

  private:
    subtype_type m_subtype = 0;
    bool m_has_subtype = false;
};

NLOHMANN_JSON_NAMESPACE_END

// #include <nlohmann/detail/conversions/from_json.hpp>

// #include <nlohmann/detail/conversions/to_json.hpp>

// #include <nlohmann/detail/exceptions.hpp>

// #include <nlohmann/detail/hash.hpp>
//     __ _____ _____ _____
//  __|  |   __|     |   | |  JSON for Modern C++
// |  |  |__   |  |  | | | |  version 3.11.2
// |_____|_____|_____|_|___|  https://github.com/nlohmann/json
//
// SPDX-FileCopyrightText: 2013-2022 Niels Lohmann <https://nlohmann.me>
// SPDX-License-Identifier: MIT



#include <cstdint> // uint8_t
#include <cstddef> // size_t
#include <functional> // hash

// #include <nlohmann/detail/abi_macros.hpp>

// #include <nlohmann/detail/value_t.hpp>


NLOHMANN_JSON_NAMESPACE_BEGIN
namespace detail
{

// boost::hash_combine
inline std::size_t combine(std::size_t seed, std::size_t h) noexcept
{
    seed ^= h + 0x9e3779b9 + (seed << 6U) + (seed >> 2U);
    return seed;
}

/*!
@brief hash a JSON value

The hash function tries to rely on std::hash where possible. Furthermore, the
type of the JSON value is taken into account to have different hash values for
null, 0, 0U, and false, etc.

@tparam BasicJsonType basic_json specialization
@param j JSON value to hash
@return hash value of j
*/
template<typename BasicJsonType>
std::size_t hash(const BasicJsonType& j)
{
    using string_t = typename BasicJsonType::string_t;
    using number_integer_t = typename BasicJsonType::number_integer_t;
    using number_unsigned_t = typename BasicJsonType::number_unsigned_t;
    using number_float_t = typename BasicJsonType::number_float_t;

    const auto type = static_cast<std::size_t>(j.type());
    switch (j.type())
    {
        case BasicJsonType::value_t::null:
        case BasicJsonType::value_t::discarded:
        {
            return combine(type, 0);
        }

        case BasicJsonType::value_t::object:
        {
            auto seed = combine(type, j.size());
            for (const auto& element : j.items())
            {
                const auto h = std::hash<string_t> {}(element.key());
                seed = combine(seed, h);
                seed = combine(seed, hash(element.value()));
            }
            return seed;
        }

        case BasicJsonType::value_t::array:
        {
            auto seed = combine(type, j.size());
            for (const auto& element : j)
            {
                seed = combine(seed, hash(element));
            }
            return seed;
        }

        case BasicJsonType::value_t::string:
        {
            const auto h = std::hash<string_t> {}(j.template get_ref<const string_t&>());
            return combine(type, h);
        }

        case BasicJsonType::value_t::boolean:
        {
            const auto h = std::hash<bool> {}(j.template get<bool>());
            return combine(type, h);
        }

        case BasicJsonType::value_t::number_integer:
        {
            const auto h = std::hash<number_integer_t> {}(j.template get<number_integer_t>());
            return combine(type, h);
        }

        case BasicJsonType::value_t::number_unsigned:
        {
            const auto h = std::hash<number_unsigned_t> {}(j.template get<number_unsigned_t>());
            return combine(type, h);
        }

        case BasicJsonType::value_t::number_float:
        {
            const auto h = std::hash<number_float_t> {}(j.template get<number_float_t>());
            return combine(type, h);
        }

        case BasicJsonType::value_t::binary:
        {
            auto seed = combine(type, j.get_binary().size());
            const auto h = std::hash<bool> {}(j.get_binary().has_subtype());
            seed = combine(seed, h);
            seed = combine(seed, static_cast<std::size_t>(j.get_binary().subtype()));
            for (const auto byte : j.get_binary())
            {
                seed = combine(seed, std::hash<std::uint8_t> {}(byte));
            }
            return seed;
        }

        default:                   // LCOV_EXCL_LINE
            JSON_ASSERT(false); // NOLINT(cert-dcl03-c,hicpp-static-assert,misc-static-assert) LCOV_EXCL_LINE
            return 0;              // LCOV_EXCL_LINE
    }
}

}  // namespace detail
NLOHMANN_JSON_NAMESPACE_END

// #include <nlohmann/detail/input/binary_reader.hpp>
//     __ _____ _____ _____
//  __|  |   __|     |   | |  JSON for Modern C++
// |  |  |__   |  |  | | | |  version 3.11.2
// |_____|_____|_____|_|___|  https://github.com/nlohmann/json
//
// SPDX-FileCopyrightText: 2013-2022 Niels Lohmann <https://nlohmann.me>
// SPDX-License-Identifier: MIT



#include <algorithm> // generate_n
#include <array> // array
#include <cmath> // ldexp
#include <cstddef> // size_t
#include <cstdint> // uint8_t, uint16_t, uint32_t, uint64_t
#include <cstdio> // snprintf
#include <cstring> // memcpy
#include <iterator> // back_inserter
#include <limits> // numeric_limits
#include <string> // char_traits, string
#include <utility> // make_pair, move
#include <vector> // vector

// #include <nlohmann/detail/exceptions.hpp>

// #include <nlohmann/detail/input/input_adapters.hpp>
//     __ _____ _____ _____
//  __|  |   __|     |   | |  JSON for Modern C++
// |  |  |__   |  |  | | | |  version 3.11.2
// |_____|_____|_____|_|___|  https://github.com/nlohmann/json
//
// SPDX-FileCopyrightText: 2013-2022 Niels Lohmann <https://nlohmann.me>
// SPDX-License-Identifier: MIT



#include <array> // array
#include <cstddef> // size_t
#include <cstring> // strlen
#include <iterator> // begin, end, iterator_traits, random_access_iterator_tag, distance, next
#include <memory> // shared_ptr, make_shared, addressof
#include <numeric> // accumulate
#include <string> // string, char_traits
#include <type_traits> // enable_if, is_base_of, is_pointer, is_integral, remove_pointer
#include <utility> // pair, declval

#ifndef JSON_NO_IO
    #include <cstdio>   // FILE *
    #include <istream>  // istream
#endif                  // JSON_NO_IO

// #include <nlohmann/detail/iterators/iterator_traits.hpp>

// #include <nlohmann/detail/macro_scope.hpp>


NLOHMANN_JSON_NAMESPACE_BEGIN
namespace detail
{

/// the supported input formats
enum class input_format_t { json, cbor, msgpack, ubjson, bson, bjdata };

////////////////////
// input adapters //
////////////////////

#ifndef JSON_NO_IO
/*!
Input adapter for stdio file access. This adapter read only 1 byte and do not use any
 buffer. This adapter is a very low level adapter.
*/
class file_input_adapter
{
  public:
    using char_type = char;

    JSON_HEDLEY_NON_NULL(2)
    explicit file_input_adapter(std::FILE* f) noexcept
        : m_file(f)
    {
        JSON_ASSERT(m_file != nullptr);
    }

    // make class move-only
    file_input_adapter(const file_input_adapter&) = delete;
    file_input_adapter(file_input_adapter&&) noexcept = default;
    file_input_adapter& operator=(const file_input_adapter&) = delete;
    file_input_adapter& operator=(file_input_adapter&&) = delete;
    ~file_input_adapter() = default;

    std::char_traits<char>::int_type get_character() noexcept
    {
        return std::fgetc(m_file);
    }

  private:
    /// the file pointer to read from
    std::FILE* m_file;
};


/*!
Input adapter for a (caching) istream. Ignores a UFT Byte Order Mark at
beginning of input. Does not support changing the underlying std::streambuf
in mid-input. Maintains underlying std::istream and std::streambuf to support
subsequent use of standard std::istream operations to process any input
characters following those used in parsing the JSON input.  Clears the
std::istream flags; any input errors (e.g., EOF) will be detected by the first
subsequent call for input from the std::istream.
*/
class input_stream_adapter
{
  public:
    using char_type = char;

    ~input_stream_adapter()
    {
        // clear stream flags; we use underlying streambuf I/O, do not
        // maintain ifstream flags, except eof
        if (is != nullptr)
        {
            is->clear(is->rdstate() & std::ios::eofbit);
        }
    }

    explicit input_stream_adapter(std::istream& i)
        : is(&i), sb(i.rdbuf())
    {}

    // delete because of pointer members
    input_stream_adapter(const input_stream_adapter&) = delete;
    input_stream_adapter& operator=(input_stream_adapter&) = delete;
    input_stream_adapter& operator=(input_stream_adapter&&) = delete;

    input_stream_adapter(input_stream_adapter&& rhs) noexcept
        : is(rhs.is), sb(rhs.sb)
    {
        rhs.is = nullptr;
        rhs.sb = nullptr;
    }

    // std::istream/std::streambuf use std::char_traits<char>::to_int_type, to
    // ensure that std::char_traits<char>::eof() and the character 0xFF do not
    // end up as the same value, e.g. 0xFFFFFFFF.
    std::char_traits<char>::int_type get_character()
    {
        auto res = sb->sbumpc();
        // set eof manually, as we don't use the istream interface.
        if (JSON_HEDLEY_UNLIKELY(res == std::char_traits<char>::eof()))
        {
            is->clear(is->rdstate() | std::ios::eofbit);
        }
        return res;
    }

  private:
    /// the associated input stream
    std::istream* is = nullptr;
    std::streambuf* sb = nullptr;
};
#endif  // JSON_NO_IO

// General-purpose iterator-based adapter. It might not be as fast as
// theoretically possible for some containers, but it is extremely versatile.
template<typename IteratorType>
class iterator_input_adapter
{
  public:
    using char_type = typename std::iterator_traits<IteratorType>::value_type;

    iterator_input_adapter(IteratorType first, IteratorType last)
        : current(std::move(first)), end(std::move(last))
    {}

    typename std::char_traits<char_type>::int_type get_character()
    {
        if (JSON_HEDLEY_LIKELY(current != end))
        {
            auto result = std::char_traits<char_type>::to_int_type(*current);
            std::advance(current, 1);
            return result;
        }

        return std::char_traits<char_type>::eof();
    }

  private:
    IteratorType current;
    IteratorType end;

    template<typename BaseInputAdapter, size_t T>
    friend struct wide_string_input_helper;

    bool empty() const
    {
        return current == end;
    }
};


template<typename BaseInputAdapter, size_t T>
struct wide_string_input_helper;

template<typename BaseInputAdapter>
struct wide_string_input_helper<BaseInputAdapter, 4>
{
    // UTF-32
    static void fill_buffer(BaseInputAdapter& input,
                            std::array<std::char_traits<char>::int_type, 4>& utf8_bytes,
                            size_t& utf8_bytes_index,
                            size_t& utf8_bytes_filled)
    {
        utf8_bytes_index = 0;

        if (JSON_HEDLEY_UNLIKELY(input.empty()))
        {
            utf8_bytes[0] = std::char_traits<char>::eof();
            utf8_bytes_filled = 1;
        }
        else
        {
            // get the current character
            const auto wc = input.get_character();

            // UTF-32 to UTF-8 encoding
            if (wc < 0x80)
            {
                utf8_bytes[0] = static_cast<std::char_traits<char>::int_type>(wc);
                utf8_bytes_filled = 1;
            }
            else if (wc <= 0x7FF)
            {
                utf8_bytes[0] = static_cast<std::char_traits<char>::int_type>(0xC0u | ((static_cast<unsigned int>(wc) >> 6u) & 0x1Fu));
                utf8_bytes[1] = static_cast<std::char_traits<char>::int_type>(0x80u | (static_cast<unsigned int>(wc) & 0x3Fu));
                utf8_bytes_filled = 2;
            }
            else if (wc <= 0xFFFF)
            {
                utf8_bytes[0] = static_cast<std::char_traits<char>::int_type>(0xE0u | ((static_cast<unsigned int>(wc) >> 12u) & 0x0Fu));
                utf8_bytes[1] = static_cast<std::char_traits<char>::int_type>(0x80u | ((static_cast<unsigned int>(wc) >> 6u) & 0x3Fu));
                utf8_bytes[2] = static_cast<std::char_traits<char>::int_type>(0x80u | (static_cast<unsigned int>(wc) & 0x3Fu));
                utf8_bytes_filled = 3;
            }
            else if (wc <= 0x10FFFF)
            {
                utf8_bytes[0] = static_cast<std::char_traits<char>::int_type>(0xF0u | ((static_cast<unsigned int>(wc) >> 18u) & 0x07u));
                utf8_bytes[1] = static_cast<std::char_traits<char>::int_type>(0x80u | ((static_cast<unsigned int>(wc) >> 12u) & 0x3Fu));
                utf8_bytes[2] = static_cast<std::char_traits<char>::int_type>(0x80u | ((static_cast<unsigned int>(wc) >> 6u) & 0x3Fu));
                utf8_bytes[3] = static_cast<std::char_traits<char>::int_type>(0x80u | (static_cast<unsigned int>(wc) & 0x3Fu));
                utf8_bytes_filled = 4;
            }
            else
            {
                // unknown character
                utf8_bytes[0] = static_cast<std::char_traits<char>::int_type>(wc);
                utf8_bytes_filled = 1;
            }
        }
    }
};

template<typename BaseInputAdapter>
struct wide_string_input_helper<BaseInputAdapter, 2>
{
    // UTF-16
    static void fill_buffer(BaseInputAdapter& input,
                            std::array<std::char_traits<char>::int_type, 4>& utf8_bytes,
                            size_t& utf8_bytes_index,
                            size_t& utf8_bytes_filled)
    {
        utf8_bytes_index = 0;

        if (JSON_HEDLEY_UNLIKELY(input.empty()))
        {
            utf8_bytes[0] = std::char_traits<char>::eof();
            utf8_bytes_filled = 1;
        }
        else
        {
            // get the current character
            const auto wc = input.get_character();

            // UTF-16 to UTF-8 encoding
            if (wc < 0x80)
            {
                utf8_bytes[0] = static_cast<std::char_traits<char>::int_type>(wc);
                utf8_bytes_filled = 1;
            }
            else if (wc <= 0x7FF)
            {
                utf8_bytes[0] = static_cast<std::char_traits<char>::int_type>(0xC0u | ((static_cast<unsigned int>(wc) >> 6u)));
                utf8_bytes[1] = static_cast<std::char_traits<char>::int_type>(0x80u | (static_cast<unsigned int>(wc) & 0x3Fu));
                utf8_bytes_filled = 2;
            }
            else if (0xD800 > wc || wc >= 0xE000)
            {
                utf8_bytes[0] = static_cast<std::char_traits<char>::int_type>(0xE0u | ((static_cast<unsigned int>(wc) >> 12u)));
                utf8_bytes[1] = static_cast<std::char_traits<char>::int_type>(0x80u | ((static_cast<unsigned int>(wc) >> 6u) & 0x3Fu));
                utf8_bytes[2] = static_cast<std::char_traits<char>::int_type>(0x80u | (static_cast<unsigned int>(wc) & 0x3Fu));
                utf8_bytes_filled = 3;
            }
            else
            {
                if (JSON_HEDLEY_UNLIKELY(!input.empty()))
                {
                    const auto wc2 = static_cast<unsigned int>(input.get_character());
                    const auto charcode = 0x10000u + (((static_cast<unsigned int>(wc) & 0x3FFu) << 10u) | (wc2 & 0x3FFu));
                    utf8_bytes[0] = static_cast<std::char_traits<char>::int_type>(0xF0u | (charcode >> 18u));
                    utf8_bytes[1] = static_cast<std::char_traits<char>::int_type>(0x80u | ((charcode >> 12u) & 0x3Fu));
                    utf8_bytes[2] = static_cast<std::char_traits<char>::int_type>(0x80u | ((charcode >> 6u) & 0x3Fu));
                    utf8_bytes[3] = static_cast<std::char_traits<char>::int_type>(0x80u | (charcode & 0x3Fu));
                    utf8_bytes_filled = 4;
                }
                else
                {
                    utf8_bytes[0] = static_cast<std::char_traits<char>::int_type>(wc);
                    utf8_bytes_filled = 1;
                }
            }
        }
    }
};

// Wraps another input apdater to convert wide character types into individual bytes.
template<typename BaseInputAdapter, typename WideCharType>
class wide_string_input_adapter
{
  public:
    using char_type = char;

    wide_string_input_adapter(BaseInputAdapter base)
        : base_adapter(base) {}

    typename std::char_traits<char>::int_type get_character() noexcept
    {
        // check if buffer needs to be filled
        if (utf8_bytes_index == utf8_bytes_filled)
        {
            fill_buffer<sizeof(WideCharType)>();

            JSON_ASSERT(utf8_bytes_filled > 0);
            JSON_ASSERT(utf8_bytes_index == 0);
        }

        // use buffer
        JSON_ASSERT(utf8_bytes_filled > 0);
        JSON_ASSERT(utf8_bytes_index < utf8_bytes_filled);
        return utf8_bytes[utf8_bytes_index++];
    }

  private:
    BaseInputAdapter base_adapter;

    template<size_t T>
    void fill_buffer()
    {
        wide_string_input_helper<BaseInputAdapter, T>::fill_buffer(base_adapter, utf8_bytes, utf8_bytes_index, utf8_bytes_filled);
    }

    /// a buffer for UTF-8 bytes
    std::array<std::char_traits<char>::int_type, 4> utf8_bytes = {{0, 0, 0, 0}};

    /// index to the utf8_codes array for the next valid byte
    std::size_t utf8_bytes_index = 0;
    /// number of valid bytes in the utf8_codes array
    std::size_t utf8_bytes_filled = 0;
};


template<typename IteratorType, typename Enable = void>
struct iterator_input_adapter_factory
{
    using iterator_type = IteratorType;
    using char_type = typename std::iterator_traits<iterator_type>::value_type;
    using adapter_type = iterator_input_adapter<iterator_type>;

    static adapter_type create(IteratorType first, IteratorType last)
    {
        return adapter_type(std::move(first), std::move(last));
    }
};

template<typename T>
struct is_iterator_of_multibyte
{
    using value_type = typename std::iterator_traits<T>::value_type;
    enum
    {
        value = sizeof(value_type) > 1
    };
};

template<typename IteratorType>
struct iterator_input_adapter_factory<IteratorType, enable_if_t<is_iterator_of_multibyte<IteratorType>::value>>
{
    using iterator_type = IteratorType;
    using char_type = typename std::iterator_traits<iterator_type>::value_type;
    using base_adapter_type = iterator_input_adapter<iterator_type>;
    using adapter_type = wide_string_input_adapter<base_adapter_type, char_type>;

    static adapter_type create(IteratorType first, IteratorType last)
    {
        return adapter_type(base_adapter_type(std::move(first), std::move(last)));
    }
};

// General purpose iterator-based input
template<typename IteratorType>
typename iterator_input_adapter_factory<IteratorType>::adapter_type input_adapter(IteratorType first, IteratorType last)
{
    using factory_type = iterator_input_adapter_factory<IteratorType>;
    return factory_type::create(first, last);
}

// Convenience shorthand from container to iterator
// Enables ADL on begin(container) and end(container)
// Encloses the using declarations in namespace for not to leak them to outside scope

namespace container_input_adapter_factory_impl
{

using std::begin;
using std::end;

template<typename ContainerType, typename Enable = void>
struct container_input_adapter_factory {};

template<typename ContainerType>
struct container_input_adapter_factory< ContainerType,
       void_t<decltype(begin(std::declval<ContainerType>()), end(std::declval<ContainerType>()))>>
       {
           using adapter_type = decltype(input_adapter(begin(std::declval<ContainerType>()), end(std::declval<ContainerType>())));

           static adapter_type create(const ContainerType& container)
{
    return input_adapter(begin(container), end(container));
}
       };

}  // namespace container_input_adapter_factory_impl

template<typename ContainerType>
typename container_input_adapter_factory_impl::container_input_adapter_factory<ContainerType>::adapter_type input_adapter(const ContainerType& container)
{
    return container_input_adapter_factory_impl::container_input_adapter_factory<ContainerType>::create(container);
}

#ifndef JSON_NO_IO
// Special cases with fast paths
inline file_input_adapter input_adapter(std::FILE* file)
{
    return file_input_adapter(file);
}

inline input_stream_adapter input_adapter(std::istream& stream)
{
    return input_stream_adapter(stream);
}

inline input_stream_adapter input_adapter(std::istream&& stream)
{
    return input_stream_adapter(stream);
}
#endif  // JSON_NO_IO

using contiguous_bytes_input_adapter = decltype(input_adapter(std::declval<const char*>(), std::declval<const char*>()));

// Null-delimited strings, and the like.
template < typename CharT,
           typename std::enable_if <
               std::is_pointer<CharT>::value&&
               !std::is_array<CharT>::value&&
               std::is_integral<typename std::remove_pointer<CharT>::type>::value&&
               sizeof(typename std::remove_pointer<CharT>::type) == 1,
               int >::type = 0 >
contiguous_bytes_input_adapter input_adapter(CharT b)
{
    auto length = std::strlen(reinterpret_cast<const char*>(b));
    const auto* ptr = reinterpret_cast<const char*>(b);
    return input_adapter(ptr, ptr + length);
}

template<typename T, std::size_t N>
auto input_adapter(T (&array)[N]) -> decltype(input_adapter(array, array + N)) // NOLINT(cppcoreguidelines-avoid-c-arrays,hicpp-avoid-c-arrays,modernize-avoid-c-arrays)
{
    return input_adapter(array, array + N);
}

// This class only handles inputs of input_buffer_adapter type.
// It's required so that expressions like {ptr, len} can be implicitly cast
// to the correct adapter.
class span_input_adapter
{
  public:
    template < typename CharT,
               typename std::enable_if <
                   std::is_pointer<CharT>::value&&
                   std::is_integral<typename std::remove_pointer<CharT>::type>::value&&
                   sizeof(typename std::remove_pointer<CharT>::type) == 1,
                   int >::type = 0 >
    span_input_adapter(CharT b, std::size_t l)
        : ia(reinterpret_cast<const char*>(b), reinterpret_cast<const char*>(b) + l) {}

    template<class IteratorType,
             typename std::enable_if<
                 std::is_same<typename iterator_traits<IteratorType>::iterator_category, std::random_access_iterator_tag>::value,
                 int>::type = 0>
    span_input_adapter(IteratorType first, IteratorType last)
        : ia(input_adapter(first, last)) {}

    contiguous_bytes_input_adapter&& get()
    {
        return std::move(ia); // NOLINT(hicpp-move-const-arg,performance-move-const-arg)
    }

  private:
    contiguous_bytes_input_adapter ia;
};

}  // namespace detail
NLOHMANN_JSON_NAMESPACE_END

// #include <nlohmann/detail/input/json_sax.hpp>
//     __ _____ _____ _____
//  __|  |   __|     |   | |  JSON for Modern C++
// |  |  |__   |  |  | | | |  version 3.11.2
// |_____|_____|_____|_|___|  https://github.com/nlohmann/json
//
// SPDX-FileCopyrightText: 2013-2022 Niels Lohmann <https://nlohmann.me>
// SPDX-License-Identifier: MIT



#include <cstddef>
#include <string> // string
#include <utility> // move
#include <vector> // vector

// #include <nlohmann/detail/exceptions.hpp>

// #include <nlohmann/detail/macro_scope.hpp>

// #include <nlohmann/detail/string_concat.hpp>


NLOHMANN_JSON_NAMESPACE_BEGIN

/*!
@brief SAX interface

This class describes the SAX interface used by @ref nlohmann::json::sax_parse.
Each function is called in different situations while the input is parsed. The
boolean return value informs the parser whether to continue processing the
input.
*/
template<typename BasicJsonType>
struct json_sax
{
    using number_integer_t = typename BasicJsonType::number_integer_t;
    using number_unsigned_t = typename BasicJsonType::number_unsigned_t;
    using number_float_t = typename BasicJsonType::number_float_t;
    using string_t = typename BasicJsonType::string_t;
    using binary_t = typename BasicJsonType::binary_t;

    /*!
    @brief a null value was read
    @return whether parsing should proceed
    */
    virtual bool null() = 0;

    /*!
    @brief a boolean value was read
    @param[in] val  boolean value
    @return whether parsing should proceed
    */
    virtual bool boolean(bool val) = 0;

    /*!
    @brief an integer number was read
    @param[in] val  integer value
    @return whether parsing should proceed
    */
    virtual bool number_integer(number_integer_t val) = 0;

    /*!
    @brief an unsigned integer number was read
    @param[in] val  unsigned integer value
    @return whether parsing should proceed
    */
    virtual bool number_unsigned(number_unsigned_t val) = 0;

    /*!
    @brief a floating-point number was read
    @param[in] val  floating-point value
    @param[in] s    raw token value
    @return whether parsing should proceed
    */
    virtual bool number_float(number_float_t val, const string_t& s) = 0;

    /*!
    @brief a string value was read
    @param[in] val  string value
    @return whether parsing should proceed
    @note It is safe to move the passed string value.
    */
    virtual bool string(string_t& val) = 0;

    /*!
    @brief a binary value was read
    @param[in] val  binary value
    @return whether parsing should proceed
    @note It is safe to move the passed binary value.
    */
    virtual bool binary(binary_t& val) = 0;

    /*!
    @brief the beginning of an object was read
    @param[in] elements  number of object elements or -1 if unknown
    @return whether parsing should proceed
    @note binary formats may report the number of elements
    */
    virtual bool start_object(std::size_t elements) = 0;

    /*!
    @brief an object key was read
    @param[in] val  object key
    @return whether parsing should proceed
    @note It is safe to move the passed string.
    */
    virtual bool key(string_t& val) = 0;

    /*!
    @brief the end of an object was read
    @return whether parsing should proceed
    */
    virtual bool end_object() = 0;

    /*!
    @brief the beginning of an array was read
    @param[in] elements  number of array elements or -1 if unknown
    @return whether parsing should proceed
    @note binary formats may report the number of elements
    */
    virtual bool start_array(std::size_t elements) = 0;

    /*!
    @brief the end of an array was read
    @return whether parsing should proceed
    */
    virtual bool end_array() = 0;

    /*!
    @brief a parse error occurred
    @param[in] position    the position in the input where the error occurs
    @param[in] last_token  the last read token
    @param[in] ex          an exception object describing the error
    @return whether parsing should proceed (must return false)
    */
    virtual bool parse_error(std::size_t position,
                             const std::string& last_token,
                             const detail::exception& ex) = 0;

    json_sax() = default;
    json_sax(const json_sax&) = default;
    json_sax(json_sax&&) noexcept = default;
    json_sax& operator=(const json_sax&) = default;
    json_sax& operator=(json_sax&&) noexcept = default;
    virtual ~json_sax() = default;
};


namespace detail
{
/*!
@brief SAX implementation to create a JSON value from SAX events

This class implements the @ref json_sax interface and processes the SAX events
to create a JSON value which makes it basically a DOM parser. The structure or
hierarchy of the JSON value is managed by the stack `ref_stack` which contains
a pointer to the respective array or object for each recursion depth.

After successful parsing, the value that is passed by reference to the
constructor contains the parsed value.

@tparam BasicJsonType  the JSON type
*/
template<typename BasicJsonType>
class json_sax_dom_parser
{
  public:
    using number_integer_t = typename BasicJsonType::number_integer_t;
    using number_unsigned_t = typename BasicJsonType::number_unsigned_t;
    using number_float_t = typename BasicJsonType::number_float_t;
    using string_t = typename BasicJsonType::string_t;
    using binary_t = typename BasicJsonType::binary_t;

    /*!
    @param[in,out] r  reference to a JSON value that is manipulated while
                       parsing
    @param[in] allow_exceptions_  whether parse errors yield exceptions
    */
    explicit json_sax_dom_parser(BasicJsonType& r, const bool allow_exceptions_ = true)
        : root(r), allow_exceptions(allow_exceptions_)
    {}

    // make class move-only
    json_sax_dom_parser(const json_sax_dom_parser&) = delete;
    json_sax_dom_parser(json_sax_dom_parser&&) = default; // NOLINT(hicpp-noexcept-move,performance-noexcept-move-constructor)
    json_sax_dom_parser& operator=(const json_sax_dom_parser&) = delete;
    json_sax_dom_parser& operator=(json_sax_dom_parser&&) = default; // NOLINT(hicpp-noexcept-move,performance-noexcept-move-constructor)
    ~json_sax_dom_parser() = default;

    bool null()
    {
        handle_value(nullptr);
        return true;
    }

    bool boolean(bool val)
    {
        handle_value(val);
        return true;
    }

    bool number_integer(number_integer_t val)
    {
        handle_value(val);
        return true;
    }

    bool number_unsigned(number_unsigned_t val)
    {
        handle_value(val);
        return true;
    }

    bool number_float(number_float_t val, const string_t& /*unused*/)
    {
        handle_value(val);
        return true;
    }

    bool string(string_t& val)
    {
        handle_value(val);
        return true;
    }

    bool binary(binary_t& val)
    {
        handle_value(std::move(val));
        return true;
    }

    bool start_object(std::size_t len)
    {
        ref_stack.push_back(handle_value(BasicJsonType::value_t::object));

        if (JSON_HEDLEY_UNLIKELY(len != static_cast<std::size_t>(-1) && len > ref_stack.back()->max_size()))
        {
            JSON_THROW(out_of_range::create(408, concat("excessive object size: ", std::to_string(len)), ref_stack.back()));
        }

        return true;
    }

    bool key(string_t& val)
    {
        JSON_ASSERT(!ref_stack.empty());
        JSON_ASSERT(ref_stack.back()->is_object());

        // add null at given key and store the reference for later
        object_element = &(ref_stack.back()->m_value.object->operator[](val));
        return true;
    }

    bool end_object()
    {
        JSON_ASSERT(!ref_stack.empty());
        JSON_ASSERT(ref_stack.back()->is_object());

        ref_stack.back()->set_parents();
        ref_stack.pop_back();
        return true;
    }

    bool start_array(std::size_t len)
    {
        ref_stack.push_back(handle_value(BasicJsonType::value_t::array));

        if (JSON_HEDLEY_UNLIKELY(len != static_cast<std::size_t>(-1) && len > ref_stack.back()->max_size()))
        {
            JSON_THROW(out_of_range::create(408, concat("excessive array size: ", std::to_string(len)), ref_stack.back()));
        }

        return true;
    }

    bool end_array()
    {
        JSON_ASSERT(!ref_stack.empty());
        JSON_ASSERT(ref_stack.back()->is_array());

        ref_stack.back()->set_parents();
        ref_stack.pop_back();
        return true;
    }

    template<class Exception>
    bool parse_error(std::size_t /*unused*/, const std::string& /*unused*/,
                     const Exception& ex)
    {
        errored = true;
        static_cast<void>(ex);
        if (allow_exceptions)
        {
            JSON_THROW(ex);
        }
        return false;
    }

    constexpr bool is_errored() const
    {
        return errored;
    }

  private:
    /*!
    @invariant If the ref stack is empty, then the passed value will be the new
               root.
    @invariant If the ref stack contains a value, then it is an array or an
               object to which we can add elements
    */
    template<typename Value>
    JSON_HEDLEY_RETURNS_NON_NULL
    BasicJsonType* handle_value(Value&& v)
    {
        if (ref_stack.empty())
        {
            root = BasicJsonType(std::forward<Value>(v));
            return &root;
        }

        JSON_ASSERT(ref_stack.back()->is_array() || ref_stack.back()->is_object());

        if (ref_stack.back()->is_array())
        {
            ref_stack.back()->m_value.array->emplace_back(std::forward<Value>(v));
            return &(ref_stack.back()->m_value.array->back());
        }

        JSON_ASSERT(ref_stack.back()->is_object());
        JSON_ASSERT(object_element);
        *object_element = BasicJsonType(std::forward<Value>(v));
        return object_element;
    }

    /// the parsed JSON value
    BasicJsonType& root;
    /// stack to model hierarchy of values
    std::vector<BasicJsonType*> ref_stack {};
    /// helper to hold the reference for the next object element
    BasicJsonType* object_element = nullptr;
    /// whether a syntax error occurred
    bool errored = false;
    /// whether to throw exceptions in case of errors
    const bool allow_exceptions = true;
};

template<typename BasicJsonType>
class json_sax_dom_callback_parser
{
  public:
    using number_integer_t = typename BasicJsonType::number_integer_t;
    using number_unsigned_t = typename BasicJsonType::number_unsigned_t;
    using number_float_t = typename BasicJsonType::number_float_t;
    using string_t = typename BasicJsonType::string_t;
    using binary_t = typename BasicJsonType::binary_t;
    using parser_callback_t = typename BasicJsonType::parser_callback_t;
    using parse_event_t = typename BasicJsonType::parse_event_t;

    json_sax_dom_callback_parser(BasicJsonType& r,
                                 const parser_callback_t cb,
                                 const bool allow_exceptions_ = true)
        : root(r), callback(cb), allow_exceptions(allow_exceptions_)
    {
        keep_stack.push_back(true);
    }

    // make class move-only
    json_sax_dom_callback_parser(const json_sax_dom_callback_parser&) = delete;
    json_sax_dom_callback_parser(json_sax_dom_callback_parser&&) = default; // NOLINT(hicpp-noexcept-move,performance-noexcept-move-constructor)
    json_sax_dom_callback_parser& operator=(const json_sax_dom_callback_parser&) = delete;
    json_sax_dom_callback_parser& operator=(json_sax_dom_callback_parser&&) = default; // NOLINT(hicpp-noexcept-move,performance-noexcept-move-constructor)
    ~json_sax_dom_callback_parser() = default;

    bool null()
    {
        handle_value(nullptr);
        return true;
    }

    bool boolean(bool val)
    {
        handle_value(val);
        return true;
    }

    bool number_integer(number_integer_t val)
    {
        handle_value(val);
        return true;
    }

    bool number_unsigned(number_unsigned_t val)
    {
        handle_value(val);
        return true;
    }

    bool number_float(number_float_t val, const string_t& /*unused*/)
    {
        handle_value(val);
        return true;
    }

    bool string(string_t& val)
    {
        handle_value(val);
        return true;
    }

    bool binary(binary_t& val)
    {
        handle_value(std::move(val));
        return true;
    }

    bool start_object(std::size_t len)
    {
        // check callback for object start
        const bool keep = callback(static_cast<int>(ref_stack.size()), parse_event_t::object_start, discarded);
        keep_stack.push_back(keep);

        auto val = handle_value(BasicJsonType::value_t::object, true);
        ref_stack.push_back(val.second);

        // check object limit
        if (ref_stack.back() && JSON_HEDLEY_UNLIKELY(len != static_cast<std::size_t>(-1) && len > ref_stack.back()->max_size()))
        {
            JSON_THROW(out_of_range::create(408, concat("excessive object size: ", std::to_string(len)), ref_stack.back()));
        }

        return true;
    }

    bool key(string_t& val)
    {
        BasicJsonType k = BasicJsonType(val);

        // check callback for key
        const bool keep = callback(static_cast<int>(ref_stack.size()), parse_event_t::key, k);
        key_keep_stack.push_back(keep);

        // add discarded value at given key and store the reference for later
        if (keep && ref_stack.back())
        {
            object_element = &(ref_stack.back()->m_value.object->operator[](val) = discarded);
        }

        return true;
    }

    bool end_object()
    {
        if (ref_stack.back())
        {
            if (!callback(static_cast<int>(ref_stack.size()) - 1, parse_event_t::object_end, *ref_stack.back()))
            {
                // discard object
                *ref_stack.back() = discarded;
            }
            else
            {
                ref_stack.back()->set_parents();
            }
        }

        JSON_ASSERT(!ref_stack.empty());
        JSON_ASSERT(!keep_stack.empty());
        ref_stack.pop_back();
        keep_stack.pop_back();

        if (!ref_stack.empty() && ref_stack.back() && ref_stack.back()->is_structured())
        {
            // remove discarded value
            for (auto it = ref_stack.back()->begin(); it != ref_stack.back()->end(); ++it)
            {
                if (it->is_discarded())
                {
                    ref_stack.back()->erase(it);
                    break;
                }
            }
        }

        return true;
    }

    bool start_array(std::size_t len)
    {
        const bool keep = callback(static_cast<int>(ref_stack.size()), parse_event_t::array_start, discarded);
        keep_stack.push_back(keep);

        auto val = handle_value(BasicJsonType::value_t::array, true);
        ref_stack.push_back(val.second);

        // check array limit
        if (ref_stack.back() && JSON_HEDLEY_UNLIKELY(len != static_cast<std::size_t>(-1) && len > ref_stack.back()->max_size()))
        {
            JSON_THROW(out_of_range::create(408, concat("excessive array size: ", std::to_string(len)), ref_stack.back()));
        }

        return true;
    }

    bool end_array()
    {
        bool keep = true;

        if (ref_stack.back())
        {
            keep = callback(static_cast<int>(ref_stack.size()) - 1, parse_event_t::array_end, *ref_stack.back());
            if (keep)
            {
                ref_stack.back()->set_parents();
            }
            else
            {
                // discard array
                *ref_stack.back() = discarded;
            }
        }

        JSON_ASSERT(!ref_stack.empty());
        JSON_ASSERT(!keep_stack.empty());
        ref_stack.pop_back();
        keep_stack.pop_back();

        // remove discarded value
        if (!keep && !ref_stack.empty() && ref_stack.back()->is_array())
        {
            ref_stack.back()->m_value.array->pop_back();
        }

        return true;
    }

    template<class Exception>
    bool parse_error(std::size_t /*unused*/, const std::string& /*unused*/,
                     const Exception& ex)
    {
        errored = true;
        static_cast<void>(ex);
        if (allow_exceptions)
        {
            JSON_THROW(ex);
        }
        return false;
    }

    constexpr bool is_errored() const
    {
        return errored;
    }

  private:
    /*!
    @param[in] v  value to add to the JSON value we build during parsing
    @param[in] skip_callback  whether we should skip calling the callback
               function; this is required after start_array() and
               start_object() SAX events, because otherwise we would call the
               callback function with an empty array or object, respectively.

    @invariant If the ref stack is empty, then the passed value will be the new
               root.
    @invariant If the ref stack contains a value, then it is an array or an
               object to which we can add elements

    @return pair of boolean (whether value should be kept) and pointer (to the
            passed value in the ref_stack hierarchy; nullptr if not kept)
    */
    template<typename Value>
    std::pair<bool, BasicJsonType*> handle_value(Value&& v, const bool skip_callback = false)
    {
        JSON_ASSERT(!keep_stack.empty());

        // do not handle this value if we know it would be added to a discarded
        // container
        if (!keep_stack.back())
        {
            return {false, nullptr};
        }

        // create value
        auto value = BasicJsonType(std::forward<Value>(v));

        // check callback
        const bool keep = skip_callback || callback(static_cast<int>(ref_stack.size()), parse_event_t::value, value);

        // do not handle this value if we just learnt it shall be discarded
        if (!keep)
        {
            return {false, nullptr};
        }

        if (ref_stack.empty())
        {
            root = std::move(value);
            return {true, &root};
        }

        // skip this value if we already decided to skip the parent
        // (https://github.com/nlohmann/json/issues/971#issuecomment-413678360)
        if (!ref_stack.back())
        {
            return {false, nullptr};
        }

        // we now only expect arrays and objects
        JSON_ASSERT(ref_stack.back()->is_array() || ref_stack.back()->is_object());

        // array
        if (ref_stack.back()->is_array())
        {
            ref_stack.back()->m_value.array->emplace_back(std::move(value));
            return {true, &(ref_stack.back()->m_value.array->back())};
        }

        // object
        JSON_ASSERT(ref_stack.back()->is_object());
        // check if we should store an element for the current key
        JSON_ASSERT(!key_keep_stack.empty());
        const bool store_element = key_keep_stack.back();
        key_keep_stack.pop_back();

        if (!store_element)
        {
            return {false, nullptr};
        }

        JSON_ASSERT(object_element);
        *object_element = std::move(value);
        return {true, object_element};
    }

    /// the parsed JSON value
    BasicJsonType& root;
    /// stack to model hierarchy of values
    std::vector<BasicJsonType*> ref_stack {};
    /// stack to manage which values to keep
    std::vector<bool> keep_stack {};
    /// stack to manage which object keys to keep
    std::vector<bool> key_keep_stack {};
    /// helper to hold the reference for the next object element
    BasicJsonType* object_element = nullptr;
    /// whether a syntax error occurred
    bool errored = false;
    /// callback function
    const parser_callback_t callback = nullptr;
    /// whether to throw exceptions in case of errors
    const bool allow_exceptions = true;
    /// a discarded value for the callback
    BasicJsonType discarded = BasicJsonType::value_t::discarded;
};

template<typename BasicJsonType>
class json_sax_acceptor
{
  public:
    using number_integer_t = typename BasicJsonType::number_integer_t;
    using number_unsigned_t = typename BasicJsonType::number_unsigned_t;
    using number_float_t = typename BasicJsonType::number_float_t;
    using string_t = typename BasicJsonType::string_t;
    using binary_t = typename BasicJsonType::binary_t;

    bool null()
    {
        return true;
    }

    bool boolean(bool /*unused*/)
    {
        return true;
    }

    bool number_integer(number_integer_t /*unused*/)
    {
        return true;
    }

    bool number_unsigned(number_unsigned_t /*unused*/)
    {
        return true;
    }

    bool number_float(number_float_t /*unused*/, const string_t& /*unused*/)
    {
        return true;
    }

    bool string(string_t& /*unused*/)
    {
        return true;
    }

    bool binary(binary_t& /*unused*/)
    {
        return true;
    }

    bool start_object(std::size_t /*unused*/ = static_cast<std::size_t>(-1))
    {
        return true;
    }

    bool key(string_t& /*unused*/)
    {
        return true;
    }

    bool end_object()
    {
        return true;
    }

    bool start_array(std::size_t /*unused*/ = static_cast<std::size_t>(-1))
    {
        return true;
    }

    bool end_array()
    {
        return true;
    }

    bool parse_error(std::size_t /*unused*/, const std::string& /*unused*/, const detail::exception& /*unused*/)
    {
        return false;
    }
};

}  // namespace detail
NLOHMANN_JSON_NAMESPACE_END

// #include <nlohmann/detail/input/lexer.hpp>
//     __ _____ _____ _____
//  __|  |   __|     |   | |  JSON for Modern C++
// |  |  |__   |  |  | | | |  version 3.11.2
// |_____|_____|_____|_|___|  https://github.com/nlohmann/json
//
// SPDX-FileCopyrightText: 2013-2022 Niels Lohmann <https://nlohmann.me>
// SPDX-License-Identifier: MIT



#include <array> // array
#include <clocale> // localeconv
#include <cstddef> // size_t
#include <cstdio> // snprintf
#include <cstdlib> // strtof, strtod, strtold, strtoll, strtoull
#include <initializer_list> // initializer_list
#include <string> // char_traits, string
#include <utility> // move
#include <vector> // vector

// #include <nlohmann/detail/input/input_adapters.hpp>

// #include <nlohmann/detail/input/position_t.hpp>

// #include <nlohmann/detail/macro_scope.hpp>


NLOHMANN_JSON_NAMESPACE_BEGIN
namespace detail
{

///////////
// lexer //
///////////

template<typename BasicJsonType>
class lexer_base
{
  public:
    /// token types for the parser
    enum class token_type
    {
        uninitialized,    ///< indicating the scanner is uninitialized
        literal_true,     ///< the `true` literal
        literal_false,    ///< the `false` literal
        literal_null,     ///< the `null` literal
        value_string,     ///< a string -- use get_string() for actual value
        value_unsigned,   ///< an unsigned integer -- use get_number_unsigned() for actual value
        value_integer,    ///< a signed integer -- use get_number_integer() for actual value
        value_float,      ///< an floating point number -- use get_number_float() for actual value
        begin_array,      ///< the character for array begin `[`
        begin_object,     ///< the character for object begin `{`
        end_array,        ///< the character for array end `]`
        end_object,       ///< the character for object end `}`
        name_separator,   ///< the name separator `:`
        value_separator,  ///< the value separator `,`
        parse_error,      ///< indicating a parse error
        end_of_input,     ///< indicating the end of the input buffer
        literal_or_value  ///< a literal or the begin of a value (only for diagnostics)
    };

    /// return name of values of type token_type (only used for errors)
    JSON_HEDLEY_RETURNS_NON_NULL
    JSON_HEDLEY_CONST
    static const char* token_type_name(const token_type t) noexcept
    {
        switch (t)
        {
            case token_type::uninitialized:
                return "<uninitialized>";
            case token_type::literal_true:
                return "true literal";
            case token_type::literal_false:
                return "false literal";
            case token_type::literal_null:
                return "null literal";
            case token_type::value_string:
                return "string literal";
            case token_type::value_unsigned:
            case token_type::value_integer:
            case token_type::value_float:
                return "number literal";
            case token_type::begin_array:
                return "'['";
            case token_type::begin_object:
                return "'{'";
            case token_type::end_array:
                return "']'";
            case token_type::end_object:
                return "'}'";
            case token_type::name_separator:
                return "':'";
            case token_type::value_separator:
                return "','";
            case token_type::parse_error:
                return "<parse error>";
            case token_type::end_of_input:
                return "end of input";
            case token_type::literal_or_value:
                return "'[', '{', or a literal";
            // LCOV_EXCL_START
            default: // catch non-enum values
                return "unknown token";
                // LCOV_EXCL_STOP
        }
    }
};
/*!
@brief lexical analysis

This class organizes the lexical analysis during JSON deserialization.
*/
template<typename BasicJsonType, typename InputAdapterType>
class lexer : public lexer_base<BasicJsonType>
{
    using number_integer_t = typename BasicJsonType::number_integer_t;
    using number_unsigned_t = typename BasicJsonType::number_unsigned_t;
    using number_float_t = typename BasicJsonType::number_float_t;
    using string_t = typename BasicJsonType::string_t;
    using char_type = typename InputAdapterType::char_type;
    using char_int_type = typename std::char_traits<char_type>::int_type;

  public:
    using token_type = typename lexer_base<BasicJsonType>::token_type;

    explicit lexer(InputAdapterType&& adapter, bool ignore_comments_ = false) noexcept
        : ia(std::move(adapter))
        , ignore_comments(ignore_comments_)
        , decimal_point_char(static_cast<char_int_type>(get_decimal_point()))
    {}

    // delete because of pointer members
    lexer(const lexer&) = delete;
    lexer(lexer&&) = default; // NOLINT(hicpp-noexcept-move,performance-noexcept-move-constructor)
    lexer& operator=(lexer&) = delete;
    lexer& operator=(lexer&&) = default; // NOLINT(hicpp-noexcept-move,performance-noexcept-move-constructor)
    ~lexer() = default;

  private:
    /////////////////////
    // locales
    /////////////////////

    /// return the locale-dependent decimal point
    JSON_HEDLEY_PURE
    static char get_decimal_point() noexcept
    {
        const auto* loc = localeconv();
        JSON_ASSERT(loc != nullptr);
        return (loc->decimal_point == nullptr) ? '.' : *(loc->decimal_point);
    }

    /////////////////////
    // scan functions
    /////////////////////

    /*!
    @brief get codepoint from 4 hex characters following `\u`

    For input "\u c1 c2 c3 c4" the codepoint is:
      (c1 * 0x1000) + (c2 * 0x0100) + (c3 * 0x0010) + c4
    = (c1 << 12) + (c2 << 8) + (c3 << 4) + (c4 << 0)

    Furthermore, the possible characters '0'..'9', 'A'..'F', and 'a'..'f'
    must be converted to the integers 0x0..0x9, 0xA..0xF, 0xA..0xF, resp. The
    conversion is done by subtracting the offset (0x30, 0x37, and 0x57)
    between the ASCII value of the character and the desired integer value.

    @return codepoint (0x0000..0xFFFF) or -1 in case of an error (e.g. EOF or
            non-hex character)
    */
    int get_codepoint()
    {
        // this function only makes sense after reading `\u`
        JSON_ASSERT(current == 'u');
        int codepoint = 0;

        const auto factors = { 12u, 8u, 4u, 0u };
        for (const auto factor : factors)
        {
            get();

            if (current >= '0' && current <= '9')
            {
                codepoint += static_cast<int>((static_cast<unsigned int>(current) - 0x30u) << factor);
            }
            else if (current >= 'A' && current <= 'F')
            {
                codepoint += static_cast<int>((static_cast<unsigned int>(current) - 0x37u) << factor);
            }
            else if (current >= 'a' && current <= 'f')
            {
                codepoint += static_cast<int>((static_cast<unsigned int>(current) - 0x57u) << factor);
            }
            else
            {
                return -1;
            }
        }

        JSON_ASSERT(0x0000 <= codepoint && codepoint <= 0xFFFF);
        return codepoint;
    }

    /*!
    @brief check if the next byte(s) are inside a given range

    Adds the current byte and, for each passed range, reads a new byte and
    checks if it is inside the range. If a violation was detected, set up an
    error message and return false. Otherwise, return true.

    @param[in] ranges  list of integers; interpreted as list of pairs of
                       inclusive lower and upper bound, respectively

    @pre The passed list @a ranges must have 2, 4, or 6 elements; that is,
         1, 2, or 3 pairs. This precondition is enforced by an assertion.

    @return true if and only if no range violation was detected
    */
    bool next_byte_in_range(std::initializer_list<char_int_type> ranges)
    {
        JSON_ASSERT(ranges.size() == 2 || ranges.size() == 4 || ranges.size() == 6);
        add(current);

        for (auto range = ranges.begin(); range != ranges.end(); ++range)
        {
            get();
            if (JSON_HEDLEY_LIKELY(*range <= current && current <= *(++range)))
            {
                add(current);
            }
            else
            {
                error_message = "invalid string: ill-formed UTF-8 byte";
                return false;
            }
        }

        return true;
    }

    /*!
    @brief scan a string literal

    This function scans a string according to Sect. 7 of RFC 8259. While
    scanning, bytes are escaped and copied into buffer token_buffer. Then the
    function returns successfully, token_buffer is *not* null-terminated (as it
    may contain \0 bytes), and token_buffer.size() is the number of bytes in the
    string.

    @return token_type::value_string if string could be successfully scanned,
            token_type::parse_error otherwise

    @note In case of errors, variable error_message contains a textual
          description.
    */
    token_type scan_string()
    {
        // reset token_buffer (ignore opening quote)
        reset();

        // we entered the function by reading an open quote
        JSON_ASSERT(current == '\"');

        while (true)
        {
            // get next character
            switch (get())
            {
                // end of file while parsing string
                case std::char_traits<char_type>::eof():
                {
                    error_message = "invalid string: missing closing quote";
                    return token_type::parse_error;
                }

                // closing quote
                case '\"':
                {
                    return token_type::value_string;
                }

                // escapes
                case '\\':
                {
                    switch (get())
                    {
                        // quotation mark
                        case '\"':
                            add('\"');
                            break;
                        // reverse solidus
                        case '\\':
                            add('\\');
                            break;
                        // solidus
                        case '/':
                            add('/');
                            break;
                        // backspace
                        case 'b':
                            add('\b');
                            break;
                        // form feed
                        case 'f':
                            add('\f');
                            break;
                        // line feed
                        case 'n':
                            add('\n');
                            break;
                        // carriage return
                        case 'r':
                            add('\r');
                            break;
                        // tab
                        case 't':
                            add('\t');
                            break;

                        // unicode escapes
                        case 'u':
                        {
                            const int codepoint1 = get_codepoint();
                            int codepoint = codepoint1; // start with codepoint1

                            if (JSON_HEDLEY_UNLIKELY(codepoint1 == -1))
                            {
                                error_message = "invalid string: '\\u' must be followed by 4 hex digits";
                                return token_type::parse_error;
                            }

                            // check if code point is a high surrogate
                            if (0xD800 <= codepoint1 && codepoint1 <= 0xDBFF)
                            {
                                // expect next \uxxxx entry
                                if (JSON_HEDLEY_LIKELY(get() == '\\' && get() == 'u'))
                                {
                                    const int codepoint2 = get_codepoint();

                                    if (JSON_HEDLEY_UNLIKELY(codepoint2 == -1))
                                    {
                                        error_message = "invalid string: '\\u' must be followed by 4 hex digits";
                                        return token_type::parse_error;
                                    }

                                    // check if codepoint2 is a low surrogate
                                    if (JSON_HEDLEY_LIKELY(0xDC00 <= codepoint2 && codepoint2 <= 0xDFFF))
                                    {
                                        // overwrite codepoint
                                        codepoint = static_cast<int>(
                                                        // high surrogate occupies the most significant 22 bits
                                                        (static_cast<unsigned int>(codepoint1) << 10u)
                                                        // low surrogate occupies the least significant 15 bits
                                                        + static_cast<unsigned int>(codepoint2)
                                                        // there is still the 0xD800, 0xDC00 and 0x10000 noise
                                                        // in the result, so we have to subtract with:
                                                        // (0xD800 << 10) + DC00 - 0x10000 = 0x35FDC00
                                                        - 0x35FDC00u);
                                    }
                                    else
                                    {
                                        error_message = "invalid string: surrogate U+D800..U+DBFF must be followed by U+DC00..U+DFFF";
                                        return token_type::parse_error;
                                    }
                                }
                                else
                                {
                                    error_message = "invalid string: surrogate U+D800..U+DBFF must be followed by U+DC00..U+DFFF";
                                    return token_type::parse_error;
                                }
                            }
                            else
                            {
                                if (JSON_HEDLEY_UNLIKELY(0xDC00 <= codepoint1 && codepoint1 <= 0xDFFF))
                                {
                                    error_message = "invalid string: surrogate U+DC00..U+DFFF must follow U+D800..U+DBFF";
                                    return token_type::parse_error;
                                }
                            }

                            // result of the above calculation yields a proper codepoint
                            JSON_ASSERT(0x00 <= codepoint && codepoint <= 0x10FFFF);

                            // translate codepoint into bytes
                            if (codepoint < 0x80)
                            {
                                // 1-byte characters: 0xxxxxxx (ASCII)
                                add(static_cast<char_int_type>(codepoint));
                            }
                            else if (codepoint <= 0x7FF)
                            {
                                // 2-byte characters: 110xxxxx 10xxxxxx
                                add(static_cast<char_int_type>(0xC0u | (static_cast<unsigned int>(codepoint) >> 6u)));
                                add(static_cast<char_int_type>(0x80u | (static_cast<unsigned int>(codepoint) & 0x3Fu)));
                            }
                            else if (codepoint <= 0xFFFF)
                            {
                                // 3-byte characters: 1110xxxx 10xxxxxx 10xxxxxx
                                add(static_cast<char_int_type>(0xE0u | (static_cast<unsigned int>(codepoint) >> 12u)));
                                add(static_cast<char_int_type>(0x80u | ((static_cast<unsigned int>(codepoint) >> 6u) & 0x3Fu)));
                                add(static_cast<char_int_type>(0x80u | (static_cast<unsigned int>(codepoint) & 0x3Fu)));
                            }
                            else
                            {
                                // 4-byte characters: 11110xxx 10xxxxxx 10xxxxxx 10xxxxxx
                                add(static_cast<char_int_type>(0xF0u | (static_cast<unsigned int>(codepoint) >> 18u)));
                                add(static_cast<char_int_type>(0x80u | ((static_cast<unsigned int>(codepoint) >> 12u) & 0x3Fu)));
                                add(static_cast<char_int_type>(0x80u | ((static_cast<unsigned int>(codepoint) >> 6u) & 0x3Fu)));
                                add(static_cast<char_int_type>(0x80u | (static_cast<unsigned int>(codepoint) & 0x3Fu)));
                            }

                            break;
                        }

                        // other characters after escape
                        default:
                            error_message = "invalid string: forbidden character after backslash";
                            return token_type::parse_error;
                    }

                    break;
                }

                // invalid control characters
                case 0x00:
                {
                    error_message = "invalid string: control character U+0000 (NUL) must be escaped to \\u0000";
                    return token_type::parse_error;
                }

                case 0x01:
                {
                    error_message = "invalid string: control character U+0001 (SOH) must be escaped to \\u0001";
                    return token_type::parse_error;
                }

                case 0x02:
                {
                    error_message = "invalid string: control character U+0002 (STX) must be escaped to \\u0002";
                    return token_type::parse_error;
                }

                case 0x03:
                {
                    error_message = "invalid string: control character U+0003 (ETX) must be escaped to \\u0003";
                    return token_type::parse_error;
                }

                case 0x04:
                {
                    error_message = "invalid string: control character U+0004 (EOT) must be escaped to \\u0004";
                    return token_type::parse_error;
                }

                case 0x05:
                {
                    error_message = "invalid string: control character U+0005 (ENQ) must be escaped to \\u0005";
                    return token_type::parse_error;
                }

                case 0x06:
                {
                    error_message = "invalid string: control character U+0006 (ACK) must be escaped to \\u0006";
                    return token_type::parse_error;
                }

                case 0x07:
                {
                    error_message = "invalid string: control character U+0007 (BEL) must be escaped to \\u0007";
                    return token_type::parse_error;
                }

                case 0x08:
                {
                    error_message = "invalid string: control character U+0008 (BS) must be escaped to \\u0008 or \\b";
                    return token_type::parse_error;
                }

                case 0x09:
                {
                    error_message = "invalid string: control character U+0009 (HT) must be escaped to \\u0009 or \\t";
                    return token_type::parse_error;
                }

                case 0x0A:
                {
                    error_message = "invalid string: control character U+000A (LF) must be escaped to \\u000A or \\n";
                    return token_type::parse_error;
                }

                case 0x0B:
                {
                    error_message = "invalid string: control character U+000B (VT) must be escaped to \\u000B";
                    return token_type::parse_error;
                }

                case 0x0C:
                {
                    error_message = "invalid string: control character U+000C (FF) must be escaped to \\u000C or \\f";
                    return token_type::parse_error;
                }

                case 0x0D:
                {
                    error_message = "invalid string: control character U+000D (CR) must be escaped to \\u000D or \\r";
                    return token_type::parse_error;
                }

                case 0x0E:
                {
                    error_message = "invalid string: control character U+000E (SO) must be escaped to \\u000E";
                    return token_type::parse_error;
                }

                case 0x0F:
                {
                    error_message = "invalid string: control character U+000F (SI) must be escaped to \\u000F";
                    return token_type::parse_error;
                }

                case 0x10:
                {
                    error_message = "invalid string: control character U+0010 (DLE) must be escaped to \\u0010";
                    return token_type::parse_error;
                }

                case 0x11:
                {
                    error_message = "invalid string: control character U+0011 (DC1) must be escaped to \\u0011";
                    return token_type::parse_error;
                }

                case 0x12:
                {
                    error_message = "invalid string: control character U+0012 (DC2) must be escaped to \\u0012";
                    return token_type::parse_error;
                }

                case 0x13:
                {
                    error_message = "invalid string: control character U+0013 (DC3) must be escaped to \\u0013";
                    return token_type::parse_error;
                }

                case 0x14:
                {
                    error_message = "invalid string: control character U+0014 (DC4) must be escaped to \\u0014";
                    return token_type::parse_error;
                }

                case 0x15:
                {
                    error_message = "invalid string: control character U+0015 (NAK) must be escaped to \\u0015";
                    return token_type::parse_error;
                }

                case 0x16:
                {
                    error_message = "invalid string: control character U+0016 (SYN) must be escaped to \\u0016";
                    return token_type::parse_error;
                }

                case 0x17:
                {
                    error_message = "invalid string: control character U+0017 (ETB) must be escaped to \\u0017";
                    return token_type::parse_error;
                }

                case 0x18:
                {
                    error_message = "invalid string: control character U+0018 (CAN) must be escaped to \\u0018";
                    return token_type::parse_error;
                }

                case 0x19:
                {
                    error_message = "invalid string: control character U+0019 (EM) must be escaped to \\u0019";
                    return token_type::parse_error;
                }

                case 0x1A:
                {
                    error_message = "invalid string: control character U+001A (SUB) must be escaped to \\u001A";
                    return token_type::parse_error;
                }

                case 0x1B:
                {
                    error_message = "invalid string: control character U+001B (ESC) must be escaped to \\u001B";
                    return token_type::parse_error;
                }

                case 0x1C:
                {
                    error_message = "invalid string: control character U+001C (FS) must be escaped to \\u001C";
                    return token_type::parse_error;
                }

                case 0x1D:
                {
                    error_message = "invalid string: control character U+001D (GS) must be escaped to \\u001D";
                    return token_type::parse_error;
                }

                case 0x1E:
                {
                    error_message = "invalid string: control character U+001E (RS) must be escaped to \\u001E";
                    return token_type::parse_error;
                }

                case 0x1F:
                {
                    error_message = "invalid string: control character U+001F (US) must be escaped to \\u001F";
                    return token_type::parse_error;
                }

                // U+0020..U+007F (except U+0022 (quote) and U+005C (backspace))
                case 0x20:
                case 0x21:
                case 0x23:
                case 0x24:
                case 0x25:
                case 0x26:
                case 0x27:
                case 0x28:
                case 0x29:
                case 0x2A:
                case 0x2B:
                case 0x2C:
                case 0x2D:
                case 0x2E:
                case 0x2F:
                case 0x30:
                case 0x31:
                case 0x32:
                case 0x33:
                case 0x34:
                case 0x35:
                case 0x36:
                case 0x37:
                case 0x38:
                case 0x39:
                case 0x3A:
                case 0x3B:
                case 0x3C:
                case 0x3D:
                case 0x3E:
                case 0x3F:
                case 0x40:
                case 0x41:
                case 0x42:
                case 0x43:
                case 0x44:
                case 0x45:
                case 0x46:
                case 0x47:
                case 0x48:
                case 0x49:
                case 0x4A:
                case 0x4B:
                case 0x4C:
                case 0x4D:
                case 0x4E:
                case 0x4F:
                case 0x50:
                case 0x51:
                case 0x52:
                case 0x53:
                case 0x54:
                case 0x55:
                case 0x56:
                case 0x57:
                case 0x58:
                case 0x59:
                case 0x5A:
                case 0x5B:
                case 0x5D:
                case 0x5E:
                case 0x5F:
                case 0x60:
                case 0x61:
                case 0x62:
                case 0x63:
                case 0x64:
                case 0x65:
                case 0x66:
                case 0x67:
                case 0x68:
                case 0x69:
                case 0x6A:
                case 0x6B:
                case 0x6C:
                case 0x6D:
                case 0x6E:
                case 0x6F:
                case 0x70:
                case 0x71:
                case 0x72:
                case 0x73:
                case 0x74:
                case 0x75:
                case 0x76:
                case 0x77:
                case 0x78:
                case 0x79:
                case 0x7A:
                case 0x7B:
                case 0x7C:
                case 0x7D:
                case 0x7E:
                case 0x7F:
                {
                    add(current);
                    break;
                }

                // U+0080..U+07FF: bytes C2..DF 80..BF
                case 0xC2:
                case 0xC3:
                case 0xC4:
                case 0xC5:
                case 0xC6:
                case 0xC7:
                case 0xC8:
                case 0xC9:
                case 0xCA:
                case 0xCB:
                case 0xCC:
                case 0xCD:
                case 0xCE:
                case 0xCF:
                case 0xD0:
                case 0xD1:
                case 0xD2:
                case 0xD3:
                case 0xD4:
                case 0xD5:
                case 0xD6:
                case 0xD7:
                case 0xD8:
                case 0xD9:
                case 0xDA:
                case 0xDB:
                case 0xDC:
                case 0xDD:
                case 0xDE:
                case 0xDF:
                {
                    if (JSON_HEDLEY_UNLIKELY(!next_byte_in_range({0x80, 0xBF})))
                    {
                        return token_type::parse_error;
                    }
                    break;
                }

                // U+0800..U+0FFF: bytes E0 A0..BF 80..BF
                case 0xE0:
                {
                    if (JSON_HEDLEY_UNLIKELY(!(next_byte_in_range({0xA0, 0xBF, 0x80, 0xBF}))))
                    {
                        return token_type::parse_error;
                    }
                    break;
                }

                // U+1000..U+CFFF: bytes E1..EC 80..BF 80..BF
                // U+E000..U+FFFF: bytes EE..EF 80..BF 80..BF
                case 0xE1:
                case 0xE2:
                case 0xE3:
                case 0xE4:
                case 0xE5:
                case 0xE6:
                case 0xE7:
                case 0xE8:
                case 0xE9:
                case 0xEA:
                case 0xEB:
                case 0xEC:
                case 0xEE:
                case 0xEF:
                {
                    if (JSON_HEDLEY_UNLIKELY(!(next_byte_in_range({0x80, 0xBF, 0x80, 0xBF}))))
                    {
                        return token_type::parse_error;
                    }
                    break;
                }

                // U+D000..U+D7FF: bytes ED 80..9F 80..BF
                case 0xED:
                {
                    if (JSON_HEDLEY_UNLIKELY(!(next_byte_in_range({0x80, 0x9F, 0x80, 0xBF}))))
                    {
                        return token_type::parse_error;
                    }
                    break;
                }

                // U+10000..U+3FFFF F0 90..BF 80..BF 80..BF
                case 0xF0:
                {
                    if (JSON_HEDLEY_UNLIKELY(!(next_byte_in_range({0x90, 0xBF, 0x80, 0xBF, 0x80, 0xBF}))))
                    {
                        return token_type::parse_error;
                    }
                    break;
                }

                // U+40000..U+FFFFF F1..F3 80..BF 80..BF 80..BF
                case 0xF1:
                case 0xF2:
                case 0xF3:
                {
                    if (JSON_HEDLEY_UNLIKELY(!(next_byte_in_range({0x80, 0xBF, 0x80, 0xBF, 0x80, 0xBF}))))
                    {
                        return token_type::parse_error;
                    }
                    break;
                }

                // U+100000..U+10FFFF F4 80..8F 80..BF 80..BF
                case 0xF4:
                {
                    if (JSON_HEDLEY_UNLIKELY(!(next_byte_in_range({0x80, 0x8F, 0x80, 0xBF, 0x80, 0xBF}))))
                    {
                        return token_type::parse_error;
                    }
                    break;
                }

                // remaining bytes (80..C1 and F5..FF) are ill-formed
                default:
                {
                    error_message = "invalid string: ill-formed UTF-8 byte";
                    return token_type::parse_error;
                }
            }
        }
    }

    /*!
     * @brief scan a comment
     * @return whether comment could be scanned successfully
     */
    bool scan_comment()
    {
        switch (get())
        {
            // single-line comments skip input until a newline or EOF is read
            case '/':
            {
                while (true)
                {
                    switch (get())
                    {
                        case '\n':
                        case '\r':
                        case std::char_traits<char_type>::eof():
                        case '\0':
                            return true;

                        default:
                            break;
                    }
                }
            }

            // multi-line comments skip input until */ is read
            case '*':
            {
                while (true)
                {
                    switch (get())
                    {
                        case std::char_traits<char_type>::eof():
                        case '\0':
                        {
                            error_message = "invalid comment; missing closing '*/'";
                            return false;
                        }

                        case '*':
                        {
                            switch (get())
                            {
                                case '/':
                                    return true;

                                default:
                                {
                                    unget();
                                    continue;
                                }
                            }
                        }

                        default:
                            continue;
                    }
                }
            }

            // unexpected character after reading '/'
            default:
            {
                error_message = "invalid comment; expecting '/' or '*' after '/'";
                return false;
            }
        }
    }

    JSON_HEDLEY_NON_NULL(2)
    static void strtof(float& f, const char* str, char** endptr) noexcept
    {
        f = std::strtof(str, endptr);
    }

    JSON_HEDLEY_NON_NULL(2)
    static void strtof(double& f, const char* str, char** endptr) noexcept
    {
        f = std::strtod(str, endptr);
    }

    JSON_HEDLEY_NON_NULL(2)
    static void strtof(long double& f, const char* str, char** endptr) noexcept
    {
        f = std::strtold(str, endptr);
    }

    /*!
    @brief scan a number literal

    This function scans a string according to Sect. 6 of RFC 8259.

    The function is realized with a deterministic finite state machine derived
    from the grammar described in RFC 8259. Starting in state "init", the
    input is read and used to determined the next state. Only state "done"
    accepts the number. State "error" is a trap state to model errors. In the
    table below, "anything" means any character but the ones listed before.

    state    | 0        | 1-9      | e E      | +       | -       | .        | anything
    ---------|----------|----------|----------|---------|---------|----------|-----------
    init     | zero     | any1     | [error]  | [error] | minus   | [error]  | [error]
    minus    | zero     | any1     | [error]  | [error] | [error] | [error]  | [error]
    zero     | done     | done     | exponent | done    | done    | decimal1 | done
    any1     | any1     | any1     | exponent | done    | done    | decimal1 | done
    decimal1 | decimal2 | decimal2 | [error]  | [error] | [error] | [error]  | [error]
    decimal2 | decimal2 | decimal2 | exponent | done    | done    | done     | done
    exponent | any2     | any2     | [error]  | sign    | sign    | [error]  | [error]
    sign     | any2     | any2     | [error]  | [error] | [error] | [error]  | [error]
    any2     | any2     | any2     | done     | done    | done    | done     | done

    The state machine is realized with one label per state (prefixed with
    "scan_number_") and `goto` statements between them. The state machine
    contains cycles, but any cycle can be left when EOF is read. Therefore,
    the function is guaranteed to terminate.

    During scanning, the read bytes are stored in token_buffer. This string is
    then converted to a signed integer, an unsigned integer, or a
    floating-point number.

    @return token_type::value_unsigned, token_type::value_integer, or
            token_type::value_float if number could be successfully scanned,
            token_type::parse_error otherwise

    @note The scanner is independent of the current locale. Internally, the
          locale's decimal point is used instead of `.` to work with the
          locale-dependent converters.
    */
    token_type scan_number()  // lgtm [cpp/use-of-goto]
    {
        // reset token_buffer to store the number's bytes
        reset();

        // the type of the parsed number; initially set to unsigned; will be
        // changed if minus sign, decimal point or exponent is read
        token_type number_type = token_type::value_unsigned;

        // state (init): we just found out we need to scan a number
        switch (current)
        {
            case '-':
            {
                add(current);
                goto scan_number_minus;
            }

            case '0':
            {
                add(current);
                goto scan_number_zero;
            }

            case '1':
            case '2':
            case '3':
            case '4':
            case '5':
            case '6':
            case '7':
            case '8':
            case '9':
            {
                add(current);
                goto scan_number_any1;
            }

            // all other characters are rejected outside scan_number()
            default:            // LCOV_EXCL_LINE
                JSON_ASSERT(false); // NOLINT(cert-dcl03-c,hicpp-static-assert,misc-static-assert) LCOV_EXCL_LINE
        }

scan_number_minus:
        // state: we just parsed a leading minus sign
        number_type = token_type::value_integer;
        switch (get())
        {
            case '0':
            {
                add(current);
                goto scan_number_zero;
            }

            case '1':
            case '2':
            case '3':
            case '4':
            case '5':
            case '6':
            case '7':
            case '8':
            case '9':
            {
                add(current);
                goto scan_number_any1;
            }

            default:
            {
                error_message = "invalid number; expected digit after '-'";
                return token_type::parse_error;
            }
        }

scan_number_zero:
        // state: we just parse a zero (maybe with a leading minus sign)
        switch (get())
        {
            case '.':
            {
                add(decimal_point_char);
                goto scan_number_decimal1;
            }

            case 'e':
            case 'E':
            {
                add(current);
                goto scan_number_exponent;
            }

            default:
                goto scan_number_done;
        }

scan_number_any1:
        // state: we just parsed a number 0-9 (maybe with a leading minus sign)
        switch (get())
        {
            case '0':
            case '1':
            case '2':
            case '3':
            case '4':
            case '5':
            case '6':
            case '7':
            case '8':
            case '9':
            {
                add(current);
                goto scan_number_any1;
            }

            case '.':
            {
                add(decimal_point_char);
                goto scan_number_decimal1;
            }

            case 'e':
            case 'E':
            {
                add(current);
                goto scan_number_exponent;
            }

            default:
                goto scan_number_done;
        }

scan_number_decimal1:
        // state: we just parsed a decimal point
        number_type = token_type::value_float;
        switch (get())
        {
            case '0':
            case '1':
            case '2':
            case '3':
            case '4':
            case '5':
            case '6':
            case '7':
            case '8':
            case '9':
            {
                add(current);
                goto scan_number_decimal2;
            }

            default:
            {
                error_message = "invalid number; expected digit after '.'";
                return token_type::parse_error;
            }
        }

scan_number_decimal2:
        // we just parsed at least one number after a decimal point
        switch (get())
        {
            case '0':
            case '1':
            case '2':
            case '3':
            case '4':
            case '5':
            case '6':
            case '7':
            case '8':
            case '9':
            {
                add(current);
                goto scan_number_decimal2;
            }

            case 'e':
            case 'E':
            {
                add(current);
                goto scan_number_exponent;
            }

            default:
                goto scan_number_done;
        }

scan_number_exponent:
        // we just parsed an exponent
        number_type = token_type::value_float;
        switch (get())
        {
            case '+':
            case '-':
            {
                add(current);
                goto scan_number_sign;
            }

            case '0':
            case '1':
            case '2':
            case '3':
            case '4':
            case '5':
            case '6':
            case '7':
            case '8':
            case '9':
            {
                add(current);
                goto scan_number_any2;
            }

            default:
            {
                error_message =
                    "invalid number; expected '+', '-', or digit after exponent";
                return token_type::parse_error;
            }
        }

scan_number_sign:
        // we just parsed an exponent sign
        switch (get())
        {
            case '0':
            case '1':
            case '2':
            case '3':
            case '4':
            case '5':
            case '6':
            case '7':
            case '8':
            case '9':
            {
                add(current);
                goto scan_number_any2;
            }

            default:
            {
                error_message = "invalid number; expected digit after exponent sign";
                return token_type::parse_error;
            }
        }

scan_number_any2:
        // we just parsed a number after the exponent or exponent sign
        switch (get())
        {
            case '0':
            case '1':
            case '2':
            case '3':
            case '4':
            case '5':
            case '6':
            case '7':
            case '8':
            case '9':
            {
                add(current);
                goto scan_number_any2;
            }

            default:
                goto scan_number_done;
        }

scan_number_done:
        // unget the character after the number (we only read it to know that
        // we are done scanning a number)
        unget();

        char* endptr = nullptr; // NOLINT(cppcoreguidelines-pro-type-vararg,hicpp-vararg)
        errno = 0;

        // try to parse integers first and fall back to floats
        if (number_type == token_type::value_unsigned)
        {
            const auto x = std::strtoull(token_buffer.data(), &endptr, 10);

            // we checked the number format before
            JSON_ASSERT(endptr == token_buffer.data() + token_buffer.size());

            if (errno == 0)
            {
                value_unsigned = static_cast<number_unsigned_t>(x);
                if (value_unsigned == x)
                {
                    return token_type::value_unsigned;
                }
            }
        }
        else if (number_type == token_type::value_integer)
        {
            const auto x = std::strtoll(token_buffer.data(), &endptr, 10);

            // we checked the number format before
            JSON_ASSERT(endptr == token_buffer.data() + token_buffer.size());

            if (errno == 0)
            {
                value_integer = static_cast<number_integer_t>(x);
                if (value_integer == x)
                {
                    return token_type::value_integer;
                }
            }
        }

        // this code is reached if we parse a floating-point number or if an
        // integer conversion above failed
        strtof(value_float, token_buffer.data(), &endptr);

        // we checked the number format before
        JSON_ASSERT(endptr == token_buffer.data() + token_buffer.size());

        return token_type::value_float;
    }

    /*!
    @param[in] literal_text  the literal text to expect
    @param[in] length        the length of the passed literal text
    @param[in] return_type   the token type to return on success
    */
    JSON_HEDLEY_NON_NULL(2)
    token_type scan_literal(const char_type* literal_text, const std::size_t length,
                            token_type return_type)
    {
        JSON_ASSERT(std::char_traits<char_type>::to_char_type(current) == literal_text[0]);
        for (std::size_t i = 1; i < length; ++i)
        {
            if (JSON_HEDLEY_UNLIKELY(std::char_traits<char_type>::to_char_type(get()) != literal_text[i]))
            {
                error_message = "invalid literal";
                return token_type::parse_error;
            }
        }
        return return_type;
    }

    /////////////////////
    // input management
    /////////////////////

    /// reset token_buffer; current character is beginning of token
    void reset() noexcept
    {
        token_buffer.clear();
        token_string.clear();
        token_string.push_back(std::char_traits<char_type>::to_char_type(current));
    }

    /*
    @brief get next character from the input

    This function provides the interface to the used input adapter. It does
    not throw in case the input reached EOF, but returns a
    `std::char_traits<char>::eof()` in that case.  Stores the scanned characters
    for use in error messages.

    @return character read from the input
    */
    char_int_type get()
    {
        ++position.chars_read_total;
        ++position.chars_read_current_line;

        if (next_unget)
        {
            // just reset the next_unget variable and work with current
            next_unget = false;
        }
        else
        {
            current = ia.get_character();
        }

        if (JSON_HEDLEY_LIKELY(current != std::char_traits<char_type>::eof()))
        {
            token_string.push_back(std::char_traits<char_type>::to_char_type(current));
        }

        if (current == '\n')
        {
            ++position.lines_read;
            position.chars_read_current_line = 0;
        }

        return current;
    }

    /*!
    @brief unget current character (read it again on next get)

    We implement unget by setting variable next_unget to true. The input is not
    changed - we just simulate ungetting by modifying chars_read_total,
    chars_read_current_line, and token_string. The next call to get() will
    behave as if the unget character is read again.
    */
    void unget()
    {
        next_unget = true;

        --position.chars_read_total;

        // in case we "unget" a newline, we have to also decrement the lines_read
        if (position.chars_read_current_line == 0)
        {
            if (position.lines_read > 0)
            {
                --position.lines_read;
            }
        }
        else
        {
            --position.chars_read_current_line;
        }

        if (JSON_HEDLEY_LIKELY(current != std::char_traits<char_type>::eof()))
        {
            JSON_ASSERT(!token_string.empty());
            token_string.pop_back();
        }
    }

    /// add a character to token_buffer
    void add(char_int_type c)
    {
        token_buffer.push_back(static_cast<typename string_t::value_type>(c));
    }

  public:
    /////////////////////
    // value getters
    /////////////////////

    /// return integer value
    constexpr number_integer_t get_number_integer() const noexcept
    {
        return value_integer;
    }

    /// return unsigned integer value
    constexpr number_unsigned_t get_number_unsigned() const noexcept
    {
        return value_unsigned;
    }

    /// return floating-point value
    constexpr number_float_t get_number_float() const noexcept
    {
        return value_float;
    }

    /// return current string value (implicitly resets the token; useful only once)
    string_t& get_string()
    {
        return token_buffer;
    }

    /////////////////////
    // diagnostics
    /////////////////////

    /// return position of last read token
    constexpr position_t get_position() const noexcept
    {
        return position;
    }

    /// return the last read token (for errors only).  Will never contain EOF
    /// (an arbitrary value that is not a valid char value, often -1), because
    /// 255 may legitimately occur.  May contain NUL, which should be escaped.
    std::string get_token_string() const
    {
        // escape control characters
        std::string result;
        for (const auto c : token_string)
        {
            if (static_cast<unsigned char>(c) <= '\x1F')
            {
                // escape control characters
                std::array<char, 9> cs{{}};
                static_cast<void>((std::snprintf)(cs.data(), cs.size(), "<U+%.4X>", static_cast<unsigned char>(c))); // NOLINT(cppcoreguidelines-pro-type-vararg,hicpp-vararg)
                result += cs.data();
            }
            else
            {
                // add character as is
                result.push_back(static_cast<std::string::value_type>(c));
            }
        }

        return result;
    }

    /// return syntax error message
    JSON_HEDLEY_RETURNS_NON_NULL
    constexpr const char* get_error_message() const noexcept
    {
        return error_message;
    }

    /////////////////////
    // actual scanner
    /////////////////////

    /*!
    @brief skip the UTF-8 byte order mark
    @return true iff there is no BOM or the correct BOM has been skipped
    */
    bool skip_bom()
    {
        if (get() == 0xEF)
        {
            // check if we completely parse the BOM
            return get() == 0xBB && get() == 0xBF;
        }

        // the first character is not the beginning of the BOM; unget it to
        // process is later
        unget();
        return true;
    }

    void skip_whitespace()
    {
        do
        {
            get();
        }
        while (current == ' ' || current == '\t' || current == '\n' || current == '\r');
    }

    token_type scan()
    {
        // initially, skip the BOM
        if (position.chars_read_total == 0 && !skip_bom())
        {
            error_message = "invalid BOM; must be 0xEF 0xBB 0xBF if given";
            return token_type::parse_error;
        }

        // read next character and ignore whitespace
        skip_whitespace();

        // ignore comments
        while (ignore_comments && current == '/')
        {
            if (!scan_comment())
            {
                return token_type::parse_error;
            }

            // skip following whitespace
            skip_whitespace();
        }

        switch (current)
        {
            // structural characters
            case '[':
                return token_type::begin_array;
            case ']':
                return token_type::end_array;
            case '{':
                return token_type::begin_object;
            case '}':
                return token_type::end_object;
            case ':':
                return token_type::name_separator;
            case ',':
                return token_type::value_separator;

            // literals
            case 't':
            {
                std::array<char_type, 4> true_literal = {{static_cast<char_type>('t'), static_cast<char_type>('r'), static_cast<char_type>('u'), static_cast<char_type>('e')}};
                return scan_literal(true_literal.data(), true_literal.size(), token_type::literal_true);
            }
            case 'f':
            {
                std::array<char_type, 5> false_literal = {{static_cast<char_type>('f'), static_cast<char_type>('a'), static_cast<char_type>('l'), static_cast<char_type>('s'), static_cast<char_type>('e')}};
                return scan_literal(false_literal.data(), false_literal.size(), token_type::literal_false);
            }
            case 'n':
            {
                std::array<char_type, 4> null_literal = {{static_cast<char_type>('n'), static_cast<char_type>('u'), static_cast<char_type>('l'), static_cast<char_type>('l')}};
                return scan_literal(null_literal.data(), null_literal.size(), token_type::literal_null);
            }

            // string
            case '\"':
                return scan_string();

            // number
            case '-':
            case '0':
            case '1':
            case '2':
            case '3':
            case '4':
            case '5':
            case '6':
            case '7':
            case '8':
            case '9':
                return scan_number();

            // end of input (the null byte is needed when parsing from
            // string literals)
            case '\0':
            case std::char_traits<char_type>::eof():
                return token_type::end_of_input;

            // error
            default:
                error_message = "invalid literal";
                return token_type::parse_error;
        }
    }

  private:
    /// input adapter
    InputAdapterType ia;

    /// whether comments should be ignored (true) or signaled as errors (false)
    const bool ignore_comments = false;

    /// the current character
    char_int_type current = std::char_traits<char_type>::eof();

    /// whether the next get() call should just return current
    bool next_unget = false;

    /// the start position of the current token
    position_t position {};

    /// raw input token string (for error messages)
    std::vector<char_type> token_string {};

    /// buffer for variable-length tokens (numbers, strings)
    string_t token_buffer {};

    /// a description of occurred lexer errors
    const char* error_message = "";

    // number values
    number_integer_t value_integer = 0;
    number_unsigned_t value_unsigned = 0;
    number_float_t value_float = 0;

    /// the decimal point
    const char_int_type decimal_point_char = '.';
};

}  // namespace detail
NLOHMANN_JSON_NAMESPACE_END

// #include <nlohmann/detail/macro_scope.hpp>

// #include <nlohmann/detail/meta/is_sax.hpp>
//     __ _____ _____ _____
//  __|  |   __|     |   | |  JSON for Modern C++
// |  |  |__   |  |  | | | |  version 3.11.2
// |_____|_____|_____|_|___|  https://github.com/nlohmann/json
//
// SPDX-FileCopyrightText: 2013-2022 Niels Lohmann <https://nlohmann.me>
// SPDX-License-Identifier: MIT



#include <cstdint> // size_t
#include <utility> // declval
#include <string> // string

// #include <nlohmann/detail/abi_macros.hpp>

// #include <nlohmann/detail/meta/detected.hpp>

// #include <nlohmann/detail/meta/type_traits.hpp>


NLOHMANN_JSON_NAMESPACE_BEGIN
namespace detail
{

template<typename T>
using null_function_t = decltype(std::declval<T&>().null());

template<typename T>
using boolean_function_t =
    decltype(std::declval<T&>().boolean(std::declval<bool>()));

template<typename T, typename Integer>
using number_integer_function_t =
    decltype(std::declval<T&>().number_integer(std::declval<Integer>()));

template<typename T, typename Unsigned>
using number_unsigned_function_t =
    decltype(std::declval<T&>().number_unsigned(std::declval<Unsigned>()));

template<typename T, typename Float, typename String>
using number_float_function_t = decltype(std::declval<T&>().number_float(
                                    std::declval<Float>(), std::declval<const String&>()));

template<typename T, typename String>
using string_function_t =
    decltype(std::declval<T&>().string(std::declval<String&>()));

template<typename T, typename Binary>
using binary_function_t =
    decltype(std::declval<T&>().binary(std::declval<Binary&>()));

template<typename T>
using start_object_function_t =
    decltype(std::declval<T&>().start_object(std::declval<std::size_t>()));

template<typename T, typename String>
using key_function_t =
    decltype(std::declval<T&>().key(std::declval<String&>()));

template<typename T>
using end_object_function_t = decltype(std::declval<T&>().end_object());

template<typename T>
using start_array_function_t =
    decltype(std::declval<T&>().start_array(std::declval<std::size_t>()));

template<typename T>
using end_array_function_t = decltype(std::declval<T&>().end_array());

template<typename T, typename Exception>
using parse_error_function_t = decltype(std::declval<T&>().parse_error(
        std::declval<std::size_t>(), std::declval<const std::string&>(),
        std::declval<const Exception&>()));

template<typename SAX, typename BasicJsonType>
struct is_sax
{
  private:
    static_assert(is_basic_json<BasicJsonType>::value,
                  "BasicJsonType must be of type basic_json<...>");

    using number_integer_t = typename BasicJsonType::number_integer_t;
    using number_unsigned_t = typename BasicJsonType::number_unsigned_t;
    using number_float_t = typename BasicJsonType::number_float_t;
    using string_t = typename BasicJsonType::string_t;
    using binary_t = typename BasicJsonType::binary_t;
    using exception_t = typename BasicJsonType::exception;

  public:
    static constexpr bool value =
        is_detected_exact<bool, null_function_t, SAX>::value &&
        is_detected_exact<bool, boolean_function_t, SAX>::value &&
        is_detected_exact<bool, number_integer_function_t, SAX, number_integer_t>::value &&
        is_detected_exact<bool, number_unsigned_function_t, SAX, number_unsigned_t>::value &&
        is_detected_exact<bool, number_float_function_t, SAX, number_float_t, string_t>::value &&
        is_detected_exact<bool, string_function_t, SAX, string_t>::value &&
        is_detected_exact<bool, binary_function_t, SAX, binary_t>::value &&
        is_detected_exact<bool, start_object_function_t, SAX>::value &&
        is_detected_exact<bool, key_function_t, SAX, string_t>::value &&
        is_detected_exact<bool, end_object_function_t, SAX>::value &&
        is_detected_exact<bool, start_array_function_t, SAX>::value &&
        is_detected_exact<bool, end_array_function_t, SAX>::value &&
        is_detected_exact<bool, parse_error_function_t, SAX, exception_t>::value;
};

template<typename SAX, typename BasicJsonType>
struct is_sax_static_asserts
{
  private:
    static_assert(is_basic_json<BasicJsonType>::value,
                  "BasicJsonType must be of type basic_json<...>");

    using number_integer_t = typename BasicJsonType::number_integer_t;
    using number_unsigned_t = typename BasicJsonType::number_unsigned_t;
    using number_float_t = typename BasicJsonType::number_float_t;
    using string_t = typename BasicJsonType::string_t;
    using binary_t = typename BasicJsonType::binary_t;
    using exception_t = typename BasicJsonType::exception;

  public:
    static_assert(is_detected_exact<bool, null_function_t, SAX>::value,
                  "Missing/invalid function: bool null()");
    static_assert(is_detected_exact<bool, boolean_function_t, SAX>::value,
                  "Missing/invalid function: bool boolean(bool)");
    static_assert(is_detected_exact<bool, boolean_function_t, SAX>::value,
                  "Missing/invalid function: bool boolean(bool)");
    static_assert(
        is_detected_exact<bool, number_integer_function_t, SAX,
        number_integer_t>::value,
        "Missing/invalid function: bool number_integer(number_integer_t)");
    static_assert(
        is_detected_exact<bool, number_unsigned_function_t, SAX,
        number_unsigned_t>::value,
        "Missing/invalid function: bool number_unsigned(number_unsigned_t)");
    static_assert(is_detected_exact<bool, number_float_function_t, SAX,
                  number_float_t, string_t>::value,
                  "Missing/invalid function: bool number_float(number_float_t, const string_t&)");
    static_assert(
        is_detected_exact<bool, string_function_t, SAX, string_t>::value,
        "Missing/invalid function: bool string(string_t&)");
    static_assert(
        is_detected_exact<bool, binary_function_t, SAX, binary_t>::value,
        "Missing/invalid function: bool binary(binary_t&)");
    static_assert(is_detected_exact<bool, start_object_function_t, SAX>::value,
                  "Missing/invalid function: bool start_object(std::size_t)");
    static_assert(is_detected_exact<bool, key_function_t, SAX, string_t>::value,
                  "Missing/invalid function: bool key(string_t&)");
    static_assert(is_detected_exact<bool, end_object_function_t, SAX>::value,
                  "Missing/invalid function: bool end_object()");
    static_assert(is_detected_exact<bool, start_array_function_t, SAX>::value,
                  "Missing/invalid function: bool start_array(std::size_t)");
    static_assert(is_detected_exact<bool, end_array_function_t, SAX>::value,
                  "Missing/invalid function: bool end_array()");
    static_assert(
        is_detected_exact<bool, parse_error_function_t, SAX, exception_t>::value,
        "Missing/invalid function: bool parse_error(std::size_t, const "
        "std::string&, const exception&)");
};

}  // namespace detail
NLOHMANN_JSON_NAMESPACE_END

// #include <nlohmann/detail/meta/type_traits.hpp>

// #include <nlohmann/detail/string_concat.hpp>

// #include <nlohmann/detail/value_t.hpp>


NLOHMANN_JSON_NAMESPACE_BEGIN
namespace detail
{

/// how to treat CBOR tags
enum class cbor_tag_handler_t
{
    error,   ///< throw a parse_error exception in case of a tag
    ignore,  ///< ignore tags
    store    ///< store tags as binary type
};

/*!
@brief determine system byte order

@return true if and only if system's byte order is little endian

@note from https://stackoverflow.com/a/1001328/266378
*/
static inline bool little_endianness(int num = 1) noexcept
{
    return *reinterpret_cast<char*>(&num) == 1;
}


///////////////////
// binary reader //
///////////////////

/*!
@brief deserialization of CBOR, MessagePack, and UBJSON values
*/
template<typename BasicJsonType, typename InputAdapterType, typename SAX = json_sax_dom_parser<BasicJsonType>>
class binary_reader
{
    using number_integer_t = typename BasicJsonType::number_integer_t;
    using number_unsigned_t = typename BasicJsonType::number_unsigned_t;
    using number_float_t = typename BasicJsonType::number_float_t;
    using string_t = typename BasicJsonType::string_t;
    using binary_t = typename BasicJsonType::binary_t;
    using json_sax_t = SAX;
    using char_type = typename InputAdapterType::char_type;
    using char_int_type = typename std::char_traits<char_type>::int_type;

  public:
    /*!
    @brief create a binary reader

    @param[in] adapter  input adapter to read from
    */
    explicit binary_reader(InputAdapterType&& adapter, const input_format_t format = input_format_t::json) noexcept : ia(std::move(adapter)), input_format(format)
    {
        (void)detail::is_sax_static_asserts<SAX, BasicJsonType> {};
    }

    // make class move-only
    binary_reader(const binary_reader&) = delete;
    binary_reader(binary_reader&&) = default; // NOLINT(hicpp-noexcept-move,performance-noexcept-move-constructor)
    binary_reader& operator=(const binary_reader&) = delete;
    binary_reader& operator=(binary_reader&&) = default; // NOLINT(hicpp-noexcept-move,performance-noexcept-move-constructor)
    ~binary_reader() = default;

    /*!
    @param[in] format  the binary format to parse
    @param[in] sax_    a SAX event processor
    @param[in] strict  whether to expect the input to be consumed completed
    @param[in] tag_handler  how to treat CBOR tags

    @return whether parsing was successful
    */
    JSON_HEDLEY_NON_NULL(3)
    bool sax_parse(const input_format_t format,
                   json_sax_t* sax_,
                   const bool strict = true,
                   const cbor_tag_handler_t tag_handler = cbor_tag_handler_t::error)
    {
        sax = sax_;
        bool result = false;

        switch (format)
        {
            case input_format_t::bson:
                result = parse_bson_internal();
                break;

            case input_format_t::cbor:
                result = parse_cbor_internal(true, tag_handler);
                break;

            case input_format_t::msgpack:
                result = parse_msgpack_internal();
                break;

            case input_format_t::ubjson:
            case input_format_t::bjdata:
                result = parse_ubjson_internal();
                break;

            case input_format_t::json: // LCOV_EXCL_LINE
            default:            // LCOV_EXCL_LINE
                JSON_ASSERT(false); // NOLINT(cert-dcl03-c,hicpp-static-assert,misc-static-assert) LCOV_EXCL_LINE
        }

        // strict mode: next byte must be EOF
        if (result && strict)
        {
            if (input_format == input_format_t::ubjson || input_format == input_format_t::bjdata)
            {
                get_ignore_noop();
            }
            else
            {
                get();
            }

            if (JSON_HEDLEY_UNLIKELY(current != std::char_traits<char_type>::eof()))
            {
                return sax->parse_error(chars_read, get_token_string(), parse_error::create(110, chars_read,
                                        exception_message(input_format, concat("expected end of input; last byte: 0x", get_token_string()), "value"), nullptr));
            }
        }

        return result;
    }

  private:
    //////////
    // BSON //
    //////////

    /*!
    @brief Reads in a BSON-object and passes it to the SAX-parser.
    @return whether a valid BSON-value was passed to the SAX parser
    */
    bool parse_bson_internal()
    {
        std::int32_t document_size{};
        get_number<std::int32_t, true>(input_format_t::bson, document_size);

        if (JSON_HEDLEY_UNLIKELY(!sax->start_object(static_cast<std::size_t>(-1))))
        {
            return false;
        }

        if (JSON_HEDLEY_UNLIKELY(!parse_bson_element_list(/*is_array*/false)))
        {
            return false;
        }

        return sax->end_object();
    }

    /*!
    @brief Parses a C-style string from the BSON input.
    @param[in,out] result  A reference to the string variable where the read
                            string is to be stored.
    @return `true` if the \x00-byte indicating the end of the string was
             encountered before the EOF; false` indicates an unexpected EOF.
    */
    bool get_bson_cstr(string_t& result)
    {
        auto out = std::back_inserter(result);
        while (true)
        {
            get();
            if (JSON_HEDLEY_UNLIKELY(!unexpect_eof(input_format_t::bson, "cstring")))
            {
                return false;
            }
            if (current == 0x00)
            {
                return true;
            }
            *out++ = static_cast<typename string_t::value_type>(current);
        }
    }

    /*!
    @brief Parses a zero-terminated string of length @a len from the BSON
           input.
    @param[in] len  The length (including the zero-byte at the end) of the
                    string to be read.
    @param[in,out] result  A reference to the string variable where the read
                            string is to be stored.
    @tparam NumberType The type of the length @a len
    @pre len >= 1
    @return `true` if the string was successfully parsed
    */
    template<typename NumberType>
    bool get_bson_string(const NumberType len, string_t& result)
    {
        if (JSON_HEDLEY_UNLIKELY(len < 1))
        {
            auto last_token = get_token_string();
            return sax->parse_error(chars_read, last_token, parse_error::create(112, chars_read,
                                    exception_message(input_format_t::bson, concat("string length must be at least 1, is ", std::to_string(len)), "string"), nullptr));
        }

        return get_string(input_format_t::bson, len - static_cast<NumberType>(1), result) && get() != std::char_traits<char_type>::eof();
    }

    /*!
    @brief Parses a byte array input of length @a len from the BSON input.
    @param[in] len  The length of the byte array to be read.
    @param[in,out] result  A reference to the binary variable where the read
                            array is to be stored.
    @tparam NumberType The type of the length @a len
    @pre len >= 0
    @return `true` if the byte array was successfully parsed
    */
    template<typename NumberType>
    bool get_bson_binary(const NumberType len, binary_t& result)
    {
        if (JSON_HEDLEY_UNLIKELY(len < 0))
        {
            auto last_token = get_token_string();
            return sax->parse_error(chars_read, last_token, parse_error::create(112, chars_read,
                                    exception_message(input_format_t::bson, concat("byte array length cannot be negative, is ", std::to_string(len)), "binary"), nullptr));
        }

        // All BSON binary values have a subtype
        std::uint8_t subtype{};
        get_number<std::uint8_t>(input_format_t::bson, subtype);
        result.set_subtype(subtype);

        return get_binary(input_format_t::bson, len, result);
    }

    /*!
    @brief Read a BSON document element of the given @a element_type.
    @param[in] element_type The BSON element type, c.f. http://bsonspec.org/spec.html
    @param[in] element_type_parse_position The position in the input stream,
               where the `element_type` was read.
    @warning Not all BSON element types are supported yet. An unsupported
             @a element_type will give rise to a parse_error.114:
             Unsupported BSON record type 0x...
    @return whether a valid BSON-object/array was passed to the SAX parser
    */
    bool parse_bson_element_internal(const char_int_type element_type,
                                     const std::size_t element_type_parse_position)
    {
        switch (element_type)
        {
            case 0x01: // double
            {
                double number{};
                return get_number<double, true>(input_format_t::bson, number) && sax->number_float(static_cast<number_float_t>(number), "");
            }

            case 0x02: // string
            {
                std::int32_t len{};
                string_t value;
                return get_number<std::int32_t, true>(input_format_t::bson, len) && get_bson_string(len, value) && sax->string(value);
            }

            case 0x03: // object
            {
                return parse_bson_internal();
            }

            case 0x04: // array
            {
                return parse_bson_array();
            }

            case 0x05: // binary
            {
                std::int32_t len{};
                binary_t value;
                return get_number<std::int32_t, true>(input_format_t::bson, len) && get_bson_binary(len, value) && sax->binary(value);
            }

            case 0x08: // boolean
            {
                return sax->boolean(get() != 0);
            }

            case 0x0A: // null
            {
                return sax->null();
            }

            case 0x10: // int32
            {
                std::int32_t value{};
                return get_number<std::int32_t, true>(input_format_t::bson, value) && sax->number_integer(value);
            }

            case 0x12: // int64
            {
                std::int64_t value{};
                return get_number<std::int64_t, true>(input_format_t::bson, value) && sax->number_integer(value);
            }

            default: // anything else not supported (yet)
            {
                std::array<char, 3> cr{{}};
                static_cast<void>((std::snprintf)(cr.data(), cr.size(), "%.2hhX", static_cast<unsigned char>(element_type))); // NOLINT(cppcoreguidelines-pro-type-vararg,hicpp-vararg)
                std::string cr_str{cr.data()};
                return sax->parse_error(element_type_parse_position, cr_str,
                                        parse_error::create(114, element_type_parse_position, concat("Unsupported BSON record type 0x", cr_str), nullptr));
            }
        }
    }

    /*!
    @brief Read a BSON element list (as specified in the BSON-spec)

    The same binary layout is used for objects and arrays, hence it must be
    indicated with the argument @a is_array which one is expected
    (true --> array, false --> object).

    @param[in] is_array Determines if the element list being read is to be
                        treated as an object (@a is_array == false), or as an
                        array (@a is_array == true).
    @return whether a valid BSON-object/array was passed to the SAX parser
    */
    bool parse_bson_element_list(const bool is_array)
    {
        string_t key;

        while (auto element_type = get())
        {
            if (JSON_HEDLEY_UNLIKELY(!unexpect_eof(input_format_t::bson, "element list")))
            {
                return false;
            }

            const std::size_t element_type_parse_position = chars_read;
            if (JSON_HEDLEY_UNLIKELY(!get_bson_cstr(key)))
            {
                return false;
            }

            if (!is_array && !sax->key(key))
            {
                return false;
            }

            if (JSON_HEDLEY_UNLIKELY(!parse_bson_element_internal(element_type, element_type_parse_position)))
            {
                return false;
            }

            // get_bson_cstr only appends
            key.clear();
        }

        return true;
    }

    /*!
    @brief Reads an array from the BSON input and passes it to the SAX-parser.
    @return whether a valid BSON-array was passed to the SAX parser
    */
    bool parse_bson_array()
    {
        std::int32_t document_size{};
        get_number<std::int32_t, true>(input_format_t::bson, document_size);

        if (JSON_HEDLEY_UNLIKELY(!sax->start_array(static_cast<std::size_t>(-1))))
        {
            return false;
        }

        if (JSON_HEDLEY_UNLIKELY(!parse_bson_element_list(/*is_array*/true)))
        {
            return false;
        }

        return sax->end_array();
    }

    //////////
    // CBOR //
    //////////

    /*!
    @param[in] get_char  whether a new character should be retrieved from the
                         input (true) or whether the last read character should
                         be considered instead (false)
    @param[in] tag_handler how CBOR tags should be treated

    @return whether a valid CBOR value was passed to the SAX parser
    */
    bool parse_cbor_internal(const bool get_char,
                             const cbor_tag_handler_t tag_handler)
    {
        switch (get_char ? get() : current)
        {
            // EOF
            case std::char_traits<char_type>::eof():
                return unexpect_eof(input_format_t::cbor, "value");

            // Integer 0x00..0x17 (0..23)
            case 0x00:
            case 0x01:
            case 0x02:
            case 0x03:
            case 0x04:
            case 0x05:
            case 0x06:
            case 0x07:
            case 0x08:
            case 0x09:
            case 0x0A:
            case 0x0B:
            case 0x0C:
            case 0x0D:
            case 0x0E:
            case 0x0F:
            case 0x10:
            case 0x11:
            case 0x12:
            case 0x13:
            case 0x14:
            case 0x15:
            case 0x16:
            case 0x17:
                return sax->number_unsigned(static_cast<number_unsigned_t>(current));

            case 0x18: // Unsigned integer (one-byte uint8_t follows)
            {
                std::uint8_t number{};
                return get_number(input_format_t::cbor, number) && sax->number_unsigned(number);
            }

            case 0x19: // Unsigned integer (two-byte uint16_t follows)
            {
                std::uint16_t number{};
                return get_number(input_format_t::cbor, number) && sax->number_unsigned(number);
            }

            case 0x1A: // Unsigned integer (four-byte uint32_t follows)
            {
                std::uint32_t number{};
                return get_number(input_format_t::cbor, number) && sax->number_unsigned(number);
            }

            case 0x1B: // Unsigned integer (eight-byte uint64_t follows)
            {
                std::uint64_t number{};
                return get_number(input_format_t::cbor, number) && sax->number_unsigned(number);
            }

            // Negative integer -1-0x00..-1-0x17 (-1..-24)
            case 0x20:
            case 0x21:
            case 0x22:
            case 0x23:
            case 0x24:
            case 0x25:
            case 0x26:
            case 0x27:
            case 0x28:
            case 0x29:
            case 0x2A:
            case 0x2B:
            case 0x2C:
            case 0x2D:
            case 0x2E:
            case 0x2F:
            case 0x30:
            case 0x31:
            case 0x32:
            case 0x33:
            case 0x34:
            case 0x35:
            case 0x36:
            case 0x37:
                return sax->number_integer(static_cast<std::int8_t>(0x20 - 1 - current));

            case 0x38: // Negative integer (one-byte uint8_t follows)
            {
                std::uint8_t number{};
                return get_number(input_format_t::cbor, number) && sax->number_integer(static_cast<number_integer_t>(-1) - number);
            }

            case 0x39: // Negative integer -1-n (two-byte uint16_t follows)
            {
                std::uint16_t number{};
                return get_number(input_format_t::cbor, number) && sax->number_integer(static_cast<number_integer_t>(-1) - number);
            }

            case 0x3A: // Negative integer -1-n (four-byte uint32_t follows)
            {
                std::uint32_t number{};
                return get_number(input_format_t::cbor, number) && sax->number_integer(static_cast<number_integer_t>(-1) - number);
            }

            case 0x3B: // Negative integer -1-n (eight-byte uint64_t follows)
            {
                std::uint64_t number{};
                return get_number(input_format_t::cbor, number) && sax->number_integer(static_cast<number_integer_t>(-1)
                        - static_cast<number_integer_t>(number));
            }

            // Binary data (0x00..0x17 bytes follow)
            case 0x40:
            case 0x41:
            case 0x42:
            case 0x43:
            case 0x44:
            case 0x45:
            case 0x46:
            case 0x47:
            case 0x48:
            case 0x49:
            case 0x4A:
            case 0x4B:
            case 0x4C:
            case 0x4D:
            case 0x4E:
            case 0x4F:
            case 0x50:
            case 0x51:
            case 0x52:
            case 0x53:
            case 0x54:
            case 0x55:
            case 0x56:
            case 0x57:
            case 0x58: // Binary data (one-byte uint8_t for n follows)
            case 0x59: // Binary data (two-byte uint16_t for n follow)
            case 0x5A: // Binary data (four-byte uint32_t for n follow)
            case 0x5B: // Binary data (eight-byte uint64_t for n follow)
            case 0x5F: // Binary data (indefinite length)
            {
                binary_t b;
                return get_cbor_binary(b) && sax->binary(b);
            }

            // UTF-8 string (0x00..0x17 bytes follow)
            case 0x60:
            case 0x61:
            case 0x62:
            case 0x63:
            case 0x64:
            case 0x65:
            case 0x66:
            case 0x67:
            case 0x68:
            case 0x69:
            case 0x6A:
            case 0x6B:
            case 0x6C:
            case 0x6D:
            case 0x6E:
            case 0x6F:
            case 0x70:
            case 0x71:
            case 0x72:
            case 0x73:
            case 0x74:
            case 0x75:
            case 0x76:
            case 0x77:
            case 0x78: // UTF-8 string (one-byte uint8_t for n follows)
            case 0x79: // UTF-8 string (two-byte uint16_t for n follow)
            case 0x7A: // UTF-8 string (four-byte uint32_t for n follow)
            case 0x7B: // UTF-8 string (eight-byte uint64_t for n follow)
            case 0x7F: // UTF-8 string (indefinite length)
            {
                string_t s;
                return get_cbor_string(s) && sax->string(s);
            }

            // array (0x00..0x17 data items follow)
            case 0x80:
            case 0x81:
            case 0x82:
            case 0x83:
            case 0x84:
            case 0x85:
            case 0x86:
            case 0x87:
            case 0x88:
            case 0x89:
            case 0x8A:
            case 0x8B:
            case 0x8C:
            case 0x8D:
            case 0x8E:
            case 0x8F:
            case 0x90:
            case 0x91:
            case 0x92:
            case 0x93:
            case 0x94:
            case 0x95:
            case 0x96:
            case 0x97:
                return get_cbor_array(
                           conditional_static_cast<std::size_t>(static_cast<unsigned int>(current) & 0x1Fu), tag_handler);

            case 0x98: // array (one-byte uint8_t for n follows)
            {
                std::uint8_t len{};
                return get_number(input_format_t::cbor, len) && get_cbor_array(static_cast<std::size_t>(len), tag_handler);
            }

            case 0x99: // array (two-byte uint16_t for n follow)
            {
                std::uint16_t len{};
                return get_number(input_format_t::cbor, len) && get_cbor_array(static_cast<std::size_t>(len), tag_handler);
            }

            case 0x9A: // array (four-byte uint32_t for n follow)
            {
                std::uint32_t len{};
                return get_number(input_format_t::cbor, len) && get_cbor_array(conditional_static_cast<std::size_t>(len), tag_handler);
            }

            case 0x9B: // array (eight-byte uint64_t for n follow)
            {
                std::uint64_t len{};
                return get_number(input_format_t::cbor, len) && get_cbor_array(conditional_static_cast<std::size_t>(len), tag_handler);
            }

            case 0x9F: // array (indefinite length)
                return get_cbor_array(static_cast<std::size_t>(-1), tag_handler);

            // map (0x00..0x17 pairs of data items follow)
            case 0xA0:
            case 0xA1:
            case 0xA2:
            case 0xA3:
            case 0xA4:
            case 0xA5:
            case 0xA6:
            case 0xA7:
            case 0xA8:
            case 0xA9:
            case 0xAA:
            case 0xAB:
            case 0xAC:
            case 0xAD:
            case 0xAE:
            case 0xAF:
            case 0xB0:
            case 0xB1:
            case 0xB2:
            case 0xB3:
            case 0xB4:
            case 0xB5:
            case 0xB6:
            case 0xB7:
                return get_cbor_object(conditional_static_cast<std::size_t>(static_cast<unsigned int>(current) & 0x1Fu), tag_handler);

            case 0xB8: // map (one-byte uint8_t for n follows)
            {
                std::uint8_t len{};
                return get_number(input_format_t::cbor, len) && get_cbor_object(static_cast<std::size_t>(len), tag_handler);
            }

            case 0xB9: // map (two-byte uint16_t for n follow)
            {
                std::uint16_t len{};
                return get_number(input_format_t::cbor, len) && get_cbor_object(static_cast<std::size_t>(len), tag_handler);
            }

            case 0xBA: // map (four-byte uint32_t for n follow)
            {
                std::uint32_t len{};
                return get_number(input_format_t::cbor, len) && get_cbor_object(conditional_static_cast<std::size_t>(len), tag_handler);
            }

            case 0xBB: // map (eight-byte uint64_t for n follow)
            {
                std::uint64_t len{};
                return get_number(input_format_t::cbor, len) && get_cbor_object(conditional_static_cast<std::size_t>(len), tag_handler);
            }

            case 0xBF: // map (indefinite length)
                return get_cbor_object(static_cast<std::size_t>(-1), tag_handler);

            case 0xC6: // tagged item
            case 0xC7:
            case 0xC8:
            case 0xC9:
            case 0xCA:
            case 0xCB:
            case 0xCC:
            case 0xCD:
            case 0xCE:
            case 0xCF:
            case 0xD0:
            case 0xD1:
            case 0xD2:
            case 0xD3:
            case 0xD4:
            case 0xD8: // tagged item (1 bytes follow)
            case 0xD9: // tagged item (2 bytes follow)
            case 0xDA: // tagged item (4 bytes follow)
            case 0xDB: // tagged item (8 bytes follow)
            {
                switch (tag_handler)
                {
                    case cbor_tag_handler_t::error:
                    {
                        auto last_token = get_token_string();
                        return sax->parse_error(chars_read, last_token, parse_error::create(112, chars_read,
                                                exception_message(input_format_t::cbor, concat("invalid byte: 0x", last_token), "value"), nullptr));
                    }

                    case cbor_tag_handler_t::ignore:
                    {
                        // ignore binary subtype
                        switch (current)
                        {
                            case 0xD8:
                            {
                                std::uint8_t subtype_to_ignore{};
                                get_number(input_format_t::cbor, subtype_to_ignore);
                                break;
                            }
                            case 0xD9:
                            {
                                std::uint16_t subtype_to_ignore{};
                                get_number(input_format_t::cbor, subtype_to_ignore);
                                break;
                            }
                            case 0xDA:
                            {
                                std::uint32_t subtype_to_ignore{};
                                get_number(input_format_t::cbor, subtype_to_ignore);
                                break;
                            }
                            case 0xDB:
                            {
                                std::uint64_t subtype_to_ignore{};
                                get_number(input_format_t::cbor, subtype_to_ignore);
                                break;
                            }
                            default:
                                break;
                        }
                        return parse_cbor_internal(true, tag_handler);
                    }

                    case cbor_tag_handler_t::store:
                    {
                        binary_t b;
                        // use binary subtype and store in binary container
                        switch (current)
                        {
                            case 0xD8:
                            {
                                std::uint8_t subtype{};
                                get_number(input_format_t::cbor, subtype);
                                b.set_subtype(detail::conditional_static_cast<typename binary_t::subtype_type>(subtype));
                                break;
                            }
                            case 0xD9:
                            {
                                std::uint16_t subtype{};
                                get_number(input_format_t::cbor, subtype);
                                b.set_subtype(detail::conditional_static_cast<typename binary_t::subtype_type>(subtype));
                                break;
                            }
                            case 0xDA:
                            {
                                std::uint32_t subtype{};
                                get_number(input_format_t::cbor, subtype);
                                b.set_subtype(detail::conditional_static_cast<typename binary_t::subtype_type>(subtype));
                                break;
                            }
                            case 0xDB:
                            {
                                std::uint64_t subtype{};
                                get_number(input_format_t::cbor, subtype);
                                b.set_subtype(detail::conditional_static_cast<typename binary_t::subtype_type>(subtype));
                                break;
                            }
                            default:
                                return parse_cbor_internal(true, tag_handler);
                        }
                        get();
                        return get_cbor_binary(b) && sax->binary(b);
                    }

                    default:                 // LCOV_EXCL_LINE
                        JSON_ASSERT(false); // NOLINT(cert-dcl03-c,hicpp-static-assert,misc-static-assert) LCOV_EXCL_LINE
                        return false;        // LCOV_EXCL_LINE
                }
            }

            case 0xF4: // false
                return sax->boolean(false);

            case 0xF5: // true
                return sax->boolean(true);

            case 0xF6: // null
                return sax->null();

            case 0xF9: // Half-Precision Float (two-byte IEEE 754)
            {
                const auto byte1_raw = get();
                if (JSON_HEDLEY_UNLIKELY(!unexpect_eof(input_format_t::cbor, "number")))
                {
                    return false;
                }
                const auto byte2_raw = get();
                if (JSON_HEDLEY_UNLIKELY(!unexpect_eof(input_format_t::cbor, "number")))
                {
                    return false;
                }

                const auto byte1 = static_cast<unsigned char>(byte1_raw);
                const auto byte2 = static_cast<unsigned char>(byte2_raw);

                // code from RFC 7049, Appendix D, Figure 3:
                // As half-precision floating-point numbers were only added
                // to IEEE 754 in 2008, today's programming platforms often
                // still only have limited support for them. It is very
                // easy to include at least decoding support for them even
                // without such support. An example of a small decoder for
                // half-precision floating-point numbers in the C language
                // is shown in Fig. 3.
                const auto half = static_cast<unsigned int>((byte1 << 8u) + byte2);
                const double val = [&half]
                {
                    const int exp = (half >> 10u) & 0x1Fu;
                    const unsigned int mant = half & 0x3FFu;
                    JSON_ASSERT(0 <= exp&& exp <= 32);
                    JSON_ASSERT(mant <= 1024);
                    switch (exp)
                    {
                        case 0:
                            return std::ldexp(mant, -24);
                        case 31:
                            return (mant == 0)
                            ? std::numeric_limits<double>::infinity()
                            : std::numeric_limits<double>::quiet_NaN();
                        default:
                            return std::ldexp(mant + 1024, exp - 25);
                    }
                }();
                return sax->number_float((half & 0x8000u) != 0
                                         ? static_cast<number_float_t>(-val)
                                         : static_cast<number_float_t>(val), "");
            }

            case 0xFA: // Single-Precision Float (four-byte IEEE 754)
            {
                float number{};
                return get_number(input_format_t::cbor, number) && sax->number_float(static_cast<number_float_t>(number), "");
            }

            case 0xFB: // Double-Precision Float (eight-byte IEEE 754)
            {
                double number{};
                return get_number(input_format_t::cbor, number) && sax->number_float(static_cast<number_float_t>(number), "");
            }

            default: // anything else (0xFF is handled inside the other types)
            {
                auto last_token = get_token_string();
                return sax->parse_error(chars_read, last_token, parse_error::create(112, chars_read,
                                        exception_message(input_format_t::cbor, concat("invalid byte: 0x", last_token), "value"), nullptr));
            }
        }
    }

    /*!
    @brief reads a CBOR string

    This function first reads starting bytes to determine the expected
    string length and then copies this number of bytes into a string.
    Additionally, CBOR's strings with indefinite lengths are supported.

    @param[out] result  created string

    @return whether string creation completed
    */
    bool get_cbor_string(string_t& result)
    {
        if (JSON_HEDLEY_UNLIKELY(!unexpect_eof(input_format_t::cbor, "string")))
        {
            return false;
        }

        switch (current)
        {
            // UTF-8 string (0x00..0x17 bytes follow)
            case 0x60:
            case 0x61:
            case 0x62:
            case 0x63:
            case 0x64:
            case 0x65:
            case 0x66:
            case 0x67:
            case 0x68:
            case 0x69:
            case 0x6A:
            case 0x6B:
            case 0x6C:
            case 0x6D:
            case 0x6E:
            case 0x6F:
            case 0x70:
            case 0x71:
            case 0x72:
            case 0x73:
            case 0x74:
            case 0x75:
            case 0x76:
            case 0x77:
            {
                return get_string(input_format_t::cbor, static_cast<unsigned int>(current) & 0x1Fu, result);
            }

            case 0x78: // UTF-8 string (one-byte uint8_t for n follows)
            {
                std::uint8_t len{};
                return get_number(input_format_t::cbor, len) && get_string(input_format_t::cbor, len, result);
            }

            case 0x79: // UTF-8 string (two-byte uint16_t for n follow)
            {
                std::uint16_t len{};
                return get_number(input_format_t::cbor, len) && get_string(input_format_t::cbor, len, result);
            }

            case 0x7A: // UTF-8 string (four-byte uint32_t for n follow)
            {
                std::uint32_t len{};
                return get_number(input_format_t::cbor, len) && get_string(input_format_t::cbor, len, result);
            }

            case 0x7B: // UTF-8 string (eight-byte uint64_t for n follow)
            {
                std::uint64_t len{};
                return get_number(input_format_t::cbor, len) && get_string(input_format_t::cbor, len, result);
            }

            case 0x7F: // UTF-8 string (indefinite length)
            {
                while (get() != 0xFF)
                {
                    string_t chunk;
                    if (!get_cbor_string(chunk))
                    {
                        return false;
                    }
                    result.append(chunk);
                }
                return true;
            }

            default:
            {
                auto last_token = get_token_string();
                return sax->parse_error(chars_read, last_token, parse_error::create(113, chars_read,
                                        exception_message(input_format_t::cbor, concat("expected length specification (0x60-0x7B) or indefinite string type (0x7F); last byte: 0x", last_token), "string"), nullptr));
            }
        }
    }

    /*!
    @brief reads a CBOR byte array

    This function first reads starting bytes to determine the expected
    byte array length and then copies this number of bytes into the byte array.
    Additionally, CBOR's byte arrays with indefinite lengths are supported.

    @param[out] result  created byte array

    @return whether byte array creation completed
    */
    bool get_cbor_binary(binary_t& result)
    {
        if (JSON_HEDLEY_UNLIKELY(!unexpect_eof(input_format_t::cbor, "binary")))
        {
            return false;
        }

        switch (current)
        {
            // Binary data (0x00..0x17 bytes follow)
            case 0x40:
            case 0x41:
            case 0x42:
            case 0x43:
            case 0x44:
            case 0x45:
            case 0x46:
            case 0x47:
            case 0x48:
            case 0x49:
            case 0x4A:
            case 0x4B:
            case 0x4C:
            case 0x4D:
            case 0x4E:
            case 0x4F:
            case 0x50:
            case 0x51:
            case 0x52:
            case 0x53:
            case 0x54:
            case 0x55:
            case 0x56:
            case 0x57:
            {
                return get_binary(input_format_t::cbor, static_cast<unsigned int>(current) & 0x1Fu, result);
            }

            case 0x58: // Binary data (one-byte uint8_t for n follows)
            {
                std::uint8_t len{};
                return get_number(input_format_t::cbor, len) &&
                       get_binary(input_format_t::cbor, len, result);
            }

            case 0x59: // Binary data (two-byte uint16_t for n follow)
            {
                std::uint16_t len{};
                return get_number(input_format_t::cbor, len) &&
                       get_binary(input_format_t::cbor, len, result);
            }

            case 0x5A: // Binary data (four-byte uint32_t for n follow)
            {
                std::uint32_t len{};
                return get_number(input_format_t::cbor, len) &&
                       get_binary(input_format_t::cbor, len, result);
            }

            case 0x5B: // Binary data (eight-byte uint64_t for n follow)
            {
                std::uint64_t len{};
                return get_number(input_format_t::cbor, len) &&
                       get_binary(input_format_t::cbor, len, result);
            }

            case 0x5F: // Binary data (indefinite length)
            {
                while (get() != 0xFF)
                {
                    binary_t chunk;
                    if (!get_cbor_binary(chunk))
                    {
                        return false;
                    }
                    result.insert(result.end(), chunk.begin(), chunk.end());
                }
                return true;
            }

            default:
            {
                auto last_token = get_token_string();
                return sax->parse_error(chars_read, last_token, parse_error::create(113, chars_read,
                                        exception_message(input_format_t::cbor, concat("expected length specification (0x40-0x5B) or indefinite binary array type (0x5F); last byte: 0x", last_token), "binary"), nullptr));
            }
        }
    }

    /*!
    @param[in] len  the length of the array or static_cast<std::size_t>(-1) for an
                    array of indefinite size
    @param[in] tag_handler how CBOR tags should be treated
    @return whether array creation completed
    */
    bool get_cbor_array(const std::size_t len,
                        const cbor_tag_handler_t tag_handler)
    {
        if (JSON_HEDLEY_UNLIKELY(!sax->start_array(len)))
        {
            return false;
        }

        if (len != static_cast<std::size_t>(-1))
        {
            for (std::size_t i = 0; i < len; ++i)
            {
                if (JSON_HEDLEY_UNLIKELY(!parse_cbor_internal(true, tag_handler)))
                {
                    return false;
                }
            }
        }
        else
        {
            while (get() != 0xFF)
            {
                if (JSON_HEDLEY_UNLIKELY(!parse_cbor_internal(false, tag_handler)))
                {
                    return false;
                }
            }
        }

        return sax->end_array();
    }

    /*!
    @param[in] len  the length of the object or static_cast<std::size_t>(-1) for an
                    object of indefinite size
    @param[in] tag_handler how CBOR tags should be treated
    @return whether object creation completed
    */
    bool get_cbor_object(const std::size_t len,
                         const cbor_tag_handler_t tag_handler)
    {
        if (JSON_HEDLEY_UNLIKELY(!sax->start_object(len)))
        {
            return false;
        }

        if (len != 0)
        {
            string_t key;
            if (len != static_cast<std::size_t>(-1))
            {
                for (std::size_t i = 0; i < len; ++i)
                {
                    get();
                    if (JSON_HEDLEY_UNLIKELY(!get_cbor_string(key) || !sax->key(key)))
                    {
                        return false;
                    }

                    if (JSON_HEDLEY_UNLIKELY(!parse_cbor_internal(true, tag_handler)))
                    {
                        return false;
                    }
                    key.clear();
                }
            }
            else
            {
                while (get() != 0xFF)
                {
                    if (JSON_HEDLEY_UNLIKELY(!get_cbor_string(key) || !sax->key(key)))
                    {
                        return false;
                    }

                    if (JSON_HEDLEY_UNLIKELY(!parse_cbor_internal(true, tag_handler)))
                    {
                        return false;
                    }
                    key.clear();
                }
            }
        }

        return sax->end_object();
    }

    /////////////
    // MsgPack //
    /////////////

    /*!
    @return whether a valid MessagePack value was passed to the SAX parser
    */
    bool parse_msgpack_internal()
    {
        switch (get())
        {
            // EOF
            case std::char_traits<char_type>::eof():
                return unexpect_eof(input_format_t::msgpack, "value");

            // positive fixint
            case 0x00:
            case 0x01:
            case 0x02:
            case 0x03:
            case 0x04:
            case 0x05:
            case 0x06:
            case 0x07:
            case 0x08:
            case 0x09:
            case 0x0A:
            case 0x0B:
            case 0x0C:
            case 0x0D:
            case 0x0E:
            case 0x0F:
            case 0x10:
            case 0x11:
            case 0x12:
            case 0x13:
            case 0x14:
            case 0x15:
            case 0x16:
            case 0x17:
            case 0x18:
            case 0x19:
            case 0x1A:
            case 0x1B:
            case 0x1C:
            case 0x1D:
            case 0x1E:
            case 0x1F:
            case 0x20:
            case 0x21:
            case 0x22:
            case 0x23:
            case 0x24:
            case 0x25:
            case 0x26:
            case 0x27:
            case 0x28:
            case 0x29:
            case 0x2A:
            case 0x2B:
            case 0x2C:
            case 0x2D:
            case 0x2E:
            case 0x2F:
            case 0x30:
            case 0x31:
            case 0x32:
            case 0x33:
            case 0x34:
            case 0x35:
            case 0x36:
            case 0x37:
            case 0x38:
            case 0x39:
            case 0x3A:
            case 0x3B:
            case 0x3C:
            case 0x3D:
            case 0x3E:
            case 0x3F:
            case 0x40:
            case 0x41:
            case 0x42:
            case 0x43:
            case 0x44:
            case 0x45:
            case 0x46:
            case 0x47:
            case 0x48:
            case 0x49:
            case 0x4A:
            case 0x4B:
            case 0x4C:
            case 0x4D:
            case 0x4E:
            case 0x4F:
            case 0x50:
            case 0x51:
            case 0x52:
            case 0x53:
            case 0x54:
            case 0x55:
            case 0x56:
            case 0x57:
            case 0x58:
            case 0x59:
            case 0x5A:
            case 0x5B:
            case 0x5C:
            case 0x5D:
            case 0x5E:
            case 0x5F:
            case 0x60:
            case 0x61:
            case 0x62:
            case 0x63:
            case 0x64:
            case 0x65:
            case 0x66:
            case 0x67:
            case 0x68:
            case 0x69:
            case 0x6A:
            case 0x6B:
            case 0x6C:
            case 0x6D:
            case 0x6E:
            case 0x6F:
            case 0x70:
            case 0x71:
            case 0x72:
            case 0x73:
            case 0x74:
            case 0x75:
            case 0x76:
            case 0x77:
            case 0x78:
            case 0x79:
            case 0x7A:
            case 0x7B:
            case 0x7C:
            case 0x7D:
            case 0x7E:
            case 0x7F:
                return sax->number_unsigned(static_cast<number_unsigned_t>(current));

            // fixmap
            case 0x80:
            case 0x81:
            case 0x82:
            case 0x83:
            case 0x84:
            case 0x85:
            case 0x86:
            case 0x87:
            case 0x88:
            case 0x89:
            case 0x8A:
            case 0x8B:
            case 0x8C:
            case 0x8D:
            case 0x8E:
            case 0x8F:
                return get_msgpack_object(conditional_static_cast<std::size_t>(static_cast<unsigned int>(current) & 0x0Fu));

            // fixarray
            case 0x90:
            case 0x91:
            case 0x92:
            case 0x93:
            case 0x94:
            case 0x95:
            case 0x96:
            case 0x97:
            case 0x98:
            case 0x99:
            case 0x9A:
            case 0x9B:
            case 0x9C:
            case 0x9D:
            case 0x9E:
            case 0x9F:
                return get_msgpack_array(conditional_static_cast<std::size_t>(static_cast<unsigned int>(current) & 0x0Fu));

            // fixstr
            case 0xA0:
            case 0xA1:
            case 0xA2:
            case 0xA3:
            case 0xA4:
            case 0xA5:
            case 0xA6:
            case 0xA7:
            case 0xA8:
            case 0xA9:
            case 0xAA:
            case 0xAB:
            case 0xAC:
            case 0xAD:
            case 0xAE:
            case 0xAF:
            case 0xB0:
            case 0xB1:
            case 0xB2:
            case 0xB3:
            case 0xB4:
            case 0xB5:
            case 0xB6:
            case 0xB7:
            case 0xB8:
            case 0xB9:
            case 0xBA:
            case 0xBB:
            case 0xBC:
            case 0xBD:
            case 0xBE:
            case 0xBF:
            case 0xD9: // str 8
            case 0xDA: // str 16
            case 0xDB: // str 32
            {
                string_t s;
                return get_msgpack_string(s) && sax->string(s);
            }

            case 0xC0: // nil
                return sax->null();

            case 0xC2: // false
                return sax->boolean(false);

            case 0xC3: // true
                return sax->boolean(true);

            case 0xC4: // bin 8
            case 0xC5: // bin 16
            case 0xC6: // bin 32
            case 0xC7: // ext 8
            case 0xC8: // ext 16
            case 0xC9: // ext 32
            case 0xD4: // fixext 1
            case 0xD5: // fixext 2
            case 0xD6: // fixext 4
            case 0xD7: // fixext 8
            case 0xD8: // fixext 16
            {
                binary_t b;
                return get_msgpack_binary(b) && sax->binary(b);
            }

            case 0xCA: // float 32
            {
                float number{};
                return get_number(input_format_t::msgpack, number) && sax->number_float(static_cast<number_float_t>(number), "");
            }

            case 0xCB: // float 64
            {
                double number{};
                return get_number(input_format_t::msgpack, number) && sax->number_float(static_cast<number_float_t>(number), "");
            }

            case 0xCC: // uint 8
            {
                std::uint8_t number{};
                return get_number(input_format_t::msgpack, number) && sax->number_unsigned(number);
            }

            case 0xCD: // uint 16
            {
                std::uint16_t number{};
                return get_number(input_format_t::msgpack, number) && sax->number_unsigned(number);
            }

            case 0xCE: // uint 32
            {
                std::uint32_t number{};
                return get_number(input_format_t::msgpack, number) && sax->number_unsigned(number);
            }

            case 0xCF: // uint 64
            {
                std::uint64_t number{};
                return get_number(input_format_t::msgpack, number) && sax->number_unsigned(number);
            }

            case 0xD0: // int 8
            {
                std::int8_t number{};
                return get_number(input_format_t::msgpack, number) && sax->number_integer(number);
            }

            case 0xD1: // int 16
            {
                std::int16_t number{};
                return get_number(input_format_t::msgpack, number) && sax->number_integer(number);
            }

            case 0xD2: // int 32
            {
                std::int32_t number{};
                return get_number(input_format_t::msgpack, number) && sax->number_integer(number);
            }

            case 0xD3: // int 64
            {
                std::int64_t number{};
                return get_number(input_format_t::msgpack, number) && sax->number_integer(number);
            }

            case 0xDC: // array 16
            {
                std::uint16_t len{};
                return get_number(input_format_t::msgpack, len) && get_msgpack_array(static_cast<std::size_t>(len));
            }

            case 0xDD: // array 32
            {
                std::uint32_t len{};
                return get_number(input_format_t::msgpack, len) && get_msgpack_array(conditional_static_cast<std::size_t>(len));
            }

            case 0xDE: // map 16
            {
                std::uint16_t len{};
                return get_number(input_format_t::msgpack, len) && get_msgpack_object(static_cast<std::size_t>(len));
            }

            case 0xDF: // map 32
            {
                std::uint32_t len{};
                return get_number(input_format_t::msgpack, len) && get_msgpack_object(conditional_static_cast<std::size_t>(len));
            }

            // negative fixint
            case 0xE0:
            case 0xE1:
            case 0xE2:
            case 0xE3:
            case 0xE4:
            case 0xE5:
            case 0xE6:
            case 0xE7:
            case 0xE8:
            case 0xE9:
            case 0xEA:
            case 0xEB:
            case 0xEC:
            case 0xED:
            case 0xEE:
            case 0xEF:
            case 0xF0:
            case 0xF1:
            case 0xF2:
            case 0xF3:
            case 0xF4:
            case 0xF5:
            case 0xF6:
            case 0xF7:
            case 0xF8:
            case 0xF9:
            case 0xFA:
            case 0xFB:
            case 0xFC:
            case 0xFD:
            case 0xFE:
            case 0xFF:
                return sax->number_integer(static_cast<std::int8_t>(current));

            default: // anything else
            {
                auto last_token = get_token_string();
                return sax->parse_error(chars_read, last_token, parse_error::create(112, chars_read,
                                        exception_message(input_format_t::msgpack, concat("invalid byte: 0x", last_token), "value"), nullptr));
            }
        }
    }

    /*!
    @brief reads a MessagePack string

    This function first reads starting bytes to determine the expected
    string length and then copies this number of bytes into a string.

    @param[out] result  created string

    @return whether string creation completed
    */
    bool get_msgpack_string(string_t& result)
    {
        if (JSON_HEDLEY_UNLIKELY(!unexpect_eof(input_format_t::msgpack, "string")))
        {
            return false;
        }

        switch (current)
        {
            // fixstr
            case 0xA0:
            case 0xA1:
            case 0xA2:
            case 0xA3:
            case 0xA4:
            case 0xA5:
            case 0xA6:
            case 0xA7:
            case 0xA8:
            case 0xA9:
            case 0xAA:
            case 0xAB:
            case 0xAC:
            case 0xAD:
            case 0xAE:
            case 0xAF:
            case 0xB0:
            case 0xB1:
            case 0xB2:
            case 0xB3:
            case 0xB4:
            case 0xB5:
            case 0xB6:
            case 0xB7:
            case 0xB8:
            case 0xB9:
            case 0xBA:
            case 0xBB:
            case 0xBC:
            case 0xBD:
            case 0xBE:
            case 0xBF:
            {
                return get_string(input_format_t::msgpack, static_cast<unsigned int>(current) & 0x1Fu, result);
            }

            case 0xD9: // str 8
            {
                std::uint8_t len{};
                return get_number(input_format_t::msgpack, len) && get_string(input_format_t::msgpack, len, result);
            }

            case 0xDA: // str 16
            {
                std::uint16_t len{};
                return get_number(input_format_t::msgpack, len) && get_string(input_format_t::msgpack, len, result);
            }

            case 0xDB: // str 32
            {
                std::uint32_t len{};
                return get_number(input_format_t::msgpack, len) && get_string(input_format_t::msgpack, len, result);
            }

            default:
            {
                auto last_token = get_token_string();
                return sax->parse_error(chars_read, last_token, parse_error::create(113, chars_read,
                                        exception_message(input_format_t::msgpack, concat("expected length specification (0xA0-0xBF, 0xD9-0xDB); last byte: 0x", last_token), "string"), nullptr));
            }
        }
    }

    /*!
    @brief reads a MessagePack byte array

    This function first reads starting bytes to determine the expected
    byte array length and then copies this number of bytes into a byte array.

    @param[out] result  created byte array

    @return whether byte array creation completed
    */
    bool get_msgpack_binary(binary_t& result)
    {
        // helper function to set the subtype
        auto assign_and_return_true = [&result](std::int8_t subtype)
        {
            result.set_subtype(static_cast<std::uint8_t>(subtype));
            return true;
        };

        switch (current)
        {
            case 0xC4: // bin 8
            {
                std::uint8_t len{};
                return get_number(input_format_t::msgpack, len) &&
                       get_binary(input_format_t::msgpack, len, result);
            }

            case 0xC5: // bin 16
            {
                std::uint16_t len{};
                return get_number(input_format_t::msgpack, len) &&
                       get_binary(input_format_t::msgpack, len, result);
            }

            case 0xC6: // bin 32
            {
                std::uint32_t len{};
                return get_number(input_format_t::msgpack, len) &&
                       get_binary(input_format_t::msgpack, len, result);
            }

            case 0xC7: // ext 8
            {
                std::uint8_t len{};
                std::int8_t subtype{};
                return get_number(input_format_t::msgpack, len) &&
                       get_number(input_format_t::msgpack, subtype) &&
                       get_binary(input_format_t::msgpack, len, result) &&
                       assign_and_return_true(subtype);
            }

            case 0xC8: // ext 16
            {
                std::uint16_t len{};
                std::int8_t subtype{};
                return get_number(input_format_t::msgpack, len) &&
                       get_number(input_format_t::msgpack, subtype) &&
                       get_binary(input_format_t::msgpack, len, result) &&
                       assign_and_return_true(subtype);
            }

            case 0xC9: // ext 32
            {
                std::uint32_t len{};
                std::int8_t subtype{};
                return get_number(input_format_t::msgpack, len) &&
                       get_number(input_format_t::msgpack, subtype) &&
                       get_binary(input_format_t::msgpack, len, result) &&
                       assign_and_return_true(subtype);
            }

            case 0xD4: // fixext 1
            {
                std::int8_t subtype{};
                return get_number(input_format_t::msgpack, subtype) &&
                       get_binary(input_format_t::msgpack, 1, result) &&
                       assign_and_return_true(subtype);
            }

            case 0xD5: // fixext 2
            {
                std::int8_t subtype{};
                return get_number(input_format_t::msgpack, subtype) &&
                       get_binary(input_format_t::msgpack, 2, result) &&
                       assign_and_return_true(subtype);
            }

            case 0xD6: // fixext 4
            {
                std::int8_t subtype{};
                return get_number(input_format_t::msgpack, subtype) &&
                       get_binary(input_format_t::msgpack, 4, result) &&
                       assign_and_return_true(subtype);
            }

            case 0xD7: // fixext 8
            {
                std::int8_t subtype{};
                return get_number(input_format_t::msgpack, subtype) &&
                       get_binary(input_format_t::msgpack, 8, result) &&
                       assign_and_return_true(subtype);
            }

            case 0xD8: // fixext 16
            {
                std::int8_t subtype{};
                return get_number(input_format_t::msgpack, subtype) &&
                       get_binary(input_format_t::msgpack, 16, result) &&
                       assign_and_return_true(subtype);
            }

            default:           // LCOV_EXCL_LINE
                return false;  // LCOV_EXCL_LINE
        }
    }

    /*!
    @param[in] len  the length of the array
    @return whether array creation completed
    */
    bool get_msgpack_array(const std::size_t len)
    {
        if (JSON_HEDLEY_UNLIKELY(!sax->start_array(len)))
        {
            return false;
        }

        for (std::size_t i = 0; i < len; ++i)
        {
            if (JSON_HEDLEY_UNLIKELY(!parse_msgpack_internal()))
            {
                return false;
            }
        }

        return sax->end_array();
    }

    /*!
    @param[in] len  the length of the object
    @return whether object creation completed
    */
    bool get_msgpack_object(const std::size_t len)
    {
        if (JSON_HEDLEY_UNLIKELY(!sax->start_object(len)))
        {
            return false;
        }

        string_t key;
        for (std::size_t i = 0; i < len; ++i)
        {
            get();
            if (JSON_HEDLEY_UNLIKELY(!get_msgpack_string(key) || !sax->key(key)))
            {
                return false;
            }

            if (JSON_HEDLEY_UNLIKELY(!parse_msgpack_internal()))
            {
                return false;
            }
            key.clear();
        }

        return sax->end_object();
    }

    ////////////
    // UBJSON //
    ////////////

    /*!
    @param[in] get_char  whether a new character should be retrieved from the
                         input (true, default) or whether the last read
                         character should be considered instead

    @return whether a valid UBJSON value was passed to the SAX parser
    */
    bool parse_ubjson_internal(const bool get_char = true)
    {
        return get_ubjson_value(get_char ? get_ignore_noop() : current);
    }

    /*!
    @brief reads a UBJSON string

    This function is either called after reading the 'S' byte explicitly
    indicating a string, or in case of an object key where the 'S' byte can be
    left out.

    @param[out] result   created string
    @param[in] get_char  whether a new character should be retrieved from the
                         input (true, default) or whether the last read
                         character should be considered instead

    @return whether string creation completed
    */
    bool get_ubjson_string(string_t& result, const bool get_char = true)
    {
        if (get_char)
        {
            get();  // TODO(niels): may we ignore N here?
        }

        if (JSON_HEDLEY_UNLIKELY(!unexpect_eof(input_format, "value")))
        {
            return false;
        }

        switch (current)
        {
            case 'U':
            {
                std::uint8_t len{};
                return get_number(input_format, len) && get_string(input_format, len, result);
            }

            case 'i':
            {
                std::int8_t len{};
                return get_number(input_format, len) && get_string(input_format, len, result);
            }

            case 'I':
            {
                std::int16_t len{};
                return get_number(input_format, len) && get_string(input_format, len, result);
            }

            case 'l':
            {
                std::int32_t len{};
                return get_number(input_format, len) && get_string(input_format, len, result);
            }

            case 'L':
            {
                std::int64_t len{};
                return get_number(input_format, len) && get_string(input_format, len, result);
            }

            case 'u':
            {
                if (input_format != input_format_t::bjdata)
                {
                    break;
                }
                std::uint16_t len{};
                return get_number(input_format, len) && get_string(input_format, len, result);
            }

            case 'm':
            {
                if (input_format != input_format_t::bjdata)
                {
                    break;
                }
                std::uint32_t len{};
                return get_number(input_format, len) && get_string(input_format, len, result);
            }

            case 'M':
            {
                if (input_format != input_format_t::bjdata)
                {
                    break;
                }
                std::uint64_t len{};
                return get_number(input_format, len) && get_string(input_format, len, result);
            }

            default:
                break;
        }
        auto last_token = get_token_string();
        std::string message;

        if (input_format != input_format_t::bjdata)
        {
            message = "expected length type specification (U, i, I, l, L); last byte: 0x" + last_token;
        }
        else
        {
            message = "expected length type specification (U, i, u, I, m, l, M, L); last byte: 0x" + last_token;
        }
        return sax->parse_error(chars_read, last_token, parse_error::create(113, chars_read, exception_message(input_format, message, "string"), nullptr));
    }

    /*!
    @param[out] dim  an integer vector storing the ND array dimensions
    @return whether reading ND array size vector is successful
    */
    bool get_ubjson_ndarray_size(std::vector<size_t>& dim)
    {
        std::pair<std::size_t, char_int_type> size_and_type;
        size_t dimlen = 0;
        bool no_ndarray = true;

        if (JSON_HEDLEY_UNLIKELY(!get_ubjson_size_type(size_and_type, no_ndarray)))
        {
            return false;
        }

        if (size_and_type.first != npos)
        {
            if (size_and_type.second != 0)
            {
                if (size_and_type.second != 'N')
                {
                    for (std::size_t i = 0; i < size_and_type.first; ++i)
                    {
                        if (JSON_HEDLEY_UNLIKELY(!get_ubjson_size_value(dimlen, no_ndarray, size_and_type.second)))
                        {
                            return false;
                        }
                        dim.push_back(dimlen);
                    }
                }
            }
            else
            {
                for (std::size_t i = 0; i < size_and_type.first; ++i)
                {
                    if (JSON_HEDLEY_UNLIKELY(!get_ubjson_size_value(dimlen, no_ndarray)))
                    {
                        return false;
                    }
                    dim.push_back(dimlen);
                }
            }
        }
        else
        {
            while (current != ']')
            {
                if (JSON_HEDLEY_UNLIKELY(!get_ubjson_size_value(dimlen, no_ndarray, current)))
                {
                    return false;
                }
                dim.push_back(dimlen);
                get_ignore_noop();
            }
        }
        return true;
    }

    /*!
    @param[out] result  determined size
    @param[in,out] is_ndarray  for input, `true` means already inside an ndarray vector
                               or ndarray dimension is not allowed; `false` means ndarray
                               is allowed; for output, `true` means an ndarray is found;
                               is_ndarray can only return `true` when its initial value
                               is `false`
    @param[in] prefix  type marker if already read, otherwise set to 0

    @return whether size determination completed
    */
    bool get_ubjson_size_value(std::size_t& result, bool& is_ndarray, char_int_type prefix = 0)
    {
        if (prefix == 0)
        {
            prefix = get_ignore_noop();
        }

        switch (prefix)
        {
            case 'U':
            {
                std::uint8_t number{};
                if (JSON_HEDLEY_UNLIKELY(!get_number(input_format, number)))
                {
                    return false;
                }
                result = static_cast<std::size_t>(number);
                return true;
            }

            case 'i':
            {
                std::int8_t number{};
                if (JSON_HEDLEY_UNLIKELY(!get_number(input_format, number)))
                {
                    return false;
                }
                if (number < 0)
                {
                    return sax->parse_error(chars_read, get_token_string(), parse_error::create(113, chars_read,
                                            exception_message(input_format, "count in an optimized container must be positive", "size"), nullptr));
                }
                result = static_cast<std::size_t>(number); // NOLINT(bugprone-signed-char-misuse,cert-str34-c): number is not a char
                return true;
            }

            case 'I':
            {
                std::int16_t number{};
                if (JSON_HEDLEY_UNLIKELY(!get_number(input_format, number)))
                {
                    return false;
                }
                if (number < 0)
                {
                    return sax->parse_error(chars_read, get_token_string(), parse_error::create(113, chars_read,
                                            exception_message(input_format, "count in an optimized container must be positive", "size"), nullptr));
                }
                result = static_cast<std::size_t>(number);
                return true;
            }

            case 'l':
            {
                std::int32_t number{};
                if (JSON_HEDLEY_UNLIKELY(!get_number(input_format, number)))
                {
                    return false;
                }
                if (number < 0)
                {
                    return sax->parse_error(chars_read, get_token_string(), parse_error::create(113, chars_read,
                                            exception_message(input_format, "count in an optimized container must be positive", "size"), nullptr));
                }
                result = static_cast<std::size_t>(number);
                return true;
            }

            case 'L':
            {
                std::int64_t number{};
                if (JSON_HEDLEY_UNLIKELY(!get_number(input_format, number)))
                {
                    return false;
                }
                if (number < 0)
                {
                    return sax->parse_error(chars_read, get_token_string(), parse_error::create(113, chars_read,
                                            exception_message(input_format, "count in an optimized container must be positive", "size"), nullptr));
                }
                if (!value_in_range_of<std::size_t>(number))
                {
                    return sax->parse_error(chars_read, get_token_string(), out_of_range::create(408,
                                            exception_message(input_format, "integer value overflow", "size"), nullptr));
                }
                result = static_cast<std::size_t>(number);
                return true;
            }

            case 'u':
            {
                if (input_format != input_format_t::bjdata)
                {
                    break;
                }
                std::uint16_t number{};
                if (JSON_HEDLEY_UNLIKELY(!get_number(input_format, number)))
                {
                    return false;
                }
                result = static_cast<std::size_t>(number);
                return true;
            }

            case 'm':
            {
                if (input_format != input_format_t::bjdata)
                {
                    break;
                }
                std::uint32_t number{};
                if (JSON_HEDLEY_UNLIKELY(!get_number(input_format, number)))
                {
                    return false;
                }
                result = conditional_static_cast<std::size_t>(number);
                return true;
            }

            case 'M':
            {
                if (input_format != input_format_t::bjdata)
                {
                    break;
                }
                std::uint64_t number{};
                if (JSON_HEDLEY_UNLIKELY(!get_number(input_format, number)))
                {
                    return false;
                }
                if (!value_in_range_of<std::size_t>(number))
                {
                    return sax->parse_error(chars_read, get_token_string(), out_of_range::create(408,
                                            exception_message(input_format, "integer value overflow", "size"), nullptr));
                }
                result = detail::conditional_static_cast<std::size_t>(number);
                return true;
            }

            case '[':
            {
                if (input_format != input_format_t::bjdata)
                {
                    break;
                }
                if (is_ndarray) // ndarray dimensional vector can only contain integers, and can not embed another array
                {
                    return sax->parse_error(chars_read, get_token_string(), parse_error::create(113, chars_read, exception_message(input_format, "ndarray dimentional vector is not allowed", "size"), nullptr));
                }
                std::vector<size_t> dim;
                if (JSON_HEDLEY_UNLIKELY(!get_ubjson_ndarray_size(dim)))
                {
                    return false;
                }
                if (dim.size() == 1 || (dim.size() == 2 && dim.at(0) == 1)) // return normal array size if 1D row vector
                {
                    result = dim.at(dim.size() - 1);
                    return true;
                }
                if (!dim.empty())  // if ndarray, convert to an object in JData annotated array format
                {
                    for (auto i : dim) // test if any dimension in an ndarray is 0, if so, return a 1D empty container
                    {
                        if ( i == 0 )
                        {
                            result = 0;
                            return true;
                        }
                    }

                    string_t key = "_ArraySize_";
                    if (JSON_HEDLEY_UNLIKELY(!sax->start_object(3) || !sax->key(key) || !sax->start_array(dim.size())))
                    {
                        return false;
                    }
                    result = 1;
                    for (auto i : dim)
                    {
                        result *= i;
                        if (result == 0 || result == npos) // because dim elements shall not have zeros, result = 0 means overflow happened; it also can't be npos as it is used to initialize size in get_ubjson_size_type()
                        {
                            return sax->parse_error(chars_read, get_token_string(), out_of_range::create(408, exception_message(input_format, "excessive ndarray size caused overflow", "size"), nullptr));
                        }
                        if (JSON_HEDLEY_UNLIKELY(!sax->number_unsigned(static_cast<number_unsigned_t>(i))))
                        {
                            return false;
                        }
                    }
                    is_ndarray = true;
                    return sax->end_array();
                }
                result = 0;
                return true;
            }

            default:
                break;
        }
        auto last_token = get_token_string();
        std::string message;

        if (input_format != input_format_t::bjdata)
        {
            message = "expected length type specification (U, i, I, l, L) after '#'; last byte: 0x" + last_token;
        }
        else
        {
            message = "expected length type specification (U, i, u, I, m, l, M, L) after '#'; last byte: 0x" + last_token;
        }
        return sax->parse_error(chars_read, last_token, parse_error::create(113, chars_read, exception_message(input_format, message, "size"), nullptr));
    }

    /*!
    @brief determine the type and size for a container

    In the optimized UBJSON format, a type and a size can be provided to allow
    for a more compact representation.

    @param[out] result  pair of the size and the type
    @param[in] inside_ndarray  whether the parser is parsing an ND array dimensional vector

    @return whether pair creation completed
    */
    bool get_ubjson_size_type(std::pair<std::size_t, char_int_type>& result, bool inside_ndarray = false)
    {
        result.first = npos; // size
        result.second = 0; // type
        bool is_ndarray = false;

        get_ignore_noop();

        if (current == '$')
        {
            result.second = get();  // must not ignore 'N', because 'N' maybe the type
            if (input_format == input_format_t::bjdata
                    && JSON_HEDLEY_UNLIKELY(std::binary_search(bjd_optimized_type_markers.begin(), bjd_optimized_type_markers.end(), result.second)))
            {
                auto last_token = get_token_string();
                return sax->parse_error(chars_read, last_token, parse_error::create(112, chars_read,
                                        exception_message(input_format, concat("marker 0x", last_token, " is not a permitted optimized array type"), "type"), nullptr));
            }

            if (JSON_HEDLEY_UNLIKELY(!unexpect_eof(input_format, "type")))
            {
                return false;
            }

            get_ignore_noop();
            if (JSON_HEDLEY_UNLIKELY(current != '#'))
            {
                if (JSON_HEDLEY_UNLIKELY(!unexpect_eof(input_format, "value")))
                {
                    return false;
                }
                auto last_token = get_token_string();
                return sax->parse_error(chars_read, last_token, parse_error::create(112, chars_read,
                                        exception_message(input_format, concat("expected '#' after type information; last byte: 0x", last_token), "size"), nullptr));
            }

            bool is_error = get_ubjson_size_value(result.first, is_ndarray);
            if (input_format == input_format_t::bjdata && is_ndarray)
            {
                if (inside_ndarray)
                {
                    return sax->parse_error(chars_read, get_token_string(), parse_error::create(112, chars_read,
                                            exception_message(input_format, "ndarray can not be recursive", "size"), nullptr));
                }
                result.second |= (1 << 8); // use bit 8 to indicate ndarray, all UBJSON and BJData markers should be ASCII letters
            }
            return is_error;
        }

        if (current == '#')
        {
            bool is_error = get_ubjson_size_value(result.first, is_ndarray);
            if (input_format == input_format_t::bjdata && is_ndarray)
            {
                return sax->parse_error(chars_read, get_token_string(), parse_error::create(112, chars_read,
                                        exception_message(input_format, "ndarray requires both type and size", "size"), nullptr));
            }
            return is_error;
        }

        return true;
    }

    /*!
    @param prefix  the previously read or set type prefix
    @return whether value creation completed
    */
    bool get_ubjson_value(const char_int_type prefix)
    {
        switch (prefix)
        {
            case std::char_traits<char_type>::eof():  // EOF
                return unexpect_eof(input_format, "value");

            case 'T':  // true
                return sax->boolean(true);
            case 'F':  // false
                return sax->boolean(false);

            case 'Z':  // null
                return sax->null();

            case 'U':
            {
                std::uint8_t number{};
                return get_number(input_format, number) && sax->number_unsigned(number);
            }

            case 'i':
            {
                std::int8_t number{};
                return get_number(input_format, number) && sax->number_integer(number);
            }

            case 'I':
            {
                std::int16_t number{};
                return get_number(input_format, number) && sax->number_integer(number);
            }

            case 'l':
            {
                std::int32_t number{};
                return get_number(input_format, number) && sax->number_integer(number);
            }

            case 'L':
            {
                std::int64_t number{};
                return get_number(input_format, number) && sax->number_integer(number);
            }

            case 'u':
            {
                if (input_format != input_format_t::bjdata)
                {
                    break;
                }
                std::uint16_t number{};
                return get_number(input_format, number) && sax->number_unsigned(number);
            }

            case 'm':
            {
                if (input_format != input_format_t::bjdata)
                {
                    break;
                }
                std::uint32_t number{};
                return get_number(input_format, number) && sax->number_unsigned(number);
            }

            case 'M':
            {
                if (input_format != input_format_t::bjdata)
                {
                    break;
                }
                std::uint64_t number{};
                return get_number(input_format, number) && sax->number_unsigned(number);
            }

            case 'h':
            {
                if (input_format != input_format_t::bjdata)
                {
                    break;
                }
                const auto byte1_raw = get();
                if (JSON_HEDLEY_UNLIKELY(!unexpect_eof(input_format, "number")))
                {
                    return false;
                }
                const auto byte2_raw = get();
                if (JSON_HEDLEY_UNLIKELY(!unexpect_eof(input_format, "number")))
                {
                    return false;
                }

                const auto byte1 = static_cast<unsigned char>(byte1_raw);
                const auto byte2 = static_cast<unsigned char>(byte2_raw);

                // code from RFC 7049, Appendix D, Figure 3:
                // As half-precision floating-point numbers were only added
                // to IEEE 754 in 2008, today's programming platforms often
                // still only have limited support for them. It is very
                // easy to include at least decoding support for them even
                // without such support. An example of a small decoder for
                // half-precision floating-point numbers in the C language
                // is shown in Fig. 3.
                const auto half = static_cast<unsigned int>((byte2 << 8u) + byte1);
                const double val = [&half]
                {
                    const int exp = (half >> 10u) & 0x1Fu;
                    const unsigned int mant = half & 0x3FFu;
                    JSON_ASSERT(0 <= exp&& exp <= 32);
                    JSON_ASSERT(mant <= 1024);
                    switch (exp)
                    {
                        case 0:
                            return std::ldexp(mant, -24);
                        case 31:
                            return (mant == 0)
                            ? std::numeric_limits<double>::infinity()
                            : std::numeric_limits<double>::quiet_NaN();
                        default:
                            return std::ldexp(mant + 1024, exp - 25);
                    }
                }();
                return sax->number_float((half & 0x8000u) != 0
                                         ? static_cast<number_float_t>(-val)
                                         : static_cast<number_float_t>(val), "");
            }

            case 'd':
            {
                float number{};
                return get_number(input_format, number) && sax->number_float(static_cast<number_float_t>(number), "");
            }

            case 'D':
            {
                double number{};
                return get_number(input_format, number) && sax->number_float(static_cast<number_float_t>(number), "");
            }

            case 'H':
            {
                return get_ubjson_high_precision_number();
            }

            case 'C':  // char
            {
                get();
                if (JSON_HEDLEY_UNLIKELY(!unexpect_eof(input_format, "char")))
                {
                    return false;
                }
                if (JSON_HEDLEY_UNLIKELY(current > 127))
                {
                    auto last_token = get_token_string();
                    return sax->parse_error(chars_read, last_token, parse_error::create(113, chars_read,
                                            exception_message(input_format, concat("byte after 'C' must be in range 0x00..0x7F; last byte: 0x", last_token), "char"), nullptr));
                }
                string_t s(1, static_cast<typename string_t::value_type>(current));
                return sax->string(s);
            }

            case 'S':  // string
            {
                string_t s;
                return get_ubjson_string(s) && sax->string(s);
            }

            case '[':  // array
                return get_ubjson_array();

            case '{':  // object
                return get_ubjson_object();

            default: // anything else
                break;
        }
        auto last_token = get_token_string();
        return sax->parse_error(chars_read, last_token, parse_error::create(112, chars_read, exception_message(input_format, "invalid byte: 0x" + last_token, "value"), nullptr));
    }

    /*!
    @return whether array creation completed
    */
    bool get_ubjson_array()
    {
        std::pair<std::size_t, char_int_type> size_and_type;
        if (JSON_HEDLEY_UNLIKELY(!get_ubjson_size_type(size_and_type)))
        {
            return false;
        }

        // if bit-8 of size_and_type.second is set to 1, encode bjdata ndarray as an object in JData annotated array format (https://github.com/NeuroJSON/jdata):
        // {"_ArrayType_" : "typeid", "_ArraySize_" : [n1, n2, ...], "_ArrayData_" : [v1, v2, ...]}

        if (input_format == input_format_t::bjdata && size_and_type.first != npos && (size_and_type.second & (1 << 8)) != 0)
        {
            size_and_type.second &= ~(static_cast<char_int_type>(1) << 8);  // use bit 8 to indicate ndarray, here we remove the bit to restore the type marker
            auto it = std::lower_bound(bjd_types_map.begin(), bjd_types_map.end(), size_and_type.second, [](const bjd_type & p, char_int_type t)
            {
                return p.first < t;
            });
            string_t key = "_ArrayType_";
            if (JSON_HEDLEY_UNLIKELY(it == bjd_types_map.end() || it->first != size_and_type.second))
            {
                auto last_token = get_token_string();
                return sax->parse_error(chars_read, last_token, parse_error::create(112, chars_read,
                                        exception_message(input_format, "invalid byte: 0x" + last_token, "type"), nullptr));
            }

            string_t type = it->second; // sax->string() takes a reference
            if (JSON_HEDLEY_UNLIKELY(!sax->key(key) || !sax->string(type)))
            {
                return false;
            }

            if (size_and_type.second == 'C')
            {
                size_and_type.second = 'U';
            }

            key = "_ArrayData_";
            if (JSON_HEDLEY_UNLIKELY(!sax->key(key) || !sax->start_array(size_and_type.first) ))
            {
                return false;
            }

            for (std::size_t i = 0; i < size_and_type.first; ++i)
            {
                if (JSON_HEDLEY_UNLIKELY(!get_ubjson_value(size_and_type.second)))
                {
                    return false;
                }
            }

            return (sax->end_array() && sax->end_object());
        }

        if (size_and_type.first != npos)
        {
            if (JSON_HEDLEY_UNLIKELY(!sax->start_array(size_and_type.first)))
            {
                return false;
            }

            if (size_and_type.second != 0)
            {
                if (size_and_type.second != 'N')
                {
                    for (std::size_t i = 0; i < size_and_type.first; ++i)
                    {
                        if (JSON_HEDLEY_UNLIKELY(!get_ubjson_value(size_and_type.second)))
                        {
                            return false;
                        }
                    }
                }
            }
            else
            {
                for (std::size_t i = 0; i < size_and_type.first; ++i)
                {
                    if (JSON_HEDLEY_UNLIKELY(!parse_ubjson_internal()))
                    {
                        return false;
                    }
                }
            }
        }
        else
        {
            if (JSON_HEDLEY_UNLIKELY(!sax->start_array(static_cast<std::size_t>(-1))))
            {
                return false;
            }

            while (current != ']')
            {
                if (JSON_HEDLEY_UNLIKELY(!parse_ubjson_internal(false)))
                {
                    return false;
                }
                get_ignore_noop();
            }
        }

        return sax->end_array();
    }

    /*!
    @return whether object creation completed
    */
    bool get_ubjson_object()
    {
        std::pair<std::size_t, char_int_type> size_and_type;
        if (JSON_HEDLEY_UNLIKELY(!get_ubjson_size_type(size_and_type)))
        {
            return false;
        }

        // do not accept ND-array size in objects in BJData
        if (input_format == input_format_t::bjdata && size_and_type.first != npos && (size_and_type.second & (1 << 8)) != 0)
        {
            auto last_token = get_token_string();
            return sax->parse_error(chars_read, last_token, parse_error::create(112, chars_read,
                                    exception_message(input_format, "BJData object does not support ND-array size in optimized format", "object"), nullptr));
        }

        string_t key;
        if (size_and_type.first != npos)
        {
            if (JSON_HEDLEY_UNLIKELY(!sax->start_object(size_and_type.first)))
            {
                return false;
            }

            if (size_and_type.second != 0)
            {
                for (std::size_t i = 0; i < size_and_type.first; ++i)
                {
                    if (JSON_HEDLEY_UNLIKELY(!get_ubjson_string(key) || !sax->key(key)))
                    {
                        return false;
                    }
                    if (JSON_HEDLEY_UNLIKELY(!get_ubjson_value(size_and_type.second)))
                    {
                        return false;
                    }
                    key.clear();
                }
            }
            else
            {
                for (std::size_t i = 0; i < size_and_type.first; ++i)
                {
                    if (JSON_HEDLEY_UNLIKELY(!get_ubjson_string(key) || !sax->key(key)))
                    {
                        return false;
                    }
                    if (JSON_HEDLEY_UNLIKELY(!parse_ubjson_internal()))
                    {
                        return false;
                    }
                    key.clear();
                }
            }
        }
        else
        {
            if (JSON_HEDLEY_UNLIKELY(!sax->start_object(static_cast<std::size_t>(-1))))
            {
                return false;
            }

            while (current != '}')
            {
                if (JSON_HEDLEY_UNLIKELY(!get_ubjson_string(key, false) || !sax->key(key)))
                {
                    return false;
                }
                if (JSON_HEDLEY_UNLIKELY(!parse_ubjson_internal()))
                {
                    return false;
                }
                get_ignore_noop();
                key.clear();
            }
        }

        return sax->end_object();
    }

    // Note, no reader for UBJSON binary types is implemented because they do
    // not exist

    bool get_ubjson_high_precision_number()
    {
        // get size of following number string
        std::size_t size{};
        bool no_ndarray = true;
        auto res = get_ubjson_size_value(size, no_ndarray);
        if (JSON_HEDLEY_UNLIKELY(!res))
        {
            return res;
        }

        // get number string
        std::vector<char> number_vector;
        for (std::size_t i = 0; i < size; ++i)
        {
            get();
            if (JSON_HEDLEY_UNLIKELY(!unexpect_eof(input_format, "number")))
            {
                return false;
            }
            number_vector.push_back(static_cast<char>(current));
        }

        // parse number string
        using ia_type = decltype(detail::input_adapter(number_vector));
        auto number_lexer = detail::lexer<BasicJsonType, ia_type>(detail::input_adapter(number_vector), false);
        const auto result_number = number_lexer.scan();
        const auto number_string = number_lexer.get_token_string();
        const auto result_remainder = number_lexer.scan();

        using token_type = typename detail::lexer_base<BasicJsonType>::token_type;

        if (JSON_HEDLEY_UNLIKELY(result_remainder != token_type::end_of_input))
        {
            return sax->parse_error(chars_read, number_string, parse_error::create(115, chars_read,
                                    exception_message(input_format, concat("invalid number text: ", number_lexer.get_token_string()), "high-precision number"), nullptr));
        }

        switch (result_number)
        {
            case token_type::value_integer:
                return sax->number_integer(number_lexer.get_number_integer());
            case token_type::value_unsigned:
                return sax->number_unsigned(number_lexer.get_number_unsigned());
            case token_type::value_float:
                return sax->number_float(number_lexer.get_number_float(), std::move(number_string));
            case token_type::uninitialized:
            case token_type::literal_true:
            case token_type::literal_false:
            case token_type::literal_null:
            case token_type::value_string:
            case token_type::begin_array:
            case token_type::begin_object:
            case token_type::end_array:
            case token_type::end_object:
            case token_type::name_separator:
            case token_type::value_separator:
            case token_type::parse_error:
            case token_type::end_of_input:
            case token_type::literal_or_value:
            default:
                return sax->parse_error(chars_read, number_string, parse_error::create(115, chars_read,
                                        exception_message(input_format, concat("invalid number text: ", number_lexer.get_token_string()), "high-precision number"), nullptr));
        }
    }

    ///////////////////////
    // Utility functions //
    ///////////////////////

    /*!
    @brief get next character from the input

    This function provides the interface to the used input adapter. It does
    not throw in case the input reached EOF, but returns a -'ve valued
    `std::char_traits<char_type>::eof()` in that case.

    @return character read from the input
    */
    char_int_type get()
    {
        ++chars_read;
        return current = ia.get_character();
    }

    /*!
    @return character read from the input after ignoring all 'N' entries
    */
    char_int_type get_ignore_noop()
    {
        do
        {
            get();
        }
        while (current == 'N');

        return current;
    }

    /*
    @brief read a number from the input

    @tparam NumberType the type of the number
    @param[in] format   the current format (for diagnostics)
    @param[out] result  number of type @a NumberType

    @return whether conversion completed

    @note This function needs to respect the system's endianness, because
          bytes in CBOR, MessagePack, and UBJSON are stored in network order
          (big endian) and therefore need reordering on little endian systems.
          On the other hand, BSON and BJData use little endian and should reorder
          on big endian systems.
    */
    template<typename NumberType, bool InputIsLittleEndian = false>
    bool get_number(const input_format_t format, NumberType& result)
    {
        // step 1: read input into array with system's byte order
        std::array<std::uint8_t, sizeof(NumberType)> vec{};
        for (std::size_t i = 0; i < sizeof(NumberType); ++i)
        {
            get();
            if (JSON_HEDLEY_UNLIKELY(!unexpect_eof(format, "number")))
            {
                return false;
            }

            // reverse byte order prior to conversion if necessary
            if (is_little_endian != (InputIsLittleEndian || format == input_format_t::bjdata))
            {
                vec[sizeof(NumberType) - i - 1] = static_cast<std::uint8_t>(current);
            }
            else
            {
                vec[i] = static_cast<std::uint8_t>(current); // LCOV_EXCL_LINE
            }
        }

        // step 2: convert array into number of type T and return
        std::memcpy(&result, vec.data(), sizeof(NumberType));
        return true;
    }

    /*!
    @brief create a string by reading characters from the input

    @tparam NumberType the type of the number
    @param[in] format the current format (for diagnostics)
    @param[in] len number of characters to read
    @param[out] result string created by reading @a len bytes

    @return whether string creation completed

    @note We can not reserve @a len bytes for the result, because @a len
          may be too large. Usually, @ref unexpect_eof() detects the end of
          the input before we run out of string memory.
    */
    template<typename NumberType>
    bool get_string(const input_format_t format,
                    const NumberType len,
                    string_t& result)
    {
        bool success = true;
        for (NumberType i = 0; i < len; i++)
        {
            get();
            if (JSON_HEDLEY_UNLIKELY(!unexpect_eof(format, "string")))
            {
                success = false;
                break;
            }
            result.push_back(static_cast<typename string_t::value_type>(current));
        }
        return success;
    }

    /*!
    @brief create a byte array by reading bytes from the input

    @tparam NumberType the type of the number
    @param[in] format the current format (for diagnostics)
    @param[in] len number of bytes to read
    @param[out] result byte array created by reading @a len bytes

    @return whether byte array creation completed

    @note We can not reserve @a len bytes for the result, because @a len
          may be too large. Usually, @ref unexpect_eof() detects the end of
          the input before we run out of memory.
    */
    template<typename NumberType>
    bool get_binary(const input_format_t format,
                    const NumberType len,
                    binary_t& result)
    {
        bool success = true;
        for (NumberType i = 0; i < len; i++)
        {
            get();
            if (JSON_HEDLEY_UNLIKELY(!unexpect_eof(format, "binary")))
            {
                success = false;
                break;
            }
            result.push_back(static_cast<std::uint8_t>(current));
        }
        return success;
    }

    /*!
    @param[in] format   the current format (for diagnostics)
    @param[in] context  further context information (for diagnostics)
    @return whether the last read character is not EOF
    */
    JSON_HEDLEY_NON_NULL(3)
    bool unexpect_eof(const input_format_t format, const char* context) const
    {
        if (JSON_HEDLEY_UNLIKELY(current == std::char_traits<char_type>::eof()))
        {
            return sax->parse_error(chars_read, "<end of file>",
                                    parse_error::create(110, chars_read, exception_message(format, "unexpected end of input", context), nullptr));
        }
        return true;
    }

    /*!
    @return a string representation of the last read byte
    */
    std::string get_token_string() const
    {
        std::array<char, 3> cr{{}};
        static_cast<void>((std::snprintf)(cr.data(), cr.size(), "%.2hhX", static_cast<unsigned char>(current))); // NOLINT(cppcoreguidelines-pro-type-vararg,hicpp-vararg)
        return std::string{cr.data()};
    }

    /*!
    @param[in] format   the current format
    @param[in] detail   a detailed error message
    @param[in] context  further context information
    @return a message string to use in the parse_error exceptions
    */
    std::string exception_message(const input_format_t format,
                                  const std::string& detail,
                                  const std::string& context) const
    {
        std::string error_msg = "syntax error while parsing ";

        switch (format)
        {
            case input_format_t::cbor:
                error_msg += "CBOR";
                break;

            case input_format_t::msgpack:
                error_msg += "MessagePack";
                break;

            case input_format_t::ubjson:
                error_msg += "UBJSON";
                break;

            case input_format_t::bson:
                error_msg += "BSON";
                break;

            case input_format_t::bjdata:
                error_msg += "BJData";
                break;

            case input_format_t::json: // LCOV_EXCL_LINE
            default:            // LCOV_EXCL_LINE
                JSON_ASSERT(false); // NOLINT(cert-dcl03-c,hicpp-static-assert,misc-static-assert) LCOV_EXCL_LINE
        }

        return concat(error_msg, ' ', context, ": ", detail);
    }

  private:
    static JSON_INLINE_VARIABLE constexpr std::size_t npos = static_cast<std::size_t>(-1);

    /// input adapter
    InputAdapterType ia;

    /// the current character
    char_int_type current = std::char_traits<char_type>::eof();

    /// the number of characters read
    std::size_t chars_read = 0;

    /// whether we can assume little endianness
    const bool is_little_endian = little_endianness();

    /// input format
    const input_format_t input_format = input_format_t::json;

    /// the SAX parser
    json_sax_t* sax = nullptr;

    // excluded markers in bjdata optimized type
#define JSON_BINARY_READER_MAKE_BJD_OPTIMIZED_TYPE_MARKERS_ \
    make_array<char_int_type>('F', 'H', 'N', 'S', 'T', 'Z', '[', '{')

#define JSON_BINARY_READER_MAKE_BJD_TYPES_MAP_ \
    make_array<bjd_type>(                      \
    bjd_type{'C', "char"},                     \
    bjd_type{'D', "double"},                   \
    bjd_type{'I', "int16"},                    \
    bjd_type{'L', "int64"},                    \
    bjd_type{'M', "uint64"},                   \
    bjd_type{'U', "uint8"},                    \
    bjd_type{'d', "single"},                   \
    bjd_type{'i', "int8"},                     \
    bjd_type{'l', "int32"},                    \
    bjd_type{'m', "uint32"},                   \
    bjd_type{'u', "uint16"})

  JSON_PRIVATE_UNLESS_TESTED:
    // lookup tables
    // NOLINTNEXTLINE(cppcoreguidelines-non-private-member-variables-in-classes)
    const decltype(JSON_BINARY_READER_MAKE_BJD_OPTIMIZED_TYPE_MARKERS_) bjd_optimized_type_markers =
        JSON_BINARY_READER_MAKE_BJD_OPTIMIZED_TYPE_MARKERS_;

    using bjd_type = std::pair<char_int_type, string_t>;
    // NOLINTNEXTLINE(cppcoreguidelines-non-private-member-variables-in-classes)
    const decltype(JSON_BINARY_READER_MAKE_BJD_TYPES_MAP_) bjd_types_map =
        JSON_BINARY_READER_MAKE_BJD_TYPES_MAP_;

#undef JSON_BINARY_READER_MAKE_BJD_OPTIMIZED_TYPE_MARKERS_
#undef JSON_BINARY_READER_MAKE_BJD_TYPES_MAP_
};

#ifndef JSON_HAS_CPP_17
    template<typename BasicJsonType, typename InputAdapterType, typename SAX>
    constexpr std::size_t binary_reader<BasicJsonType, InputAdapterType, SAX>::npos;
#endif

}  // namespace detail
NLOHMANN_JSON_NAMESPACE_END

// #include <nlohmann/detail/input/input_adapters.hpp>

// #include <nlohmann/detail/input/lexer.hpp>

// #include <nlohmann/detail/input/parser.hpp>
//     __ _____ _____ _____
//  __|  |   __|     |   | |  JSON for Modern C++
// |  |  |__   |  |  | | | |  version 3.11.2
// |_____|_____|_____|_|___|  https://github.com/nlohmann/json
//
// SPDX-FileCopyrightText: 2013-2022 Niels Lohmann <https://nlohmann.me>
// SPDX-License-Identifier: MIT



#include <cmath> // isfinite
#include <cstdint> // uint8_t
#include <functional> // function
#include <string> // string
#include <utility> // move
#include <vector> // vector

// #include <nlohmann/detail/exceptions.hpp>

// #include <nlohmann/detail/input/input_adapters.hpp>

// #include <nlohmann/detail/input/json_sax.hpp>

// #include <nlohmann/detail/input/lexer.hpp>

// #include <nlohmann/detail/macro_scope.hpp>

// #include <nlohmann/detail/meta/is_sax.hpp>

// #include <nlohmann/detail/string_concat.hpp>

// #include <nlohmann/detail/value_t.hpp>


NLOHMANN_JSON_NAMESPACE_BEGIN
namespace detail
{
////////////
// parser //
////////////

enum class parse_event_t : std::uint8_t
{
    /// the parser read `{` and started to process a JSON object
    object_start,
    /// the parser read `}` and finished processing a JSON object
    object_end,
    /// the parser read `[` and started to process a JSON array
    array_start,
    /// the parser read `]` and finished processing a JSON array
    array_end,
    /// the parser read a key of a value in an object
    key,
    /// the parser finished reading a JSON value
    value
};

template<typename BasicJsonType>
using parser_callback_t =
    std::function<bool(int /*depth*/, parse_event_t /*event*/, BasicJsonType& /*parsed*/)>;

/*!
@brief syntax analysis

This class implements a recursive descent parser.
*/
template<typename BasicJsonType, typename InputAdapterType>
class parser
{
    using number_integer_t = typename BasicJsonType::number_integer_t;
    using number_unsigned_t = typename BasicJsonType::number_unsigned_t;
    using number_float_t = typename BasicJsonType::number_float_t;
    using string_t = typename BasicJsonType::string_t;
    using lexer_t = lexer<BasicJsonType, InputAdapterType>;
    using token_type = typename lexer_t::token_type;

  public:
    /// a parser reading from an input adapter
    explicit parser(InputAdapterType&& adapter,
                    const parser_callback_t<BasicJsonType> cb = nullptr,
                    const bool allow_exceptions_ = true,
                    const bool skip_comments = false)
        : callback(cb)
        , m_lexer(std::move(adapter), skip_comments)
        , allow_exceptions(allow_exceptions_)
    {
        // read first token
        get_token();
    }

    /*!
    @brief public parser interface

    @param[in] strict      whether to expect the last token to be EOF
    @param[in,out] result  parsed JSON value

    @throw parse_error.101 in case of an unexpected token
    @throw parse_error.102 if to_unicode fails or surrogate error
    @throw parse_error.103 if to_unicode fails
    */
    void parse(const bool strict, BasicJsonType& result)
    {
        if (callback)
        {
            json_sax_dom_callback_parser<BasicJsonType> sdp(result, callback, allow_exceptions);
            sax_parse_internal(&sdp);

            // in strict mode, input must be completely read
            if (strict && (get_token() != token_type::end_of_input))
            {
                sdp.parse_error(m_lexer.get_position(),
                                m_lexer.get_token_string(),
                                parse_error::create(101, m_lexer.get_position(),
                                                    exception_message(token_type::end_of_input, "value"), nullptr));
            }

            // in case of an error, return discarded value
            if (sdp.is_errored())
            {
                result = value_t::discarded;
                return;
            }

            // set top-level value to null if it was discarded by the callback
            // function
            if (result.is_discarded())
            {
                result = nullptr;
            }
        }
        else
        {
            json_sax_dom_parser<BasicJsonType> sdp(result, allow_exceptions);
            sax_parse_internal(&sdp);

            // in strict mode, input must be completely read
            if (strict && (get_token() != token_type::end_of_input))
            {
                sdp.parse_error(m_lexer.get_position(),
                                m_lexer.get_token_string(),
                                parse_error::create(101, m_lexer.get_position(), exception_message(token_type::end_of_input, "value"), nullptr));
            }

            // in case of an error, return discarded value
            if (sdp.is_errored())
            {
                result = value_t::discarded;
                return;
            }
        }

        result.assert_invariant();
    }

    /*!
    @brief public accept interface

    @param[in] strict  whether to expect the last token to be EOF
    @return whether the input is a proper JSON text
    */
    bool accept(const bool strict = true)
    {
        json_sax_acceptor<BasicJsonType> sax_acceptor;
        return sax_parse(&sax_acceptor, strict);
    }

    template<typename SAX>
    JSON_HEDLEY_NON_NULL(2)
    bool sax_parse(SAX* sax, const bool strict = true)
    {
        (void)detail::is_sax_static_asserts<SAX, BasicJsonType> {};
        const bool result = sax_parse_internal(sax);

        // strict mode: next byte must be EOF
        if (result && strict && (get_token() != token_type::end_of_input))
        {
            return sax->parse_error(m_lexer.get_position(),
                                    m_lexer.get_token_string(),
                                    parse_error::create(101, m_lexer.get_position(), exception_message(token_type::end_of_input, "value"), nullptr));
        }

        return result;
    }

  private:
    template<typename SAX>
    JSON_HEDLEY_NON_NULL(2)
    bool sax_parse_internal(SAX* sax)
    {
        // stack to remember the hierarchy of structured values we are parsing
        // true = array; false = object
        std::vector<bool> states;
        // value to avoid a goto (see comment where set to true)
        bool skip_to_state_evaluation = false;

        while (true)
        {
            if (!skip_to_state_evaluation)
            {
                // invariant: get_token() was called before each iteration
                switch (last_token)
                {
                    case token_type::begin_object:
                    {
                        if (JSON_HEDLEY_UNLIKELY(!sax->start_object(static_cast<std::size_t>(-1))))
                        {
                            return false;
                        }

                        // closing } -> we are done
                        if (get_token() == token_type::end_object)
                        {
                            if (JSON_HEDLEY_UNLIKELY(!sax->end_object()))
                            {
                                return false;
                            }
                            break;
                        }

                        // parse key
                        if (JSON_HEDLEY_UNLIKELY(last_token != token_type::value_string))
                        {
                            return sax->parse_error(m_lexer.get_position(),
                                                    m_lexer.get_token_string(),
                                                    parse_error::create(101, m_lexer.get_position(), exception_message(token_type::value_string, "object key"), nullptr));
                        }
                        if (JSON_HEDLEY_UNLIKELY(!sax->key(m_lexer.get_string())))
                        {
                            return false;
                        }

                        // parse separator (:)
                        if (JSON_HEDLEY_UNLIKELY(get_token() != token_type::name_separator))
                        {
                            return sax->parse_error(m_lexer.get_position(),
                                                    m_lexer.get_token_string(),
                                                    parse_error::create(101, m_lexer.get_position(), exception_message(token_type::name_separator, "object separator"), nullptr));
                        }

                        // remember we are now inside an object
                        states.push_back(false);

                        // parse values
                        get_token();
                        continue;
                    }

                    case token_type::begin_array:
                    {
                        if (JSON_HEDLEY_UNLIKELY(!sax->start_array(static_cast<std::size_t>(-1))))
                        {
                            return false;
                        }

                        // closing ] -> we are done
                        if (get_token() == token_type::end_array)
                        {
                            if (JSON_HEDLEY_UNLIKELY(!sax->end_array()))
                            {
                                return false;
                            }
                            break;
                        }

                        // remember we are now inside an array
                        states.push_back(true);

                        // parse values (no need to call get_token)
                        continue;
                    }

                    case token_type::value_float:
                    {
                        const auto res = m_lexer.get_number_float();

                        if (JSON_HEDLEY_UNLIKELY(!std::isfinite(res)))
                        {
                            return sax->parse_error(m_lexer.get_position(),
                                                    m_lexer.get_token_string(),
                                                    out_of_range::create(406, concat("number overflow parsing '", m_lexer.get_token_string(), '\''), nullptr));
                        }

                        if (JSON_HEDLEY_UNLIKELY(!sax->number_float(res, m_lexer.get_string())))
                        {
                            return false;
                        }

                        break;
                    }

                    case token_type::literal_false:
                    {
                        if (JSON_HEDLEY_UNLIKELY(!sax->boolean(false)))
                        {
                            return false;
                        }
                        break;
                    }

                    case token_type::literal_null:
                    {
                        if (JSON_HEDLEY_UNLIKELY(!sax->null()))
                        {
                            return false;
                        }
                        break;
                    }

                    case token_type::literal_true:
                    {
                        if (JSON_HEDLEY_UNLIKELY(!sax->boolean(true)))
                        {
                            return false;
                        }
                        break;
                    }

                    case token_type::value_integer:
                    {
                        if (JSON_HEDLEY_UNLIKELY(!sax->number_integer(m_lexer.get_number_integer())))
                        {
                            return false;
                        }
                        break;
                    }

                    case token_type::value_string:
                    {
                        if (JSON_HEDLEY_UNLIKELY(!sax->string(m_lexer.get_string())))
                        {
                            return false;
                        }
                        break;
                    }

                    case token_type::value_unsigned:
                    {
                        if (JSON_HEDLEY_UNLIKELY(!sax->number_unsigned(m_lexer.get_number_unsigned())))
                        {
                            return false;
                        }
                        break;
                    }

                    case token_type::parse_error:
                    {
                        // using "uninitialized" to avoid "expected" message
                        return sax->parse_error(m_lexer.get_position(),
                                                m_lexer.get_token_string(),
                                                parse_error::create(101, m_lexer.get_position(), exception_message(token_type::uninitialized, "value"), nullptr));
                    }

                    case token_type::uninitialized:
                    case token_type::end_array:
                    case token_type::end_object:
                    case token_type::name_separator:
                    case token_type::value_separator:
                    case token_type::end_of_input:
                    case token_type::literal_or_value:
                    default: // the last token was unexpected
                    {
                        return sax->parse_error(m_lexer.get_position(),
                                                m_lexer.get_token_string(),
                                                parse_error::create(101, m_lexer.get_position(), exception_message(token_type::literal_or_value, "value"), nullptr));
                    }
                }
            }
            else
            {
                skip_to_state_evaluation = false;
            }

            // we reached this line after we successfully parsed a value
            if (states.empty())
            {
                // empty stack: we reached the end of the hierarchy: done
                return true;
            }

            if (states.back())  // array
            {
                // comma -> next value
                if (get_token() == token_type::value_separator)
                {
                    // parse a new value
                    get_token();
                    continue;
                }

                // closing ]
                if (JSON_HEDLEY_LIKELY(last_token == token_type::end_array))
                {
                    if (JSON_HEDLEY_UNLIKELY(!sax->end_array()))
                    {
                        return false;
                    }

                    // We are done with this array. Before we can parse a
                    // new value, we need to evaluate the new state first.
                    // By setting skip_to_state_evaluation to false, we
                    // are effectively jumping to the beginning of this if.
                    JSON_ASSERT(!states.empty());
                    states.pop_back();
                    skip_to_state_evaluation = true;
                    continue;
                }

                return sax->parse_error(m_lexer.get_position(),
                                        m_lexer.get_token_string(),
                                        parse_error::create(101, m_lexer.get_position(), exception_message(token_type::end_array, "array"), nullptr));
            }

            // states.back() is false -> object

            // comma -> next value
            if (get_token() == token_type::value_separator)
            {
                // parse key
                if (JSON_HEDLEY_UNLIKELY(get_token() != token_type::value_string))
                {
                    return sax->parse_error(m_lexer.get_position(),
                                            m_lexer.get_token_string(),
                                            parse_error::create(101, m_lexer.get_position(), exception_message(token_type::value_string, "object key"), nullptr));
                }

                if (JSON_HEDLEY_UNLIKELY(!sax->key(m_lexer.get_string())))
                {
                    return false;
                }

                // parse separator (:)
                if (JSON_HEDLEY_UNLIKELY(get_token() != token_type::name_separator))
                {
                    return sax->parse_error(m_lexer.get_position(),
                                            m_lexer.get_token_string(),
                                            parse_error::create(101, m_lexer.get_position(), exception_message(token_type::name_separator, "object separator"), nullptr));
                }

                // parse values
                get_token();
                continue;
            }

            // closing }
            if (JSON_HEDLEY_LIKELY(last_token == token_type::end_object))
            {
                if (JSON_HEDLEY_UNLIKELY(!sax->end_object()))
                {
                    return false;
                }

                // We are done with this object. Before we can parse a
                // new value, we need to evaluate the new state first.
                // By setting skip_to_state_evaluation to false, we
                // are effectively jumping to the beginning of this if.
                JSON_ASSERT(!states.empty());
                states.pop_back();
                skip_to_state_evaluation = true;
                continue;
            }

            return sax->parse_error(m_lexer.get_position(),
                                    m_lexer.get_token_string(),
                                    parse_error::create(101, m_lexer.get_position(), exception_message(token_type::end_object, "object"), nullptr));
        }
    }

    /// get next token from lexer
    token_type get_token()
    {
        return last_token = m_lexer.scan();
    }

    std::string exception_message(const token_type expected, const std::string& context)
    {
        std::string error_msg = "syntax error ";

        if (!context.empty())
        {
            error_msg += concat("while parsing ", context, ' ');
        }

        error_msg += "- ";

        if (last_token == token_type::parse_error)
        {
            error_msg += concat(m_lexer.get_error_message(), "; last read: '",
                                m_lexer.get_token_string(), '\'');
        }
        else
        {
            error_msg += concat("unexpected ", lexer_t::token_type_name(last_token));
        }

        if (expected != token_type::uninitialized)
        {
            error_msg += concat("; expected ", lexer_t::token_type_name(expected));
        }

        return error_msg;
    }

  private:
    /// callback function
    const parser_callback_t<BasicJsonType> callback = nullptr;
    /// the type of the last read token
    token_type last_token = token_type::uninitialized;
    /// the lexer
    lexer_t m_lexer;
    /// whether to throw exceptions in case of errors
    const bool allow_exceptions = true;
};

}  // namespace detail
NLOHMANN_JSON_NAMESPACE_END

// #include <nlohmann/detail/iterators/internal_iterator.hpp>
//     __ _____ _____ _____
//  __|  |   __|     |   | |  JSON for Modern C++
// |  |  |__   |  |  | | | |  version 3.11.2
// |_____|_____|_____|_|___|  https://github.com/nlohmann/json
//
// SPDX-FileCopyrightText: 2013-2022 Niels Lohmann <https://nlohmann.me>
// SPDX-License-Identifier: MIT



// #include <nlohmann/detail/abi_macros.hpp>

// #include <nlohmann/detail/iterators/primitive_iterator.hpp>
//     __ _____ _____ _____
//  __|  |   __|     |   | |  JSON for Modern C++
// |  |  |__   |  |  | | | |  version 3.11.2
// |_____|_____|_____|_|___|  https://github.com/nlohmann/json
//
// SPDX-FileCopyrightText: 2013-2022 Niels Lohmann <https://nlohmann.me>
// SPDX-License-Identifier: MIT



#include <cstddef> // ptrdiff_t
#include <limits>  // numeric_limits

// #include <nlohmann/detail/macro_scope.hpp>


NLOHMANN_JSON_NAMESPACE_BEGIN
namespace detail
{

/*
@brief an iterator for primitive JSON types

This class models an iterator for primitive JSON types (boolean, number,
string). It's only purpose is to allow the iterator/const_iterator classes
to "iterate" over primitive values. Internally, the iterator is modeled by
a `difference_type` variable. Value begin_value (`0`) models the begin,
end_value (`1`) models past the end.
*/
class primitive_iterator_t
{
  private:
    using difference_type = std::ptrdiff_t;
    static constexpr difference_type begin_value = 0;
    static constexpr difference_type end_value = begin_value + 1;

  JSON_PRIVATE_UNLESS_TESTED:
    /// iterator as signed integer type
    difference_type m_it = (std::numeric_limits<std::ptrdiff_t>::min)();

  public:
    constexpr difference_type get_value() const noexcept
    {
        return m_it;
    }

    /// set iterator to a defined beginning
    void set_begin() noexcept
    {
        m_it = begin_value;
    }

    /// set iterator to a defined past the end
    void set_end() noexcept
    {
        m_it = end_value;
    }

    /// return whether the iterator can be dereferenced
    constexpr bool is_begin() const noexcept
    {
        return m_it == begin_value;
    }

    /// return whether the iterator is at end
    constexpr bool is_end() const noexcept
    {
        return m_it == end_value;
    }

    friend constexpr bool operator==(primitive_iterator_t lhs, primitive_iterator_t rhs) noexcept
    {
        return lhs.m_it == rhs.m_it;
    }

    friend constexpr bool operator<(primitive_iterator_t lhs, primitive_iterator_t rhs) noexcept
    {
        return lhs.m_it < rhs.m_it;
    }

    primitive_iterator_t operator+(difference_type n) noexcept
    {
        auto result = *this;
        result += n;
        return result;
    }

    friend constexpr difference_type operator-(primitive_iterator_t lhs, primitive_iterator_t rhs) noexcept
    {
        return lhs.m_it - rhs.m_it;
    }

    primitive_iterator_t& operator++() noexcept
    {
        ++m_it;
        return *this;
    }

    primitive_iterator_t operator++(int)& noexcept // NOLINT(cert-dcl21-cpp)
    {
        auto result = *this;
        ++m_it;
        return result;
    }

    primitive_iterator_t& operator--() noexcept
    {
        --m_it;
        return *this;
    }

    primitive_iterator_t operator--(int)& noexcept // NOLINT(cert-dcl21-cpp)
    {
        auto result = *this;
        --m_it;
        return result;
    }

    primitive_iterator_t& operator+=(difference_type n) noexcept
    {
        m_it += n;
        return *this;
    }

    primitive_iterator_t& operator-=(difference_type n) noexcept
    {
        m_it -= n;
        return *this;
    }
};

}  // namespace detail
NLOHMANN_JSON_NAMESPACE_END


NLOHMANN_JSON_NAMESPACE_BEGIN
namespace detail
{

/*!
@brief an iterator value

@note This structure could easily be a union, but MSVC currently does not allow
unions members with complex constructors, see https://github.com/nlohmann/json/pull/105.
*/
template<typename BasicJsonType> struct internal_iterator
{
    /// iterator for JSON objects
    typename BasicJsonType::object_t::iterator object_iterator {};
    /// iterator for JSON arrays
    typename BasicJsonType::array_t::iterator array_iterator {};
    /// generic iterator for all other types
    primitive_iterator_t primitive_iterator {};
};

}  // namespace detail
NLOHMANN_JSON_NAMESPACE_END

// #include <nlohmann/detail/iterators/iter_impl.hpp>
//     __ _____ _____ _____
//  __|  |   __|     |   | |  JSON for Modern C++
// |  |  |__   |  |  | | | |  version 3.11.2
// |_____|_____|_____|_|___|  https://github.com/nlohmann/json
//
// SPDX-FileCopyrightText: 2013-2022 Niels Lohmann <https://nlohmann.me>
// SPDX-License-Identifier: MIT



#include <iterator> // iterator, random_access_iterator_tag, bidirectional_iterator_tag, advance, next
#include <type_traits> // conditional, is_const, remove_const

// #include <nlohmann/detail/exceptions.hpp>

// #include <nlohmann/detail/iterators/internal_iterator.hpp>

// #include <nlohmann/detail/iterators/primitive_iterator.hpp>

// #include <nlohmann/detail/macro_scope.hpp>

// #include <nlohmann/detail/meta/cpp_future.hpp>

// #include <nlohmann/detail/meta/type_traits.hpp>

// #include <nlohmann/detail/value_t.hpp>


NLOHMANN_JSON_NAMESPACE_BEGIN
namespace detail
{

// forward declare, to be able to friend it later on
template<typename IteratorType> class iteration_proxy;
template<typename IteratorType> class iteration_proxy_value;

/*!
@brief a template for a bidirectional iterator for the @ref basic_json class
This class implements a both iterators (iterator and const_iterator) for the
@ref basic_json class.
@note An iterator is called *initialized* when a pointer to a JSON value has
      been set (e.g., by a constructor or a copy assignment). If the iterator is
      default-constructed, it is *uninitialized* and most methods are undefined.
      **The library uses assertions to detect calls on uninitialized iterators.**
@requirement The class satisfies the following concept requirements:
-
[BidirectionalIterator](https://en.cppreference.com/w/cpp/named_req/BidirectionalIterator):
  The iterator that can be moved can be moved in both directions (i.e.
  incremented and decremented).
@since version 1.0.0, simplified in version 2.0.9, change to bidirectional
       iterators in version 3.0.0 (see https://github.com/nlohmann/json/issues/593)
*/
template<typename BasicJsonType>
class iter_impl // NOLINT(cppcoreguidelines-special-member-functions,hicpp-special-member-functions)
{
    /// the iterator with BasicJsonType of different const-ness
    using other_iter_impl = iter_impl<typename std::conditional<std::is_const<BasicJsonType>::value, typename std::remove_const<BasicJsonType>::type, const BasicJsonType>::type>;
    /// allow basic_json to access private members
    friend other_iter_impl;
    friend BasicJsonType;
    friend iteration_proxy<iter_impl>;
    friend iteration_proxy_value<iter_impl>;

    using object_t = typename BasicJsonType::object_t;
    using array_t = typename BasicJsonType::array_t;
    // make sure BasicJsonType is basic_json or const basic_json
    static_assert(is_basic_json<typename std::remove_const<BasicJsonType>::type>::value,
                  "iter_impl only accepts (const) basic_json");
    // superficial check for the LegacyBidirectionalIterator named requirement
    static_assert(std::is_base_of<std::bidirectional_iterator_tag, std::bidirectional_iterator_tag>::value
                  &&  std::is_base_of<std::bidirectional_iterator_tag, typename std::iterator_traits<typename array_t::iterator>::iterator_category>::value,
                  "basic_json iterator assumes array and object type iterators satisfy the LegacyBidirectionalIterator named requirement.");

  public:
    /// The std::iterator class template (used as a base class to provide typedefs) is deprecated in C++17.
    /// The C++ Standard has never required user-defined iterators to derive from std::iterator.
    /// A user-defined iterator should provide publicly accessible typedefs named
    /// iterator_category, value_type, difference_type, pointer, and reference.
    /// Note that value_type is required to be non-const, even for constant iterators.
    using iterator_category = std::bidirectional_iterator_tag;

    /// the type of the values when the iterator is dereferenced
    using value_type = typename BasicJsonType::value_type;
    /// a type to represent differences between iterators
    using difference_type = typename BasicJsonType::difference_type;
    /// defines a pointer to the type iterated over (value_type)
    using pointer = typename std::conditional<std::is_const<BasicJsonType>::value,
          typename BasicJsonType::const_pointer,
          typename BasicJsonType::pointer>::type;
    /// defines a reference to the type iterated over (value_type)
    using reference =
        typename std::conditional<std::is_const<BasicJsonType>::value,
        typename BasicJsonType::const_reference,
        typename BasicJsonType::reference>::type;

    iter_impl() = default;
    ~iter_impl() = default;
    iter_impl(iter_impl&&) noexcept = default;
    iter_impl& operator=(iter_impl&&) noexcept = default;

    /*!
    @brief constructor for a given JSON instance
    @param[in] object  pointer to a JSON object for this iterator
    @pre object != nullptr
    @post The iterator is initialized; i.e. `m_object != nullptr`.
    */
    explicit iter_impl(pointer object) noexcept : m_object(object)
    {
        JSON_ASSERT(m_object != nullptr);

        switch (m_object->m_type)
        {
            case value_t::object:
            {
                m_it.object_iterator = typename object_t::iterator();
                break;
            }

            case value_t::array:
            {
                m_it.array_iterator = typename array_t::iterator();
                break;
            }

            case value_t::null:
            case value_t::string:
            case value_t::boolean:
            case value_t::number_integer:
            case value_t::number_unsigned:
            case value_t::number_float:
            case value_t::binary:
            case value_t::discarded:
            default:
            {
                m_it.primitive_iterator = primitive_iterator_t();
                break;
            }
        }
    }

    /*!
    @note The conventional copy constructor and copy assignment are implicitly
          defined. Combined with the following converting constructor and
          assignment, they support: (1) copy from iterator to iterator, (2)
          copy from const iterator to const iterator, and (3) conversion from
          iterator to const iterator. However conversion from const iterator
          to iterator is not defined.
    */

    /*!
    @brief const copy constructor
    @param[in] other const iterator to copy from
    @note This copy constructor had to be defined explicitly to circumvent a bug
          occurring on msvc v19.0 compiler (VS 2015) debug build. For more
          information refer to: https://github.com/nlohmann/json/issues/1608
    */
    iter_impl(const iter_impl<const BasicJsonType>& other) noexcept
        : m_object(other.m_object), m_it(other.m_it)
    {}

    /*!
    @brief converting assignment
    @param[in] other const iterator to copy from
    @return const/non-const iterator
    @note It is not checked whether @a other is initialized.
    */
    iter_impl& operator=(const iter_impl<const BasicJsonType>& other) noexcept
    {
        if (&other != this)
        {
            m_object = other.m_object;
            m_it = other.m_it;
        }
        return *this;
    }

    /*!
    @brief converting constructor
    @param[in] other  non-const iterator to copy from
    @note It is not checked whether @a other is initialized.
    */
    iter_impl(const iter_impl<typename std::remove_const<BasicJsonType>::type>& other) noexcept
        : m_object(other.m_object), m_it(other.m_it)
    {}

    /*!
    @brief converting assignment
    @param[in] other  non-const iterator to copy from
    @return const/non-const iterator
    @note It is not checked whether @a other is initialized.
    */
    iter_impl& operator=(const iter_impl<typename std::remove_const<BasicJsonType>::type>& other) noexcept // NOLINT(cert-oop54-cpp)
    {
        m_object = other.m_object;
        m_it = other.m_it;
        return *this;
    }

  JSON_PRIVATE_UNLESS_TESTED:
    /*!
    @brief set the iterator to the first value
    @pre The iterator is initialized; i.e. `m_object != nullptr`.
    */
    void set_begin() noexcept
    {
        JSON_ASSERT(m_object != nullptr);

        switch (m_object->m_type)
        {
            case value_t::object:
            {
                m_it.object_iterator = m_object->m_value.object->begin();
                break;
            }

            case value_t::array:
            {
                m_it.array_iterator = m_object->m_value.array->begin();
                break;
            }

            case value_t::null:
            {
                // set to end so begin()==end() is true: null is empty
                m_it.primitive_iterator.set_end();
                break;
            }

            case value_t::string:
            case value_t::boolean:
            case value_t::number_integer:
            case value_t::number_unsigned:
            case value_t::number_float:
            case value_t::binary:
            case value_t::discarded:
            default:
            {
                m_it.primitive_iterator.set_begin();
                break;
            }
        }
    }

    /*!
    @brief set the iterator past the last value
    @pre The iterator is initialized; i.e. `m_object != nullptr`.
    */
    void set_end() noexcept
    {
        JSON_ASSERT(m_object != nullptr);

        switch (m_object->m_type)
        {
            case value_t::object:
            {
                m_it.object_iterator = m_object->m_value.object->end();
                break;
            }

            case value_t::array:
            {
                m_it.array_iterator = m_object->m_value.array->end();
                break;
            }

            case value_t::null:
            case value_t::string:
            case value_t::boolean:
            case value_t::number_integer:
            case value_t::number_unsigned:
            case value_t::number_float:
            case value_t::binary:
            case value_t::discarded:
            default:
            {
                m_it.primitive_iterator.set_end();
                break;
            }
        }
    }

  public:
    /*!
    @brief return a reference to the value pointed to by the iterator
    @pre The iterator is initialized; i.e. `m_object != nullptr`.
    */
    reference operator*() const
    {
        JSON_ASSERT(m_object != nullptr);

        switch (m_object->m_type)
        {
            case value_t::object:
            {
                JSON_ASSERT(m_it.object_iterator != m_object->m_value.object->end());
                return m_it.object_iterator->second;
            }

            case value_t::array:
            {
                JSON_ASSERT(m_it.array_iterator != m_object->m_value.array->end());
                return *m_it.array_iterator;
            }

            case value_t::null:
                JSON_THROW(invalid_iterator::create(214, "cannot get value", m_object));

            case value_t::string:
            case value_t::boolean:
            case value_t::number_integer:
            case value_t::number_unsigned:
            case value_t::number_float:
            case value_t::binary:
            case value_t::discarded:
            default:
            {
                if (JSON_HEDLEY_LIKELY(m_it.primitive_iterator.is_begin()))
                {
                    return *m_object;
                }

                JSON_THROW(invalid_iterator::create(214, "cannot get value", m_object));
            }
        }
    }

    /*!
    @brief dereference the iterator
    @pre The iterator is initialized; i.e. `m_object != nullptr`.
    */
    pointer operator->() const
    {
        JSON_ASSERT(m_object != nullptr);

        switch (m_object->m_type)
        {
            case value_t::object:
            {
                JSON_ASSERT(m_it.object_iterator != m_object->m_value.object->end());
                return &(m_it.object_iterator->second);
            }

            case value_t::array:
            {
                JSON_ASSERT(m_it.array_iterator != m_object->m_value.array->end());
                return &*m_it.array_iterator;
            }

            case value_t::null:
            case value_t::string:
            case value_t::boolean:
            case value_t::number_integer:
            case value_t::number_unsigned:
            case value_t::number_float:
            case value_t::binary:
            case value_t::discarded:
            default:
            {
                if (JSON_HEDLEY_LIKELY(m_it.primitive_iterator.is_begin()))
                {
                    return m_object;
                }

                JSON_THROW(invalid_iterator::create(214, "cannot get value", m_object));
            }
        }
    }

    /*!
    @brief post-increment (it++)
    @pre The iterator is initialized; i.e. `m_object != nullptr`.
    */
    iter_impl operator++(int)& // NOLINT(cert-dcl21-cpp)
    {
        auto result = *this;
        ++(*this);
        return result;
    }

    /*!
    @brief pre-increment (++it)
    @pre The iterator is initialized; i.e. `m_object != nullptr`.
    */
    iter_impl& operator++()
    {
        JSON_ASSERT(m_object != nullptr);

        switch (m_object->m_type)
        {
            case value_t::object:
            {
                std::advance(m_it.object_iterator, 1);
                break;
            }

            case value_t::array:
            {
                std::advance(m_it.array_iterator, 1);
                break;
            }

            case value_t::null:
            case value_t::string:
            case value_t::boolean:
            case value_t::number_integer:
            case value_t::number_unsigned:
            case value_t::number_float:
            case value_t::binary:
            case value_t::discarded:
            default:
            {
                ++m_it.primitive_iterator;
                break;
            }
        }

        return *this;
    }

    /*!
    @brief post-decrement (it--)
    @pre The iterator is initialized; i.e. `m_object != nullptr`.
    */
    iter_impl operator--(int)& // NOLINT(cert-dcl21-cpp)
    {
        auto result = *this;
        --(*this);
        return result;
    }

    /*!
    @brief pre-decrement (--it)
    @pre The iterator is initialized; i.e. `m_object != nullptr`.
    */
    iter_impl& operator--()
    {
        JSON_ASSERT(m_object != nullptr);

        switch (m_object->m_type)
        {
            case value_t::object:
            {
                std::advance(m_it.object_iterator, -1);
                break;
            }

            case value_t::array:
            {
                std::advance(m_it.array_iterator, -1);
                break;
            }

            case value_t::null:
            case value_t::string:
            case value_t::boolean:
            case value_t::number_integer:
            case value_t::number_unsigned:
            case value_t::number_float:
            case value_t::binary:
            case value_t::discarded:
            default:
            {
                --m_it.primitive_iterator;
                break;
            }
        }

        return *this;
    }

    /*!
    @brief comparison: equal
    @pre The iterator is initialized; i.e. `m_object != nullptr`.
    */
    template < typename IterImpl, detail::enable_if_t < (std::is_same<IterImpl, iter_impl>::value || std::is_same<IterImpl, other_iter_impl>::value), std::nullptr_t > = nullptr >
    bool operator==(const IterImpl& other) const
    {
        // if objects are not the same, the comparison is undefined
        if (JSON_HEDLEY_UNLIKELY(m_object != other.m_object))
        {
            JSON_THROW(invalid_iterator::create(212, "cannot compare iterators of different containers", m_object));
        }

        JSON_ASSERT(m_object != nullptr);

        switch (m_object->m_type)
        {
            case value_t::object:
                return (m_it.object_iterator == other.m_it.object_iterator);

            case value_t::array:
                return (m_it.array_iterator == other.m_it.array_iterator);

            case value_t::null:
            case value_t::string:
            case value_t::boolean:
            case value_t::number_integer:
            case value_t::number_unsigned:
            case value_t::number_float:
            case value_t::binary:
            case value_t::discarded:
            default:
                return (m_it.primitive_iterator == other.m_it.primitive_iterator);
        }
    }

    /*!
    @brief comparison: not equal
    @pre The iterator is initialized; i.e. `m_object != nullptr`.
    */
    template < typename IterImpl, detail::enable_if_t < (std::is_same<IterImpl, iter_impl>::value || std::is_same<IterImpl, other_iter_impl>::value), std::nullptr_t > = nullptr >
    bool operator!=(const IterImpl& other) const
    {
        return !operator==(other);
    }

    /*!
    @brief comparison: smaller
    @pre The iterator is initialized; i.e. `m_object != nullptr`.
    */
    bool operator<(const iter_impl& other) const
    {
        // if objects are not the same, the comparison is undefined
        if (JSON_HEDLEY_UNLIKELY(m_object != other.m_object))
        {
            JSON_THROW(invalid_iterator::create(212, "cannot compare iterators of different containers", m_object));
        }

        JSON_ASSERT(m_object != nullptr);

        switch (m_object->m_type)
        {
            case value_t::object:
                JSON_THROW(invalid_iterator::create(213, "cannot compare order of object iterators", m_object));

            case value_t::array:
                return (m_it.array_iterator < other.m_it.array_iterator);

            case value_t::null:
            case value_t::string:
            case value_t::boolean:
            case value_t::number_integer:
            case value_t::number_unsigned:
            case value_t::number_float:
            case value_t::binary:
            case value_t::discarded:
            default:
                return (m_it.primitive_iterator < other.m_it.primitive_iterator);
        }
    }

    /*!
    @brief comparison: less than or equal
    @pre The iterator is initialized; i.e. `m_object != nullptr`.
    */
    bool operator<=(const iter_impl& other) const
    {
        return !other.operator < (*this);
    }

    /*!
    @brief comparison: greater than
    @pre The iterator is initialized; i.e. `m_object != nullptr`.
    */
    bool operator>(const iter_impl& other) const
    {
        return !operator<=(other);
    }

    /*!
    @brief comparison: greater than or equal
    @pre The iterator is initialized; i.e. `m_object != nullptr`.
    */
    bool operator>=(const iter_impl& other) const
    {
        return !operator<(other);
    }

    /*!
    @brief add to iterator
    @pre The iterator is initialized; i.e. `m_object != nullptr`.
    */
    iter_impl& operator+=(difference_type i)
    {
        JSON_ASSERT(m_object != nullptr);

        switch (m_object->m_type)
        {
            case value_t::object:
                JSON_THROW(invalid_iterator::create(209, "cannot use offsets with object iterators", m_object));

            case value_t::array:
            {
                std::advance(m_it.array_iterator, i);
                break;
            }

            case value_t::null:
            case value_t::string:
            case value_t::boolean:
            case value_t::number_integer:
            case value_t::number_unsigned:
            case value_t::number_float:
            case value_t::binary:
            case value_t::discarded:
            default:
            {
                m_it.primitive_iterator += i;
                break;
            }
        }

        return *this;
    }

    /*!
    @brief subtract from iterator
    @pre The iterator is initialized; i.e. `m_object != nullptr`.
    */
    iter_impl& operator-=(difference_type i)
    {
        return operator+=(-i);
    }

    /*!
    @brief add to iterator
    @pre The iterator is initialized; i.e. `m_object != nullptr`.
    */
    iter_impl operator+(difference_type i) const
    {
        auto result = *this;
        result += i;
        return result;
    }

    /*!
    @brief addition of distance and iterator
    @pre The iterator is initialized; i.e. `m_object != nullptr`.
    */
    friend iter_impl operator+(difference_type i, const iter_impl& it)
    {
        auto result = it;
        result += i;
        return result;
    }

    /*!
    @brief subtract from iterator
    @pre The iterator is initialized; i.e. `m_object != nullptr`.
    */
    iter_impl operator-(difference_type i) const
    {
        auto result = *this;
        result -= i;
        return result;
    }

    /*!
    @brief return difference
    @pre The iterator is initialized; i.e. `m_object != nullptr`.
    */
    difference_type operator-(const iter_impl& other) const
    {
        JSON_ASSERT(m_object != nullptr);

        switch (m_object->m_type)
        {
            case value_t::object:
                JSON_THROW(invalid_iterator::create(209, "cannot use offsets with object iterators", m_object));

            case value_t::array:
                return m_it.array_iterator - other.m_it.array_iterator;

            case value_t::null:
            case value_t::string:
            case value_t::boolean:
            case value_t::number_integer:
            case value_t::number_unsigned:
            case value_t::number_float:
            case value_t::binary:
            case value_t::discarded:
            default:
                return m_it.primitive_iterator - other.m_it.primitive_iterator;
        }
    }

    /*!
    @brief access to successor
    @pre The iterator is initialized; i.e. `m_object != nullptr`.
    */
    reference operator[](difference_type n) const
    {
        JSON_ASSERT(m_object != nullptr);

        switch (m_object->m_type)
        {
            case value_t::object:
                JSON_THROW(invalid_iterator::create(208, "cannot use operator[] for object iterators", m_object));

            case value_t::array:
                return *std::next(m_it.array_iterator, n);

            case value_t::null:
                JSON_THROW(invalid_iterator::create(214, "cannot get value", m_object));

            case value_t::string:
            case value_t::boolean:
            case value_t::number_integer:
            case value_t::number_unsigned:
            case value_t::number_float:
            case value_t::binary:
            case value_t::discarded:
            default:
            {
                if (JSON_HEDLEY_LIKELY(m_it.primitive_iterator.get_value() == -n))
                {
                    return *m_object;
                }

                JSON_THROW(invalid_iterator::create(214, "cannot get value", m_object));
            }
        }
    }

    /*!
    @brief return the key of an object iterator
    @pre The iterator is initialized; i.e. `m_object != nullptr`.
    */
    const typename object_t::key_type& key() const
    {
        JSON_ASSERT(m_object != nullptr);

        if (JSON_HEDLEY_LIKELY(m_object->is_object()))
        {
            return m_it.object_iterator->first;
        }

        JSON_THROW(invalid_iterator::create(207, "cannot use key() for non-object iterators", m_object));
    }

    /*!
    @brief return the value of an iterator
    @pre The iterator is initialized; i.e. `m_object != nullptr`.
    */
    reference value() const
    {
        return operator*();
    }

  JSON_PRIVATE_UNLESS_TESTED:
    /// associated JSON instance
    pointer m_object = nullptr;
    /// the actual iterator of the associated instance
    internal_iterator<typename std::remove_const<BasicJsonType>::type> m_it {};
};

}  // namespace detail
NLOHMANN_JSON_NAMESPACE_END

// #include <nlohmann/detail/iterators/iteration_proxy.hpp>

// #include <nlohmann/detail/iterators/json_reverse_iterator.hpp>
//     __ _____ _____ _____
//  __|  |   __|     |   | |  JSON for Modern C++
// |  |  |__   |  |  | | | |  version 3.11.2
// |_____|_____|_____|_|___|  https://github.com/nlohmann/json
//
// SPDX-FileCopyrightText: 2013-2022 Niels Lohmann <https://nlohmann.me>
// SPDX-License-Identifier: MIT



#include <cstddef> // ptrdiff_t
#include <iterator> // reverse_iterator
#include <utility> // declval

// #include <nlohmann/detail/abi_macros.hpp>


NLOHMANN_JSON_NAMESPACE_BEGIN
namespace detail
{

//////////////////////
// reverse_iterator //
//////////////////////

/*!
@brief a template for a reverse iterator class

@tparam Base the base iterator type to reverse. Valid types are @ref
iterator (to create @ref reverse_iterator) and @ref const_iterator (to
create @ref const_reverse_iterator).

@requirement The class satisfies the following concept requirements:
-
[BidirectionalIterator](https://en.cppreference.com/w/cpp/named_req/BidirectionalIterator):
  The iterator that can be moved can be moved in both directions (i.e.
  incremented and decremented).
- [OutputIterator](https://en.cppreference.com/w/cpp/named_req/OutputIterator):
  It is possible to write to the pointed-to element (only if @a Base is
  @ref iterator).

@since version 1.0.0
*/
template<typename Base>
class json_reverse_iterator : public std::reverse_iterator<Base>
{
  public:
    using difference_type = std::ptrdiff_t;
    /// shortcut to the reverse iterator adapter
    using base_iterator = std::reverse_iterator<Base>;
    /// the reference type for the pointed-to element
    using reference = typename Base::reference;

    /// create reverse iterator from iterator
    explicit json_reverse_iterator(const typename base_iterator::iterator_type& it) noexcept
        : base_iterator(it) {}

    /// create reverse iterator from base class
    explicit json_reverse_iterator(const base_iterator& it) noexcept : base_iterator(it) {}

    /// post-increment (it++)
    json_reverse_iterator operator++(int)& // NOLINT(cert-dcl21-cpp)
    {
        return static_cast<json_reverse_iterator>(base_iterator::operator++(1));
    }

    /// pre-increment (++it)
    json_reverse_iterator& operator++()
    {
        return static_cast<json_reverse_iterator&>(base_iterator::operator++());
    }

    /// post-decrement (it--)
    json_reverse_iterator operator--(int)& // NOLINT(cert-dcl21-cpp)
    {
        return static_cast<json_reverse_iterator>(base_iterator::operator--(1));
    }

    /// pre-decrement (--it)
    json_reverse_iterator& operator--()
    {
        return static_cast<json_reverse_iterator&>(base_iterator::operator--());
    }

    /// add to iterator
    json_reverse_iterator& operator+=(difference_type i)
    {
        return static_cast<json_reverse_iterator&>(base_iterator::operator+=(i));
    }

    /// add to iterator
    json_reverse_iterator operator+(difference_type i) const
    {
        return static_cast<json_reverse_iterator>(base_iterator::operator+(i));
    }

    /// subtract from iterator
    json_reverse_iterator operator-(difference_type i) const
    {
        return static_cast<json_reverse_iterator>(base_iterator::operator-(i));
    }

    /// return difference
    difference_type operator-(const json_reverse_iterator& other) const
    {
        return base_iterator(*this) - base_iterator(other);
    }

    /// access to successor
    reference operator[](difference_type n) const
    {
        return *(this->operator+(n));
    }

    /// return the key of an object iterator
    auto key() const -> decltype(std::declval<Base>().key())
    {
        auto it = --this->base();
        return it.key();
    }

    /// return the value of an iterator
    reference value() const
    {
        auto it = --this->base();
        return it.operator * ();
    }
};

}  // namespace detail
NLOHMANN_JSON_NAMESPACE_END

// #include <nlohmann/detail/iterators/primitive_iterator.hpp>

// #include <nlohmann/detail/json_pointer.hpp>
//     __ _____ _____ _____
//  __|  |   __|     |   | |  JSON for Modern C++
// |  |  |__   |  |  | | | |  version 3.11.2
// |_____|_____|_____|_|___|  https://github.com/nlohmann/json
//
// SPDX-FileCopyrightText: 2013-2022 Niels Lohmann <https://nlohmann.me>
// SPDX-License-Identifier: MIT



#include <algorithm> // all_of
#include <cctype> // isdigit
#include <cerrno> // errno, ERANGE
#include <cstdlib> // strtoull
#ifndef JSON_NO_IO
    #include <iosfwd> // ostream
#endif  // JSON_NO_IO
#include <limits> // max
#include <numeric> // accumulate
#include <string> // string
#include <utility> // move
#include <vector> // vector

// #include <nlohmann/detail/exceptions.hpp>

// #include <nlohmann/detail/macro_scope.hpp>

// #include <nlohmann/detail/string_concat.hpp>

// #include <nlohmann/detail/string_escape.hpp>

// #include <nlohmann/detail/value_t.hpp>


NLOHMANN_JSON_NAMESPACE_BEGIN

/// @brief JSON Pointer defines a string syntax for identifying a specific value within a JSON document
/// @sa https://json.nlohmann.me/api/json_pointer/
template<typename RefStringType>
class json_pointer
{
    // allow basic_json to access private members
    NLOHMANN_BASIC_JSON_TPL_DECLARATION
    friend class basic_json;

    template<typename>
    friend class json_pointer;

    template<typename T>
    struct string_t_helper
    {
        using type = T;
    };

    NLOHMANN_BASIC_JSON_TPL_DECLARATION
    struct string_t_helper<NLOHMANN_BASIC_JSON_TPL>
    {
        using type = StringType;
    };

  public:
    // for backwards compatibility accept BasicJsonType
    using string_t = typename string_t_helper<RefStringType>::type;

    /// @brief create JSON pointer
    /// @sa https://json.nlohmann.me/api/json_pointer/json_pointer/
    explicit json_pointer(const string_t& s = "")
        : reference_tokens(split(s))
    {}

    /// @brief return a string representation of the JSON pointer
    /// @sa https://json.nlohmann.me/api/json_pointer/to_string/
    string_t to_string() const
    {
        return std::accumulate(reference_tokens.begin(), reference_tokens.end(),
                               string_t{},
                               [](const string_t& a, const string_t& b)
        {
            return detail::concat(a, '/', detail::escape(b));
        });
    }

    /// @brief return a string representation of the JSON pointer
    /// @sa https://json.nlohmann.me/api/json_pointer/operator_string/
    JSON_HEDLEY_DEPRECATED_FOR(3.11.0, to_string())
    operator string_t() const
    {
        return to_string();
    }

#ifndef JSON_NO_IO
    /// @brief write string representation of the JSON pointer to stream
    /// @sa https://json.nlohmann.me/api/basic_json/operator_ltlt/
    friend std::ostream& operator<<(std::ostream& o, const json_pointer& ptr)
    {
        o << ptr.to_string();
        return o;
    }
#endif

    /// @brief append another JSON pointer at the end of this JSON pointer
    /// @sa https://json.nlohmann.me/api/json_pointer/operator_slasheq/
    json_pointer& operator/=(const json_pointer& ptr)
    {
        reference_tokens.insert(reference_tokens.end(),
                                ptr.reference_tokens.begin(),
                                ptr.reference_tokens.end());
        return *this;
    }

    /// @brief append an unescaped reference token at the end of this JSON pointer
    /// @sa https://json.nlohmann.me/api/json_pointer/operator_slasheq/
    json_pointer& operator/=(string_t token)
    {
        push_back(std::move(token));
        return *this;
    }

    /// @brief append an array index at the end of this JSON pointer
    /// @sa https://json.nlohmann.me/api/json_pointer/operator_slasheq/
    json_pointer& operator/=(std::size_t array_idx)
    {
        return *this /= std::to_string(array_idx);
    }

    /// @brief create a new JSON pointer by appending the right JSON pointer at the end of the left JSON pointer
    /// @sa https://json.nlohmann.me/api/json_pointer/operator_slash/
    friend json_pointer operator/(const json_pointer& lhs,
                                  const json_pointer& rhs)
    {
        return json_pointer(lhs) /= rhs;
    }

    /// @brief create a new JSON pointer by appending the unescaped token at the end of the JSON pointer
    /// @sa https://json.nlohmann.me/api/json_pointer/operator_slash/
    friend json_pointer operator/(const json_pointer& lhs, string_t token) // NOLINT(performance-unnecessary-value-param)
    {
        return json_pointer(lhs) /= std::move(token);
    }

    /// @brief create a new JSON pointer by appending the array-index-token at the end of the JSON pointer
    /// @sa https://json.nlohmann.me/api/json_pointer/operator_slash/
    friend json_pointer operator/(const json_pointer& lhs, std::size_t array_idx)
    {
        return json_pointer(lhs) /= array_idx;
    }

    /// @brief returns the parent of this JSON pointer
    /// @sa https://json.nlohmann.me/api/json_pointer/parent_pointer/
    json_pointer parent_pointer() const
    {
        if (empty())
        {
            return *this;
        }

        json_pointer res = *this;
        res.pop_back();
        return res;
    }

    /// @brief remove last reference token
    /// @sa https://json.nlohmann.me/api/json_pointer/pop_back/
    void pop_back()
    {
        if (JSON_HEDLEY_UNLIKELY(empty()))
        {
            JSON_THROW(detail::out_of_range::create(405, "JSON pointer has no parent", nullptr));
        }

        reference_tokens.pop_back();
    }

    /// @brief return last reference token
    /// @sa https://json.nlohmann.me/api/json_pointer/back/
    const string_t& back() const
    {
        if (JSON_HEDLEY_UNLIKELY(empty()))
        {
            JSON_THROW(detail::out_of_range::create(405, "JSON pointer has no parent", nullptr));
        }

        return reference_tokens.back();
    }

    /// @brief append an unescaped token at the end of the reference pointer
    /// @sa https://json.nlohmann.me/api/json_pointer/push_back/
    void push_back(const string_t& token)
    {
        reference_tokens.push_back(token);
    }

    /// @brief append an unescaped token at the end of the reference pointer
    /// @sa https://json.nlohmann.me/api/json_pointer/push_back/
    void push_back(string_t&& token)
    {
        reference_tokens.push_back(std::move(token));
    }

    /// @brief return whether pointer points to the root document
    /// @sa https://json.nlohmann.me/api/json_pointer/empty/
    bool empty() const noexcept
    {
        return reference_tokens.empty();
    }

  private:
    /*!
    @param[in] s  reference token to be converted into an array index

    @return integer representation of @a s

    @throw parse_error.106  if an array index begins with '0'
    @throw parse_error.109  if an array index begins not with a digit
    @throw out_of_range.404 if string @a s could not be converted to an integer
    @throw out_of_range.410 if an array index exceeds size_type
    */
    template<typename BasicJsonType>
    static typename BasicJsonType::size_type array_index(const string_t& s)
    {
        using size_type = typename BasicJsonType::size_type;

        // error condition (cf. RFC 6901, Sect. 4)
        if (JSON_HEDLEY_UNLIKELY(s.size() > 1 && s[0] == '0'))
        {
            JSON_THROW(detail::parse_error::create(106, 0, detail::concat("array index '", s, "' must not begin with '0'"), nullptr));
        }

        // error condition (cf. RFC 6901, Sect. 4)
        if (JSON_HEDLEY_UNLIKELY(s.size() > 1 && !(s[0] >= '1' && s[0] <= '9')))
        {
            JSON_THROW(detail::parse_error::create(109, 0, detail::concat("array index '", s, "' is not a number"), nullptr));
        }

        const char* p = s.c_str();
        char* p_end = nullptr;
        errno = 0; // strtoull doesn't reset errno
        unsigned long long res = std::strtoull(p, &p_end, 10); // NOLINT(runtime/int)
        if (p == p_end // invalid input or empty string
                || errno == ERANGE // out of range
                || JSON_HEDLEY_UNLIKELY(static_cast<std::size_t>(p_end - p) != s.size())) // incomplete read
        {
            JSON_THROW(detail::out_of_range::create(404, detail::concat("unresolved reference token '", s, "'"), nullptr));
        }

        // only triggered on special platforms (like 32bit), see also
        // https://github.com/nlohmann/json/pull/2203
        if (res >= static_cast<unsigned long long>((std::numeric_limits<size_type>::max)()))  // NOLINT(runtime/int)
        {
            JSON_THROW(detail::out_of_range::create(410, detail::concat("array index ", s, " exceeds size_type"), nullptr));   // LCOV_EXCL_LINE
        }

        return static_cast<size_type>(res);
    }

  JSON_PRIVATE_UNLESS_TESTED:
    json_pointer top() const
    {
        if (JSON_HEDLEY_UNLIKELY(empty()))
        {
            JSON_THROW(detail::out_of_range::create(405, "JSON pointer has no parent", nullptr));
        }

        json_pointer result = *this;
        result.reference_tokens = {reference_tokens[0]};
        return result;
    }

  private:
    /*!
    @brief create and return a reference to the pointed to value

    @complexity Linear in the number of reference tokens.

    @throw parse_error.109 if array index is not a number
    @throw type_error.313 if value cannot be unflattened
    */
    template<typename BasicJsonType>
    BasicJsonType& get_and_create(BasicJsonType& j) const
    {
        auto* result = &j;

        // in case no reference tokens exist, return a reference to the JSON value
        // j which will be overwritten by a primitive value
        for (const auto& reference_token : reference_tokens)
        {
            switch (result->type())
            {
                case detail::value_t::null:
                {
                    if (reference_token == "0")
                    {
                        // start a new array if reference token is 0
                        result = &result->operator[](0);
                    }
                    else
                    {
                        // start a new object otherwise
                        result = &result->operator[](reference_token);
                    }
                    break;
                }

                case detail::value_t::object:
                {
                    // create an entry in the object
                    result = &result->operator[](reference_token);
                    break;
                }

                case detail::value_t::array:
                {
                    // create an entry in the array
                    result = &result->operator[](array_index<BasicJsonType>(reference_token));
                    break;
                }

                /*
                The following code is only reached if there exists a reference
                token _and_ the current value is primitive. In this case, we have
                an error situation, because primitive values may only occur as
                single value; that is, with an empty list of reference tokens.
                */
                case detail::value_t::string:
                case detail::value_t::boolean:
                case detail::value_t::number_integer:
                case detail::value_t::number_unsigned:
                case detail::value_t::number_float:
                case detail::value_t::binary:
                case detail::value_t::discarded:
                default:
                    JSON_THROW(detail::type_error::create(313, "invalid value to unflatten", &j));
            }
        }

        return *result;
    }

    /*!
    @brief return a reference to the pointed to value

    @note This version does not throw if a value is not present, but tries to
          create nested values instead. For instance, calling this function
          with pointer `"/this/that"` on a null value is equivalent to calling
          `operator[]("this").operator[]("that")` on that value, effectively
          changing the null value to an object.

    @param[in] ptr  a JSON value

    @return reference to the JSON value pointed to by the JSON pointer

    @complexity Linear in the length of the JSON pointer.

    @throw parse_error.106   if an array index begins with '0'
    @throw parse_error.109   if an array index was not a number
    @throw out_of_range.404  if the JSON pointer can not be resolved
    */
    template<typename BasicJsonType>
    BasicJsonType& get_unchecked(BasicJsonType* ptr) const
    {
        for (const auto& reference_token : reference_tokens)
        {
            // convert null values to arrays or objects before continuing
            if (ptr->is_null())
            {
                // check if reference token is a number
                const bool nums =
                    std::all_of(reference_token.begin(), reference_token.end(),
                                [](const unsigned char x)
                {
                    return std::isdigit(x);
                });

                // change value to array for numbers or "-" or to object otherwise
                *ptr = (nums || reference_token == "-")
                       ? detail::value_t::array
                       : detail::value_t::object;
            }

            switch (ptr->type())
            {
                case detail::value_t::object:
                {
                    // use unchecked object access
                    ptr = &ptr->operator[](reference_token);
                    break;
                }

                case detail::value_t::array:
                {
                    if (reference_token == "-")
                    {
                        // explicitly treat "-" as index beyond the end
                        ptr = &ptr->operator[](ptr->m_value.array->size());
                    }
                    else
                    {
                        // convert array index to number; unchecked access
                        ptr = &ptr->operator[](array_index<BasicJsonType>(reference_token));
                    }
                    break;
                }

                case detail::value_t::null:
                case detail::value_t::string:
                case detail::value_t::boolean:
                case detail::value_t::number_integer:
                case detail::value_t::number_unsigned:
                case detail::value_t::number_float:
                case detail::value_t::binary:
                case detail::value_t::discarded:
                default:
                    JSON_THROW(detail::out_of_range::create(404, detail::concat("unresolved reference token '", reference_token, "'"), ptr));
            }
        }

        return *ptr;
    }

    /*!
    @throw parse_error.106   if an array index begins with '0'
    @throw parse_error.109   if an array index was not a number
    @throw out_of_range.402  if the array index '-' is used
    @throw out_of_range.404  if the JSON pointer can not be resolved
    */
    template<typename BasicJsonType>
    BasicJsonType& get_checked(BasicJsonType* ptr) const
    {
        for (const auto& reference_token : reference_tokens)
        {
            switch (ptr->type())
            {
                case detail::value_t::object:
                {
                    // note: at performs range check
                    ptr = &ptr->at(reference_token);
                    break;
                }

                case detail::value_t::array:
                {
                    if (JSON_HEDLEY_UNLIKELY(reference_token == "-"))
                    {
                        // "-" always fails the range check
                        JSON_THROW(detail::out_of_range::create(402, detail::concat(
                                "array index '-' (", std::to_string(ptr->m_value.array->size()),
                                ") is out of range"), ptr));
                    }

                    // note: at performs range check
                    ptr = &ptr->at(array_index<BasicJsonType>(reference_token));
                    break;
                }

                case detail::value_t::null:
                case detail::value_t::string:
                case detail::value_t::boolean:
                case detail::value_t::number_integer:
                case detail::value_t::number_unsigned:
                case detail::value_t::number_float:
                case detail::value_t::binary:
                case detail::value_t::discarded:
                default:
                    JSON_THROW(detail::out_of_range::create(404, detail::concat("unresolved reference token '", reference_token, "'"), ptr));
            }
        }

        return *ptr;
    }

    /*!
    @brief return a const reference to the pointed to value

    @param[in] ptr  a JSON value

    @return const reference to the JSON value pointed to by the JSON
    pointer

    @throw parse_error.106   if an array index begins with '0'
    @throw parse_error.109   if an array index was not a number
    @throw out_of_range.402  if the array index '-' is used
    @throw out_of_range.404  if the JSON pointer can not be resolved
    */
    template<typename BasicJsonType>
    const BasicJsonType& get_unchecked(const BasicJsonType* ptr) const
    {
        for (const auto& reference_token : reference_tokens)
        {
            switch (ptr->type())
            {
                case detail::value_t::object:
                {
                    // use unchecked object access
                    ptr = &ptr->operator[](reference_token);
                    break;
                }

                case detail::value_t::array:
                {
                    if (JSON_HEDLEY_UNLIKELY(reference_token == "-"))
                    {
                        // "-" cannot be used for const access
                        JSON_THROW(detail::out_of_range::create(402, detail::concat("array index '-' (", std::to_string(ptr->m_value.array->size()), ") is out of range"), ptr));
                    }

                    // use unchecked array access
                    ptr = &ptr->operator[](array_index<BasicJsonType>(reference_token));
                    break;
                }

                case detail::value_t::null:
                case detail::value_t::string:
                case detail::value_t::boolean:
                case detail::value_t::number_integer:
                case detail::value_t::number_unsigned:
                case detail::value_t::number_float:
                case detail::value_t::binary:
                case detail::value_t::discarded:
                default:
                    JSON_THROW(detail::out_of_range::create(404, detail::concat("unresolved reference token '", reference_token, "'"), ptr));
            }
        }

        return *ptr;
    }

    /*!
    @throw parse_error.106   if an array index begins with '0'
    @throw parse_error.109   if an array index was not a number
    @throw out_of_range.402  if the array index '-' is used
    @throw out_of_range.404  if the JSON pointer can not be resolved
    */
    template<typename BasicJsonType>
    const BasicJsonType& get_checked(const BasicJsonType* ptr) const
    {
        for (const auto& reference_token : reference_tokens)
        {
            switch (ptr->type())
            {
                case detail::value_t::object:
                {
                    // note: at performs range check
                    ptr = &ptr->at(reference_token);
                    break;
                }

                case detail::value_t::array:
                {
                    if (JSON_HEDLEY_UNLIKELY(reference_token == "-"))
                    {
                        // "-" always fails the range check
                        JSON_THROW(detail::out_of_range::create(402, detail::concat(
                                "array index '-' (", std::to_string(ptr->m_value.array->size()),
                                ") is out of range"), ptr));
                    }

                    // note: at performs range check
                    ptr = &ptr->at(array_index<BasicJsonType>(reference_token));
                    break;
                }

                case detail::value_t::null:
                case detail::value_t::string:
                case detail::value_t::boolean:
                case detail::value_t::number_integer:
                case detail::value_t::number_unsigned:
                case detail::value_t::number_float:
                case detail::value_t::binary:
                case detail::value_t::discarded:
                default:
                    JSON_THROW(detail::out_of_range::create(404, detail::concat("unresolved reference token '", reference_token, "'"), ptr));
            }
        }

        return *ptr;
    }

    /*!
    @throw parse_error.106   if an array index begins with '0'
    @throw parse_error.109   if an array index was not a number
    */
    template<typename BasicJsonType>
    bool contains(const BasicJsonType* ptr) const
    {
        for (const auto& reference_token : reference_tokens)
        {
            switch (ptr->type())
            {
                case detail::value_t::object:
                {
                    if (!ptr->contains(reference_token))
                    {
                        // we did not find the key in the object
                        return false;
                    }

                    ptr = &ptr->operator[](reference_token);
                    break;
                }

                case detail::value_t::array:
                {
                    if (JSON_HEDLEY_UNLIKELY(reference_token == "-"))
                    {
                        // "-" always fails the range check
                        return false;
                    }
                    if (JSON_HEDLEY_UNLIKELY(reference_token.size() == 1 && !("0" <= reference_token && reference_token <= "9")))
                    {
                        // invalid char
                        return false;
                    }
                    if (JSON_HEDLEY_UNLIKELY(reference_token.size() > 1))
                    {
                        if (JSON_HEDLEY_UNLIKELY(!('1' <= reference_token[0] && reference_token[0] <= '9')))
                        {
                            // first char should be between '1' and '9'
                            return false;
                        }
                        for (std::size_t i = 1; i < reference_token.size(); i++)
                        {
                            if (JSON_HEDLEY_UNLIKELY(!('0' <= reference_token[i] && reference_token[i] <= '9')))
                            {
                                // other char should be between '0' and '9'
                                return false;
                            }
                        }
                    }

                    const auto idx = array_index<BasicJsonType>(reference_token);
                    if (idx >= ptr->size())
                    {
                        // index out of range
                        return false;
                    }

                    ptr = &ptr->operator[](idx);
                    break;
                }

                case detail::value_t::null:
                case detail::value_t::string:
                case detail::value_t::boolean:
                case detail::value_t::number_integer:
                case detail::value_t::number_unsigned:
                case detail::value_t::number_float:
                case detail::value_t::binary:
                case detail::value_t::discarded:
                default:
                {
                    // we do not expect primitive values if there is still a
                    // reference token to process
                    return false;
                }
            }
        }

        // no reference token left means we found a primitive value
        return true;
    }

    /*!
    @brief split the string input to reference tokens

    @note This function is only called by the json_pointer constructor.
          All exceptions below are documented there.

    @throw parse_error.107  if the pointer is not empty or begins with '/'
    @throw parse_error.108  if character '~' is not followed by '0' or '1'
    */
    static std::vector<string_t> split(const string_t& reference_string)
    {
        std::vector<string_t> result;

        // special case: empty reference string -> no reference tokens
        if (reference_string.empty())
        {
            return result;
        }

        // check if nonempty reference string begins with slash
        if (JSON_HEDLEY_UNLIKELY(reference_string[0] != '/'))
        {
            JSON_THROW(detail::parse_error::create(107, 1, detail::concat("JSON pointer must be empty or begin with '/' - was: '", reference_string, "'"), nullptr));
        }

        // extract the reference tokens:
        // - slash: position of the last read slash (or end of string)
        // - start: position after the previous slash
        for (
            // search for the first slash after the first character
            std::size_t slash = reference_string.find_first_of('/', 1),
            // set the beginning of the first reference token
            start = 1;
            // we can stop if start == 0 (if slash == string_t::npos)
            start != 0;
            // set the beginning of the next reference token
            // (will eventually be 0 if slash == string_t::npos)
            start = (slash == string_t::npos) ? 0 : slash + 1,
            // find next slash
            slash = reference_string.find_first_of('/', start))
        {
            // use the text between the beginning of the reference token
            // (start) and the last slash (slash).
            auto reference_token = reference_string.substr(start, slash - start);

            // check reference tokens are properly escaped
            for (std::size_t pos = reference_token.find_first_of('~');
                    pos != string_t::npos;
                    pos = reference_token.find_first_of('~', pos + 1))
            {
                JSON_ASSERT(reference_token[pos] == '~');

                // ~ must be followed by 0 or 1
                if (JSON_HEDLEY_UNLIKELY(pos == reference_token.size() - 1 ||
                                         (reference_token[pos + 1] != '0' &&
                                          reference_token[pos + 1] != '1')))
                {
                    JSON_THROW(detail::parse_error::create(108, 0, "escape character '~' must be followed with '0' or '1'", nullptr));
                }
            }

            // finally, store the reference token
            detail::unescape(reference_token);
            result.push_back(reference_token);
        }

        return result;
    }

  private:
    /*!
    @param[in] reference_string  the reference string to the current value
    @param[in] value             the value to consider
    @param[in,out] result        the result object to insert values to

    @note Empty objects or arrays are flattened to `null`.
    */
    template<typename BasicJsonType>
    static void flatten(const string_t& reference_string,
                        const BasicJsonType& value,
                        BasicJsonType& result)
    {
        switch (value.type())
        {
            case detail::value_t::array:
            {
                if (value.m_value.array->empty())
                {
                    // flatten empty array as null
                    result[reference_string] = nullptr;
                }
                else
                {
                    // iterate array and use index as reference string
                    for (std::size_t i = 0; i < value.m_value.array->size(); ++i)
                    {
                        flatten(detail::concat(reference_string, '/', std::to_string(i)),
                                value.m_value.array->operator[](i), result);
                    }
                }
                break;
            }

            case detail::value_t::object:
            {
                if (value.m_value.object->empty())
                {
                    // flatten empty object as null
                    result[reference_string] = nullptr;
                }
                else
                {
                    // iterate object and use keys as reference string
                    for (const auto& element : *value.m_value.object)
                    {
                        flatten(detail::concat(reference_string, '/', detail::escape(element.first)), element.second, result);
                    }
                }
                break;
            }

            case detail::value_t::null:
            case detail::value_t::string:
            case detail::value_t::boolean:
            case detail::value_t::number_integer:
            case detail::value_t::number_unsigned:
            case detail::value_t::number_float:
            case detail::value_t::binary:
            case detail::value_t::discarded:
            default:
            {
                // add primitive value with its reference string
                result[reference_string] = value;
                break;
            }
        }
    }

    /*!
    @param[in] value  flattened JSON

    @return unflattened JSON

    @throw parse_error.109 if array index is not a number
    @throw type_error.314  if value is not an object
    @throw type_error.315  if object values are not primitive
    @throw type_error.313  if value cannot be unflattened
    */
    template<typename BasicJsonType>
    static BasicJsonType
    unflatten(const BasicJsonType& value)
    {
        if (JSON_HEDLEY_UNLIKELY(!value.is_object()))
        {
            JSON_THROW(detail::type_error::create(314, "only objects can be unflattened", &value));
        }

        BasicJsonType result;

        // iterate the JSON object values
        for (const auto& element : *value.m_value.object)
        {
            if (JSON_HEDLEY_UNLIKELY(!element.second.is_primitive()))
            {
                JSON_THROW(detail::type_error::create(315, "values in object must be primitive", &element.second));
            }

            // assign value to reference pointed to by JSON pointer; Note that if
            // the JSON pointer is "" (i.e., points to the whole value), function
            // get_and_create returns a reference to result itself. An assignment
            // will then create a primitive value.
            json_pointer(element.first).get_and_create(result) = element.second;
        }

        return result;
    }

    // can't use conversion operator because of ambiguity
    json_pointer<string_t> convert() const&
    {
        json_pointer<string_t> result;
        result.reference_tokens = reference_tokens;
        return result;
    }

    json_pointer<string_t> convert()&&
    {
        json_pointer<string_t> result;
        result.reference_tokens = std::move(reference_tokens);
        return result;
    }

  public:
#if JSON_HAS_THREE_WAY_COMPARISON
    /// @brief compares two JSON pointers for equality
    /// @sa https://json.nlohmann.me/api/json_pointer/operator_eq/
    template<typename RefStringTypeRhs>
    bool operator==(const json_pointer<RefStringTypeRhs>& rhs) const noexcept
    {
        return reference_tokens == rhs.reference_tokens;
    }

    /// @brief compares JSON pointer and string for equality
    /// @sa https://json.nlohmann.me/api/json_pointer/operator_eq/
    JSON_HEDLEY_DEPRECATED_FOR(3.11.2, operator==(json_pointer))
    bool operator==(const string_t& rhs) const
    {
        return *this == json_pointer(rhs);
    }

    /// @brief 3-way compares two JSON pointers
    template<typename RefStringTypeRhs>
    std::strong_ordering operator<=>(const json_pointer<RefStringTypeRhs>& rhs) const noexcept // *NOPAD*
    {
        return  reference_tokens <=> rhs.reference_tokens; // *NOPAD*
    }
#else
    /// @brief compares two JSON pointers for equality
    /// @sa https://json.nlohmann.me/api/json_pointer/operator_eq/
    template<typename RefStringTypeLhs, typename RefStringTypeRhs>
    // NOLINTNEXTLINE(readability-redundant-declaration)
    friend bool operator==(const json_pointer<RefStringTypeLhs>& lhs,
                           const json_pointer<RefStringTypeRhs>& rhs) noexcept;

    /// @brief compares JSON pointer and string for equality
    /// @sa https://json.nlohmann.me/api/json_pointer/operator_eq/
    template<typename RefStringTypeLhs, typename StringType>
    // NOLINTNEXTLINE(readability-redundant-declaration)
    friend bool operator==(const json_pointer<RefStringTypeLhs>& lhs,
                           const StringType& rhs);

    /// @brief compares string and JSON pointer for equality
    /// @sa https://json.nlohmann.me/api/json_pointer/operator_eq/
    template<typename RefStringTypeRhs, typename StringType>
    // NOLINTNEXTLINE(readability-redundant-declaration)
    friend bool operator==(const StringType& lhs,
                           const json_pointer<RefStringTypeRhs>& rhs);

    /// @brief compares two JSON pointers for inequality
    /// @sa https://json.nlohmann.me/api/json_pointer/operator_ne/
    template<typename RefStringTypeLhs, typename RefStringTypeRhs>
    // NOLINTNEXTLINE(readability-redundant-declaration)
    friend bool operator!=(const json_pointer<RefStringTypeLhs>& lhs,
                           const json_pointer<RefStringTypeRhs>& rhs) noexcept;

    /// @brief compares JSON pointer and string for inequality
    /// @sa https://json.nlohmann.me/api/json_pointer/operator_ne/
    template<typename RefStringTypeLhs, typename StringType>
    // NOLINTNEXTLINE(readability-redundant-declaration)
    friend bool operator!=(const json_pointer<RefStringTypeLhs>& lhs,
                           const StringType& rhs);

    /// @brief compares string and JSON pointer for inequality
    /// @sa https://json.nlohmann.me/api/json_pointer/operator_ne/
    template<typename RefStringTypeRhs, typename StringType>
    // NOLINTNEXTLINE(readability-redundant-declaration)
    friend bool operator!=(const StringType& lhs,
                           const json_pointer<RefStringTypeRhs>& rhs);

    /// @brief compares two JSON pointer for less-than
    template<typename RefStringTypeLhs, typename RefStringTypeRhs>
    // NOLINTNEXTLINE(readability-redundant-declaration)
    friend bool operator<(const json_pointer<RefStringTypeLhs>& lhs,
                          const json_pointer<RefStringTypeRhs>& rhs) noexcept;
#endif

  private:
    /// the reference tokens
    std::vector<string_t> reference_tokens;
};

#if !JSON_HAS_THREE_WAY_COMPARISON
// functions cannot be defined inside class due to ODR violations
template<typename RefStringTypeLhs, typename RefStringTypeRhs>
inline bool operator==(const json_pointer<RefStringTypeLhs>& lhs,
                       const json_pointer<RefStringTypeRhs>& rhs) noexcept
{
    return lhs.reference_tokens == rhs.reference_tokens;
}

template<typename RefStringTypeLhs,
         typename StringType = typename json_pointer<RefStringTypeLhs>::string_t>
JSON_HEDLEY_DEPRECATED_FOR(3.11.2, operator==(json_pointer, json_pointer))
inline bool operator==(const json_pointer<RefStringTypeLhs>& lhs,
                       const StringType& rhs)
{
    return lhs == json_pointer<RefStringTypeLhs>(rhs);
}

template<typename RefStringTypeRhs,
         typename StringType = typename json_pointer<RefStringTypeRhs>::string_t>
JSON_HEDLEY_DEPRECATED_FOR(3.11.2, operator==(json_pointer, json_pointer))
inline bool operator==(const StringType& lhs,
                       const json_pointer<RefStringTypeRhs>& rhs)
{
    return json_pointer<RefStringTypeRhs>(lhs) == rhs;
}

template<typename RefStringTypeLhs, typename RefStringTypeRhs>
inline bool operator!=(const json_pointer<RefStringTypeLhs>& lhs,
                       const json_pointer<RefStringTypeRhs>& rhs) noexcept
{
    return !(lhs == rhs);
}

template<typename RefStringTypeLhs,
         typename StringType = typename json_pointer<RefStringTypeLhs>::string_t>
JSON_HEDLEY_DEPRECATED_FOR(3.11.2, operator!=(json_pointer, json_pointer))
inline bool operator!=(const json_pointer<RefStringTypeLhs>& lhs,
                       const StringType& rhs)
{
    return !(lhs == rhs);
}

template<typename RefStringTypeRhs,
         typename StringType = typename json_pointer<RefStringTypeRhs>::string_t>
JSON_HEDLEY_DEPRECATED_FOR(3.11.2, operator!=(json_pointer, json_pointer))
inline bool operator!=(const StringType& lhs,
                       const json_pointer<RefStringTypeRhs>& rhs)
{
    return !(lhs == rhs);
}

template<typename RefStringTypeLhs, typename RefStringTypeRhs>
inline bool operator<(const json_pointer<RefStringTypeLhs>& lhs,
                      const json_pointer<RefStringTypeRhs>& rhs) noexcept
{
    return lhs.reference_tokens < rhs.reference_tokens;
}
#endif

NLOHMANN_JSON_NAMESPACE_END

// #include <nlohmann/detail/json_ref.hpp>
//     __ _____ _____ _____
//  __|  |   __|     |   | |  JSON for Modern C++
// |  |  |__   |  |  | | | |  version 3.11.2
// |_____|_____|_____|_|___|  https://github.com/nlohmann/json
//
// SPDX-FileCopyrightText: 2013-2022 Niels Lohmann <https://nlohmann.me>
// SPDX-License-Identifier: MIT



#include <initializer_list>
#include <utility>

// #include <nlohmann/detail/abi_macros.hpp>

// #include <nlohmann/detail/meta/type_traits.hpp>


NLOHMANN_JSON_NAMESPACE_BEGIN
namespace detail
{

template<typename BasicJsonType>
class json_ref
{
  public:
    using value_type = BasicJsonType;

    json_ref(value_type&& value)
        : owned_value(std::move(value))
    {}

    json_ref(const value_type& value)
        : value_ref(&value)
    {}

    json_ref(std::initializer_list<json_ref> init)
        : owned_value(init)
    {}

    template <
        class... Args,
        enable_if_t<std::is_constructible<value_type, Args...>::value, int> = 0 >
    json_ref(Args && ... args)
        : owned_value(std::forward<Args>(args)...)
    {}

    // class should be movable only
    json_ref(json_ref&&) noexcept = default;
    json_ref(const json_ref&) = delete;
    json_ref& operator=(const json_ref&) = delete;
    json_ref& operator=(json_ref&&) = delete;
    ~json_ref() = default;

    value_type moved_or_copied() const
    {
        if (value_ref == nullptr)
        {
            return std::move(owned_value);
        }
        return *value_ref;
    }

    value_type const& operator*() const
    {
        return value_ref ? *value_ref : owned_value;
    }

    value_type const* operator->() const
    {
        return &** this;
    }

  private:
    mutable value_type owned_value = nullptr;
    value_type const* value_ref = nullptr;
};

}  // namespace detail
NLOHMANN_JSON_NAMESPACE_END

// #include <nlohmann/detail/macro_scope.hpp>

// #include <nlohmann/detail/string_concat.hpp>

// #include <nlohmann/detail/string_escape.hpp>

// #include <nlohmann/detail/meta/cpp_future.hpp>

// #include <nlohmann/detail/meta/type_traits.hpp>

// #include <nlohmann/detail/output/binary_writer.hpp>
//     __ _____ _____ _____
//  __|  |   __|     |   | |  JSON for Modern C++
// |  |  |__   |  |  | | | |  version 3.11.2
// |_____|_____|_____|_|___|  https://github.com/nlohmann/json
//
// SPDX-FileCopyrightText: 2013-2022 Niels Lohmann <https://nlohmann.me>
// SPDX-License-Identifier: MIT



#include <algorithm> // reverse
#include <array> // array
#include <map> // map
#include <cmath> // isnan, isinf
#include <cstdint> // uint8_t, uint16_t, uint32_t, uint64_t
#include <cstring> // memcpy
#include <limits> // numeric_limits
#include <string> // string
#include <utility> // move
#include <vector> // vector

// #include <nlohmann/detail/input/binary_reader.hpp>

// #include <nlohmann/detail/macro_scope.hpp>

// #include <nlohmann/detail/output/output_adapters.hpp>
//     __ _____ _____ _____
//  __|  |   __|     |   | |  JSON for Modern C++
// |  |  |__   |  |  | | | |  version 3.11.2
// |_____|_____|_____|_|___|  https://github.com/nlohmann/json
//
// SPDX-FileCopyrightText: 2013-2022 Niels Lohmann <https://nlohmann.me>
// SPDX-License-Identifier: MIT



#include <algorithm> // copy
#include <cstddef> // size_t
#include <iterator> // back_inserter
#include <memory> // shared_ptr, make_shared
#include <string> // basic_string
#include <vector> // vector

#ifndef JSON_NO_IO
    #include <ios>      // streamsize
    #include <ostream>  // basic_ostream
#endif  // JSON_NO_IO

// #include <nlohmann/detail/macro_scope.hpp>


NLOHMANN_JSON_NAMESPACE_BEGIN
namespace detail
{

/// abstract output adapter interface
template<typename CharType> struct output_adapter_protocol
{
    virtual void write_character(CharType c) = 0;
    virtual void write_characters(const CharType* s, std::size_t length) = 0;
    virtual ~output_adapter_protocol() = default;

    output_adapter_protocol() = default;
    output_adapter_protocol(const output_adapter_protocol&) = default;
    output_adapter_protocol(output_adapter_protocol&&) noexcept = default;
    output_adapter_protocol& operator=(const output_adapter_protocol&) = default;
    output_adapter_protocol& operator=(output_adapter_protocol&&) noexcept = default;
};

/// a type to simplify interfaces
template<typename CharType>
using output_adapter_t = std::shared_ptr<output_adapter_protocol<CharType>>;

/// output adapter for byte vectors
template<typename CharType, typename AllocatorType = std::allocator<CharType>>
class output_vector_adapter : public output_adapter_protocol<CharType>
{
  public:
    explicit output_vector_adapter(std::vector<CharType, AllocatorType>& vec) noexcept
        : v(vec)
    {}

    void write_character(CharType c) override
    {
        v.push_back(c);
    }

    JSON_HEDLEY_NON_NULL(2)
    void write_characters(const CharType* s, std::size_t length) override
    {
        v.insert(v.end(), s, s + length);
    }

  private:
    std::vector<CharType, AllocatorType>& v;
};

#ifndef JSON_NO_IO
/// output adapter for output streams
template<typename CharType>
class output_stream_adapter : public output_adapter_protocol<CharType>
{
  public:
    explicit output_stream_adapter(std::basic_ostream<CharType>& s) noexcept
        : stream(s)
    {}

    void write_character(CharType c) override
    {
        stream.put(c);
    }

    JSON_HEDLEY_NON_NULL(2)
    void write_characters(const CharType* s, std::size_t length) override
    {
        stream.write(s, static_cast<std::streamsize>(length));
    }

  private:
    std::basic_ostream<CharType>& stream;
};
#endif  // JSON_NO_IO

/// output adapter for basic_string
template<typename CharType, typename StringType = std::basic_string<CharType>>
class output_string_adapter : public output_adapter_protocol<CharType>
{
  public:
    explicit output_string_adapter(StringType& s) noexcept
        : str(s)
    {}

    void write_character(CharType c) override
    {
        str.push_back(c);
    }

    JSON_HEDLEY_NON_NULL(2)
    void write_characters(const CharType* s, std::size_t length) override
    {
        str.append(s, length);
    }

  private:
    StringType& str;
};

template<typename CharType, typename StringType = std::basic_string<CharType>>
class output_adapter
{
  public:
    template<typename AllocatorType = std::allocator<CharType>>
    output_adapter(std::vector<CharType, AllocatorType>& vec)
        : oa(std::make_shared<output_vector_adapter<CharType, AllocatorType>>(vec)) {}

#ifndef JSON_NO_IO
    output_adapter(std::basic_ostream<CharType>& s)
        : oa(std::make_shared<output_stream_adapter<CharType>>(s)) {}
#endif  // JSON_NO_IO

    output_adapter(StringType& s)
        : oa(std::make_shared<output_string_adapter<CharType, StringType>>(s)) {}

    operator output_adapter_t<CharType>()
    {
        return oa;
    }

  private:
    output_adapter_t<CharType> oa = nullptr;
};

}  // namespace detail
NLOHMANN_JSON_NAMESPACE_END

// #include <nlohmann/detail/string_concat.hpp>


NLOHMANN_JSON_NAMESPACE_BEGIN
namespace detail
{

///////////////////
// binary writer //
///////////////////

/*!
@brief serialization to CBOR and MessagePack values
*/
template<typename BasicJsonType, typename CharType>
class binary_writer
{
    using string_t = typename BasicJsonType::string_t;
    using binary_t = typename BasicJsonType::binary_t;
    using number_float_t = typename BasicJsonType::number_float_t;

  public:
    /*!
    @brief create a binary writer

    @param[in] adapter  output adapter to write to
    */
    explicit binary_writer(output_adapter_t<CharType> adapter) : oa(std::move(adapter))
    {
        JSON_ASSERT(oa);
    }

    /*!
    @param[in] j  JSON value to serialize
    @pre       j.type() == value_t::object
    */
    void write_bson(const BasicJsonType& j)
    {
        switch (j.type())
        {
            case value_t::object:
            {
                write_bson_object(*j.m_value.object);
                break;
            }

            case value_t::null:
            case value_t::array:
            case value_t::string:
            case value_t::boolean:
            case value_t::number_integer:
            case value_t::number_unsigned:
            case value_t::number_float:
            case value_t::binary:
            case value_t::discarded:
            default:
            {
                JSON_THROW(type_error::create(317, concat("to serialize to BSON, top-level type must be object, but is ", j.type_name()), &j));
            }
        }
    }

    /*!
    @param[in] j  JSON value to serialize
    */
    void write_cbor(const BasicJsonType& j)
    {
        switch (j.type())
        {
            case value_t::null:
            {
                oa->write_character(to_char_type(0xF6));
                break;
            }

            case value_t::boolean:
            {
                oa->write_character(j.m_value.boolean
                                    ? to_char_type(0xF5)
                                    : to_char_type(0xF4));
                break;
            }

            case value_t::number_integer:
            {
                if (j.m_value.number_integer >= 0)
                {
                    // CBOR does not differentiate between positive signed
                    // integers and unsigned integers. Therefore, we used the
                    // code from the value_t::number_unsigned case here.
                    if (j.m_value.number_integer <= 0x17)
                    {
                        write_number(static_cast<std::uint8_t>(j.m_value.number_integer));
                    }
                    else if (j.m_value.number_integer <= (std::numeric_limits<std::uint8_t>::max)())
                    {
                        oa->write_character(to_char_type(0x18));
                        write_number(static_cast<std::uint8_t>(j.m_value.number_integer));
                    }
                    else if (j.m_value.number_integer <= (std::numeric_limits<std::uint16_t>::max)())
                    {
                        oa->write_character(to_char_type(0x19));
                        write_number(static_cast<std::uint16_t>(j.m_value.number_integer));
                    }
                    else if (j.m_value.number_integer <= (std::numeric_limits<std::uint32_t>::max)())
                    {
                        oa->write_character(to_char_type(0x1A));
                        write_number(static_cast<std::uint32_t>(j.m_value.number_integer));
                    }
                    else
                    {
                        oa->write_character(to_char_type(0x1B));
                        write_number(static_cast<std::uint64_t>(j.m_value.number_integer));
                    }
                }
                else
                {
                    // The conversions below encode the sign in the first
                    // byte, and the value is converted to a positive number.
                    const auto positive_number = -1 - j.m_value.number_integer;
                    if (j.m_value.number_integer >= -24)
                    {
                        write_number(static_cast<std::uint8_t>(0x20 + positive_number));
                    }
                    else if (positive_number <= (std::numeric_limits<std::uint8_t>::max)())
                    {
                        oa->write_character(to_char_type(0x38));
                        write_number(static_cast<std::uint8_t>(positive_number));
                    }
                    else if (positive_number <= (std::numeric_limits<std::uint16_t>::max)())
                    {
                        oa->write_character(to_char_type(0x39));
                        write_number(static_cast<std::uint16_t>(positive_number));
                    }
                    else if (positive_number <= (std::numeric_limits<std::uint32_t>::max)())
                    {
                        oa->write_character(to_char_type(0x3A));
                        write_number(static_cast<std::uint32_t>(positive_number));
                    }
                    else
                    {
                        oa->write_character(to_char_type(0x3B));
                        write_number(static_cast<std::uint64_t>(positive_number));
                    }
                }
                break;
            }

            case value_t::number_unsigned:
            {
                if (j.m_value.number_unsigned <= 0x17)
                {
                    write_number(static_cast<std::uint8_t>(j.m_value.number_unsigned));
                }
                else if (j.m_value.number_unsigned <= (std::numeric_limits<std::uint8_t>::max)())
                {
                    oa->write_character(to_char_type(0x18));
                    write_number(static_cast<std::uint8_t>(j.m_value.number_unsigned));
                }
                else if (j.m_value.number_unsigned <= (std::numeric_limits<std::uint16_t>::max)())
                {
                    oa->write_character(to_char_type(0x19));
                    write_number(static_cast<std::uint16_t>(j.m_value.number_unsigned));
                }
                else if (j.m_value.number_unsigned <= (std::numeric_limits<std::uint32_t>::max)())
                {
                    oa->write_character(to_char_type(0x1A));
                    write_number(static_cast<std::uint32_t>(j.m_value.number_unsigned));
                }
                else
                {
                    oa->write_character(to_char_type(0x1B));
                    write_number(static_cast<std::uint64_t>(j.m_value.number_unsigned));
                }
                break;
            }

            case value_t::number_float:
            {
                if (std::isnan(j.m_value.number_float))
                {
                    // NaN is 0xf97e00 in CBOR
                    oa->write_character(to_char_type(0xF9));
                    oa->write_character(to_char_type(0x7E));
                    oa->write_character(to_char_type(0x00));
                }
                else if (std::isinf(j.m_value.number_float))
                {
                    // Infinity is 0xf97c00, -Infinity is 0xf9fc00
                    oa->write_character(to_char_type(0xf9));
                    oa->write_character(j.m_value.number_float > 0 ? to_char_type(0x7C) : to_char_type(0xFC));
                    oa->write_character(to_char_type(0x00));
                }
                else
                {
                    write_compact_float(j.m_value.number_float, detail::input_format_t::cbor);
                }
                break;
            }

            case value_t::string:
            {
                // step 1: write control byte and the string length
                const auto N = j.m_value.string->size();
                if (N <= 0x17)
                {
                    write_number(static_cast<std::uint8_t>(0x60 + N));
                }
                else if (N <= (std::numeric_limits<std::uint8_t>::max)())
                {
                    oa->write_character(to_char_type(0x78));
                    write_number(static_cast<std::uint8_t>(N));
                }
                else if (N <= (std::numeric_limits<std::uint16_t>::max)())
                {
                    oa->write_character(to_char_type(0x79));
                    write_number(static_cast<std::uint16_t>(N));
                }
                else if (N <= (std::numeric_limits<std::uint32_t>::max)())
                {
                    oa->write_character(to_char_type(0x7A));
                    write_number(static_cast<std::uint32_t>(N));
                }
                // LCOV_EXCL_START
                else if (N <= (std::numeric_limits<std::uint64_t>::max)())
                {
                    oa->write_character(to_char_type(0x7B));
                    write_number(static_cast<std::uint64_t>(N));
                }
                // LCOV_EXCL_STOP

                // step 2: write the string
                oa->write_characters(
                    reinterpret_cast<const CharType*>(j.m_value.string->c_str()),
                    j.m_value.string->size());
                break;
            }

            case value_t::array:
            {
                // step 1: write control byte and the array size
                const auto N = j.m_value.array->size();
                if (N <= 0x17)
                {
                    write_number(static_cast<std::uint8_t>(0x80 + N));
                }
                else if (N <= (std::numeric_limits<std::uint8_t>::max)())
                {
                    oa->write_character(to_char_type(0x98));
                    write_number(static_cast<std::uint8_t>(N));
                }
                else if (N <= (std::numeric_limits<std::uint16_t>::max)())
                {
                    oa->write_character(to_char_type(0x99));
                    write_number(static_cast<std::uint16_t>(N));
                }
                else if (N <= (std::numeric_limits<std::uint32_t>::max)())
                {
                    oa->write_character(to_char_type(0x9A));
                    write_number(static_cast<std::uint32_t>(N));
                }
                // LCOV_EXCL_START
                else if (N <= (std::numeric_limits<std::uint64_t>::max)())
                {
                    oa->write_character(to_char_type(0x9B));
                    write_number(static_cast<std::uint64_t>(N));
                }
                // LCOV_EXCL_STOP

                // step 2: write each element
                for (const auto& el : *j.m_value.array)
                {
                    write_cbor(el);
                }
                break;
            }

            case value_t::binary:
            {
                if (j.m_value.binary->has_subtype())
                {
                    if (j.m_value.binary->subtype() <= (std::numeric_limits<std::uint8_t>::max)())
                    {
                        write_number(static_cast<std::uint8_t>(0xd8));
                        write_number(static_cast<std::uint8_t>(j.m_value.binary->subtype()));
                    }
                    else if (j.m_value.binary->subtype() <= (std::numeric_limits<std::uint16_t>::max)())
                    {
                        write_number(static_cast<std::uint8_t>(0xd9));
                        write_number(static_cast<std::uint16_t>(j.m_value.binary->subtype()));
                    }
                    else if (j.m_value.binary->subtype() <= (std::numeric_limits<std::uint32_t>::max)())
                    {
                        write_number(static_cast<std::uint8_t>(0xda));
                        write_number(static_cast<std::uint32_t>(j.m_value.binary->subtype()));
                    }
                    else if (j.m_value.binary->subtype() <= (std::numeric_limits<std::uint64_t>::max)())
                    {
                        write_number(static_cast<std::uint8_t>(0xdb));
                        write_number(static_cast<std::uint64_t>(j.m_value.binary->subtype()));
                    }
                }

                // step 1: write control byte and the binary array size
                const auto N = j.m_value.binary->size();
                if (N <= 0x17)
                {
                    write_number(static_cast<std::uint8_t>(0x40 + N));
                }
                else if (N <= (std::numeric_limits<std::uint8_t>::max)())
                {
                    oa->write_character(to_char_type(0x58));
                    write_number(static_cast<std::uint8_t>(N));
                }
                else if (N <= (std::numeric_limits<std::uint16_t>::max)())
                {
                    oa->write_character(to_char_type(0x59));
                    write_number(static_cast<std::uint16_t>(N));
                }
                else if (N <= (std::numeric_limits<std::uint32_t>::max)())
                {
                    oa->write_character(to_char_type(0x5A));
                    write_number(static_cast<std::uint32_t>(N));
                }
                // LCOV_EXCL_START
                else if (N <= (std::numeric_limits<std::uint64_t>::max)())
                {
                    oa->write_character(to_char_type(0x5B));
                    write_number(static_cast<std::uint64_t>(N));
                }
                // LCOV_EXCL_STOP

                // step 2: write each element
                oa->write_characters(
                    reinterpret_cast<const CharType*>(j.m_value.binary->data()),
                    N);

                break;
            }

            case value_t::object:
            {
                // step 1: write control byte and the object size
                const auto N = j.m_value.object->size();
                if (N <= 0x17)
                {
                    write_number(static_cast<std::uint8_t>(0xA0 + N));
                }
                else if (N <= (std::numeric_limits<std::uint8_t>::max)())
                {
                    oa->write_character(to_char_type(0xB8));
                    write_number(static_cast<std::uint8_t>(N));
                }
                else if (N <= (std::numeric_limits<std::uint16_t>::max)())
                {
                    oa->write_character(to_char_type(0xB9));
                    write_number(static_cast<std::uint16_t>(N));
                }
                else if (N <= (std::numeric_limits<std::uint32_t>::max)())
                {
                    oa->write_character(to_char_type(0xBA));
                    write_number(static_cast<std::uint32_t>(N));
                }
                // LCOV_EXCL_START
                else if (N <= (std::numeric_limits<std::uint64_t>::max)())
                {
                    oa->write_character(to_char_type(0xBB));
                    write_number(static_cast<std::uint64_t>(N));
                }
                // LCOV_EXCL_STOP

                // step 2: write each element
                for (const auto& el : *j.m_value.object)
                {
                    write_cbor(el.first);
                    write_cbor(el.second);
                }
                break;
            }

            case value_t::discarded:
            default:
                break;
        }
    }

    /*!
    @param[in] j  JSON value to serialize
    */
    void write_msgpack(const BasicJsonType& j)
    {
        switch (j.type())
        {
            case value_t::null: // nil
            {
                oa->write_character(to_char_type(0xC0));
                break;
            }

            case value_t::boolean: // true and false
            {
                oa->write_character(j.m_value.boolean
                                    ? to_char_type(0xC3)
                                    : to_char_type(0xC2));
                break;
            }

            case value_t::number_integer:
            {
                if (j.m_value.number_integer >= 0)
                {
                    // MessagePack does not differentiate between positive
                    // signed integers and unsigned integers. Therefore, we used
                    // the code from the value_t::number_unsigned case here.
                    if (j.m_value.number_unsigned < 128)
                    {
                        // positive fixnum
                        write_number(static_cast<std::uint8_t>(j.m_value.number_integer));
                    }
                    else if (j.m_value.number_unsigned <= (std::numeric_limits<std::uint8_t>::max)())
                    {
                        // uint 8
                        oa->write_character(to_char_type(0xCC));
                        write_number(static_cast<std::uint8_t>(j.m_value.number_integer));
                    }
                    else if (j.m_value.number_unsigned <= (std::numeric_limits<std::uint16_t>::max)())
                    {
                        // uint 16
                        oa->write_character(to_char_type(0xCD));
                        write_number(static_cast<std::uint16_t>(j.m_value.number_integer));
                    }
                    else if (j.m_value.number_unsigned <= (std::numeric_limits<std::uint32_t>::max)())
                    {
                        // uint 32
                        oa->write_character(to_char_type(0xCE));
                        write_number(static_cast<std::uint32_t>(j.m_value.number_integer));
                    }
                    else if (j.m_value.number_unsigned <= (std::numeric_limits<std::uint64_t>::max)())
                    {
                        // uint 64
                        oa->write_character(to_char_type(0xCF));
                        write_number(static_cast<std::uint64_t>(j.m_value.number_integer));
                    }
                }
                else
                {
                    if (j.m_value.number_integer >= -32)
                    {
                        // negative fixnum
                        write_number(static_cast<std::int8_t>(j.m_value.number_integer));
                    }
                    else if (j.m_value.number_integer >= (std::numeric_limits<std::int8_t>::min)() &&
                             j.m_value.number_integer <= (std::numeric_limits<std::int8_t>::max)())
                    {
                        // int 8
                        oa->write_character(to_char_type(0xD0));
                        write_number(static_cast<std::int8_t>(j.m_value.number_integer));
                    }
                    else if (j.m_value.number_integer >= (std::numeric_limits<std::int16_t>::min)() &&
                             j.m_value.number_integer <= (std::numeric_limits<std::int16_t>::max)())
                    {
                        // int 16
                        oa->write_character(to_char_type(0xD1));
                        write_number(static_cast<std::int16_t>(j.m_value.number_integer));
                    }
                    else if (j.m_value.number_integer >= (std::numeric_limits<std::int32_t>::min)() &&
                             j.m_value.number_integer <= (std::numeric_limits<std::int32_t>::max)())
                    {
                        // int 32
                        oa->write_character(to_char_type(0xD2));
                        write_number(static_cast<std::int32_t>(j.m_value.number_integer));
                    }
                    else if (j.m_value.number_integer >= (std::numeric_limits<std::int64_t>::min)() &&
                             j.m_value.number_integer <= (std::numeric_limits<std::int64_t>::max)())
                    {
                        // int 64
                        oa->write_character(to_char_type(0xD3));
                        write_number(static_cast<std::int64_t>(j.m_value.number_integer));
                    }
                }
                break;
            }

            case value_t::number_unsigned:
            {
                if (j.m_value.number_unsigned < 128)
                {
                    // positive fixnum
                    write_number(static_cast<std::uint8_t>(j.m_value.number_integer));
                }
                else if (j.m_value.number_unsigned <= (std::numeric_limits<std::uint8_t>::max)())
                {
                    // uint 8
                    oa->write_character(to_char_type(0xCC));
                    write_number(static_cast<std::uint8_t>(j.m_value.number_integer));
                }
                else if (j.m_value.number_unsigned <= (std::numeric_limits<std::uint16_t>::max)())
                {
                    // uint 16
                    oa->write_character(to_char_type(0xCD));
                    write_number(static_cast<std::uint16_t>(j.m_value.number_integer));
                }
                else if (j.m_value.number_unsigned <= (std::numeric_limits<std::uint32_t>::max)())
                {
                    // uint 32
                    oa->write_character(to_char_type(0xCE));
                    write_number(static_cast<std::uint32_t>(j.m_value.number_integer));
                }
                else if (j.m_value.number_unsigned <= (std::numeric_limits<std::uint64_t>::max)())
                {
                    // uint 64
                    oa->write_character(to_char_type(0xCF));
                    write_number(static_cast<std::uint64_t>(j.m_value.number_integer));
                }
                break;
            }

            case value_t::number_float:
            {
                write_compact_float(j.m_value.number_float, detail::input_format_t::msgpack);
                break;
            }

            case value_t::string:
            {
                // step 1: write control byte and the string length
                const auto N = j.m_value.string->size();
                if (N <= 31)
                {
                    // fixstr
                    write_number(static_cast<std::uint8_t>(0xA0 | N));
                }
                else if (N <= (std::numeric_limits<std::uint8_t>::max)())
                {
                    // str 8
                    oa->write_character(to_char_type(0xD9));
                    write_number(static_cast<std::uint8_t>(N));
                }
                else if (N <= (std::numeric_limits<std::uint16_t>::max)())
                {
                    // str 16
                    oa->write_character(to_char_type(0xDA));
                    write_number(static_cast<std::uint16_t>(N));
                }
                else if (N <= (std::numeric_limits<std::uint32_t>::max)())
                {
                    // str 32
                    oa->write_character(to_char_type(0xDB));
                    write_number(static_cast<std::uint32_t>(N));
                }

                // step 2: write the string
                oa->write_characters(
                    reinterpret_cast<const CharType*>(j.m_value.string->c_str()),
                    j.m_value.string->size());
                break;
            }

            case value_t::array:
            {
                // step 1: write control byte and the array size
                const auto N = j.m_value.array->size();
                if (N <= 15)
                {
                    // fixarray
                    write_number(static_cast<std::uint8_t>(0x90 | N));
                }
                else if (N <= (std::numeric_limits<std::uint16_t>::max)())
                {
                    // array 16
                    oa->write_character(to_char_type(0xDC));
                    write_number(static_cast<std::uint16_t>(N));
                }
                else if (N <= (std::numeric_limits<std::uint32_t>::max)())
                {
                    // array 32
                    oa->write_character(to_char_type(0xDD));
                    write_number(static_cast<std::uint32_t>(N));
                }

                // step 2: write each element
                for (const auto& el : *j.m_value.array)
                {
                    write_msgpack(el);
                }
                break;
            }

            case value_t::binary:
            {
                // step 0: determine if the binary type has a set subtype to
                // determine whether or not to use the ext or fixext types
                const bool use_ext = j.m_value.binary->has_subtype();

                // step 1: write control byte and the byte string length
                const auto N = j.m_value.binary->size();
                if (N <= (std::numeric_limits<std::uint8_t>::max)())
                {
                    std::uint8_t output_type{};
                    bool fixed = true;
                    if (use_ext)
                    {
                        switch (N)
                        {
                            case 1:
                                output_type = 0xD4; // fixext 1
                                break;
                            case 2:
                                output_type = 0xD5; // fixext 2
                                break;
                            case 4:
                                output_type = 0xD6; // fixext 4
                                break;
                            case 8:
                                output_type = 0xD7; // fixext 8
                                break;
                            case 16:
                                output_type = 0xD8; // fixext 16
                                break;
                            default:
                                output_type = 0xC7; // ext 8
                                fixed = false;
                                break;
                        }

                    }
                    else
                    {
                        output_type = 0xC4; // bin 8
                        fixed = false;
                    }

                    oa->write_character(to_char_type(output_type));
                    if (!fixed)
                    {
                        write_number(static_cast<std::uint8_t>(N));
                    }
                }
                else if (N <= (std::numeric_limits<std::uint16_t>::max)())
                {
                    std::uint8_t output_type = use_ext
                                               ? 0xC8 // ext 16
                                               : 0xC5; // bin 16

                    oa->write_character(to_char_type(output_type));
                    write_number(static_cast<std::uint16_t>(N));
                }
                else if (N <= (std::numeric_limits<std::uint32_t>::max)())
                {
                    std::uint8_t output_type = use_ext
                                               ? 0xC9 // ext 32
                                               : 0xC6; // bin 32

                    oa->write_character(to_char_type(output_type));
                    write_number(static_cast<std::uint32_t>(N));
                }

                // step 1.5: if this is an ext type, write the subtype
                if (use_ext)
                {
                    write_number(static_cast<std::int8_t>(j.m_value.binary->subtype()));
                }

                // step 2: write the byte string
                oa->write_characters(
                    reinterpret_cast<const CharType*>(j.m_value.binary->data()),
                    N);

                break;
            }

            case value_t::object:
            {
                // step 1: write control byte and the object size
                const auto N = j.m_value.object->size();
                if (N <= 15)
                {
                    // fixmap
                    write_number(static_cast<std::uint8_t>(0x80 | (N & 0xF)));
                }
                else if (N <= (std::numeric_limits<std::uint16_t>::max)())
                {
                    // map 16
                    oa->write_character(to_char_type(0xDE));
                    write_number(static_cast<std::uint16_t>(N));
                }
                else if (N <= (std::numeric_limits<std::uint32_t>::max)())
                {
                    // map 32
                    oa->write_character(to_char_type(0xDF));
                    write_number(static_cast<std::uint32_t>(N));
                }

                // step 2: write each element
                for (const auto& el : *j.m_value.object)
                {
                    write_msgpack(el.first);
                    write_msgpack(el.second);
                }
                break;
            }

            case value_t::discarded:
            default:
                break;
        }
    }

    /*!
    @param[in] j  JSON value to serialize
    @param[in] use_count   whether to use '#' prefixes (optimized format)
    @param[in] use_type    whether to use '$' prefixes (optimized format)
    @param[in] add_prefix  whether prefixes need to be used for this value
    @param[in] use_bjdata  whether write in BJData format, default is false
    */
    void write_ubjson(const BasicJsonType& j, const bool use_count,
                      const bool use_type, const bool add_prefix = true,
                      const bool use_bjdata = false)
    {
        switch (j.type())
        {
            case value_t::null:
            {
                if (add_prefix)
                {
                    oa->write_character(to_char_type('Z'));
                }
                break;
            }

            case value_t::boolean:
            {
                if (add_prefix)
                {
                    oa->write_character(j.m_value.boolean
                                        ? to_char_type('T')
                                        : to_char_type('F'));
                }
                break;
            }

            case value_t::number_integer:
            {
                write_number_with_ubjson_prefix(j.m_value.number_integer, add_prefix, use_bjdata);
                break;
            }

            case value_t::number_unsigned:
            {
                write_number_with_ubjson_prefix(j.m_value.number_unsigned, add_prefix, use_bjdata);
                break;
            }

            case value_t::number_float:
            {
                write_number_with_ubjson_prefix(j.m_value.number_float, add_prefix, use_bjdata);
                break;
            }

            case value_t::string:
            {
                if (add_prefix)
                {
                    oa->write_character(to_char_type('S'));
                }
                write_number_with_ubjson_prefix(j.m_value.string->size(), true, use_bjdata);
                oa->write_characters(
                    reinterpret_cast<const CharType*>(j.m_value.string->c_str()),
                    j.m_value.string->size());
                break;
            }

            case value_t::array:
            {
                if (add_prefix)
                {
                    oa->write_character(to_char_type('['));
                }

                bool prefix_required = true;
                if (use_type && !j.m_value.array->empty())
                {
                    JSON_ASSERT(use_count);
                    const CharType first_prefix = ubjson_prefix(j.front(), use_bjdata);
                    const bool same_prefix = std::all_of(j.begin() + 1, j.end(),
                                                         [this, first_prefix, use_bjdata](const BasicJsonType & v)
                    {
                        return ubjson_prefix(v, use_bjdata) == first_prefix;
                    });

                    std::vector<CharType> bjdx = {'[', '{', 'S', 'H', 'T', 'F', 'N', 'Z'}; // excluded markers in bjdata optimized type

                    if (same_prefix && !(use_bjdata && std::find(bjdx.begin(), bjdx.end(), first_prefix) != bjdx.end()))
                    {
                        prefix_required = false;
                        oa->write_character(to_char_type('$'));
                        oa->write_character(first_prefix);
                    }
                }

                if (use_count)
                {
                    oa->write_character(to_char_type('#'));
                    write_number_with_ubjson_prefix(j.m_value.array->size(), true, use_bjdata);
                }

                for (const auto& el : *j.m_value.array)
                {
                    write_ubjson(el, use_count, use_type, prefix_required, use_bjdata);
                }

                if (!use_count)
                {
                    oa->write_character(to_char_type(']'));
                }

                break;
            }

            case value_t::binary:
            {
                if (add_prefix)
                {
                    oa->write_character(to_char_type('['));
                }

                if (use_type && !j.m_value.binary->empty())
                {
                    JSON_ASSERT(use_count);
                    oa->write_character(to_char_type('$'));
                    oa->write_character('U');
                }

                if (use_count)
                {
                    oa->write_character(to_char_type('#'));
                    write_number_with_ubjson_prefix(j.m_value.binary->size(), true, use_bjdata);
                }

                if (use_type)
                {
                    oa->write_characters(
                        reinterpret_cast<const CharType*>(j.m_value.binary->data()),
                        j.m_value.binary->size());
                }
                else
                {
                    for (size_t i = 0; i < j.m_value.binary->size(); ++i)
                    {
                        oa->write_character(to_char_type('U'));
                        oa->write_character(j.m_value.binary->data()[i]);
                    }
                }

                if (!use_count)
                {
                    oa->write_character(to_char_type(']'));
                }

                break;
            }

            case value_t::object:
            {
                if (use_bjdata && j.m_value.object->size() == 3 && j.m_value.object->find("_ArrayType_") != j.m_value.object->end() && j.m_value.object->find("_ArraySize_") != j.m_value.object->end() && j.m_value.object->find("_ArrayData_") != j.m_value.object->end())
                {
                    if (!write_bjdata_ndarray(*j.m_value.object, use_count, use_type))  // decode bjdata ndarray in the JData format (https://github.com/NeuroJSON/jdata)
                    {
                        break;
                    }
                }

                if (add_prefix)
                {
                    oa->write_character(to_char_type('{'));
                }

                bool prefix_required = true;
                if (use_type && !j.m_value.object->empty())
                {
                    JSON_ASSERT(use_count);
                    const CharType first_prefix = ubjson_prefix(j.front(), use_bjdata);
                    const bool same_prefix = std::all_of(j.begin(), j.end(),
                                                         [this, first_prefix, use_bjdata](const BasicJsonType & v)
                    {
                        return ubjson_prefix(v, use_bjdata) == first_prefix;
                    });

                    std::vector<CharType> bjdx = {'[', '{', 'S', 'H', 'T', 'F', 'N', 'Z'}; // excluded markers in bjdata optimized type

                    if (same_prefix && !(use_bjdata && std::find(bjdx.begin(), bjdx.end(), first_prefix) != bjdx.end()))
                    {
                        prefix_required = false;
                        oa->write_character(to_char_type('$'));
                        oa->write_character(first_prefix);
                    }
                }

                if (use_count)
                {
                    oa->write_character(to_char_type('#'));
                    write_number_with_ubjson_prefix(j.m_value.object->size(), true, use_bjdata);
                }

                for (const auto& el : *j.m_value.object)
                {
                    write_number_with_ubjson_prefix(el.first.size(), true, use_bjdata);
                    oa->write_characters(
                        reinterpret_cast<const CharType*>(el.first.c_str()),
                        el.first.size());
                    write_ubjson(el.second, use_count, use_type, prefix_required, use_bjdata);
                }

                if (!use_count)
                {
                    oa->write_character(to_char_type('}'));
                }

                break;
            }

            case value_t::discarded:
            default:
                break;
        }
    }

  private:
    //////////
    // BSON //
    //////////

    /*!
    @return The size of a BSON document entry header, including the id marker
            and the entry name size (and its null-terminator).
    */
    static std::size_t calc_bson_entry_header_size(const string_t& name, const BasicJsonType& j)
    {
        const auto it = name.find(static_cast<typename string_t::value_type>(0));
        if (JSON_HEDLEY_UNLIKELY(it != BasicJsonType::string_t::npos))
        {
            JSON_THROW(out_of_range::create(409, concat("BSON key cannot contain code point U+0000 (at byte ", std::to_string(it), ")"), &j));
            static_cast<void>(j);
        }

        return /*id*/ 1ul + name.size() + /*zero-terminator*/1u;
    }

    /*!
    @brief Writes the given @a element_type and @a name to the output adapter
    */
    void write_bson_entry_header(const string_t& name,
                                 const std::uint8_t element_type)
    {
        oa->write_character(to_char_type(element_type)); // boolean
        oa->write_characters(
            reinterpret_cast<const CharType*>(name.c_str()),
            name.size() + 1u);
    }

    /*!
    @brief Writes a BSON element with key @a name and boolean value @a value
    */
    void write_bson_boolean(const string_t& name,
                            const bool value)
    {
        write_bson_entry_header(name, 0x08);
        oa->write_character(value ? to_char_type(0x01) : to_char_type(0x00));
    }

    /*!
    @brief Writes a BSON element with key @a name and double value @a value
    */
    void write_bson_double(const string_t& name,
                           const double value)
    {
        write_bson_entry_header(name, 0x01);
        write_number<double>(value, true);
    }

    /*!
    @return The size of the BSON-encoded string in @a value
    */
    static std::size_t calc_bson_string_size(const string_t& value)
    {
        return sizeof(std::int32_t) + value.size() + 1ul;
    }

    /*!
    @brief Writes a BSON element with key @a name and string value @a value
    */
    void write_bson_string(const string_t& name,
                           const string_t& value)
    {
        write_bson_entry_header(name, 0x02);

        write_number<std::int32_t>(static_cast<std::int32_t>(value.size() + 1ul), true);
        oa->write_characters(
            reinterpret_cast<const CharType*>(value.c_str()),
            value.size() + 1);
    }

    /*!
    @brief Writes a BSON element with key @a name and null value
    */
    void write_bson_null(const string_t& name)
    {
        write_bson_entry_header(name, 0x0A);
    }

    /*!
    @return The size of the BSON-encoded integer @a value
    */
    static std::size_t calc_bson_integer_size(const std::int64_t value)
    {
        return (std::numeric_limits<std::int32_t>::min)() <= value && value <= (std::numeric_limits<std::int32_t>::max)()
               ? sizeof(std::int32_t)
               : sizeof(std::int64_t);
    }

    /*!
    @brief Writes a BSON element with key @a name and integer @a value
    */
    void write_bson_integer(const string_t& name,
                            const std::int64_t value)
    {
        if ((std::numeric_limits<std::int32_t>::min)() <= value && value <= (std::numeric_limits<std::int32_t>::max)())
        {
            write_bson_entry_header(name, 0x10); // int32
            write_number<std::int32_t>(static_cast<std::int32_t>(value), true);
        }
        else
        {
            write_bson_entry_header(name, 0x12); // int64
            write_number<std::int64_t>(static_cast<std::int64_t>(value), true);
        }
    }

    /*!
    @return The size of the BSON-encoded unsigned integer in @a j
    */
    static constexpr std::size_t calc_bson_unsigned_size(const std::uint64_t value) noexcept
    {
        return (value <= static_cast<std::uint64_t>((std::numeric_limits<std::int32_t>::max)()))
               ? sizeof(std::int32_t)
               : sizeof(std::int64_t);
    }

    /*!
    @brief Writes a BSON element with key @a name and unsigned @a value
    */
    void write_bson_unsigned(const string_t& name,
                             const BasicJsonType& j)
    {
        if (j.m_value.number_unsigned <= static_cast<std::uint64_t>((std::numeric_limits<std::int32_t>::max)()))
        {
            write_bson_entry_header(name, 0x10 /* int32 */);
            write_number<std::int32_t>(static_cast<std::int32_t>(j.m_value.number_unsigned), true);
        }
        else if (j.m_value.number_unsigned <= static_cast<std::uint64_t>((std::numeric_limits<std::int64_t>::max)()))
        {
            write_bson_entry_header(name, 0x12 /* int64 */);
            write_number<std::int64_t>(static_cast<std::int64_t>(j.m_value.number_unsigned), true);
        }
        else
        {
            JSON_THROW(out_of_range::create(407, concat("integer number ", std::to_string(j.m_value.number_unsigned), " cannot be represented by BSON as it does not fit int64"), &j));
        }
    }

    /*!
    @brief Writes a BSON element with key @a name and object @a value
    */
    void write_bson_object_entry(const string_t& name,
                                 const typename BasicJsonType::object_t& value)
    {
        write_bson_entry_header(name, 0x03); // object
        write_bson_object(value);
    }

    /*!
    @return The size of the BSON-encoded array @a value
    */
    static std::size_t calc_bson_array_size(const typename BasicJsonType::array_t& value)
    {
        std::size_t array_index = 0ul;

        const std::size_t embedded_document_size = std::accumulate(std::begin(value), std::end(value), static_cast<std::size_t>(0), [&array_index](std::size_t result, const typename BasicJsonType::array_t::value_type & el)
        {
            return result + calc_bson_element_size(std::to_string(array_index++), el);
        });

        return sizeof(std::int32_t) + embedded_document_size + 1ul;
    }

    /*!
    @return The size of the BSON-encoded binary array @a value
    */
    static std::size_t calc_bson_binary_size(const typename BasicJsonType::binary_t& value)
    {
        return sizeof(std::int32_t) + value.size() + 1ul;
    }

    /*!
    @brief Writes a BSON element with key @a name and array @a value
    */
    void write_bson_array(const string_t& name,
                          const typename BasicJsonType::array_t& value)
    {
        write_bson_entry_header(name, 0x04); // array
        write_number<std::int32_t>(static_cast<std::int32_t>(calc_bson_array_size(value)), true);

        std::size_t array_index = 0ul;

        for (const auto& el : value)
        {
            write_bson_element(std::to_string(array_index++), el);
        }

        oa->write_character(to_char_type(0x00));
    }

    /*!
    @brief Writes a BSON element with key @a name and binary value @a value
    */
    void write_bson_binary(const string_t& name,
                           const binary_t& value)
    {
        write_bson_entry_header(name, 0x05);

        write_number<std::int32_t>(static_cast<std::int32_t>(value.size()), true);
        write_number(value.has_subtype() ? static_cast<std::uint8_t>(value.subtype()) : static_cast<std::uint8_t>(0x00));

        oa->write_characters(reinterpret_cast<const CharType*>(value.data()), value.size());
    }

    /*!
    @brief Calculates the size necessary to serialize the JSON value @a j with its @a name
    @return The calculated size for the BSON document entry for @a j with the given @a name.
    */
    static std::size_t calc_bson_element_size(const string_t& name,
            const BasicJsonType& j)
    {
        const auto header_size = calc_bson_entry_header_size(name, j);
        switch (j.type())
        {
            case value_t::object:
                return header_size + calc_bson_object_size(*j.m_value.object);

            case value_t::array:
                return header_size + calc_bson_array_size(*j.m_value.array);

            case value_t::binary:
                return header_size + calc_bson_binary_size(*j.m_value.binary);

            case value_t::boolean:
                return header_size + 1ul;

            case value_t::number_float:
                return header_size + 8ul;

            case value_t::number_integer:
                return header_size + calc_bson_integer_size(j.m_value.number_integer);

            case value_t::number_unsigned:
                return header_size + calc_bson_unsigned_size(j.m_value.number_unsigned);

            case value_t::string:
                return header_size + calc_bson_string_size(*j.m_value.string);

            case value_t::null:
                return header_size + 0ul;

            // LCOV_EXCL_START
            case value_t::discarded:
            default:
                JSON_ASSERT(false); // NOLINT(cert-dcl03-c,hicpp-static-assert,misc-static-assert)
                return 0ul;
                // LCOV_EXCL_STOP
        }
    }

    /*!
    @brief Serializes the JSON value @a j to BSON and associates it with the
           key @a name.
    @param name The name to associate with the JSON entity @a j within the
                current BSON document
    */
    void write_bson_element(const string_t& name,
                            const BasicJsonType& j)
    {
        switch (j.type())
        {
            case value_t::object:
                return write_bson_object_entry(name, *j.m_value.object);

            case value_t::array:
                return write_bson_array(name, *j.m_value.array);

            case value_t::binary:
                return write_bson_binary(name, *j.m_value.binary);

            case value_t::boolean:
                return write_bson_boolean(name, j.m_value.boolean);

            case value_t::number_float:
                return write_bson_double(name, j.m_value.number_float);

            case value_t::number_integer:
                return write_bson_integer(name, j.m_value.number_integer);

            case value_t::number_unsigned:
                return write_bson_unsigned(name, j);

            case value_t::string:
                return write_bson_string(name, *j.m_value.string);

            case value_t::null:
                return write_bson_null(name);

            // LCOV_EXCL_START
            case value_t::discarded:
            default:
                JSON_ASSERT(false); // NOLINT(cert-dcl03-c,hicpp-static-assert,misc-static-assert)
                return;
                // LCOV_EXCL_STOP
        }
    }

    /*!
    @brief Calculates the size of the BSON serialization of the given
           JSON-object @a j.
    @param[in] value  JSON value to serialize
    @pre       value.type() == value_t::object
    */
    static std::size_t calc_bson_object_size(const typename BasicJsonType::object_t& value)
    {
        std::size_t document_size = std::accumulate(value.begin(), value.end(), static_cast<std::size_t>(0),
                                    [](size_t result, const typename BasicJsonType::object_t::value_type & el)
        {
            return result += calc_bson_element_size(el.first, el.second);
        });

        return sizeof(std::int32_t) + document_size + 1ul;
    }

    /*!
    @param[in] value  JSON value to serialize
    @pre       value.type() == value_t::object
    */
    void write_bson_object(const typename BasicJsonType::object_t& value)
    {
        write_number<std::int32_t>(static_cast<std::int32_t>(calc_bson_object_size(value)), true);

        for (const auto& el : value)
        {
            write_bson_element(el.first, el.second);
        }

        oa->write_character(to_char_type(0x00));
    }

    //////////
    // CBOR //
    //////////

    static constexpr CharType get_cbor_float_prefix(float /*unused*/)
    {
        return to_char_type(0xFA);  // Single-Precision Float
    }

    static constexpr CharType get_cbor_float_prefix(double /*unused*/)
    {
        return to_char_type(0xFB);  // Double-Precision Float
    }

    /////////////
    // MsgPack //
    /////////////

    static constexpr CharType get_msgpack_float_prefix(float /*unused*/)
    {
        return to_char_type(0xCA);  // float 32
    }

    static constexpr CharType get_msgpack_float_prefix(double /*unused*/)
    {
        return to_char_type(0xCB);  // float 64
    }

    ////////////
    // UBJSON //
    ////////////

    // UBJSON: write number (floating point)
    template<typename NumberType, typename std::enable_if<
                 std::is_floating_point<NumberType>::value, int>::type = 0>
    void write_number_with_ubjson_prefix(const NumberType n,
                                         const bool add_prefix,
                                         const bool use_bjdata)
    {
        if (add_prefix)
        {
            oa->write_character(get_ubjson_float_prefix(n));
        }
        write_number(n, use_bjdata);
    }

    // UBJSON: write number (unsigned integer)
    template<typename NumberType, typename std::enable_if<
                 std::is_unsigned<NumberType>::value, int>::type = 0>
    void write_number_with_ubjson_prefix(const NumberType n,
                                         const bool add_prefix,
                                         const bool use_bjdata)
    {
        if (n <= static_cast<std::uint64_t>((std::numeric_limits<std::int8_t>::max)()))
        {
            if (add_prefix)
            {
                oa->write_character(to_char_type('i'));  // int8
            }
            write_number(static_cast<std::uint8_t>(n), use_bjdata);
        }
        else if (n <= (std::numeric_limits<std::uint8_t>::max)())
        {
            if (add_prefix)
            {
                oa->write_character(to_char_type('U'));  // uint8
            }
            write_number(static_cast<std::uint8_t>(n), use_bjdata);
        }
        else if (n <= static_cast<std::uint64_t>((std::numeric_limits<std::int16_t>::max)()))
        {
            if (add_prefix)
            {
                oa->write_character(to_char_type('I'));  // int16
            }
            write_number(static_cast<std::int16_t>(n), use_bjdata);
        }
        else if (use_bjdata && n <= static_cast<uint64_t>((std::numeric_limits<uint16_t>::max)()))
        {
            if (add_prefix)
            {
                oa->write_character(to_char_type('u'));  // uint16 - bjdata only
            }
            write_number(static_cast<std::uint16_t>(n), use_bjdata);
        }
        else if (n <= static_cast<std::uint64_t>((std::numeric_limits<std::int32_t>::max)()))
        {
            if (add_prefix)
            {
                oa->write_character(to_char_type('l'));  // int32
            }
            write_number(static_cast<std::int32_t>(n), use_bjdata);
        }
        else if (use_bjdata && n <= static_cast<uint64_t>((std::numeric_limits<uint32_t>::max)()))
        {
            if (add_prefix)
            {
                oa->write_character(to_char_type('m'));  // uint32 - bjdata only
            }
            write_number(static_cast<std::uint32_t>(n), use_bjdata);
        }
        else if (n <= static_cast<std::uint64_t>((std::numeric_limits<std::int64_t>::max)()))
        {
            if (add_prefix)
            {
                oa->write_character(to_char_type('L'));  // int64
            }
            write_number(static_cast<std::int64_t>(n), use_bjdata);
        }
        else if (use_bjdata && n <= (std::numeric_limits<uint64_t>::max)())
        {
            if (add_prefix)
            {
                oa->write_character(to_char_type('M'));  // uint64 - bjdata only
            }
            write_number(static_cast<std::uint64_t>(n), use_bjdata);
        }
        else
        {
            if (add_prefix)
            {
                oa->write_character(to_char_type('H'));  // high-precision number
            }

            const auto number = BasicJsonType(n).dump();
            write_number_with_ubjson_prefix(number.size(), true, use_bjdata);
            for (std::size_t i = 0; i < number.size(); ++i)
            {
                oa->write_character(to_char_type(static_cast<std::uint8_t>(number[i])));
            }
        }
    }

    // UBJSON: write number (signed integer)
    template < typename NumberType, typename std::enable_if <
                   std::is_signed<NumberType>::value&&
                   !std::is_floating_point<NumberType>::value, int >::type = 0 >
    void write_number_with_ubjson_prefix(const NumberType n,
                                         const bool add_prefix,
                                         const bool use_bjdata)
    {
        if ((std::numeric_limits<std::int8_t>::min)() <= n && n <= (std::numeric_limits<std::int8_t>::max)())
        {
            if (add_prefix)
            {
                oa->write_character(to_char_type('i'));  // int8
            }
            write_number(static_cast<std::int8_t>(n), use_bjdata);
        }
        else if (static_cast<std::int64_t>((std::numeric_limits<std::uint8_t>::min)()) <= n && n <= static_cast<std::int64_t>((std::numeric_limits<std::uint8_t>::max)()))
        {
            if (add_prefix)
            {
                oa->write_character(to_char_type('U'));  // uint8
            }
            write_number(static_cast<std::uint8_t>(n), use_bjdata);
        }
        else if ((std::numeric_limits<std::int16_t>::min)() <= n && n <= (std::numeric_limits<std::int16_t>::max)())
        {
            if (add_prefix)
            {
                oa->write_character(to_char_type('I'));  // int16
            }
            write_number(static_cast<std::int16_t>(n), use_bjdata);
        }
        else if (use_bjdata && (static_cast<std::int64_t>((std::numeric_limits<std::uint16_t>::min)()) <= n && n <= static_cast<std::int64_t>((std::numeric_limits<std::uint16_t>::max)())))
        {
            if (add_prefix)
            {
                oa->write_character(to_char_type('u'));  // uint16 - bjdata only
            }
            write_number(static_cast<uint16_t>(n), use_bjdata);
        }
        else if ((std::numeric_limits<std::int32_t>::min)() <= n && n <= (std::numeric_limits<std::int32_t>::max)())
        {
            if (add_prefix)
            {
                oa->write_character(to_char_type('l'));  // int32
            }
            write_number(static_cast<std::int32_t>(n), use_bjdata);
        }
        else if (use_bjdata && (static_cast<std::int64_t>((std::numeric_limits<std::uint32_t>::min)()) <= n && n <= static_cast<std::int64_t>((std::numeric_limits<std::uint32_t>::max)())))
        {
            if (add_prefix)
            {
                oa->write_character(to_char_type('m'));  // uint32 - bjdata only
            }
            write_number(static_cast<uint32_t>(n), use_bjdata);
        }
        else if ((std::numeric_limits<std::int64_t>::min)() <= n && n <= (std::numeric_limits<std::int64_t>::max)())
        {
            if (add_prefix)
            {
                oa->write_character(to_char_type('L'));  // int64
            }
            write_number(static_cast<std::int64_t>(n), use_bjdata);
        }
        // LCOV_EXCL_START
        else
        {
            if (add_prefix)
            {
                oa->write_character(to_char_type('H'));  // high-precision number
            }

            const auto number = BasicJsonType(n).dump();
            write_number_with_ubjson_prefix(number.size(), true, use_bjdata);
            for (std::size_t i = 0; i < number.size(); ++i)
            {
                oa->write_character(to_char_type(static_cast<std::uint8_t>(number[i])));
            }
        }
        // LCOV_EXCL_STOP
    }

    /*!
    @brief determine the type prefix of container values
    */
    CharType ubjson_prefix(const BasicJsonType& j, const bool use_bjdata) const noexcept
    {
        switch (j.type())
        {
            case value_t::null:
                return 'Z';

            case value_t::boolean:
                return j.m_value.boolean ? 'T' : 'F';

            case value_t::number_integer:
            {
                if ((std::numeric_limits<std::int8_t>::min)() <= j.m_value.number_integer && j.m_value.number_integer <= (std::numeric_limits<std::int8_t>::max)())
                {
                    return 'i';
                }
                if ((std::numeric_limits<std::uint8_t>::min)() <= j.m_value.number_integer && j.m_value.number_integer <= (std::numeric_limits<std::uint8_t>::max)())
                {
                    return 'U';
                }
                if ((std::numeric_limits<std::int16_t>::min)() <= j.m_value.number_integer && j.m_value.number_integer <= (std::numeric_limits<std::int16_t>::max)())
                {
                    return 'I';
                }
                if (use_bjdata && ((std::numeric_limits<std::uint16_t>::min)() <= j.m_value.number_integer && j.m_value.number_integer <= (std::numeric_limits<std::uint16_t>::max)()))
                {
                    return 'u';
                }
                if ((std::numeric_limits<std::int32_t>::min)() <= j.m_value.number_integer && j.m_value.number_integer <= (std::numeric_limits<std::int32_t>::max)())
                {
                    return 'l';
                }
                if (use_bjdata && ((std::numeric_limits<std::uint32_t>::min)() <= j.m_value.number_integer && j.m_value.number_integer <= (std::numeric_limits<std::uint32_t>::max)()))
                {
                    return 'm';
                }
                if ((std::numeric_limits<std::int64_t>::min)() <= j.m_value.number_integer && j.m_value.number_integer <= (std::numeric_limits<std::int64_t>::max)())
                {
                    return 'L';
                }
                // anything else is treated as high-precision number
                return 'H'; // LCOV_EXCL_LINE
            }

            case value_t::number_unsigned:
            {
                if (j.m_value.number_unsigned <= static_cast<std::uint64_t>((std::numeric_limits<std::int8_t>::max)()))
                {
                    return 'i';
                }
                if (j.m_value.number_unsigned <= static_cast<std::uint64_t>((std::numeric_limits<std::uint8_t>::max)()))
                {
                    return 'U';
                }
                if (j.m_value.number_unsigned <= static_cast<std::uint64_t>((std::numeric_limits<std::int16_t>::max)()))
                {
                    return 'I';
                }
                if (use_bjdata && j.m_value.number_unsigned <= static_cast<std::uint64_t>((std::numeric_limits<std::uint16_t>::max)()))
                {
                    return 'u';
                }
                if (j.m_value.number_unsigned <= static_cast<std::uint64_t>((std::numeric_limits<std::int32_t>::max)()))
                {
                    return 'l';
                }
                if (use_bjdata && j.m_value.number_unsigned <= static_cast<std::uint64_t>((std::numeric_limits<std::uint32_t>::max)()))
                {
                    return 'm';
                }
                if (j.m_value.number_unsigned <= static_cast<std::uint64_t>((std::numeric_limits<std::int64_t>::max)()))
                {
                    return 'L';
                }
                if (use_bjdata && j.m_value.number_unsigned <= (std::numeric_limits<std::uint64_t>::max)())
                {
                    return 'M';
                }
                // anything else is treated as high-precision number
                return 'H'; // LCOV_EXCL_LINE
            }

            case value_t::number_float:
                return get_ubjson_float_prefix(j.m_value.number_float);

            case value_t::string:
                return 'S';

            case value_t::array: // fallthrough
            case value_t::binary:
                return '[';

            case value_t::object:
                return '{';

            case value_t::discarded:
            default:  // discarded values
                return 'N';
        }
    }

    static constexpr CharType get_ubjson_float_prefix(float /*unused*/)
    {
        return 'd';  // float 32
    }

    static constexpr CharType get_ubjson_float_prefix(double /*unused*/)
    {
        return 'D';  // float 64
    }

    /*!
    @return false if the object is successfully converted to a bjdata ndarray, true if the type or size is invalid
    */
    bool write_bjdata_ndarray(const typename BasicJsonType::object_t& value, const bool use_count, const bool use_type)
    {
        std::map<string_t, CharType> bjdtype = {{"uint8", 'U'},  {"int8", 'i'},  {"uint16", 'u'}, {"int16", 'I'},
            {"uint32", 'm'}, {"int32", 'l'}, {"uint64", 'M'}, {"int64", 'L'}, {"single", 'd'}, {"double", 'D'}, {"char", 'C'}
        };

        string_t key = "_ArrayType_";
        auto it = bjdtype.find(static_cast<string_t>(value.at(key)));
        if (it == bjdtype.end())
        {
            return true;
        }
        CharType dtype = it->second;

        key = "_ArraySize_";
        std::size_t len = (value.at(key).empty() ? 0 : 1);
        for (const auto& el : value.at(key))
        {
            len *= static_cast<std::size_t>(el.m_value.number_unsigned);
        }

        key = "_ArrayData_";
        if (value.at(key).size() != len)
        {
            return true;
        }

        oa->write_character('[');
        oa->write_character('$');
        oa->write_character(dtype);
        oa->write_character('#');

        key = "_ArraySize_";
        write_ubjson(value.at(key), use_count, use_type, true,  true);

        key = "_ArrayData_";
        if (dtype == 'U' || dtype == 'C')
        {
            for (const auto& el : value.at(key))
            {
                write_number(static_cast<std::uint8_t>(el.m_value.number_unsigned), true);
            }
        }
        else if (dtype == 'i')
        {
            for (const auto& el : value.at(key))
            {
                write_number(static_cast<std::int8_t>(el.m_value.number_integer), true);
            }
        }
        else if (dtype == 'u')
        {
            for (const auto& el : value.at(key))
            {
                write_number(static_cast<std::uint16_t>(el.m_value.number_unsigned), true);
            }
        }
        else if (dtype == 'I')
        {
            for (const auto& el : value.at(key))
            {
                write_number(static_cast<std::int16_t>(el.m_value.number_integer), true);
            }
        }
        else if (dtype == 'm')
        {
            for (const auto& el : value.at(key))
            {
                write_number(static_cast<std::uint32_t>(el.m_value.number_unsigned), true);
            }
        }
        else if (dtype == 'l')
        {
            for (const auto& el : value.at(key))
            {
                write_number(static_cast<std::int32_t>(el.m_value.number_integer), true);
            }
        }
        else if (dtype == 'M')
        {
            for (const auto& el : value.at(key))
            {
                write_number(static_cast<std::uint64_t>(el.m_value.number_unsigned), true);
            }
        }
        else if (dtype == 'L')
        {
            for (const auto& el : value.at(key))
            {
                write_number(static_cast<std::int64_t>(el.m_value.number_integer), true);
            }
        }
        else if (dtype == 'd')
        {
            for (const auto& el : value.at(key))
            {
                write_number(static_cast<float>(el.m_value.number_float), true);
            }
        }
        else if (dtype == 'D')
        {
            for (const auto& el : value.at(key))
            {
                write_number(static_cast<double>(el.m_value.number_float), true);
            }
        }
        return false;
    }

    ///////////////////////
    // Utility functions //
    ///////////////////////

    /*
    @brief write a number to output input
    @param[in] n number of type @a NumberType
    @param[in] OutputIsLittleEndian Set to true if output data is
                                 required to be little endian
    @tparam NumberType the type of the number

    @note This function needs to respect the system's endianness, because bytes
          in CBOR, MessagePack, and UBJSON are stored in network order (big
          endian) and therefore need reordering on little endian systems.
          On the other hand, BSON and BJData use little endian and should reorder
          on big endian systems.
    */
    template<typename NumberType>
    void write_number(const NumberType n, const bool OutputIsLittleEndian = false)
    {
        // step 1: write number to array of length NumberType
        std::array<CharType, sizeof(NumberType)> vec{};
        std::memcpy(vec.data(), &n, sizeof(NumberType));

        // step 2: write array to output (with possible reordering)
        if (is_little_endian != OutputIsLittleEndian)
        {
            // reverse byte order prior to conversion if necessary
            std::reverse(vec.begin(), vec.end());
        }

        oa->write_characters(vec.data(), sizeof(NumberType));
    }

    void write_compact_float(const number_float_t n, detail::input_format_t format)
    {
#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wfloat-equal"
#endif
        if (static_cast<double>(n) >= static_cast<double>(std::numeric_limits<float>::lowest()) &&
                static_cast<double>(n) <= static_cast<double>((std::numeric_limits<float>::max)()) &&
                static_cast<double>(static_cast<float>(n)) == static_cast<double>(n))
        {
            oa->write_character(format == detail::input_format_t::cbor
                                ? get_cbor_float_prefix(static_cast<float>(n))
                                : get_msgpack_float_prefix(static_cast<float>(n)));
            write_number(static_cast<float>(n));
        }
        else
        {
            oa->write_character(format == detail::input_format_t::cbor
                                ? get_cbor_float_prefix(n)
                                : get_msgpack_float_prefix(n));
            write_number(n);
        }
#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif
    }

  public:
    // The following to_char_type functions are implement the conversion
    // between uint8_t and CharType. In case CharType is not unsigned,
    // such a conversion is required to allow values greater than 128.
    // See <https://github.com/nlohmann/json/issues/1286> for a discussion.
    template < typename C = CharType,
               enable_if_t < std::is_signed<C>::value && std::is_signed<char>::value > * = nullptr >
    static constexpr CharType to_char_type(std::uint8_t x) noexcept
    {
        return *reinterpret_cast<char*>(&x);
    }

    template < typename C = CharType,
               enable_if_t < std::is_signed<C>::value && std::is_unsigned<char>::value > * = nullptr >
    static CharType to_char_type(std::uint8_t x) noexcept
    {
        static_assert(sizeof(std::uint8_t) == sizeof(CharType), "size of CharType must be equal to std::uint8_t");
        static_assert(std::is_trivial<CharType>::value, "CharType must be trivial");
        CharType result;
        std::memcpy(&result, &x, sizeof(x));
        return result;
    }

    template<typename C = CharType,
             enable_if_t<std::is_unsigned<C>::value>* = nullptr>
    static constexpr CharType to_char_type(std::uint8_t x) noexcept
    {
        return x;
    }

    template < typename InputCharType, typename C = CharType,
               enable_if_t <
                   std::is_signed<C>::value &&
                   std::is_signed<char>::value &&
                   std::is_same<char, typename std::remove_cv<InputCharType>::type>::value
                   > * = nullptr >
    static constexpr CharType to_char_type(InputCharType x) noexcept
    {
        return x;
    }

  private:
    /// whether we can assume little endianness
    const bool is_little_endian = little_endianness();

    /// the output
    output_adapter_t<CharType> oa = nullptr;
};

}  // namespace detail
NLOHMANN_JSON_NAMESPACE_END

// #include <nlohmann/detail/output/output_adapters.hpp>

// #include <nlohmann/detail/output/serializer.hpp>
//     __ _____ _____ _____
//  __|  |   __|     |   | |  JSON for Modern C++
// |  |  |__   |  |  | | | |  version 3.11.2
// |_____|_____|_____|_|___|  https://github.com/nlohmann/json
//
// SPDX-FileCopyrightText: 2008-2009 Björn Hoehrmann <bjoern@hoehrmann.de>
// SPDX-FileCopyrightText: 2013-2022 Niels Lohmann <https://nlohmann.me>
// SPDX-License-Identifier: MIT



#include <algorithm> // reverse, remove, fill, find, none_of
#include <array> // array
#include <clocale> // localeconv, lconv
#include <cmath> // labs, isfinite, isnan, signbit
#include <cstddef> // size_t, ptrdiff_t
#include <cstdint> // uint8_t
#include <cstdio> // snprintf
#include <limits> // numeric_limits
#include <string> // string, char_traits
#include <iomanip> // setfill, setw
#include <type_traits> // is_same
#include <utility> // move

// #include <nlohmann/detail/conversions/to_chars.hpp>
//     __ _____ _____ _____
//  __|  |   __|     |   | |  JSON for Modern C++
// |  |  |__   |  |  | | | |  version 3.11.2
// |_____|_____|_____|_|___|  https://github.com/nlohmann/json
//
// SPDX-FileCopyrightText: 2009 Florian Loitsch <https://florian.loitsch.com/>
// SPDX-FileCopyrightText: 2013-2022 Niels Lohmann <https://nlohmann.me>
// SPDX-License-Identifier: MIT



#include <array> // array
#include <cmath>   // signbit, isfinite
#include <cstdint> // intN_t, uintN_t
#include <cstring> // memcpy, memmove
#include <limits> // numeric_limits
#include <type_traits> // conditional

// #include <nlohmann/detail/macro_scope.hpp>


NLOHMANN_JSON_NAMESPACE_BEGIN
namespace detail
{

/*!
@brief implements the Grisu2 algorithm for binary to decimal floating-point
conversion.

This implementation is a slightly modified version of the reference
implementation which may be obtained from
http://florian.loitsch.com/publications (bench.tar.gz).

The code is distributed under the MIT license, Copyright (c) 2009 Florian Loitsch.

For a detailed description of the algorithm see:

[1] Loitsch, "Printing Floating-Point Numbers Quickly and Accurately with
    Integers", Proceedings of the ACM SIGPLAN 2010 Conference on Programming
    Language Design and Implementation, PLDI 2010
[2] Burger, Dybvig, "Printing Floating-Point Numbers Quickly and Accurately",
    Proceedings of the ACM SIGPLAN 1996 Conference on Programming Language
    Design and Implementation, PLDI 1996
*/
namespace dtoa_impl
{

template<typename Target, typename Source>
Target reinterpret_bits(const Source source)
{
    static_assert(sizeof(Target) == sizeof(Source), "size mismatch");

    Target target;
    std::memcpy(&target, &source, sizeof(Source));
    return target;
}

struct diyfp // f * 2^e
{
    static constexpr int kPrecision = 64; // = q

    std::uint64_t f = 0;
    int e = 0;

    constexpr diyfp(std::uint64_t f_, int e_) noexcept : f(f_), e(e_) {}

    /*!
    @brief returns x - y
    @pre x.e == y.e and x.f >= y.f
    */
    static diyfp sub(const diyfp& x, const diyfp& y) noexcept
    {
        JSON_ASSERT(x.e == y.e);
        JSON_ASSERT(x.f >= y.f);

        return {x.f - y.f, x.e};
    }

    /*!
    @brief returns x * y
    @note The result is rounded. (Only the upper q bits are returned.)
    */
    static diyfp mul(const diyfp& x, const diyfp& y) noexcept
    {
        static_assert(kPrecision == 64, "internal error");

        // Computes:
        //  f = round((x.f * y.f) / 2^q)
        //  e = x.e + y.e + q

        // Emulate the 64-bit * 64-bit multiplication:
        //
        // p = u * v
        //   = (u_lo + 2^32 u_hi) (v_lo + 2^32 v_hi)
        //   = (u_lo v_lo         ) + 2^32 ((u_lo v_hi         ) + (u_hi v_lo         )) + 2^64 (u_hi v_hi         )
        //   = (p0                ) + 2^32 ((p1                ) + (p2                )) + 2^64 (p3                )
        //   = (p0_lo + 2^32 p0_hi) + 2^32 ((p1_lo + 2^32 p1_hi) + (p2_lo + 2^32 p2_hi)) + 2^64 (p3                )
        //   = (p0_lo             ) + 2^32 (p0_hi + p1_lo + p2_lo                      ) + 2^64 (p1_hi + p2_hi + p3)
        //   = (p0_lo             ) + 2^32 (Q                                          ) + 2^64 (H                 )
        //   = (p0_lo             ) + 2^32 (Q_lo + 2^32 Q_hi                           ) + 2^64 (H                 )
        //
        // (Since Q might be larger than 2^32 - 1)
        //
        //   = (p0_lo + 2^32 Q_lo) + 2^64 (Q_hi + H)
        //
        // (Q_hi + H does not overflow a 64-bit int)
        //
        //   = p_lo + 2^64 p_hi

        const std::uint64_t u_lo = x.f & 0xFFFFFFFFu;
        const std::uint64_t u_hi = x.f >> 32u;
        const std::uint64_t v_lo = y.f & 0xFFFFFFFFu;
        const std::uint64_t v_hi = y.f >> 32u;

        const std::uint64_t p0 = u_lo * v_lo;
        const std::uint64_t p1 = u_lo * v_hi;
        const std::uint64_t p2 = u_hi * v_lo;
        const std::uint64_t p3 = u_hi * v_hi;

        const std::uint64_t p0_hi = p0 >> 32u;
        const std::uint64_t p1_lo = p1 & 0xFFFFFFFFu;
        const std::uint64_t p1_hi = p1 >> 32u;
        const std::uint64_t p2_lo = p2 & 0xFFFFFFFFu;
        const std::uint64_t p2_hi = p2 >> 32u;

        std::uint64_t Q = p0_hi + p1_lo + p2_lo;

        // The full product might now be computed as
        //
        // p_hi = p3 + p2_hi + p1_hi + (Q >> 32)
        // p_lo = p0_lo + (Q << 32)
        //
        // But in this particular case here, the full p_lo is not required.
        // Effectively we only need to add the highest bit in p_lo to p_hi (and
        // Q_hi + 1 does not overflow).

        Q += std::uint64_t{1} << (64u - 32u - 1u); // round, ties up

        const std::uint64_t h = p3 + p2_hi + p1_hi + (Q >> 32u);

        return {h, x.e + y.e + 64};
    }

    /*!
    @brief normalize x such that the significand is >= 2^(q-1)
    @pre x.f != 0
    */
    static diyfp normalize(diyfp x) noexcept
    {
        JSON_ASSERT(x.f != 0);

        while ((x.f >> 63u) == 0)
        {
            x.f <<= 1u;
            x.e--;
        }

        return x;
    }

    /*!
    @brief normalize x such that the result has the exponent E
    @pre e >= x.e and the upper e - x.e bits of x.f must be zero.
    */
    static diyfp normalize_to(const diyfp& x, const int target_exponent) noexcept
    {
        const int delta = x.e - target_exponent;

        JSON_ASSERT(delta >= 0);
        JSON_ASSERT(((x.f << delta) >> delta) == x.f);

        return {x.f << delta, target_exponent};
    }
};

struct boundaries
{
    diyfp w;
    diyfp minus;
    diyfp plus;
};

/*!
Compute the (normalized) diyfp representing the input number 'value' and its
boundaries.

@pre value must be finite and positive
*/
template<typename FloatType>
boundaries compute_boundaries(FloatType value)
{
    JSON_ASSERT(std::isfinite(value));
    JSON_ASSERT(value > 0);

    // Convert the IEEE representation into a diyfp.
    //
    // If v is denormal:
    //      value = 0.F * 2^(1 - bias) = (          F) * 2^(1 - bias - (p-1))
    // If v is normalized:
    //      value = 1.F * 2^(E - bias) = (2^(p-1) + F) * 2^(E - bias - (p-1))

    static_assert(std::numeric_limits<FloatType>::is_iec559,
                  "internal error: dtoa_short requires an IEEE-754 floating-point implementation");

    constexpr int      kPrecision = std::numeric_limits<FloatType>::digits; // = p (includes the hidden bit)
    constexpr int      kBias      = std::numeric_limits<FloatType>::max_exponent - 1 + (kPrecision - 1);
    constexpr int      kMinExp    = 1 - kBias;
    constexpr std::uint64_t kHiddenBit = std::uint64_t{1} << (kPrecision - 1); // = 2^(p-1)

    using bits_type = typename std::conditional<kPrecision == 24, std::uint32_t, std::uint64_t >::type;

    const auto bits = static_cast<std::uint64_t>(reinterpret_bits<bits_type>(value));
    const std::uint64_t E = bits >> (kPrecision - 1);
    const std::uint64_t F = bits & (kHiddenBit - 1);

    const bool is_denormal = E == 0;
    const diyfp v = is_denormal
                    ? diyfp(F, kMinExp)
                    : diyfp(F + kHiddenBit, static_cast<int>(E) - kBias);

    // Compute the boundaries m- and m+ of the floating-point value
    // v = f * 2^e.
    //
    // Determine v- and v+, the floating-point predecessor and successor if v,
    // respectively.
    //
    //      v- = v - 2^e        if f != 2^(p-1) or e == e_min                (A)
    //         = v - 2^(e-1)    if f == 2^(p-1) and e > e_min                (B)
    //
    //      v+ = v + 2^e
    //
    // Let m- = (v- + v) / 2 and m+ = (v + v+) / 2. All real numbers _strictly_
    // between m- and m+ round to v, regardless of how the input rounding
    // algorithm breaks ties.
    //
    //      ---+-------------+-------------+-------------+-------------+---  (A)
    //         v-            m-            v             m+            v+
    //
    //      -----------------+------+------+-------------+-------------+---  (B)
    //                       v-     m-     v             m+            v+

    const bool lower_boundary_is_closer = F == 0 && E > 1;
    const diyfp m_plus = diyfp(2 * v.f + 1, v.e - 1);
    const diyfp m_minus = lower_boundary_is_closer
                          ? diyfp(4 * v.f - 1, v.e - 2)  // (B)
                          : diyfp(2 * v.f - 1, v.e - 1); // (A)

    // Determine the normalized w+ = m+.
    const diyfp w_plus = diyfp::normalize(m_plus);

    // Determine w- = m- such that e_(w-) = e_(w+).
    const diyfp w_minus = diyfp::normalize_to(m_minus, w_plus.e);

    return {diyfp::normalize(v), w_minus, w_plus};
}

// Given normalized diyfp w, Grisu needs to find a (normalized) cached
// power-of-ten c, such that the exponent of the product c * w = f * 2^e lies
// within a certain range [alpha, gamma] (Definition 3.2 from [1])
//
//      alpha <= e = e_c + e_w + q <= gamma
//
// or
//
//      f_c * f_w * 2^alpha <= f_c 2^(e_c) * f_w 2^(e_w) * 2^q
//                          <= f_c * f_w * 2^gamma
//
// Since c and w are normalized, i.e. 2^(q-1) <= f < 2^q, this implies
//
//      2^(q-1) * 2^(q-1) * 2^alpha <= c * w * 2^q < 2^q * 2^q * 2^gamma
//
// or
//
//      2^(q - 2 + alpha) <= c * w < 2^(q + gamma)
//
// The choice of (alpha,gamma) determines the size of the table and the form of
// the digit generation procedure. Using (alpha,gamma)=(-60,-32) works out well
// in practice:
//
// The idea is to cut the number c * w = f * 2^e into two parts, which can be
// processed independently: An integral part p1, and a fractional part p2:
//
//      f * 2^e = ( (f div 2^-e) * 2^-e + (f mod 2^-e) ) * 2^e
//              = (f div 2^-e) + (f mod 2^-e) * 2^e
//              = p1 + p2 * 2^e
//
// The conversion of p1 into decimal form requires a series of divisions and
// modulos by (a power of) 10. These operations are faster for 32-bit than for
// 64-bit integers, so p1 should ideally fit into a 32-bit integer. This can be
// achieved by choosing
//
//      -e >= 32   or   e <= -32 := gamma
//
// In order to convert the fractional part
//
//      p2 * 2^e = p2 / 2^-e = d[-1] / 10^1 + d[-2] / 10^2 + ...
//
// into decimal form, the fraction is repeatedly multiplied by 10 and the digits
// d[-i] are extracted in order:
//
//      (10 * p2) div 2^-e = d[-1]
//      (10 * p2) mod 2^-e = d[-2] / 10^1 + ...
//
// The multiplication by 10 must not overflow. It is sufficient to choose
//
//      10 * p2 < 16 * p2 = 2^4 * p2 <= 2^64.
//
// Since p2 = f mod 2^-e < 2^-e,
//
//      -e <= 60   or   e >= -60 := alpha

constexpr int kAlpha = -60;
constexpr int kGamma = -32;

struct cached_power // c = f * 2^e ~= 10^k
{
    std::uint64_t f;
    int e;
    int k;
};

/*!
For a normalized diyfp w = f * 2^e, this function returns a (normalized) cached
power-of-ten c = f_c * 2^e_c, such that the exponent of the product w * c
satisfies (Definition 3.2 from [1])

     alpha <= e_c + e + q <= gamma.
*/
inline cached_power get_cached_power_for_binary_exponent(int e)
{
    // Now
    //
    //      alpha <= e_c + e + q <= gamma                                    (1)
    //      ==> f_c * 2^alpha <= c * 2^e * 2^q
    //
    // and since the c's are normalized, 2^(q-1) <= f_c,
    //
    //      ==> 2^(q - 1 + alpha) <= c * 2^(e + q)
    //      ==> 2^(alpha - e - 1) <= c
    //
    // If c were an exact power of ten, i.e. c = 10^k, one may determine k as
    //
    //      k = ceil( log_10( 2^(alpha - e - 1) ) )
    //        = ceil( (alpha - e - 1) * log_10(2) )
    //
    // From the paper:
    // "In theory the result of the procedure could be wrong since c is rounded,
    //  and the computation itself is approximated [...]. In practice, however,
    //  this simple function is sufficient."
    //
    // For IEEE double precision floating-point numbers converted into
    // normalized diyfp's w = f * 2^e, with q = 64,
    //
    //      e >= -1022      (min IEEE exponent)
    //           -52        (p - 1)
    //           -52        (p - 1, possibly normalize denormal IEEE numbers)
    //           -11        (normalize the diyfp)
    //         = -1137
    //
    // and
    //
    //      e <= +1023      (max IEEE exponent)
    //           -52        (p - 1)
    //           -11        (normalize the diyfp)
    //         = 960
    //
    // This binary exponent range [-1137,960] results in a decimal exponent
    // range [-307,324]. One does not need to store a cached power for each
    // k in this range. For each such k it suffices to find a cached power
    // such that the exponent of the product lies in [alpha,gamma].
    // This implies that the difference of the decimal exponents of adjacent
    // table entries must be less than or equal to
    //
    //      floor( (gamma - alpha) * log_10(2) ) = 8.
    //
    // (A smaller distance gamma-alpha would require a larger table.)

    // NB:
    // Actually this function returns c, such that -60 <= e_c + e + 64 <= -34.

    constexpr int kCachedPowersMinDecExp = -300;
    constexpr int kCachedPowersDecStep = 8;

    static constexpr std::array<cached_power, 79> kCachedPowers =
    {
        {
            { 0xAB70FE17C79AC6CA, -1060, -300 },
            { 0xFF77B1FCBEBCDC4F, -1034, -292 },
            { 0xBE5691EF416BD60C, -1007, -284 },
            { 0x8DD01FAD907FFC3C,  -980, -276 },
            { 0xD3515C2831559A83,  -954, -268 },
            { 0x9D71AC8FADA6C9B5,  -927, -260 },
            { 0xEA9C227723EE8BCB,  -901, -252 },
            { 0xAECC49914078536D,  -874, -244 },
            { 0x823C12795DB6CE57,  -847, -236 },
            { 0xC21094364DFB5637,  -821, -228 },
            { 0x9096EA6F3848984F,  -794, -220 },
            { 0xD77485CB25823AC7,  -768, -212 },
            { 0xA086CFCD97BF97F4,  -741, -204 },
            { 0xEF340A98172AACE5,  -715, -196 },
            { 0xB23867FB2A35B28E,  -688, -188 },
            { 0x84C8D4DFD2C63F3B,  -661, -180 },
            { 0xC5DD44271AD3CDBA,  -635, -172 },
            { 0x936B9FCEBB25C996,  -608, -164 },
            { 0xDBAC6C247D62A584,  -582, -156 },
            { 0xA3AB66580D5FDAF6,  -555, -148 },
            { 0xF3E2F893DEC3F126,  -529, -140 },
            { 0xB5B5ADA8AAFF80B8,  -502, -132 },
            { 0x87625F056C7C4A8B,  -475, -124 },
            { 0xC9BCFF6034C13053,  -449, -116 },
            { 0x964E858C91BA2655,  -422, -108 },
            { 0xDFF9772470297EBD,  -396, -100 },
            { 0xA6DFBD9FB8E5B88F,  -369,  -92 },
            { 0xF8A95FCF88747D94,  -343,  -84 },
            { 0xB94470938FA89BCF,  -316,  -76 },
            { 0x8A08F0F8BF0F156B,  -289,  -68 },
            { 0xCDB02555653131B6,  -263,  -60 },
            { 0x993FE2C6D07B7FAC,  -236,  -52 },
            { 0xE45C10C42A2B3B06,  -210,  -44 },
            { 0xAA242499697392D3,  -183,  -36 },
            { 0xFD87B5F28300CA0E,  -157,  -28 },
            { 0xBCE5086492111AEB,  -130,  -20 },
            { 0x8CBCCC096F5088CC,  -103,  -12 },
            { 0xD1B71758E219652C,   -77,   -4 },
            { 0x9C40000000000000,   -50,    4 },
            { 0xE8D4A51000000000,   -24,   12 },
            { 0xAD78EBC5AC620000,     3,   20 },
            { 0x813F3978F8940984,    30,   28 },
            { 0xC097CE7BC90715B3,    56,   36 },
            { 0x8F7E32CE7BEA5C70,    83,   44 },
            { 0xD5D238A4ABE98068,   109,   52 },
            { 0x9F4F2726179A2245,   136,   60 },
            { 0xED63A231D4C4FB27,   162,   68 },
            { 0xB0DE65388CC8ADA8,   189,   76 },
            { 0x83C7088E1AAB65DB,   216,   84 },
            { 0xC45D1DF942711D9A,   242,   92 },
            { 0x924D692CA61BE758,   269,  100 },
            { 0xDA01EE641A708DEA,   295,  108 },
            { 0xA26DA3999AEF774A,   322,  116 },
            { 0xF209787BB47D6B85,   348,  124 },
            { 0xB454E4A179DD1877,   375,  132 },
            { 0x865B86925B9BC5C2,   402,  140 },
            { 0xC83553C5C8965D3D,   428,  148 },
            { 0x952AB45CFA97A0B3,   455,  156 },
            { 0xDE469FBD99A05FE3,   481,  164 },
            { 0xA59BC234DB398C25,   508,  172 },
            { 0xF6C69A72A3989F5C,   534,  180 },
            { 0xB7DCBF5354E9BECE,   561,  188 },
            { 0x88FCF317F22241E2,   588,  196 },
            { 0xCC20CE9BD35C78A5,   614,  204 },
            { 0x98165AF37B2153DF,   641,  212 },
            { 0xE2A0B5DC971F303A,   667,  220 },
            { 0xA8D9D1535CE3B396,   694,  228 },
            { 0xFB9B7CD9A4A7443C,   720,  236 },
            { 0xBB764C4CA7A44410,   747,  244 },
            { 0x8BAB8EEFB6409C1A,   774,  252 },
            { 0xD01FEF10A657842C,   800,  260 },
            { 0x9B10A4E5E9913129,   827,  268 },
            { 0xE7109BFBA19C0C9D,   853,  276 },
            { 0xAC2820D9623BF429,   880,  284 },
            { 0x80444B5E7AA7CF85,   907,  292 },
            { 0xBF21E44003ACDD2D,   933,  300 },
            { 0x8E679C2F5E44FF8F,   960,  308 },
            { 0xD433179D9C8CB841,   986,  316 },
            { 0x9E19DB92B4E31BA9,  1013,  324 },
        }
    };

    // This computation gives exactly the same results for k as
    //      k = ceil((kAlpha - e - 1) * 0.30102999566398114)
    // for |e| <= 1500, but doesn't require floating-point operations.
    // NB: log_10(2) ~= 78913 / 2^18
    JSON_ASSERT(e >= -1500);
    JSON_ASSERT(e <=  1500);
    const int f = kAlpha - e - 1;
    const int k = (f * 78913) / (1 << 18) + static_cast<int>(f > 0);

    const int index = (-kCachedPowersMinDecExp + k + (kCachedPowersDecStep - 1)) / kCachedPowersDecStep;
    JSON_ASSERT(index >= 0);
    JSON_ASSERT(static_cast<std::size_t>(index) < kCachedPowers.size());

    const cached_power cached = kCachedPowers[static_cast<std::size_t>(index)];
    JSON_ASSERT(kAlpha <= cached.e + e + 64);
    JSON_ASSERT(kGamma >= cached.e + e + 64);

    return cached;
}

/*!
For n != 0, returns k, such that pow10 := 10^(k-1) <= n < 10^k.
For n == 0, returns 1 and sets pow10 := 1.
*/
inline int find_largest_pow10(const std::uint32_t n, std::uint32_t& pow10)
{
    // LCOV_EXCL_START
    if (n >= 1000000000)
    {
        pow10 = 1000000000;
        return 10;
    }
    // LCOV_EXCL_STOP
    if (n >= 100000000)
    {
        pow10 = 100000000;
        return  9;
    }
    if (n >= 10000000)
    {
        pow10 = 10000000;
        return  8;
    }
    if (n >= 1000000)
    {
        pow10 = 1000000;
        return  7;
    }
    if (n >= 100000)
    {
        pow10 = 100000;
        return  6;
    }
    if (n >= 10000)
    {
        pow10 = 10000;
        return  5;
    }
    if (n >= 1000)
    {
        pow10 = 1000;
        return  4;
    }
    if (n >= 100)
    {
        pow10 = 100;
        return  3;
    }
    if (n >= 10)
    {
        pow10 = 10;
        return  2;
    }

    pow10 = 1;
    return 1;
}

inline void grisu2_round(char* buf, int len, std::uint64_t dist, std::uint64_t delta,
                         std::uint64_t rest, std::uint64_t ten_k)
{
    JSON_ASSERT(len >= 1);
    JSON_ASSERT(dist <= delta);
    JSON_ASSERT(rest <= delta);
    JSON_ASSERT(ten_k > 0);

    //               <--------------------------- delta ---->
    //                                  <---- dist --------->
    // --------------[------------------+-------------------]--------------
    //               M-                 w                   M+
    //
    //                                  ten_k
    //                                <------>
    //                                       <---- rest ---->
    // --------------[------------------+----+--------------]--------------
    //                                  w    V
    //                                       = buf * 10^k
    //
    // ten_k represents a unit-in-the-last-place in the decimal representation
    // stored in buf.
    // Decrement buf by ten_k while this takes buf closer to w.

    // The tests are written in this order to avoid overflow in unsigned
    // integer arithmetic.

    while (rest < dist
            && delta - rest >= ten_k
            && (rest + ten_k < dist || dist - rest > rest + ten_k - dist))
    {
        JSON_ASSERT(buf[len - 1] != '0');
        buf[len - 1]--;
        rest += ten_k;
    }
}

/*!
Generates V = buffer * 10^decimal_exponent, such that M- <= V <= M+.
M- and M+ must be normalized and share the same exponent -60 <= e <= -32.
*/
inline void grisu2_digit_gen(char* buffer, int& length, int& decimal_exponent,
                             diyfp M_minus, diyfp w, diyfp M_plus)
{
    static_assert(kAlpha >= -60, "internal error");
    static_assert(kGamma <= -32, "internal error");

    // Generates the digits (and the exponent) of a decimal floating-point
    // number V = buffer * 10^decimal_exponent in the range [M-, M+]. The diyfp's
    // w, M- and M+ share the same exponent e, which satisfies alpha <= e <= gamma.
    //
    //               <--------------------------- delta ---->
    //                                  <---- dist --------->
    // --------------[------------------+-------------------]--------------
    //               M-                 w                   M+
    //
    // Grisu2 generates the digits of M+ from left to right and stops as soon as
    // V is in [M-,M+].

    JSON_ASSERT(M_plus.e >= kAlpha);
    JSON_ASSERT(M_plus.e <= kGamma);

    std::uint64_t delta = diyfp::sub(M_plus, M_minus).f; // (significand of (M+ - M-), implicit exponent is e)
    std::uint64_t dist  = diyfp::sub(M_plus, w      ).f; // (significand of (M+ - w ), implicit exponent is e)

    // Split M+ = f * 2^e into two parts p1 and p2 (note: e < 0):
    //
    //      M+ = f * 2^e
    //         = ((f div 2^-e) * 2^-e + (f mod 2^-e)) * 2^e
    //         = ((p1        ) * 2^-e + (p2        )) * 2^e
    //         = p1 + p2 * 2^e

    const diyfp one(std::uint64_t{1} << -M_plus.e, M_plus.e);

    auto p1 = static_cast<std::uint32_t>(M_plus.f >> -one.e); // p1 = f div 2^-e (Since -e >= 32, p1 fits into a 32-bit int.)
    std::uint64_t p2 = M_plus.f & (one.f - 1);                    // p2 = f mod 2^-e

    // 1)
    //
    // Generate the digits of the integral part p1 = d[n-1]...d[1]d[0]

    JSON_ASSERT(p1 > 0);

    std::uint32_t pow10{};
    const int k = find_largest_pow10(p1, pow10);

    //      10^(k-1) <= p1 < 10^k, pow10 = 10^(k-1)
    //
    //      p1 = (p1 div 10^(k-1)) * 10^(k-1) + (p1 mod 10^(k-1))
    //         = (d[k-1]         ) * 10^(k-1) + (p1 mod 10^(k-1))
    //
    //      M+ = p1                                             + p2 * 2^e
    //         = d[k-1] * 10^(k-1) + (p1 mod 10^(k-1))          + p2 * 2^e
    //         = d[k-1] * 10^(k-1) + ((p1 mod 10^(k-1)) * 2^-e + p2) * 2^e
    //         = d[k-1] * 10^(k-1) + (                         rest) * 2^e
    //
    // Now generate the digits d[n] of p1 from left to right (n = k-1,...,0)
    //
    //      p1 = d[k-1]...d[n] * 10^n + d[n-1]...d[0]
    //
    // but stop as soon as
    //
    //      rest * 2^e = (d[n-1]...d[0] * 2^-e + p2) * 2^e <= delta * 2^e

    int n = k;
    while (n > 0)
    {
        // Invariants:
        //      M+ = buffer * 10^n + (p1 + p2 * 2^e)    (buffer = 0 for n = k)
        //      pow10 = 10^(n-1) <= p1 < 10^n
        //
        const std::uint32_t d = p1 / pow10;  // d = p1 div 10^(n-1)
        const std::uint32_t r = p1 % pow10;  // r = p1 mod 10^(n-1)
        //
        //      M+ = buffer * 10^n + (d * 10^(n-1) + r) + p2 * 2^e
        //         = (buffer * 10 + d) * 10^(n-1) + (r + p2 * 2^e)
        //
        JSON_ASSERT(d <= 9);
        buffer[length++] = static_cast<char>('0' + d); // buffer := buffer * 10 + d
        //
        //      M+ = buffer * 10^(n-1) + (r + p2 * 2^e)
        //
        p1 = r;
        n--;
        //
        //      M+ = buffer * 10^n + (p1 + p2 * 2^e)
        //      pow10 = 10^n
        //

        // Now check if enough digits have been generated.
        // Compute
        //
        //      p1 + p2 * 2^e = (p1 * 2^-e + p2) * 2^e = rest * 2^e
        //
        // Note:
        // Since rest and delta share the same exponent e, it suffices to
        // compare the significands.
        const std::uint64_t rest = (std::uint64_t{p1} << -one.e) + p2;
        if (rest <= delta)
        {
            // V = buffer * 10^n, with M- <= V <= M+.

            decimal_exponent += n;

            // We may now just stop. But instead look if the buffer could be
            // decremented to bring V closer to w.
            //
            // pow10 = 10^n is now 1 ulp in the decimal representation V.
            // The rounding procedure works with diyfp's with an implicit
            // exponent of e.
            //
            //      10^n = (10^n * 2^-e) * 2^e = ulp * 2^e
            //
            const std::uint64_t ten_n = std::uint64_t{pow10} << -one.e;
            grisu2_round(buffer, length, dist, delta, rest, ten_n);

            return;
        }

        pow10 /= 10;
        //
        //      pow10 = 10^(n-1) <= p1 < 10^n
        // Invariants restored.
    }

    // 2)
    //
    // The digits of the integral part have been generated:
    //
    //      M+ = d[k-1]...d[1]d[0] + p2 * 2^e
    //         = buffer            + p2 * 2^e
    //
    // Now generate the digits of the fractional part p2 * 2^e.
    //
    // Note:
    // No decimal point is generated: the exponent is adjusted instead.
    //
    // p2 actually represents the fraction
    //
    //      p2 * 2^e
    //          = p2 / 2^-e
    //          = d[-1] / 10^1 + d[-2] / 10^2 + ...
    //
    // Now generate the digits d[-m] of p1 from left to right (m = 1,2,...)
    //
    //      p2 * 2^e = d[-1]d[-2]...d[-m] * 10^-m
    //                      + 10^-m * (d[-m-1] / 10^1 + d[-m-2] / 10^2 + ...)
    //
    // using
    //
    //      10^m * p2 = ((10^m * p2) div 2^-e) * 2^-e + ((10^m * p2) mod 2^-e)
    //                = (                   d) * 2^-e + (                   r)
    //
    // or
    //      10^m * p2 * 2^e = d + r * 2^e
    //
    // i.e.
    //
    //      M+ = buffer + p2 * 2^e
    //         = buffer + 10^-m * (d + r * 2^e)
    //         = (buffer * 10^m + d) * 10^-m + 10^-m * r * 2^e
    //
    // and stop as soon as 10^-m * r * 2^e <= delta * 2^e

    JSON_ASSERT(p2 > delta);

    int m = 0;
    for (;;)
    {
        // Invariant:
        //      M+ = buffer * 10^-m + 10^-m * (d[-m-1] / 10 + d[-m-2] / 10^2 + ...) * 2^e
        //         = buffer * 10^-m + 10^-m * (p2                                 ) * 2^e
        //         = buffer * 10^-m + 10^-m * (1/10 * (10 * p2)                   ) * 2^e
        //         = buffer * 10^-m + 10^-m * (1/10 * ((10*p2 div 2^-e) * 2^-e + (10*p2 mod 2^-e)) * 2^e
        //
        JSON_ASSERT(p2 <= (std::numeric_limits<std::uint64_t>::max)() / 10);
        p2 *= 10;
        const std::uint64_t d = p2 >> -one.e;     // d = (10 * p2) div 2^-e
        const std::uint64_t r = p2 & (one.f - 1); // r = (10 * p2) mod 2^-e
        //
        //      M+ = buffer * 10^-m + 10^-m * (1/10 * (d * 2^-e + r) * 2^e
        //         = buffer * 10^-m + 10^-m * (1/10 * (d + r * 2^e))
        //         = (buffer * 10 + d) * 10^(-m-1) + 10^(-m-1) * r * 2^e
        //
        JSON_ASSERT(d <= 9);
        buffer[length++] = static_cast<char>('0' + d); // buffer := buffer * 10 + d
        //
        //      M+ = buffer * 10^(-m-1) + 10^(-m-1) * r * 2^e
        //
        p2 = r;
        m++;
        //
        //      M+ = buffer * 10^-m + 10^-m * p2 * 2^e
        // Invariant restored.

        // Check if enough digits have been generated.
        //
        //      10^-m * p2 * 2^e <= delta * 2^e
        //              p2 * 2^e <= 10^m * delta * 2^e
        //                    p2 <= 10^m * delta
        delta *= 10;
        dist  *= 10;
        if (p2 <= delta)
        {
            break;
        }
    }

    // V = buffer * 10^-m, with M- <= V <= M+.

    decimal_exponent -= m;

    // 1 ulp in the decimal representation is now 10^-m.
    // Since delta and dist are now scaled by 10^m, we need to do the
    // same with ulp in order to keep the units in sync.
    //
    //      10^m * 10^-m = 1 = 2^-e * 2^e = ten_m * 2^e
    //
    const std::uint64_t ten_m = one.f;
    grisu2_round(buffer, length, dist, delta, p2, ten_m);

    // By construction this algorithm generates the shortest possible decimal
    // number (Loitsch, Theorem 6.2) which rounds back to w.
    // For an input number of precision p, at least
    //
    //      N = 1 + ceil(p * log_10(2))
    //
    // decimal digits are sufficient to identify all binary floating-point
    // numbers (Matula, "In-and-Out conversions").
    // This implies that the algorithm does not produce more than N decimal
    // digits.
    //
    //      N = 17 for p = 53 (IEEE double precision)
    //      N = 9  for p = 24 (IEEE single precision)
}

/*!
v = buf * 10^decimal_exponent
len is the length of the buffer (number of decimal digits)
The buffer must be large enough, i.e. >= max_digits10.
*/
JSON_HEDLEY_NON_NULL(1)
inline void grisu2(char* buf, int& len, int& decimal_exponent,
                   diyfp m_minus, diyfp v, diyfp m_plus)
{
    JSON_ASSERT(m_plus.e == m_minus.e);
    JSON_ASSERT(m_plus.e == v.e);

    //  --------(-----------------------+-----------------------)--------    (A)
    //          m-                      v                       m+
    //
    //  --------------------(-----------+-----------------------)--------    (B)
    //                      m-          v                       m+
    //
    // First scale v (and m- and m+) such that the exponent is in the range
    // [alpha, gamma].

    const cached_power cached = get_cached_power_for_binary_exponent(m_plus.e);

    const diyfp c_minus_k(cached.f, cached.e); // = c ~= 10^-k

    // The exponent of the products is = v.e + c_minus_k.e + q and is in the range [alpha,gamma]
    const diyfp w       = diyfp::mul(v,       c_minus_k);
    const diyfp w_minus = diyfp::mul(m_minus, c_minus_k);
    const diyfp w_plus  = diyfp::mul(m_plus,  c_minus_k);

    //  ----(---+---)---------------(---+---)---------------(---+---)----
    //          w-                      w                       w+
    //          = c*m-                  = c*v                   = c*m+
    //
    // diyfp::mul rounds its result and c_minus_k is approximated too. w, w- and
    // w+ are now off by a small amount.
    // In fact:
    //
    //      w - v * 10^k < 1 ulp
    //
    // To account for this inaccuracy, add resp. subtract 1 ulp.
    //
    //  --------+---[---------------(---+---)---------------]---+--------
    //          w-  M-                  w                   M+  w+
    //
    // Now any number in [M-, M+] (bounds included) will round to w when input,
    // regardless of how the input rounding algorithm breaks ties.
    //
    // And digit_gen generates the shortest possible such number in [M-, M+].
    // Note that this does not mean that Grisu2 always generates the shortest
    // possible number in the interval (m-, m+).
    const diyfp M_minus(w_minus.f + 1, w_minus.e);
    const diyfp M_plus (w_plus.f  - 1, w_plus.e );

    decimal_exponent = -cached.k; // = -(-k) = k

    grisu2_digit_gen(buf, len, decimal_exponent, M_minus, w, M_plus);
}

/*!
v = buf * 10^decimal_exponent
len is the length of the buffer (number of decimal digits)
The buffer must be large enough, i.e. >= max_digits10.
*/
template<typename FloatType>
JSON_HEDLEY_NON_NULL(1)
void grisu2(char* buf, int& len, int& decimal_exponent, FloatType value)
{
    static_assert(diyfp::kPrecision >= std::numeric_limits<FloatType>::digits + 3,
                  "internal error: not enough precision");

    JSON_ASSERT(std::isfinite(value));
    JSON_ASSERT(value > 0);

    // If the neighbors (and boundaries) of 'value' are always computed for double-precision
    // numbers, all float's can be recovered using strtod (and strtof). However, the resulting
    // decimal representations are not exactly "short".
    //
    // The documentation for 'std::to_chars' (https://en.cppreference.com/w/cpp/utility/to_chars)
    // says "value is converted to a string as if by std::sprintf in the default ("C") locale"
    // and since sprintf promotes floats to doubles, I think this is exactly what 'std::to_chars'
    // does.
    // On the other hand, the documentation for 'std::to_chars' requires that "parsing the
    // representation using the corresponding std::from_chars function recovers value exactly". That
    // indicates that single precision floating-point numbers should be recovered using
    // 'std::strtof'.
    //
    // NB: If the neighbors are computed for single-precision numbers, there is a single float
    //     (7.0385307e-26f) which can't be recovered using strtod. The resulting double precision
    //     value is off by 1 ulp.
#if 0
    const boundaries w = compute_boundaries(static_cast<double>(value));
#else
    const boundaries w = compute_boundaries(value);
#endif

    grisu2(buf, len, decimal_exponent, w.minus, w.w, w.plus);
}

/*!
@brief appends a decimal representation of e to buf
@return a pointer to the element following the exponent.
@pre -1000 < e < 1000
*/
JSON_HEDLEY_NON_NULL(1)
JSON_HEDLEY_RETURNS_NON_NULL
inline char* append_exponent(char* buf, int e)
{
    JSON_ASSERT(e > -1000);
    JSON_ASSERT(e <  1000);

    if (e < 0)
    {
        e = -e;
        *buf++ = '-';
    }
    else
    {
        *buf++ = '+';
    }

    auto k = static_cast<std::uint32_t>(e);
    if (k < 10)
    {
        // Always print at least two digits in the exponent.
        // This is for compatibility with printf("%g").
        *buf++ = '0';
        *buf++ = static_cast<char>('0' + k);
    }
    else if (k < 100)
    {
        *buf++ = static_cast<char>('0' + k / 10);
        k %= 10;
        *buf++ = static_cast<char>('0' + k);
    }
    else
    {
        *buf++ = static_cast<char>('0' + k / 100);
        k %= 100;
        *buf++ = static_cast<char>('0' + k / 10);
        k %= 10;
        *buf++ = static_cast<char>('0' + k);
    }

    return buf;
}

/*!
@brief prettify v = buf * 10^decimal_exponent

If v is in the range [10^min_exp, 10^max_exp) it will be printed in fixed-point
notation. Otherwise it will be printed in exponential notation.

@pre min_exp < 0
@pre max_exp > 0
*/
JSON_HEDLEY_NON_NULL(1)
JSON_HEDLEY_RETURNS_NON_NULL
inline char* format_buffer(char* buf, int len, int decimal_exponent,
                           int min_exp, int max_exp)
{
    JSON_ASSERT(min_exp < 0);
    JSON_ASSERT(max_exp > 0);

    const int k = len;
    const int n = len + decimal_exponent;

    // v = buf * 10^(n-k)
    // k is the length of the buffer (number of decimal digits)
    // n is the position of the decimal point relative to the start of the buffer.

    if (k <= n && n <= max_exp)
    {
        // digits[000]
        // len <= max_exp + 2

        std::memset(buf + k, '0', static_cast<size_t>(n) - static_cast<size_t>(k));
        // Make it look like a floating-point number (#362, #378)
        buf[n + 0] = '.';
        buf[n + 1] = '0';
        return buf + (static_cast<size_t>(n) + 2);
    }

    if (0 < n && n <= max_exp)
    {
        // dig.its
        // len <= max_digits10 + 1

        JSON_ASSERT(k > n);

        std::memmove(buf + (static_cast<size_t>(n) + 1), buf + n, static_cast<size_t>(k) - static_cast<size_t>(n));
        buf[n] = '.';
        return buf + (static_cast<size_t>(k) + 1U);
    }

    if (min_exp < n && n <= 0)
    {
        // 0.[000]digits
        // len <= 2 + (-min_exp - 1) + max_digits10

        std::memmove(buf + (2 + static_cast<size_t>(-n)), buf, static_cast<size_t>(k));
        buf[0] = '0';
        buf[1] = '.';
        std::memset(buf + 2, '0', static_cast<size_t>(-n));
        return buf + (2U + static_cast<size_t>(-n) + static_cast<size_t>(k));
    }

    if (k == 1)
    {
        // dE+123
        // len <= 1 + 5

        buf += 1;
    }
    else
    {
        // d.igitsE+123
        // len <= max_digits10 + 1 + 5

        std::memmove(buf + 2, buf + 1, static_cast<size_t>(k) - 1);
        buf[1] = '.';
        buf += 1 + static_cast<size_t>(k);
    }

    *buf++ = 'e';
    return append_exponent(buf, n - 1);
}

}  // namespace dtoa_impl

/*!
@brief generates a decimal representation of the floating-point number value in [first, last).

The format of the resulting decimal representation is similar to printf's %g
format. Returns an iterator pointing past-the-end of the decimal representation.

@note The input number must be finite, i.e. NaN's and Inf's are not supported.
@note The buffer must be large enough.
@note The result is NOT null-terminated.
*/
template<typename FloatType>
JSON_HEDLEY_NON_NULL(1, 2)
JSON_HEDLEY_RETURNS_NON_NULL
char* to_chars(char* first, const char* last, FloatType value)
{
    static_cast<void>(last); // maybe unused - fix warning
    JSON_ASSERT(std::isfinite(value));

    // Use signbit(value) instead of (value < 0) since signbit works for -0.
    if (std::signbit(value))
    {
        value = -value;
        *first++ = '-';
    }

#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wfloat-equal"
#endif
    if (value == 0) // +-0
    {
        *first++ = '0';
        // Make it look like a floating-point number (#362, #378)
        *first++ = '.';
        *first++ = '0';
        return first;
    }
#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif

    JSON_ASSERT(last - first >= std::numeric_limits<FloatType>::max_digits10);

    // Compute v = buffer * 10^decimal_exponent.
    // The decimal digits are stored in the buffer, which needs to be interpreted
    // as an unsigned decimal integer.
    // len is the length of the buffer, i.e. the number of decimal digits.
    int len = 0;
    int decimal_exponent = 0;
    dtoa_impl::grisu2(first, len, decimal_exponent, value);

    JSON_ASSERT(len <= std::numeric_limits<FloatType>::max_digits10);

    // Format the buffer like printf("%.*g", prec, value)
    constexpr int kMinExp = -4;
    // Use digits10 here to increase compatibility with version 2.
    constexpr int kMaxExp = std::numeric_limits<FloatType>::digits10;

    JSON_ASSERT(last - first >= kMaxExp + 2);
    JSON_ASSERT(last - first >= 2 + (-kMinExp - 1) + std::numeric_limits<FloatType>::max_digits10);
    JSON_ASSERT(last - first >= std::numeric_limits<FloatType>::max_digits10 + 6);

    return dtoa_impl::format_buffer(first, len, decimal_exponent, kMinExp, kMaxExp);
}

}  // namespace detail
NLOHMANN_JSON_NAMESPACE_END

// #include <nlohmann/detail/exceptions.hpp>

// #include <nlohmann/detail/macro_scope.hpp>

// #include <nlohmann/detail/meta/cpp_future.hpp>

// #include <nlohmann/detail/output/binary_writer.hpp>

// #include <nlohmann/detail/output/output_adapters.hpp>

// #include <nlohmann/detail/string_concat.hpp>

// #include <nlohmann/detail/value_t.hpp>


NLOHMANN_JSON_NAMESPACE_BEGIN
namespace detail
{

///////////////////
// serialization //
///////////////////

/// how to treat decoding errors
enum class error_handler_t
{
    strict,  ///< throw a type_error exception in case of invalid UTF-8
    replace, ///< replace invalid UTF-8 sequences with U+FFFD
    ignore   ///< ignore invalid UTF-8 sequences
};

template<typename BasicJsonType>
class serializer
{
    using string_t = typename BasicJsonType::string_t;
    using number_float_t = typename BasicJsonType::number_float_t;
    using number_integer_t = typename BasicJsonType::number_integer_t;
    using number_unsigned_t = typename BasicJsonType::number_unsigned_t;
    using binary_char_t = typename BasicJsonType::binary_t::value_type;
    static constexpr std::uint8_t UTF8_ACCEPT = 0;
    static constexpr std::uint8_t UTF8_REJECT = 1;

  public:
    /*!
    @param[in] s  output stream to serialize to
    @param[in] ichar  indentation character to use
    @param[in] error_handler_  how to react on decoding errors
    */
    serializer(output_adapter_t<char> s, const char ichar,
               error_handler_t error_handler_ = error_handler_t::strict)
        : o(std::move(s))
        , loc(std::localeconv())
        , thousands_sep(loc->thousands_sep == nullptr ? '\0' : std::char_traits<char>::to_char_type(* (loc->thousands_sep)))
        , decimal_point(loc->decimal_point == nullptr ? '\0' : std::char_traits<char>::to_char_type(* (loc->decimal_point)))
        , indent_char(ichar)
        , indent_string(512, indent_char)
        , error_handler(error_handler_)
    {}

    // delete because of pointer members
    serializer(const serializer&) = delete;
    serializer& operator=(const serializer&) = delete;
    serializer(serializer&&) = delete;
    serializer& operator=(serializer&&) = delete;
    ~serializer() = default;

    /*!
    @brief internal implementation of the serialization function

    This function is called by the public member function dump and organizes
    the serialization internally. The indentation level is propagated as
    additional parameter. In case of arrays and objects, the function is
    called recursively.

    - strings and object keys are escaped using `escape_string()`
    - integer numbers are converted implicitly via `operator<<`
    - floating-point numbers are converted to a string using `"%g"` format
    - binary values are serialized as objects containing the subtype and the
      byte array

    @param[in] val               value to serialize
    @param[in] pretty_print      whether the output shall be pretty-printed
    @param[in] ensure_ascii If @a ensure_ascii is true, all non-ASCII characters
    in the output are escaped with `\uXXXX` sequences, and the result consists
    of ASCII characters only.
    @param[in] indent_step       the indent level
    @param[in] current_indent    the current indent level (only used internally)
    */
    void dump(const BasicJsonType& val,
              const bool pretty_print,
              const bool ensure_ascii,
              const unsigned int indent_step,
              const unsigned int current_indent = 0)
    {
        switch (val.m_type)
        {
            case value_t::object:
            {
                if (val.m_value.object->empty())
                {
                    o->write_characters("{}", 2);
                    return;
                }

                if (pretty_print)
                {
                    o->write_characters("{\n", 2);

                    // variable to hold indentation for recursive calls
                    const auto new_indent = current_indent + indent_step;
                    if (JSON_HEDLEY_UNLIKELY(indent_string.size() < new_indent))
                    {
                        indent_string.resize(indent_string.size() * 2, ' ');
                    }

                    // first n-1 elements
                    auto i = val.m_value.object->cbegin();
                    for (std::size_t cnt = 0; cnt < val.m_value.object->size() - 1; ++cnt, ++i)
                    {
                        o->write_characters(indent_string.c_str(), new_indent);
                        o->write_character('\"');
                        dump_escaped(i->first, ensure_ascii);
                        o->write_characters("\": ", 3);
                        dump(i->second, true, ensure_ascii, indent_step, new_indent);
                        o->write_characters(",\n", 2);
                    }

                    // last element
                    JSON_ASSERT(i != val.m_value.object->cend());
                    JSON_ASSERT(std::next(i) == val.m_value.object->cend());
                    o->write_characters(indent_string.c_str(), new_indent);
                    o->write_character('\"');
                    dump_escaped(i->first, ensure_ascii);
                    o->write_characters("\": ", 3);
                    dump(i->second, true, ensure_ascii, indent_step, new_indent);

                    o->write_character('\n');
                    o->write_characters(indent_string.c_str(), current_indent);
                    o->write_character('}');
                }
                else
                {
                    o->write_character('{');

                    // first n-1 elements
                    auto i = val.m_value.object->cbegin();
                    for (std::size_t cnt = 0; cnt < val.m_value.object->size() - 1; ++cnt, ++i)
                    {
                        o->write_character('\"');
                        dump_escaped(i->first, ensure_ascii);
                        o->write_characters("\":", 2);
                        dump(i->second, false, ensure_ascii, indent_step, current_indent);
                        o->write_character(',');
                    }

                    // last element
                    JSON_ASSERT(i != val.m_value.object->cend());
                    JSON_ASSERT(std::next(i) == val.m_value.object->cend());
                    o->write_character('\"');
                    dump_escaped(i->first, ensure_ascii);
                    o->write_characters("\":", 2);
                    dump(i->second, false, ensure_ascii, indent_step, current_indent);

                    o->write_character('}');
                }

                return;
            }

            case value_t::array:
            {
                if (val.m_value.array->empty())
                {
                    o->write_characters("[]", 2);
                    return;
                }

                if (pretty_print)
                {
                    o->write_characters("[\n", 2);

                    // variable to hold indentation for recursive calls
                    const auto new_indent = current_indent + indent_step;
                    if (JSON_HEDLEY_UNLIKELY(indent_string.size() < new_indent))
                    {
                        indent_string.resize(indent_string.size() * 2, ' ');
                    }

                    // first n-1 elements
                    for (auto i = val.m_value.array->cbegin();
                            i != val.m_value.array->cend() - 1; ++i)
                    {
                        o->write_characters(indent_string.c_str(), new_indent);
                        dump(*i, true, ensure_ascii, indent_step, new_indent);
                        o->write_characters(",\n", 2);
                    }

                    // last element
                    JSON_ASSERT(!val.m_value.array->empty());
                    o->write_characters(indent_string.c_str(), new_indent);
                    dump(val.m_value.array->back(), true, ensure_ascii, indent_step, new_indent);

                    o->write_character('\n');
                    o->write_characters(indent_string.c_str(), current_indent);
                    o->write_character(']');
                }
                else
                {
                    o->write_character('[');

                    // first n-1 elements
                    for (auto i = val.m_value.array->cbegin();
                            i != val.m_value.array->cend() - 1; ++i)
                    {
                        dump(*i, false, ensure_ascii, indent_step, current_indent);
                        o->write_character(',');
                    }

                    // last element
                    JSON_ASSERT(!val.m_value.array->empty());
                    dump(val.m_value.array->back(), false, ensure_ascii, indent_step, current_indent);

                    o->write_character(']');
                }

                return;
            }

            case value_t::string:
            {
                o->write_character('\"');
                dump_escaped(*val.m_value.string, ensure_ascii);
                o->write_character('\"');
                return;
            }

            case value_t::binary:
            {
                if (pretty_print)
                {
                    o->write_characters("{\n", 2);

                    // variable to hold indentation for recursive calls
                    const auto new_indent = current_indent + indent_step;
                    if (JSON_HEDLEY_UNLIKELY(indent_string.size() < new_indent))
                    {
                        indent_string.resize(indent_string.size() * 2, ' ');
                    }

                    o->write_characters(indent_string.c_str(), new_indent);

                    o->write_characters("\"bytes\": [", 10);

                    if (!val.m_value.binary->empty())
                    {
                        for (auto i = val.m_value.binary->cbegin();
                                i != val.m_value.binary->cend() - 1; ++i)
                        {
                            dump_integer(*i);
                            o->write_characters(", ", 2);
                        }
                        dump_integer(val.m_value.binary->back());
                    }

                    o->write_characters("],\n", 3);
                    o->write_characters(indent_string.c_str(), new_indent);

                    o->write_characters("\"subtype\": ", 11);
                    if (val.m_value.binary->has_subtype())
                    {
                        dump_integer(val.m_value.binary->subtype());
                    }
                    else
                    {
                        o->write_characters("null", 4);
                    }
                    o->write_character('\n');
                    o->write_characters(indent_string.c_str(), current_indent);
                    o->write_character('}');
                }
                else
                {
                    o->write_characters("{\"bytes\":[", 10);

                    if (!val.m_value.binary->empty())
                    {
                        for (auto i = val.m_value.binary->cbegin();
                                i != val.m_value.binary->cend() - 1; ++i)
                        {
                            dump_integer(*i);
                            o->write_character(',');
                        }
                        dump_integer(val.m_value.binary->back());
                    }

                    o->write_characters("],\"subtype\":", 12);
                    if (val.m_value.binary->has_subtype())
                    {
                        dump_integer(val.m_value.binary->subtype());
                        o->write_character('}');
                    }
                    else
                    {
                        o->write_characters("null}", 5);
                    }
                }
                return;
            }

            case value_t::boolean:
            {
                if (val.m_value.boolean)
                {
                    o->write_characters("true", 4);
                }
                else
                {
                    o->write_characters("false", 5);
                }
                return;
            }

            case value_t::number_integer:
            {
                dump_integer(val.m_value.number_integer);
                return;
            }

            case value_t::number_unsigned:
            {
                dump_integer(val.m_value.number_unsigned);
                return;
            }

            case value_t::number_float:
            {
                dump_float(val.m_value.number_float);
                return;
            }

            case value_t::discarded:
            {
                o->write_characters("<discarded>", 11);
                return;
            }

            case value_t::null:
            {
                o->write_characters("null", 4);
                return;
            }

            default:            // LCOV_EXCL_LINE
                JSON_ASSERT(false); // NOLINT(cert-dcl03-c,hicpp-static-assert,misc-static-assert) LCOV_EXCL_LINE
        }
    }

  JSON_PRIVATE_UNLESS_TESTED:
    /*!
    @brief dump escaped string

    Escape a string by replacing certain special characters by a sequence of an
    escape character (backslash) and another character and other control
    characters by a sequence of "\u" followed by a four-digit hex
    representation. The escaped string is written to output stream @a o.

    @param[in] s  the string to escape
    @param[in] ensure_ascii  whether to escape non-ASCII characters with
                             \uXXXX sequences

    @complexity Linear in the length of string @a s.
    */
    void dump_escaped(const string_t& s, const bool ensure_ascii)
    {
        std::uint32_t codepoint{};
        std::uint8_t state = UTF8_ACCEPT;
        std::size_t bytes = 0;  // number of bytes written to string_buffer

        // number of bytes written at the point of the last valid byte
        std::size_t bytes_after_last_accept = 0;
        std::size_t undumped_chars = 0;

        for (std::size_t i = 0; i < s.size(); ++i)
        {
            const auto byte = static_cast<std::uint8_t>(s[i]);

            switch (decode(state, codepoint, byte))
            {
                case UTF8_ACCEPT:  // decode found a new code point
                {
                    switch (codepoint)
                    {
                        case 0x08: // backspace
                        {
                            string_buffer[bytes++] = '\\';
                            string_buffer[bytes++] = 'b';
                            break;
                        }

                        case 0x09: // horizontal tab
                        {
                            string_buffer[bytes++] = '\\';
                            string_buffer[bytes++] = 't';
                            break;
                        }

                        case 0x0A: // newline
                        {
                            string_buffer[bytes++] = '\\';
                            string_buffer[bytes++] = 'n';
                            break;
                        }

                        case 0x0C: // formfeed
                        {
                            string_buffer[bytes++] = '\\';
                            string_buffer[bytes++] = 'f';
                            break;
                        }

                        case 0x0D: // carriage return
                        {
                            string_buffer[bytes++] = '\\';
                            string_buffer[bytes++] = 'r';
                            break;
                        }

                        case 0x22: // quotation mark
                        {
                            string_buffer[bytes++] = '\\';
                            string_buffer[bytes++] = '\"';
                            break;
                        }

                        case 0x5C: // reverse solidus
                        {
                            string_buffer[bytes++] = '\\';
                            string_buffer[bytes++] = '\\';
                            break;
                        }

                        default:
                        {
                            // escape control characters (0x00..0x1F) or, if
                            // ensure_ascii parameter is used, non-ASCII characters
                            if ((codepoint <= 0x1F) || (ensure_ascii && (codepoint >= 0x7F)))
                            {
                                if (codepoint <= 0xFFFF)
                                {
                                    // NOLINTNEXTLINE(cppcoreguidelines-pro-type-vararg,hicpp-vararg)
                                    static_cast<void>((std::snprintf)(string_buffer.data() + bytes, 7, "\\u%04x",
                                                                      static_cast<std::uint16_t>(codepoint)));
                                    bytes += 6;
                                }
                                else
                                {
                                    // NOLINTNEXTLINE(cppcoreguidelines-pro-type-vararg,hicpp-vararg)
                                    static_cast<void>((std::snprintf)(string_buffer.data() + bytes, 13, "\\u%04x\\u%04x",
                                                                      static_cast<std::uint16_t>(0xD7C0u + (codepoint >> 10u)),
                                                                      static_cast<std::uint16_t>(0xDC00u + (codepoint & 0x3FFu))));
                                    bytes += 12;
                                }
                            }
                            else
                            {
                                // copy byte to buffer (all previous bytes
                                // been copied have in default case above)
                                string_buffer[bytes++] = s[i];
                            }
                            break;
                        }
                    }

                    // write buffer and reset index; there must be 13 bytes
                    // left, as this is the maximal number of bytes to be
                    // written ("\uxxxx\uxxxx\0") for one code point
                    if (string_buffer.size() - bytes < 13)
                    {
                        o->write_characters(string_buffer.data(), bytes);
                        bytes = 0;
                    }

                    // remember the byte position of this accept
                    bytes_after_last_accept = bytes;
                    undumped_chars = 0;
                    break;
                }

                case UTF8_REJECT:  // decode found invalid UTF-8 byte
                {
                    switch (error_handler)
                    {
                        case error_handler_t::strict:
                        {
                            JSON_THROW(type_error::create(316, concat("invalid UTF-8 byte at index ", std::to_string(i), ": 0x", hex_bytes(byte | 0)), nullptr));
                        }

                        case error_handler_t::ignore:
                        case error_handler_t::replace:
                        {
                            // in case we saw this character the first time, we
                            // would like to read it again, because the byte
                            // may be OK for itself, but just not OK for the
                            // previous sequence
                            if (undumped_chars > 0)
                            {
                                --i;
                            }

                            // reset length buffer to the last accepted index;
                            // thus removing/ignoring the invalid characters
                            bytes = bytes_after_last_accept;

                            if (error_handler == error_handler_t::replace)
                            {
                                // add a replacement character
                                if (ensure_ascii)
                                {
                                    string_buffer[bytes++] = '\\';
                                    string_buffer[bytes++] = 'u';
                                    string_buffer[bytes++] = 'f';
                                    string_buffer[bytes++] = 'f';
                                    string_buffer[bytes++] = 'f';
                                    string_buffer[bytes++] = 'd';
                                }
                                else
                                {
                                    string_buffer[bytes++] = detail::binary_writer<BasicJsonType, char>::to_char_type('\xEF');
                                    string_buffer[bytes++] = detail::binary_writer<BasicJsonType, char>::to_char_type('\xBF');
                                    string_buffer[bytes++] = detail::binary_writer<BasicJsonType, char>::to_char_type('\xBD');
                                }

                                // write buffer and reset index; there must be 13 bytes
                                // left, as this is the maximal number of bytes to be
                                // written ("\uxxxx\uxxxx\0") for one code point
                                if (string_buffer.size() - bytes < 13)
                                {
                                    o->write_characters(string_buffer.data(), bytes);
                                    bytes = 0;
                                }

                                bytes_after_last_accept = bytes;
                            }

                            undumped_chars = 0;

                            // continue processing the string
                            state = UTF8_ACCEPT;
                            break;
                        }

                        default:            // LCOV_EXCL_LINE
                            JSON_ASSERT(false); // NOLINT(cert-dcl03-c,hicpp-static-assert,misc-static-assert) LCOV_EXCL_LINE
                    }
                    break;
                }

                default:  // decode found yet incomplete multi-byte code point
                {
                    if (!ensure_ascii)
                    {
                        // code point will not be escaped - copy byte to buffer
                        string_buffer[bytes++] = s[i];
                    }
                    ++undumped_chars;
                    break;
                }
            }
        }

        // we finished processing the string
        if (JSON_HEDLEY_LIKELY(state == UTF8_ACCEPT))
        {
            // write buffer
            if (bytes > 0)
            {
                o->write_characters(string_buffer.data(), bytes);
            }
        }
        else
        {
            // we finish reading, but do not accept: string was incomplete
            switch (error_handler)
            {
                case error_handler_t::strict:
                {
                    JSON_THROW(type_error::create(316, concat("incomplete UTF-8 string; last byte: 0x", hex_bytes(static_cast<std::uint8_t>(s.back() | 0))), nullptr));
                }

                case error_handler_t::ignore:
                {
                    // write all accepted bytes
                    o->write_characters(string_buffer.data(), bytes_after_last_accept);
                    break;
                }

                case error_handler_t::replace:
                {
                    // write all accepted bytes
                    o->write_characters(string_buffer.data(), bytes_after_last_accept);
                    // add a replacement character
                    if (ensure_ascii)
                    {
                        o->write_characters("\\ufffd", 6);
                    }
                    else
                    {
                        o->write_characters("\xEF\xBF\xBD", 3);
                    }
                    break;
                }

                default:            // LCOV_EXCL_LINE
                    JSON_ASSERT(false); // NOLINT(cert-dcl03-c,hicpp-static-assert,misc-static-assert) LCOV_EXCL_LINE
            }
        }
    }

  private:
    /*!
    @brief count digits

    Count the number of decimal (base 10) digits for an input unsigned integer.

    @param[in] x  unsigned integer number to count its digits
    @return    number of decimal digits
    */
    inline unsigned int count_digits(number_unsigned_t x) noexcept
    {
        unsigned int n_digits = 1;
        for (;;)
        {
            if (x < 10)
            {
                return n_digits;
            }
            if (x < 100)
            {
                return n_digits + 1;
            }
            if (x < 1000)
            {
                return n_digits + 2;
            }
            if (x < 10000)
            {
                return n_digits + 3;
            }
            x = x / 10000u;
            n_digits += 4;
        }
    }

    /*!
     * @brief convert a byte to a uppercase hex representation
     * @param[in] byte byte to represent
     * @return representation ("00".."FF")
     */
    static std::string hex_bytes(std::uint8_t byte)
    {
        std::string result = "FF";
        constexpr const char* nibble_to_hex = "0123456789ABCDEF";
        result[0] = nibble_to_hex[byte / 16];
        result[1] = nibble_to_hex[byte % 16];
        return result;
    }

    // templates to avoid warnings about useless casts
    template <typename NumberType, enable_if_t<std::is_signed<NumberType>::value, int> = 0>
    bool is_negative_number(NumberType x)
    {
        return x < 0;
    }

    template < typename NumberType, enable_if_t <std::is_unsigned<NumberType>::value, int > = 0 >
    bool is_negative_number(NumberType /*unused*/)
    {
        return false;
    }

    /*!
    @brief dump an integer

    Dump a given integer to output stream @a o. Works internally with
    @a number_buffer.

    @param[in] x  integer number (signed or unsigned) to dump
    @tparam NumberType either @a number_integer_t or @a number_unsigned_t
    */
    template < typename NumberType, detail::enable_if_t <
                   std::is_integral<NumberType>::value ||
                   std::is_same<NumberType, number_unsigned_t>::value ||
                   std::is_same<NumberType, number_integer_t>::value ||
                   std::is_same<NumberType, binary_char_t>::value,
                   int > = 0 >
    void dump_integer(NumberType x)
    {
        static constexpr std::array<std::array<char, 2>, 100> digits_to_99
        {
            {
                {{'0', '0'}}, {{'0', '1'}}, {{'0', '2'}}, {{'0', '3'}}, {{'0', '4'}}, {{'0', '5'}}, {{'0', '6'}}, {{'0', '7'}}, {{'0', '8'}}, {{'0', '9'}},
                {{'1', '0'}}, {{'1', '1'}}, {{'1', '2'}}, {{'1', '3'}}, {{'1', '4'}}, {{'1', '5'}}, {{'1', '6'}}, {{'1', '7'}}, {{'1', '8'}}, {{'1', '9'}},
                {{'2', '0'}}, {{'2', '1'}}, {{'2', '2'}}, {{'2', '3'}}, {{'2', '4'}}, {{'2', '5'}}, {{'2', '6'}}, {{'2', '7'}}, {{'2', '8'}}, {{'2', '9'}},
                {{'3', '0'}}, {{'3', '1'}}, {{'3', '2'}}, {{'3', '3'}}, {{'3', '4'}}, {{'3', '5'}}, {{'3', '6'}}, {{'3', '7'}}, {{'3', '8'}}, {{'3', '9'}},
                {{'4', '0'}}, {{'4', '1'}}, {{'4', '2'}}, {{'4', '3'}}, {{'4', '4'}}, {{'4', '5'}}, {{'4', '6'}}, {{'4', '7'}}, {{'4', '8'}}, {{'4', '9'}},
                {{'5', '0'}}, {{'5', '1'}}, {{'5', '2'}}, {{'5', '3'}}, {{'5', '4'}}, {{'5', '5'}}, {{'5', '6'}}, {{'5', '7'}}, {{'5', '8'}}, {{'5', '9'}},
                {{'6', '0'}}, {{'6', '1'}}, {{'6', '2'}}, {{'6', '3'}}, {{'6', '4'}}, {{'6', '5'}}, {{'6', '6'}}, {{'6', '7'}}, {{'6', '8'}}, {{'6', '9'}},
                {{'7', '0'}}, {{'7', '1'}}, {{'7', '2'}}, {{'7', '3'}}, {{'7', '4'}}, {{'7', '5'}}, {{'7', '6'}}, {{'7', '7'}}, {{'7', '8'}}, {{'7', '9'}},
                {{'8', '0'}}, {{'8', '1'}}, {{'8', '2'}}, {{'8', '3'}}, {{'8', '4'}}, {{'8', '5'}}, {{'8', '6'}}, {{'8', '7'}}, {{'8', '8'}}, {{'8', '9'}},
                {{'9', '0'}}, {{'9', '1'}}, {{'9', '2'}}, {{'9', '3'}}, {{'9', '4'}}, {{'9', '5'}}, {{'9', '6'}}, {{'9', '7'}}, {{'9', '8'}}, {{'9', '9'}},
            }
        };

        // special case for "0"
        if (x == 0)
        {
            o->write_character('0');
            return;
        }

        // use a pointer to fill the buffer
        auto buffer_ptr = number_buffer.begin(); // NOLINT(llvm-qualified-auto,readability-qualified-auto,cppcoreguidelines-pro-type-vararg,hicpp-vararg)

        number_unsigned_t abs_value;

        unsigned int n_chars{};

        if (is_negative_number(x))
        {
            *buffer_ptr = '-';
            abs_value = remove_sign(static_cast<number_integer_t>(x));

            // account one more byte for the minus sign
            n_chars = 1 + count_digits(abs_value);
        }
        else
        {
            abs_value = static_cast<number_unsigned_t>(x);
            n_chars = count_digits(abs_value);
        }

        // spare 1 byte for '\0'
        JSON_ASSERT(n_chars < number_buffer.size() - 1);

        // jump to the end to generate the string from backward,
        // so we later avoid reversing the result
        buffer_ptr += n_chars;

        // Fast int2ascii implementation inspired by "Fastware" talk by Andrei Alexandrescu
        // See: https://www.youtube.com/watch?v=o4-CwDo2zpg
        while (abs_value >= 100)
        {
            const auto digits_index = static_cast<unsigned>((abs_value % 100));
            abs_value /= 100;
            *(--buffer_ptr) = digits_to_99[digits_index][1];
            *(--buffer_ptr) = digits_to_99[digits_index][0];
        }

        if (abs_value >= 10)
        {
            const auto digits_index = static_cast<unsigned>(abs_value);
            *(--buffer_ptr) = digits_to_99[digits_index][1];
            *(--buffer_ptr) = digits_to_99[digits_index][0];
        }
        else
        {
            *(--buffer_ptr) = static_cast<char>('0' + abs_value);
        }

        o->write_characters(number_buffer.data(), n_chars);
    }

    /*!
    @brief dump a floating-point number

    Dump a given floating-point number to output stream @a o. Works internally
    with @a number_buffer.

    @param[in] x  floating-point number to dump
    */
    void dump_float(number_float_t x)
    {
        // NaN / inf
        if (!std::isfinite(x))
        {
            o->write_characters("null", 4);
            return;
        }

        // If number_float_t is an IEEE-754 single or double precision number,
        // use the Grisu2 algorithm to produce short numbers which are
        // guaranteed to round-trip, using strtof and strtod, resp.
        //
        // NB: The test below works if <long double> == <double>.
        static constexpr bool is_ieee_single_or_double
            = (std::numeric_limits<number_float_t>::is_iec559 && std::numeric_limits<number_float_t>::digits == 24 && std::numeric_limits<number_float_t>::max_exponent == 128) ||
              (std::numeric_limits<number_float_t>::is_iec559 && std::numeric_limits<number_float_t>::digits == 53 && std::numeric_limits<number_float_t>::max_exponent == 1024);

        dump_float(x, std::integral_constant<bool, is_ieee_single_or_double>());
    }

    void dump_float(number_float_t x, std::true_type /*is_ieee_single_or_double*/)
    {
        auto* begin = number_buffer.data();
        auto* end = ::nlohmann::detail::to_chars(begin, begin + number_buffer.size(), x);

        o->write_characters(begin, static_cast<size_t>(end - begin));
    }

    void dump_float(number_float_t x, std::false_type /*is_ieee_single_or_double*/)
    {
        // get number of digits for a float -> text -> float round-trip
        static constexpr auto d = std::numeric_limits<number_float_t>::max_digits10;

        // the actual conversion
        // NOLINTNEXTLINE(cppcoreguidelines-pro-type-vararg,hicpp-vararg)
        std::ptrdiff_t len = (std::snprintf)(number_buffer.data(), number_buffer.size(), "%.*g", d, x);

        // negative value indicates an error
        JSON_ASSERT(len > 0);
        // check if buffer was large enough
        JSON_ASSERT(static_cast<std::size_t>(len) < number_buffer.size());

        // erase thousands separator
        if (thousands_sep != '\0')
        {
            // NOLINTNEXTLINE(readability-qualified-auto,llvm-qualified-auto): std::remove returns an iterator, see https://github.com/nlohmann/json/issues/3081
            const auto end = std::remove(number_buffer.begin(), number_buffer.begin() + len, thousands_sep);
            std::fill(end, number_buffer.end(), '\0');
            JSON_ASSERT((end - number_buffer.begin()) <= len);
            len = (end - number_buffer.begin());
        }

        // convert decimal point to '.'
        if (decimal_point != '\0' && decimal_point != '.')
        {
            // NOLINTNEXTLINE(readability-qualified-auto,llvm-qualified-auto): std::find returns an iterator, see https://github.com/nlohmann/json/issues/3081
            const auto dec_pos = std::find(number_buffer.begin(), number_buffer.end(), decimal_point);
            if (dec_pos != number_buffer.end())
            {
                *dec_pos = '.';
            }
        }

        o->write_characters(number_buffer.data(), static_cast<std::size_t>(len));

        // determine if we need to append ".0"
        const bool value_is_int_like =
            std::none_of(number_buffer.begin(), number_buffer.begin() + len + 1,
                         [](char c)
        {
            return c == '.' || c == 'e';
        });

        if (value_is_int_like)
        {
            o->write_characters(".0", 2);
        }
    }

    /*!
    @brief check whether a string is UTF-8 encoded

    The function checks each byte of a string whether it is UTF-8 encoded. The
    result of the check is stored in the @a state parameter. The function must
    be called initially with state 0 (accept). State 1 means the string must
    be rejected, because the current byte is not allowed. If the string is
    completely processed, but the state is non-zero, the string ended
    prematurely; that is, the last byte indicated more bytes should have
    followed.

    @param[in,out] state  the state of the decoding
    @param[in,out] codep  codepoint (valid only if resulting state is UTF8_ACCEPT)
    @param[in] byte       next byte to decode
    @return               new state

    @note The function has been edited: a std::array is used.

    @copyright Copyright (c) 2008-2009 Bjoern Hoehrmann <bjoern@hoehrmann.de>
    @sa http://bjoern.hoehrmann.de/utf-8/decoder/dfa/
    */
    static std::uint8_t decode(std::uint8_t& state, std::uint32_t& codep, const std::uint8_t byte) noexcept
    {
        static const std::array<std::uint8_t, 400> utf8d =
        {
            {
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, // 00..1F
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, // 20..3F
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, // 40..5F
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, // 60..7F
                1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, // 80..9F
                7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, // A0..BF
                8, 8, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, // C0..DF
                0xA, 0x3, 0x3, 0x3, 0x3, 0x3, 0x3, 0x3, 0x3, 0x3, 0x3, 0x3, 0x3, 0x4, 0x3, 0x3, // E0..EF
                0xB, 0x6, 0x6, 0x6, 0x5, 0x8, 0x8, 0x8, 0x8, 0x8, 0x8, 0x8, 0x8, 0x8, 0x8, 0x8, // F0..FF
                0x0, 0x1, 0x2, 0x3, 0x5, 0x8, 0x7, 0x1, 0x1, 0x1, 0x4, 0x6, 0x1, 0x1, 0x1, 0x1, // s0..s0
                1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, // s1..s2
                1, 2, 1, 1, 1, 1, 1, 2, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, // s3..s4
                1, 2, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 3, 1, 3, 1, 1, 1, 1, 1, 1, // s5..s6
                1, 3, 1, 1, 1, 1, 1, 3, 1, 3, 1, 1, 1, 1, 1, 1, 1, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 // s7..s8
            }
        };

        JSON_ASSERT(byte < utf8d.size());
        const std::uint8_t type = utf8d[byte];

        codep = (state != UTF8_ACCEPT)
                ? (byte & 0x3fu) | (codep << 6u)
                : (0xFFu >> type) & (byte);

        std::size_t index = 256u + static_cast<size_t>(state) * 16u + static_cast<size_t>(type);
        JSON_ASSERT(index < 400);
        state = utf8d[index];
        return state;
    }

    /*
     * Overload to make the compiler happy while it is instantiating
     * dump_integer for number_unsigned_t.
     * Must never be called.
     */
    number_unsigned_t remove_sign(number_unsigned_t x)
    {
        JSON_ASSERT(false); // NOLINT(cert-dcl03-c,hicpp-static-assert,misc-static-assert) LCOV_EXCL_LINE
        return x; // LCOV_EXCL_LINE
    }

    /*
     * Helper function for dump_integer
     *
     * This function takes a negative signed integer and returns its absolute
     * value as unsigned integer. The plus/minus shuffling is necessary as we can
     * not directly remove the sign of an arbitrary signed integer as the
     * absolute values of INT_MIN and INT_MAX are usually not the same. See
     * #1708 for details.
     */
    inline number_unsigned_t remove_sign(number_integer_t x) noexcept
    {
        JSON_ASSERT(x < 0 && x < (std::numeric_limits<number_integer_t>::max)()); // NOLINT(misc-redundant-expression)
        return static_cast<number_unsigned_t>(-(x + 1)) + 1;
    }

  private:
    /// the output of the serializer
    output_adapter_t<char> o = nullptr;

    /// a (hopefully) large enough character buffer
    std::array<char, 64> number_buffer{{}};

    /// the locale
    const std::lconv* loc = nullptr;
    /// the locale's thousand separator character
    const char thousands_sep = '\0';
    /// the locale's decimal point character
    const char decimal_point = '\0';

    /// string buffer
    std::array<char, 512> string_buffer{{}};

    /// the indentation character
    const char indent_char;
    /// the indentation string
    string_t indent_string;

    /// error_handler how to react on decoding errors
    const error_handler_t error_handler;
};

}  // namespace detail
NLOHMANN_JSON_NAMESPACE_END

// #include <nlohmann/detail/value_t.hpp>

// #include <nlohmann/json_fwd.hpp>

// #include <nlohmann/ordered_map.hpp>
//     __ _____ _____ _____
//  __|  |   __|     |   | |  JSON for Modern C++
// |  |  |__   |  |  | | | |  version 3.11.2
// |_____|_____|_____|_|___|  https://github.com/nlohmann/json
//
// SPDX-FileCopyrightText: 2013-2022 Niels Lohmann <https://nlohmann.me>
// SPDX-License-Identifier: MIT



#include <functional> // equal_to, less
#include <initializer_list> // initializer_list
#include <iterator> // input_iterator_tag, iterator_traits
#include <memory> // allocator
#include <stdexcept> // for out_of_range
#include <type_traits> // enable_if, is_convertible
#include <utility> // pair
#include <vector> // vector

// #include <nlohmann/detail/macro_scope.hpp>

// #include <nlohmann/detail/meta/type_traits.hpp>


NLOHMANN_JSON_NAMESPACE_BEGIN

/// ordered_map: a minimal map-like container that preserves insertion order
/// for use within nlohmann::basic_json<ordered_map>
template <class Key, class T, class IgnoredLess = std::less<Key>,
          class Allocator = std::allocator<std::pair<const Key, T>>>
                  struct ordered_map : std::vector<std::pair<const Key, T>, Allocator>
{
    using key_type = Key;
    using mapped_type = T;
    using Container = std::vector<std::pair<const Key, T>, Allocator>;
    using iterator = typename Container::iterator;
    using const_iterator = typename Container::const_iterator;
    using size_type = typename Container::size_type;
    using value_type = typename Container::value_type;
#ifdef JSON_HAS_CPP_14
    using key_compare = std::equal_to<>;
#else
    using key_compare = std::equal_to<Key>;
#endif

    // Explicit constructors instead of `using Container::Container`
    // otherwise older compilers choke on it (GCC <= 5.5, xcode <= 9.4)
    ordered_map() noexcept(noexcept(Container())) : Container{} {}
    explicit ordered_map(const Allocator& alloc) noexcept(noexcept(Container(alloc))) : Container{alloc} {}
    template <class It>
    ordered_map(It first, It last, const Allocator& alloc = Allocator())
        : Container{first, last, alloc} {}
    ordered_map(std::initializer_list<value_type> init, const Allocator& alloc = Allocator() )
        : Container{init, alloc} {}

    std::pair<iterator, bool> emplace(const key_type& key, T&& t)
    {
        for (auto it = this->begin(); it != this->end(); ++it)
        {
            if (m_compare(it->first, key))
            {
                return {it, false};
            }
        }
        Container::emplace_back(key, std::forward<T>(t));
        return {std::prev(this->end()), true};
    }

    template<class KeyType, detail::enable_if_t<
                 detail::is_usable_as_key_type<key_compare, key_type, KeyType>::value, int> = 0>
    std::pair<iterator, bool> emplace(KeyType && key, T && t)
    {
        for (auto it = this->begin(); it != this->end(); ++it)
        {
            if (m_compare(it->first, key))
            {
                return {it, false};
            }
        }
        Container::emplace_back(std::forward<KeyType>(key), std::forward<T>(t));
        return {std::prev(this->end()), true};
    }

    T& operator[](const key_type& key)
    {
        return emplace(key, T{}).first->second;
    }

    template<class KeyType, detail::enable_if_t<
                 detail::is_usable_as_key_type<key_compare, key_type, KeyType>::value, int> = 0>
    T & operator[](KeyType && key)
    {
        return emplace(std::forward<KeyType>(key), T{}).first->second;
    }

    const T& operator[](const key_type& key) const
    {
        return at(key);
    }

    template<class KeyType, detail::enable_if_t<
                 detail::is_usable_as_key_type<key_compare, key_type, KeyType>::value, int> = 0>
    const T & operator[](KeyType && key) const
    {
        return at(std::forward<KeyType>(key));
    }

    T& at(const key_type& key)
    {
        for (auto it = this->begin(); it != this->end(); ++it)
        {
            if (m_compare(it->first, key))
            {
                return it->second;
            }
        }

        JSON_THROW(std::out_of_range("key not found"));
    }

    template<class KeyType, detail::enable_if_t<
                 detail::is_usable_as_key_type<key_compare, key_type, KeyType>::value, int> = 0>
    T & at(KeyType && key)
    {
        for (auto it = this->begin(); it != this->end(); ++it)
        {
            if (m_compare(it->first, key))
            {
                return it->second;
            }
        }

        JSON_THROW(std::out_of_range("key not found"));
    }

    const T& at(const key_type& key) const
    {
        for (auto it = this->begin(); it != this->end(); ++it)
        {
            if (m_compare(it->first, key))
            {
                return it->second;
            }
        }

        JSON_THROW(std::out_of_range("key not found"));
    }

    template<class KeyType, detail::enable_if_t<
                 detail::is_usable_as_key_type<key_compare, key_type, KeyType>::value, int> = 0>
    const T & at(KeyType && key) const
    {
        for (auto it = this->begin(); it != this->end(); ++it)
        {
            if (m_compare(it->first, key))
            {
                return it->second;
            }
        }

        JSON_THROW(std::out_of_range("key not found"));
    }

    size_type erase(const key_type& key)
    {
        for (auto it = this->begin(); it != this->end(); ++it)
        {
            if (m_compare(it->first, key))
            {
                // Since we cannot move const Keys, re-construct them in place
                for (auto next = it; ++next != this->end(); ++it)
                {
                    it->~value_type(); // Destroy but keep allocation
                    new (&*it) value_type{std::move(*next)};
                }
                Container::pop_back();
                return 1;
            }
        }
        return 0;
    }

    template<class KeyType, detail::enable_if_t<
                 detail::is_usable_as_key_type<key_compare, key_type, KeyType>::value, int> = 0>
    size_type erase(KeyType && key)
    {
        for (auto it = this->begin(); it != this->end(); ++it)
        {
            if (m_compare(it->first, key))
            {
                // Since we cannot move const Keys, re-construct them in place
                for (auto next = it; ++next != this->end(); ++it)
                {
                    it->~value_type(); // Destroy but keep allocation
                    new (&*it) value_type{std::move(*next)};
                }
                Container::pop_back();
                return 1;
            }
        }
        return 0;
    }

    iterator erase(iterator pos)
    {
        return erase(pos, std::next(pos));
    }

    iterator erase(iterator first, iterator last)
    {
        if (first == last)
        {
            return first;
        }

        const auto elements_affected = std::distance(first, last);
        const auto offset = std::distance(Container::begin(), first);

        // This is the start situation. We need to delete elements_affected
        // elements (3 in this example: e, f, g), and need to return an
        // iterator past the last deleted element (h in this example).
        // Note that offset is the distance from the start of the vector
        // to first. We will need this later.

        // [ a, b, c, d, e, f, g, h, i, j ]
        //               ^        ^
        //             first    last

        // Since we cannot move const Keys, we re-construct them in place.
        // We start at first and re-construct (viz. copy) the elements from
        // the back of the vector. Example for first iteration:

        //               ,--------.
        //               v        |   destroy e and re-construct with h
        // [ a, b, c, d, e, f, g, h, i, j ]
        //               ^        ^
        //               it       it + elements_affected

        for (auto it = first; std::next(it, elements_affected) != Container::end(); ++it)
        {
            it->~value_type(); // destroy but keep allocation
            new (&*it) value_type{std::move(*std::next(it, elements_affected))}; // "move" next element to it
        }

        // [ a, b, c, d, h, i, j, h, i, j ]
        //               ^        ^
        //             first    last

        // remove the unneeded elements at the end of the vector
        Container::resize(this->size() - static_cast<size_type>(elements_affected));

        // [ a, b, c, d, h, i, j ]
        //               ^        ^
        //             first    last

        // first is now pointing past the last deleted element, but we cannot
        // use this iterator, because it may have been invalidated by the
        // resize call. Instead, we can return begin() + offset.
        return Container::begin() + offset;
    }

    size_type count(const key_type& key) const
    {
        for (auto it = this->begin(); it != this->end(); ++it)
        {
            if (m_compare(it->first, key))
            {
                return 1;
            }
        }
        return 0;
    }

    template<class KeyType, detail::enable_if_t<
                 detail::is_usable_as_key_type<key_compare, key_type, KeyType>::value, int> = 0>
    size_type count(KeyType && key) const
    {
        for (auto it = this->begin(); it != this->end(); ++it)
        {
            if (m_compare(it->first, key))
            {
                return 1;
            }
        }
        return 0;
    }

    iterator find(const key_type& key)
    {
        for (auto it = this->begin(); it != this->end(); ++it)
        {
            if (m_compare(it->first, key))
            {
                return it;
            }
        }
        return Container::end();
    }

    template<class KeyType, detail::enable_if_t<
                 detail::is_usable_as_key_type<key_compare, key_type, KeyType>::value, int> = 0>
    iterator find(KeyType && key)
    {
        for (auto it = this->begin(); it != this->end(); ++it)
        {
            if (m_compare(it->first, key))
            {
                return it;
            }
        }
        return Container::end();
    }

    const_iterator find(const key_type& key) const
    {
        for (auto it = this->begin(); it != this->end(); ++it)
        {
            if (m_compare(it->first, key))
            {
                return it;
            }
        }
        return Container::end();
    }

    std::pair<iterator, bool> insert( value_type&& value )
    {
        return emplace(value.first, std::move(value.second));
    }

    std::pair<iterator, bool> insert( const value_type& value )
    {
        for (auto it = this->begin(); it != this->end(); ++it)
        {
            if (m_compare(it->first, value.first))
            {
                return {it, false};
            }
        }
        Container::push_back(value);
        return {--this->end(), true};
    }

    template<typename InputIt>
    using require_input_iter = typename std::enable_if<std::is_convertible<typename std::iterator_traits<InputIt>::iterator_category,
            std::input_iterator_tag>::value>::type;

    template<typename InputIt, typename = require_input_iter<InputIt>>
    void insert(InputIt first, InputIt last)
    {
        for (auto it = first; it != last; ++it)
        {
            insert(*it);
        }
    }

private:
    JSON_NO_UNIQUE_ADDRESS key_compare m_compare = key_compare();
};

NLOHMANN_JSON_NAMESPACE_END


#if defined(JSON_HAS_CPP_17)
    #include <any>
    #include <string_view>
#endif

/*!
@brief namespace for Niels Lohmann
@see https://github.com/nlohmann
@since version 1.0.0
*/
NLOHMANN_JSON_NAMESPACE_BEGIN

/*!
@brief a class to store JSON values

@internal
@invariant The member variables @a m_value and @a m_type have the following
relationship:
- If `m_type == value_t::object`, then `m_value.object != nullptr`.
- If `m_type == value_t::array`, then `m_value.array != nullptr`.
- If `m_type == value_t::string`, then `m_value.string != nullptr`.
The invariants are checked by member function assert_invariant().

@note ObjectType trick from https://stackoverflow.com/a/9860911
@endinternal

@since version 1.0.0

@nosubgrouping
*/
NLOHMANN_BASIC_JSON_TPL_DECLARATION
class basic_json // NOLINT(cppcoreguidelines-special-member-functions,hicpp-special-member-functions)
{
  private:
    template<detail::value_t> friend struct detail::external_constructor;

    template<typename>
    friend class ::nlohmann::json_pointer;
    // can be restored when json_pointer backwards compatibility is removed
    // friend ::nlohmann::json_pointer<StringType>;

    template<typename BasicJsonType, typename InputType>
    friend class ::nlohmann::detail::parser;
    friend ::nlohmann::detail::serializer<basic_json>;
    template<typename BasicJsonType>
    friend class ::nlohmann::detail::iter_impl;
    template<typename BasicJsonType, typename CharType>
    friend class ::nlohmann::detail::binary_writer;
    template<typename BasicJsonType, typename InputType, typename SAX>
    friend class ::nlohmann::detail::binary_reader;
    template<typename BasicJsonType>
    friend class ::nlohmann::detail::json_sax_dom_parser;
    template<typename BasicJsonType>
    friend class ::nlohmann::detail::json_sax_dom_callback_parser;
    friend class ::nlohmann::detail::exception;

    /// workaround type for MSVC
    using basic_json_t = NLOHMANN_BASIC_JSON_TPL;

  JSON_PRIVATE_UNLESS_TESTED:
    // convenience aliases for types residing in namespace detail;
    using lexer = ::nlohmann::detail::lexer_base<basic_json>;

    template<typename InputAdapterType>
    static ::nlohmann::detail::parser<basic_json, InputAdapterType> parser(
        InputAdapterType adapter,
        detail::parser_callback_t<basic_json>cb = nullptr,
        const bool allow_exceptions = true,
        const bool ignore_comments = false
                                 )
    {
        return ::nlohmann::detail::parser<basic_json, InputAdapterType>(std::move(adapter),
                std::move(cb), allow_exceptions, ignore_comments);
    }

  private:
    using primitive_iterator_t = ::nlohmann::detail::primitive_iterator_t;
    template<typename BasicJsonType>
    using internal_iterator = ::nlohmann::detail::internal_iterator<BasicJsonType>;
    template<typename BasicJsonType>
    using iter_impl = ::nlohmann::detail::iter_impl<BasicJsonType>;
    template<typename Iterator>
    using iteration_proxy = ::nlohmann::detail::iteration_proxy<Iterator>;
    template<typename Base> using json_reverse_iterator = ::nlohmann::detail::json_reverse_iterator<Base>;

    template<typename CharType>
    using output_adapter_t = ::nlohmann::detail::output_adapter_t<CharType>;

    template<typename InputType>
    using binary_reader = ::nlohmann::detail::binary_reader<basic_json, InputType>;
    template<typename CharType> using binary_writer = ::nlohmann::detail::binary_writer<basic_json, CharType>;

  JSON_PRIVATE_UNLESS_TESTED:
    using serializer = ::nlohmann::detail::serializer<basic_json>;

  public:
    using value_t = detail::value_t;
    /// JSON Pointer, see @ref nlohmann::json_pointer
    using json_pointer = ::nlohmann::json_pointer<StringType>;
    template<typename T, typename SFINAE>
    using json_serializer = JSONSerializer<T, SFINAE>;
    /// how to treat decoding errors
    using error_handler_t = detail::error_handler_t;
    /// how to treat CBOR tags
    using cbor_tag_handler_t = detail::cbor_tag_handler_t;
    /// helper type for initializer lists of basic_json values
    using initializer_list_t = std::initializer_list<detail::json_ref<basic_json>>;

    using input_format_t = detail::input_format_t;
    /// SAX interface type, see @ref nlohmann::json_sax
    using json_sax_t = json_sax<basic_json>;

    ////////////////
    // exceptions //
    ////////////////

    /// @name exceptions
    /// Classes to implement user-defined exceptions.
    /// @{

    using exception = detail::exception;
    using parse_error = detail::parse_error;
    using invalid_iterator = detail::invalid_iterator;
    using type_error = detail::type_error;
    using out_of_range = detail::out_of_range;
    using other_error = detail::other_error;

    /// @}


    /////////////////////
    // container types //
    /////////////////////

    /// @name container types
    /// The canonic container types to use @ref basic_json like any other STL
    /// container.
    /// @{

    /// the type of elements in a basic_json container
    using value_type = basic_json;

    /// the type of an element reference
    using reference = value_type&;
    /// the type of an element const reference
    using const_reference = const value_type&;

    /// a type to represent differences between iterators
    using difference_type = std::ptrdiff_t;
    /// a type to represent container sizes
    using size_type = std::size_t;

    /// the allocator type
    using allocator_type = AllocatorType<basic_json>;

    /// the type of an element pointer
    using pointer = typename std::allocator_traits<allocator_type>::pointer;
    /// the type of an element const pointer
    using const_pointer = typename std::allocator_traits<allocator_type>::const_pointer;

    /// an iterator for a basic_json container
    using iterator = iter_impl<basic_json>;
    /// a const iterator for a basic_json container
    using const_iterator = iter_impl<const basic_json>;
    /// a reverse iterator for a basic_json container
    using reverse_iterator = json_reverse_iterator<typename basic_json::iterator>;
    /// a const reverse iterator for a basic_json container
    using const_reverse_iterator = json_reverse_iterator<typename basic_json::const_iterator>;

    /// @}


    /// @brief returns the allocator associated with the container
    /// @sa https://json.nlohmann.me/api/basic_json/get_allocator/
    static allocator_type get_allocator()
    {
        return allocator_type();
    }

    /// @brief returns version information on the library
    /// @sa https://json.nlohmann.me/api/basic_json/meta/
    JSON_HEDLEY_WARN_UNUSED_RESULT
    static basic_json meta()
    {
        basic_json result;

        result["copyright"] = "(C) 2013-2022 Niels Lohmann";
        result["name"] = "JSON for Modern C++";
        result["url"] = "https://github.com/nlohmann/json";
        result["version"]["string"] =
            detail::concat(std::to_string(NLOHMANN_JSON_VERSION_MAJOR), '.',
                           std::to_string(NLOHMANN_JSON_VERSION_MINOR), '.',
                           std::to_string(NLOHMANN_JSON_VERSION_PATCH));
        result["version"]["major"] = NLOHMANN_JSON_VERSION_MAJOR;
        result["version"]["minor"] = NLOHMANN_JSON_VERSION_MINOR;
        result["version"]["patch"] = NLOHMANN_JSON_VERSION_PATCH;

#ifdef _WIN32
        result["platform"] = "win32";
#elif defined __linux__
        result["platform"] = "linux";
#elif defined __APPLE__
        result["platform"] = "apple";
#elif defined __unix__
        result["platform"] = "unix";
#else
        result["platform"] = "unknown";
#endif

#if defined(__ICC) || defined(__INTEL_COMPILER)
        result["compiler"] = {{"family", "icc"}, {"version", __INTEL_COMPILER}};
#elif defined(__clang__)
        result["compiler"] = {{"family", "clang"}, {"version", __clang_version__}};
#elif defined(__GNUC__) || defined(__GNUG__)
        result["compiler"] = {{"family", "gcc"}, {"version", detail::concat(
                    std::to_string(__GNUC__), '.',
                    std::to_string(__GNUC_MINOR__), '.',
                    std::to_string(__GNUC_PATCHLEVEL__))
            }
        };
#elif defined(__HP_cc) || defined(__HP_aCC)
        result["compiler"] = "hp"
#elif defined(__IBMCPP__)
        result["compiler"] = {{"family", "ilecpp"}, {"version", __IBMCPP__}};
#elif defined(_MSC_VER)
        result["compiler"] = {{"family", "msvc"}, {"version", _MSC_VER}};
#elif defined(__PGI)
        result["compiler"] = {{"family", "pgcpp"}, {"version", __PGI}};
#elif defined(__SUNPRO_CC)
        result["compiler"] = {{"family", "sunpro"}, {"version", __SUNPRO_CC}};
#else
        result["compiler"] = {{"family", "unknown"}, {"version", "unknown"}};
#endif


#if defined(_MSVC_LANG)
        result["compiler"]["c++"] = std::to_string(_MSVC_LANG);
#elif defined(__cplusplus)
        result["compiler"]["c++"] = std::to_string(__cplusplus);
#else
        result["compiler"]["c++"] = "unknown";
#endif
        return result;
    }


    ///////////////////////////
    // JSON value data types //
    ///////////////////////////

    /// @name JSON value data types
    /// The data types to store a JSON value. These types are derived from
    /// the template arguments passed to class @ref basic_json.
    /// @{

    /// @brief default object key comparator type
    /// The actual object key comparator type (@ref object_comparator_t) may be
    /// different.
    /// @sa https://json.nlohmann.me/api/basic_json/default_object_comparator_t/
#if defined(JSON_HAS_CPP_14)
    // use of transparent comparator avoids unnecessary repeated construction of temporaries
    // in functions involving lookup by key with types other than object_t::key_type (aka. StringType)
    using default_object_comparator_t = std::less<>;
#else
    using default_object_comparator_t = std::less<StringType>;
#endif

    /// @brief a type for an object
    /// @sa https://json.nlohmann.me/api/basic_json/object_t/
    using object_t = ObjectType<StringType,
          basic_json,
          default_object_comparator_t,
          AllocatorType<std::pair<const StringType,
          basic_json>>>;

    /// @brief a type for an array
    /// @sa https://json.nlohmann.me/api/basic_json/array_t/
    using array_t = ArrayType<basic_json, AllocatorType<basic_json>>;

    /// @brief a type for a string
    /// @sa https://json.nlohmann.me/api/basic_json/string_t/
    using string_t = StringType;

    /// @brief a type for a boolean
    /// @sa https://json.nlohmann.me/api/basic_json/boolean_t/
    using boolean_t = BooleanType;

    /// @brief a type for a number (integer)
    /// @sa https://json.nlohmann.me/api/basic_json/number_integer_t/
    using number_integer_t = NumberIntegerType;

    /// @brief a type for a number (unsigned)
    /// @sa https://json.nlohmann.me/api/basic_json/number_unsigned_t/
    using number_unsigned_t = NumberUnsignedType;

    /// @brief a type for a number (floating-point)
    /// @sa https://json.nlohmann.me/api/basic_json/number_float_t/
    using number_float_t = NumberFloatType;

    /// @brief a type for a packed binary type
    /// @sa https://json.nlohmann.me/api/basic_json/binary_t/
    using binary_t = nlohmann::byte_container_with_subtype<BinaryType>;

    /// @brief object key comparator type
    /// @sa https://json.nlohmann.me/api/basic_json/object_comparator_t/
    using object_comparator_t = detail::actual_object_comparator_t<basic_json>;

    /// @}

  private:

    /// helper for exception-safe object creation
    template<typename T, typename... Args>
    JSON_HEDLEY_RETURNS_NON_NULL
    static T* create(Args&& ... args)
    {
        AllocatorType<T> alloc;
        using AllocatorTraits = std::allocator_traits<AllocatorType<T>>;

        auto deleter = [&](T * obj)
        {
            AllocatorTraits::deallocate(alloc, obj, 1);
        };
        std::unique_ptr<T, decltype(deleter)> obj(AllocatorTraits::allocate(alloc, 1), deleter);
        AllocatorTraits::construct(alloc, obj.get(), std::forward<Args>(args)...);
        JSON_ASSERT(obj != nullptr);
        return obj.release();
    }

    ////////////////////////
    // JSON value storage //
    ////////////////////////

  JSON_PRIVATE_UNLESS_TESTED:
    /*!
    @brief a JSON value

    The actual storage for a JSON value of the @ref basic_json class. This
    union combines the different storage types for the JSON value types
    defined in @ref value_t.

    JSON type | value_t type    | used type
    --------- | --------------- | ------------------------
    object    | object          | pointer to @ref object_t
    array     | array           | pointer to @ref array_t
    string    | string          | pointer to @ref string_t
    boolean   | boolean         | @ref boolean_t
    number    | number_integer  | @ref number_integer_t
    number    | number_unsigned | @ref number_unsigned_t
    number    | number_float    | @ref number_float_t
    binary    | binary          | pointer to @ref binary_t
    null      | null            | *no value is stored*

    @note Variable-length types (objects, arrays, and strings) are stored as
    pointers. The size of the union should not exceed 64 bits if the default
    value types are used.

    @since version 1.0.0
    */
    union json_value
    {
        /// object (stored with pointer to save storage)
        object_t* object;
        /// array (stored with pointer to save storage)
        array_t* array;
        /// string (stored with pointer to save storage)
        string_t* string;
        /// binary (stored with pointer to save storage)
        binary_t* binary;
        /// boolean
        boolean_t boolean;
        /// number (integer)
        number_integer_t number_integer;
        /// number (unsigned integer)
        number_unsigned_t number_unsigned;
        /// number (floating-point)
        number_float_t number_float;

        /// default constructor (for null values)
        json_value() = default;
        /// constructor for booleans
        json_value(boolean_t v) noexcept : boolean(v) {}
        /// constructor for numbers (integer)
        json_value(number_integer_t v) noexcept : number_integer(v) {}
        /// constructor for numbers (unsigned)
        json_value(number_unsigned_t v) noexcept : number_unsigned(v) {}
        /// constructor for numbers (floating-point)
        json_value(number_float_t v) noexcept : number_float(v) {}
        /// constructor for empty values of a given type
        json_value(value_t t)
        {
            switch (t)
            {
                case value_t::object:
                {
                    object = create<object_t>();
                    break;
                }

                case value_t::array:
                {
                    array = create<array_t>();
                    break;
                }

                case value_t::string:
                {
                    string = create<string_t>("");
                    break;
                }

                case value_t::binary:
                {
                    binary = create<binary_t>();
                    break;
                }

                case value_t::boolean:
                {
                    boolean = static_cast<boolean_t>(false);
                    break;
                }

                case value_t::number_integer:
                {
                    number_integer = static_cast<number_integer_t>(0);
                    break;
                }

                case value_t::number_unsigned:
                {
                    number_unsigned = static_cast<number_unsigned_t>(0);
                    break;
                }

                case value_t::number_float:
                {
                    number_float = static_cast<number_float_t>(0.0);
                    break;
                }

                case value_t::null:
                {
                    object = nullptr;  // silence warning, see #821
                    break;
                }

                case value_t::discarded:
                default:
                {
                    object = nullptr;  // silence warning, see #821
                    if (JSON_HEDLEY_UNLIKELY(t == value_t::null))
                    {
                        JSON_THROW(other_error::create(500, "961c151d2e87f2686a955a9be24d316f1362bf21 3.11.2", nullptr)); // LCOV_EXCL_LINE
                    }
                    break;
                }
            }
        }

        /// constructor for strings
        json_value(const string_t& value) : string(create<string_t>(value)) {}

        /// constructor for rvalue strings
        json_value(string_t&& value) : string(create<string_t>(std::move(value))) {}

        /// constructor for objects
        json_value(const object_t& value) : object(create<object_t>(value)) {}

        /// constructor for rvalue objects
        json_value(object_t&& value) : object(create<object_t>(std::move(value))) {}

        /// constructor for arrays
        json_value(const array_t& value) : array(create<array_t>(value)) {}

        /// constructor for rvalue arrays
        json_value(array_t&& value) : array(create<array_t>(std::move(value))) {}

        /// constructor for binary arrays
        json_value(const typename binary_t::container_type& value) : binary(create<binary_t>(value)) {}

        /// constructor for rvalue binary arrays
        json_value(typename binary_t::container_type&& value) : binary(create<binary_t>(std::move(value))) {}

        /// constructor for binary arrays (internal type)
        json_value(const binary_t& value) : binary(create<binary_t>(value)) {}

        /// constructor for rvalue binary arrays (internal type)
        json_value(binary_t&& value) : binary(create<binary_t>(std::move(value))) {}

        void destroy(value_t t)
        {
            if (t == value_t::array || t == value_t::object)
            {
                // flatten the current json_value to a heap-allocated stack
                std::vector<basic_json> stack;

                // move the top-level items to stack
                if (t == value_t::array)
                {
                    stack.reserve(array->size());
                    std::move(array->begin(), array->end(), std::back_inserter(stack));
                }
                else
                {
                    stack.reserve(object->size());
                    for (auto&& it : *object)
                    {
                        stack.push_back(std::move(it.second));
                    }
                }

                while (!stack.empty())
                {
                    // move the last item to local variable to be processed
                    basic_json current_item(std::move(stack.back()));
                    stack.pop_back();

                    // if current_item is array/object, move
                    // its children to the stack to be processed later
                    if (current_item.is_array())
                    {
                        std::move(current_item.m_value.array->begin(), current_item.m_value.array->end(), std::back_inserter(stack));

                        current_item.m_value.array->clear();
                    }
                    else if (current_item.is_object())
                    {
                        for (auto&& it : *current_item.m_value.object)
                        {
                            stack.push_back(std::move(it.second));
                        }

                        current_item.m_value.object->clear();
                    }

                    // it's now safe that current_item get destructed
                    // since it doesn't have any children
                }
            }

            switch (t)
            {
                case value_t::object:
                {
                    AllocatorType<object_t> alloc;
                    std::allocator_traits<decltype(alloc)>::destroy(alloc, object);
                    std::allocator_traits<decltype(alloc)>::deallocate(alloc, object, 1);
                    break;
                }

                case value_t::array:
                {
                    AllocatorType<array_t> alloc;
                    std::allocator_traits<decltype(alloc)>::destroy(alloc, array);
                    std::allocator_traits<decltype(alloc)>::deallocate(alloc, array, 1);
                    break;
                }

                case value_t::string:
                {
                    AllocatorType<string_t> alloc;
                    std::allocator_traits<decltype(alloc)>::destroy(alloc, string);
                    std::allocator_traits<decltype(alloc)>::deallocate(alloc, string, 1);
                    break;
                }

                case value_t::binary:
                {
                    AllocatorType<binary_t> alloc;
                    std::allocator_traits<decltype(alloc)>::destroy(alloc, binary);
                    std::allocator_traits<decltype(alloc)>::deallocate(alloc, binary, 1);
                    break;
                }

                case value_t::null:
                case value_t::boolean:
                case value_t::number_integer:
                case value_t::number_unsigned:
                case value_t::number_float:
                case value_t::discarded:
                default:
                {
                    break;
                }
            }
        }
    };

  private:
    /*!
    @brief checks the class invariants

    This function asserts the class invariants. It needs to be called at the
    end of every constructor to make sure that created objects respect the
    invariant. Furthermore, it has to be called each time the type of a JSON
    value is changed, because the invariant expresses a relationship between
    @a m_type and @a m_value.

    Furthermore, the parent relation is checked for arrays and objects: If
    @a check_parents true and the value is an array or object, then the
    container's elements must have the current value as parent.

    @param[in] check_parents  whether the parent relation should be checked.
               The value is true by default and should only be set to false
               during destruction of objects when the invariant does not
               need to hold.
    */
    void assert_invariant(bool check_parents = true) const noexcept
    {
        JSON_ASSERT(m_type != value_t::object || m_value.object != nullptr);
        JSON_ASSERT(m_type != value_t::array || m_value.array != nullptr);
        JSON_ASSERT(m_type != value_t::string || m_value.string != nullptr);
        JSON_ASSERT(m_type != value_t::binary || m_value.binary != nullptr);

#if JSON_DIAGNOSTICS
        JSON_TRY
        {
            // cppcheck-suppress assertWithSideEffect
            JSON_ASSERT(!check_parents || !is_structured() || std::all_of(begin(), end(), [this](const basic_json & j)
            {
                return j.m_parent == this;
            }));
        }
        JSON_CATCH(...) {} // LCOV_EXCL_LINE
#endif
        static_cast<void>(check_parents);
    }

    void set_parents()
    {
#if JSON_DIAGNOSTICS
        switch (m_type)
        {
            case value_t::array:
            {
                for (auto& element : *m_value.array)
                {
                    element.m_parent = this;
                }
                break;
            }

            case value_t::object:
            {
                for (auto& element : *m_value.object)
                {
                    element.second.m_parent = this;
                }
                break;
            }

            case value_t::null:
            case value_t::string:
            case value_t::boolean:
            case value_t::number_integer:
            case value_t::number_unsigned:
            case value_t::number_float:
            case value_t::binary:
            case value_t::discarded:
            default:
                break;
        }
#endif
    }

    iterator set_parents(iterator it, typename iterator::difference_type count_set_parents)
    {
#if JSON_DIAGNOSTICS
        for (typename iterator::difference_type i = 0; i < count_set_parents; ++i)
        {
            (it + i)->m_parent = this;
        }
#else
        static_cast<void>(count_set_parents);
#endif
        return it;
    }

    reference set_parent(reference j, std::size_t old_capacity = static_cast<std::size_t>(-1))
    {
#if JSON_DIAGNOSTICS
        if (old_capacity != static_cast<std::size_t>(-1))
        {
            // see https://github.com/nlohmann/json/issues/2838
            JSON_ASSERT(type() == value_t::array);
            if (JSON_HEDLEY_UNLIKELY(m_value.array->capacity() != old_capacity))
            {
                // capacity has changed: update all parents
                set_parents();
                return j;
            }
        }

        // ordered_json uses a vector internally, so pointers could have
        // been invalidated; see https://github.com/nlohmann/json/issues/2962
#ifdef JSON_HEDLEY_MSVC_VERSION
#pragma warning(push )
#pragma warning(disable : 4127) // ignore warning to replace if with if constexpr
#endif
        if (detail::is_ordered_map<object_t>::value)
        {
            set_parents();
            return j;
        }
#ifdef JSON_HEDLEY_MSVC_VERSION
#pragma warning( pop )
#endif

        j.m_parent = this;
#else
        static_cast<void>(j);
        static_cast<void>(old_capacity);
#endif
        return j;
    }

  public:
    //////////////////////////
    // JSON parser callback //
    //////////////////////////

    /// @brief parser event types
    /// @sa https://json.nlohmann.me/api/basic_json/parse_event_t/
    using parse_event_t = detail::parse_event_t;

    /// @brief per-element parser callback type
    /// @sa https://json.nlohmann.me/api/basic_json/parser_callback_t/
    using parser_callback_t = detail::parser_callback_t<basic_json>;

    //////////////////
    // constructors //
    //////////////////

    /// @name constructors and destructors
    /// Constructors of class @ref basic_json, copy/move constructor, copy
    /// assignment, static functions creating objects, and the destructor.
    /// @{

    /// @brief create an empty value with a given type
    /// @sa https://json.nlohmann.me/api/basic_json/basic_json/
    basic_json(const value_t v)
        : m_type(v), m_value(v)
    {
        assert_invariant();
    }

    /// @brief create a null object
    /// @sa https://json.nlohmann.me/api/basic_json/basic_json/
    basic_json(std::nullptr_t = nullptr) noexcept // NOLINT(bugprone-exception-escape)
        : basic_json(value_t::null)
    {
        assert_invariant();
    }

    /// @brief create a JSON value from compatible types
    /// @sa https://json.nlohmann.me/api/basic_json/basic_json/
    template < typename CompatibleType,
               typename U = detail::uncvref_t<CompatibleType>,
               detail::enable_if_t <
                   !detail::is_basic_json<U>::value && detail::is_compatible_type<basic_json_t, U>::value, int > = 0 >
    basic_json(CompatibleType && val) noexcept(noexcept( // NOLINT(bugprone-forwarding-reference-overload,bugprone-exception-escape)
                JSONSerializer<U>::to_json(std::declval<basic_json_t&>(),
                                           std::forward<CompatibleType>(val))))
    {
        JSONSerializer<U>::to_json(*this, std::forward<CompatibleType>(val));
        set_parents();
        assert_invariant();
    }

    /// @brief create a JSON value from an existing one
    /// @sa https://json.nlohmann.me/api/basic_json/basic_json/
    template < typename BasicJsonType,
               detail::enable_if_t <
                   detail::is_basic_json<BasicJsonType>::value&& !std::is_same<basic_json, BasicJsonType>::value, int > = 0 >
    basic_json(const BasicJsonType& val)
    {
        using other_boolean_t = typename BasicJsonType::boolean_t;
        using other_number_float_t = typename BasicJsonType::number_float_t;
        using other_number_integer_t = typename BasicJsonType::number_integer_t;
        using other_number_unsigned_t = typename BasicJsonType::number_unsigned_t;
        using other_string_t = typename BasicJsonType::string_t;
        using other_object_t = typename BasicJsonType::object_t;
        using other_array_t = typename BasicJsonType::array_t;
        using other_binary_t = typename BasicJsonType::binary_t;

        switch (val.type())
        {
            case value_t::boolean:
                JSONSerializer<other_boolean_t>::to_json(*this, val.template get<other_boolean_t>());
                break;
            case value_t::number_float:
                JSONSerializer<other_number_float_t>::to_json(*this, val.template get<other_number_float_t>());
                break;
            case value_t::number_integer:
                JSONSerializer<other_number_integer_t>::to_json(*this, val.template get<other_number_integer_t>());
                break;
            case value_t::number_unsigned:
                JSONSerializer<other_number_unsigned_t>::to_json(*this, val.template get<other_number_unsigned_t>());
                break;
            case value_t::string:
                JSONSerializer<other_string_t>::to_json(*this, val.template get_ref<const other_string_t&>());
                break;
            case value_t::object:
                JSONSerializer<other_object_t>::to_json(*this, val.template get_ref<const other_object_t&>());
                break;
            case value_t::array:
                JSONSerializer<other_array_t>::to_json(*this, val.template get_ref<const other_array_t&>());
                break;
            case value_t::binary:
                JSONSerializer<other_binary_t>::to_json(*this, val.template get_ref<const other_binary_t&>());
                break;
            case value_t::null:
                *this = nullptr;
                break;
            case value_t::discarded:
                m_type = value_t::discarded;
                break;
            default:            // LCOV_EXCL_LINE
                JSON_ASSERT(false); // NOLINT(cert-dcl03-c,hicpp-static-assert,misc-static-assert) LCOV_EXCL_LINE
        }
        JSON_ASSERT(m_type == val.type());
        set_parents();
        assert_invariant();
    }

    /// @brief create a container (array or object) from an initializer list
    /// @sa https://json.nlohmann.me/api/basic_json/basic_json/
    basic_json(initializer_list_t init,
               bool type_deduction = true,
               value_t manual_type = value_t::array)
    {
        // check if each element is an array with two elements whose first
        // element is a string
        bool is_an_object = std::all_of(init.begin(), init.end(),
                                        [](const detail::json_ref<basic_json>& element_ref)
        {
            return element_ref->is_array() && element_ref->size() == 2 && (*element_ref)[0].is_string();
        });

        // adjust type if type deduction is not wanted
        if (!type_deduction)
        {
            // if array is wanted, do not create an object though possible
            if (manual_type == value_t::array)
            {
                is_an_object = false;
            }

            // if object is wanted but impossible, throw an exception
            if (JSON_HEDLEY_UNLIKELY(manual_type == value_t::object && !is_an_object))
            {
                JSON_THROW(type_error::create(301, "cannot create object from initializer list", nullptr));
            }
        }

        if (is_an_object)
        {
            // the initializer list is a list of pairs -> create object
            m_type = value_t::object;
            m_value = value_t::object;

            for (auto& element_ref : init)
            {
                auto element = element_ref.moved_or_copied();
                m_value.object->emplace(
                    std::move(*((*element.m_value.array)[0].m_value.string)),
                    std::move((*element.m_value.array)[1]));
            }
        }
        else
        {
            // the initializer list describes an array -> create array
            m_type = value_t::array;
            m_value.array = create<array_t>(init.begin(), init.end());
        }

        set_parents();
        assert_invariant();
    }

    /// @brief explicitly create a binary array (without subtype)
    /// @sa https://json.nlohmann.me/api/basic_json/binary/
    JSON_HEDLEY_WARN_UNUSED_RESULT
    static basic_json binary(const typename binary_t::container_type& init)
    {
        auto res = basic_json();
        res.m_type = value_t::binary;
        res.m_value = init;
        return res;
    }

    /// @brief explicitly create a binary array (with subtype)
    /// @sa https://json.nlohmann.me/api/basic_json/binary/
    JSON_HEDLEY_WARN_UNUSED_RESULT
    static basic_json binary(const typename binary_t::container_type& init, typename binary_t::subtype_type subtype)
    {
        auto res = basic_json();
        res.m_type = value_t::binary;
        res.m_value = binary_t(init, subtype);
        return res;
    }

    /// @brief explicitly create a binary array
    /// @sa https://json.nlohmann.me/api/basic_json/binary/
    JSON_HEDLEY_WARN_UNUSED_RESULT
    static basic_json binary(typename binary_t::container_type&& init)
    {
        auto res = basic_json();
        res.m_type = value_t::binary;
        res.m_value = std::move(init);
        return res;
    }

    /// @brief explicitly create a binary array (with subtype)
    /// @sa https://json.nlohmann.me/api/basic_json/binary/
    JSON_HEDLEY_WARN_UNUSED_RESULT
    static basic_json binary(typename binary_t::container_type&& init, typename binary_t::subtype_type subtype)
    {
        auto res = basic_json();
        res.m_type = value_t::binary;
        res.m_value = binary_t(std::move(init), subtype);
        return res;
    }

    /// @brief explicitly create an array from an initializer list
    /// @sa https://json.nlohmann.me/api/basic_json/array/
    JSON_HEDLEY_WARN_UNUSED_RESULT
    static basic_json array(initializer_list_t init = {})
    {
        return basic_json(init, false, value_t::array);
    }

    /// @brief explicitly create an object from an initializer list
    /// @sa https://json.nlohmann.me/api/basic_json/object/
    JSON_HEDLEY_WARN_UNUSED_RESULT
    static basic_json object(initializer_list_t init = {})
    {
        return basic_json(init, false, value_t::object);
    }

    /// @brief construct an array with count copies of given value
    /// @sa https://json.nlohmann.me/api/basic_json/basic_json/
    basic_json(size_type cnt, const basic_json& val)
        : m_type(value_t::array)
    {
        m_value.array = create<array_t>(cnt, val);
        set_parents();
        assert_invariant();
    }

    /// @brief construct a JSON container given an iterator range
    /// @sa https://json.nlohmann.me/api/basic_json/basic_json/
    template < class InputIT, typename std::enable_if <
                   std::is_same<InputIT, typename basic_json_t::iterator>::value ||
                   std::is_same<InputIT, typename basic_json_t::const_iterator>::value, int >::type = 0 >
    basic_json(InputIT first, InputIT last)
    {
        JSON_ASSERT(first.m_object != nullptr);
        JSON_ASSERT(last.m_object != nullptr);

        // make sure iterator fits the current value
        if (JSON_HEDLEY_UNLIKELY(first.m_object != last.m_object))
        {
            JSON_THROW(invalid_iterator::create(201, "iterators are not compatible", nullptr));
        }

        // copy type from first iterator
        m_type = first.m_object->m_type;

        // check if iterator range is complete for primitive values
        switch (m_type)
        {
            case value_t::boolean:
            case value_t::number_float:
            case value_t::number_integer:
            case value_t::number_unsigned:
            case value_t::string:
            {
                if (JSON_HEDLEY_UNLIKELY(!first.m_it.primitive_iterator.is_begin()
                                         || !last.m_it.primitive_iterator.is_end()))
                {
                    JSON_THROW(invalid_iterator::create(204, "iterators out of range", first.m_object));
                }
                break;
            }

            case value_t::null:
            case value_t::object:
            case value_t::array:
            case value_t::binary:
            case value_t::discarded:
            default:
                break;
        }

        switch (m_type)
        {
            case value_t::number_integer:
            {
                m_value.number_integer = first.m_object->m_value.number_integer;
                break;
            }

            case value_t::number_unsigned:
            {
                m_value.number_unsigned = first.m_object->m_value.number_unsigned;
                break;
            }

            case value_t::number_float:
            {
                m_value.number_float = first.m_object->m_value.number_float;
                break;
            }

            case value_t::boolean:
            {
                m_value.boolean = first.m_object->m_value.boolean;
                break;
            }

            case value_t::string:
            {
                m_value = *first.m_object->m_value.string;
                break;
            }

            case value_t::object:
            {
                m_value.object = create<object_t>(first.m_it.object_iterator,
                                                  last.m_it.object_iterator);
                break;
            }

            case value_t::array:
            {
                m_value.array = create<array_t>(first.m_it.array_iterator,
                                                last.m_it.array_iterator);
                break;
            }

            case value_t::binary:
            {
                m_value = *first.m_object->m_value.binary;
                break;
            }

            case value_t::null:
            case value_t::discarded:
            default:
                JSON_THROW(invalid_iterator::create(206, detail::concat("cannot construct with iterators from ", first.m_object->type_name()), first.m_object));
        }

        set_parents();
        assert_invariant();
    }


    ///////////////////////////////////////
    // other constructors and destructor //
    ///////////////////////////////////////

    template<typename JsonRef,
             detail::enable_if_t<detail::conjunction<detail::is_json_ref<JsonRef>,
                                 std::is_same<typename JsonRef::value_type, basic_json>>::value, int> = 0 >
    basic_json(const JsonRef& ref) : basic_json(ref.moved_or_copied()) {}

    /// @brief copy constructor
    /// @sa https://json.nlohmann.me/api/basic_json/basic_json/
    basic_json(const basic_json& other)
        : m_type(other.m_type)
    {
        // check of passed value is valid
        other.assert_invariant();

        switch (m_type)
        {
            case value_t::object:
            {
                m_value = *other.m_value.object;
                break;
            }

            case value_t::array:
            {
                m_value = *other.m_value.array;
                break;
            }

            case value_t::string:
            {
                m_value = *other.m_value.string;
                break;
            }

            case value_t::boolean:
            {
                m_value = other.m_value.boolean;
                break;
            }

            case value_t::number_integer:
            {
                m_value = other.m_value.number_integer;
                break;
            }

            case value_t::number_unsigned:
            {
                m_value = other.m_value.number_unsigned;
                break;
            }

            case value_t::number_float:
            {
                m_value = other.m_value.number_float;
                break;
            }

            case value_t::binary:
            {
                m_value = *other.m_value.binary;
                break;
            }

            case value_t::null:
            case value_t::discarded:
            default:
                break;
        }

        set_parents();
        assert_invariant();
    }

    /// @brief move constructor
    /// @sa https://json.nlohmann.me/api/basic_json/basic_json/
    basic_json(basic_json&& other) noexcept
        : m_type(std::move(other.m_type)),
          m_value(std::move(other.m_value))
    {
        // check that passed value is valid
        other.assert_invariant(false);

        // invalidate payload
        other.m_type = value_t::null;
        other.m_value = {};

        set_parents();
        assert_invariant();
    }

    /// @brief copy assignment
    /// @sa https://json.nlohmann.me/api/basic_json/operator=/
    basic_json& operator=(basic_json other) noexcept (
        std::is_nothrow_move_constructible<value_t>::value&&
        std::is_nothrow_move_assignable<value_t>::value&&
        std::is_nothrow_move_constructible<json_value>::value&&
        std::is_nothrow_move_assignable<json_value>::value
    )
    {
        // check that passed value is valid
        other.assert_invariant();

        using std::swap;
        swap(m_type, other.m_type);
        swap(m_value, other.m_value);

        set_parents();
        assert_invariant();
        return *this;
    }

    /// @brief destructor
    /// @sa https://json.nlohmann.me/api/basic_json/~basic_json/
    ~basic_json() noexcept
    {
        assert_invariant(false);
        m_value.destroy(m_type);
    }

    /// @}

  public:
    ///////////////////////
    // object inspection //
    ///////////////////////

    /// @name object inspection
    /// Functions to inspect the type of a JSON value.
    /// @{

    /// @brief serialization
    /// @sa https://json.nlohmann.me/api/basic_json/dump/
    string_t dump(const int indent = -1,
                  const char indent_char = ' ',
                  const bool ensure_ascii = false,
                  const error_handler_t error_handler = error_handler_t::strict) const
    {
        string_t result;
        serializer s(detail::output_adapter<char, string_t>(result), indent_char, error_handler);

        if (indent >= 0)
        {
            s.dump(*this, true, ensure_ascii, static_cast<unsigned int>(indent));
        }
        else
        {
            s.dump(*this, false, ensure_ascii, 0);
        }

        return result;
    }

    /// @brief return the type of the JSON value (explicit)
    /// @sa https://json.nlohmann.me/api/basic_json/type/
    constexpr value_t type() const noexcept
    {
        return m_type;
    }

    /// @brief return whether type is primitive
    /// @sa https://json.nlohmann.me/api/basic_json/is_primitive/
    constexpr bool is_primitive() const noexcept
    {
        return is_null() || is_string() || is_boolean() || is_number() || is_binary();
    }

    /// @brief return whether type is structured
    /// @sa https://json.nlohmann.me/api/basic_json/is_structured/
    constexpr bool is_structured() const noexcept
    {
        return is_array() || is_object();
    }

    /// @brief return whether value is null
    /// @sa https://json.nlohmann.me/api/basic_json/is_null/
    constexpr bool is_null() const noexcept
    {
        return m_type == value_t::null;
    }

    /// @brief return whether value is a boolean
    /// @sa https://json.nlohmann.me/api/basic_json/is_boolean/
    constexpr bool is_boolean() const noexcept
    {
        return m_type == value_t::boolean;
    }

    /// @brief return whether value is a number
    /// @sa https://json.nlohmann.me/api/basic_json/is_number/
    constexpr bool is_number() const noexcept
    {
        return is_number_integer() || is_number_float();
    }

    /// @brief return whether value is an integer number
    /// @sa https://json.nlohmann.me/api/basic_json/is_number_integer/
    constexpr bool is_number_integer() const noexcept
    {
        return m_type == value_t::number_integer || m_type == value_t::number_unsigned;
    }

    /// @brief return whether value is an unsigned integer number
    /// @sa https://json.nlohmann.me/api/basic_json/is_number_unsigned/
    constexpr bool is_number_unsigned() const noexcept
    {
        return m_type == value_t::number_unsigned;
    }

    /// @brief return whether value is a floating-point number
    /// @sa https://json.nlohmann.me/api/basic_json/is_number_float/
    constexpr bool is_number_float() const noexcept
    {
        return m_type == value_t::number_float;
    }

    /// @brief return whether value is an object
    /// @sa https://json.nlohmann.me/api/basic_json/is_object/
    constexpr bool is_object() const noexcept
    {
        return m_type == value_t::object;
    }

    /// @brief return whether value is an array
    /// @sa https://json.nlohmann.me/api/basic_json/is_array/
    constexpr bool is_array() const noexcept
    {
        return m_type == value_t::array;
    }

    /// @brief return whether value is a string
    /// @sa https://json.nlohmann.me/api/basic_json/is_string/
    constexpr bool is_string() const noexcept
    {
        return m_type == value_t::string;
    }

    /// @brief return whether value is a binary array
    /// @sa https://json.nlohmann.me/api/basic_json/is_binary/
    constexpr bool is_binary() const noexcept
    {
        return m_type == value_t::binary;
    }

    /// @brief return whether value is discarded
    /// @sa https://json.nlohmann.me/api/basic_json/is_discarded/
    constexpr bool is_discarded() const noexcept
    {
        return m_type == value_t::discarded;
    }

    /// @brief return the type of the JSON value (implicit)
    /// @sa https://json.nlohmann.me/api/basic_json/operator_value_t/
    constexpr operator value_t() const noexcept
    {
        return m_type;
    }

    /// @}

  private:
    //////////////////
    // value access //
    //////////////////

    /// get a boolean (explicit)
    boolean_t get_impl(boolean_t* /*unused*/) const
    {
        if (JSON_HEDLEY_LIKELY(is_boolean()))
        {
            return m_value.boolean;
        }

        JSON_THROW(type_error::create(302, detail::concat("type must be boolean, but is ", type_name()), this));
    }

    /// get a pointer to the value (object)
    object_t* get_impl_ptr(object_t* /*unused*/) noexcept
    {
        return is_object() ? m_value.object : nullptr;
    }

    /// get a pointer to the value (object)
    constexpr const object_t* get_impl_ptr(const object_t* /*unused*/) const noexcept
    {
        return is_object() ? m_value.object : nullptr;
    }

    /// get a pointer to the value (array)
    array_t* get_impl_ptr(array_t* /*unused*/) noexcept
    {
        return is_array() ? m_value.array : nullptr;
    }

    /// get a pointer to the value (array)
    constexpr const array_t* get_impl_ptr(const array_t* /*unused*/) const noexcept
    {
        return is_array() ? m_value.array : nullptr;
    }

    /// get a pointer to the value (string)
    string_t* get_impl_ptr(string_t* /*unused*/) noexcept
    {
        return is_string() ? m_value.string : nullptr;
    }

    /// get a pointer to the value (string)
    constexpr const string_t* get_impl_ptr(const string_t* /*unused*/) const noexcept
    {
        return is_string() ? m_value.string : nullptr;
    }

    /// get a pointer to the value (boolean)
    boolean_t* get_impl_ptr(boolean_t* /*unused*/) noexcept
    {
        return is_boolean() ? &m_value.boolean : nullptr;
    }

    /// get a pointer to the value (boolean)
    constexpr const boolean_t* get_impl_ptr(const boolean_t* /*unused*/) const noexcept
    {
        return is_boolean() ? &m_value.boolean : nullptr;
    }

    /// get a pointer to the value (integer number)
    number_integer_t* get_impl_ptr(number_integer_t* /*unused*/) noexcept
    {
        return is_number_integer() ? &m_value.number_integer : nullptr;
    }

    /// get a pointer to the value (integer number)
    constexpr const number_integer_t* get_impl_ptr(const number_integer_t* /*unused*/) const noexcept
    {
        return is_number_integer() ? &m_value.number_integer : nullptr;
    }

    /// get a pointer to the value (unsigned number)
    number_unsigned_t* get_impl_ptr(number_unsigned_t* /*unused*/) noexcept
    {
        return is_number_unsigned() ? &m_value.number_unsigned : nullptr;
    }

    /// get a pointer to the value (unsigned number)
    constexpr const number_unsigned_t* get_impl_ptr(const number_unsigned_t* /*unused*/) const noexcept
    {
        return is_number_unsigned() ? &m_value.number_unsigned : nullptr;
    }

    /// get a pointer to the value (floating-point number)
    number_float_t* get_impl_ptr(number_float_t* /*unused*/) noexcept
    {
        return is_number_float() ? &m_value.number_float : nullptr;
    }

    /// get a pointer to the value (floating-point number)
    constexpr const number_float_t* get_impl_ptr(const number_float_t* /*unused*/) const noexcept
    {
        return is_number_float() ? &m_value.number_float : nullptr;
    }

    /// get a pointer to the value (binary)
    binary_t* get_impl_ptr(binary_t* /*unused*/) noexcept
    {
        return is_binary() ? m_value.binary : nullptr;
    }

    /// get a pointer to the value (binary)
    constexpr const binary_t* get_impl_ptr(const binary_t* /*unused*/) const noexcept
    {
        return is_binary() ? m_value.binary : nullptr;
    }

    /*!
    @brief helper function to implement get_ref()

    This function helps to implement get_ref() without code duplication for
    const and non-const overloads

    @tparam ThisType will be deduced as `basic_json` or `const basic_json`

    @throw type_error.303 if ReferenceType does not match underlying value
    type of the current JSON
    */
    template<typename ReferenceType, typename ThisType>
    static ReferenceType get_ref_impl(ThisType& obj)
    {
        // delegate the call to get_ptr<>()
        auto* ptr = obj.template get_ptr<typename std::add_pointer<ReferenceType>::type>();

        if (JSON_HEDLEY_LIKELY(ptr != nullptr))
        {
            return *ptr;
        }

        JSON_THROW(type_error::create(303, detail::concat("incompatible ReferenceType for get_ref, actual type is ", obj.type_name()), &obj));
    }

  public:
    /// @name value access
    /// Direct access to the stored value of a JSON value.
    /// @{

    /// @brief get a pointer value (implicit)
    /// @sa https://json.nlohmann.me/api/basic_json/get_ptr/
    template<typename PointerType, typename std::enable_if<
                 std::is_pointer<PointerType>::value, int>::type = 0>
    auto get_ptr() noexcept -> decltype(std::declval<basic_json_t&>().get_impl_ptr(std::declval<PointerType>()))
    {
        // delegate the call to get_impl_ptr<>()
        return get_impl_ptr(static_cast<PointerType>(nullptr));
    }

    /// @brief get a pointer value (implicit)
    /// @sa https://json.nlohmann.me/api/basic_json/get_ptr/
    template < typename PointerType, typename std::enable_if <
                   std::is_pointer<PointerType>::value&&
                   std::is_const<typename std::remove_pointer<PointerType>::type>::value, int >::type = 0 >
    constexpr auto get_ptr() const noexcept -> decltype(std::declval<const basic_json_t&>().get_impl_ptr(std::declval<PointerType>()))
    {
        // delegate the call to get_impl_ptr<>() const
        return get_impl_ptr(static_cast<PointerType>(nullptr));
    }

  private:
    /*!
    @brief get a value (explicit)

    Explicit type conversion between the JSON value and a compatible value
    which is [CopyConstructible](https://en.cppreference.com/w/cpp/named_req/CopyConstructible)
    and [DefaultConstructible](https://en.cppreference.com/w/cpp/named_req/DefaultConstructible).
    The value is converted by calling the @ref json_serializer<ValueType>
    `from_json()` method.

    The function is equivalent to executing
    @code {.cpp}
    ValueType ret;
    JSONSerializer<ValueType>::from_json(*this, ret);
    return ret;
    @endcode

    This overloads is chosen if:
    - @a ValueType is not @ref basic_json,
    - @ref json_serializer<ValueType> has a `from_json()` method of the form
      `void from_json(const basic_json&, ValueType&)`, and
    - @ref json_serializer<ValueType> does not have a `from_json()` method of
      the form `ValueType from_json(const basic_json&)`

    @tparam ValueType the returned value type

    @return copy of the JSON value, converted to @a ValueType

    @throw what @ref json_serializer<ValueType> `from_json()` method throws

    @liveexample{The example below shows several conversions from JSON values
    to other types. There a few things to note: (1) Floating-point numbers can
    be converted to integers\, (2) A JSON array can be converted to a standard
    `std::vector<short>`\, (3) A JSON object can be converted to C++
    associative containers such as `std::unordered_map<std::string\,
    json>`.,get__ValueType_const}

    @since version 2.1.0
    */
    template < typename ValueType,
               detail::enable_if_t <
                   detail::is_default_constructible<ValueType>::value&&
                   detail::has_from_json<basic_json_t, ValueType>::value,
                   int > = 0 >
    ValueType get_impl(detail::priority_tag<0> /*unused*/) const noexcept(noexcept(
                JSONSerializer<ValueType>::from_json(std::declval<const basic_json_t&>(), std::declval<ValueType&>())))
    {
        auto ret = ValueType();
        JSONSerializer<ValueType>::from_json(*this, ret);
        return ret;
    }

    /*!
    @brief get a value (explicit); special case

    Explicit type conversion between the JSON value and a compatible value
    which is **not** [CopyConstructible](https://en.cppreference.com/w/cpp/named_req/CopyConstructible)
    and **not** [DefaultConstructible](https://en.cppreference.com/w/cpp/named_req/DefaultConstructible).
    The value is converted by calling the @ref json_serializer<ValueType>
    `from_json()` method.

    The function is equivalent to executing
    @code {.cpp}
    return JSONSerializer<ValueType>::from_json(*this);
    @endcode

    This overloads is chosen if:
    - @a ValueType is not @ref basic_json and
    - @ref json_serializer<ValueType> has a `from_json()` method of the form
      `ValueType from_json(const basic_json&)`

    @note If @ref json_serializer<ValueType> has both overloads of
    `from_json()`, this one is chosen.

    @tparam ValueType the returned value type

    @return copy of the JSON value, converted to @a ValueType

    @throw what @ref json_serializer<ValueType> `from_json()` method throws

    @since version 2.1.0
    */
    template < typename ValueType,
               detail::enable_if_t <
                   detail::has_non_default_from_json<basic_json_t, ValueType>::value,
                   int > = 0 >
    ValueType get_impl(detail::priority_tag<1> /*unused*/) const noexcept(noexcept(
                JSONSerializer<ValueType>::from_json(std::declval<const basic_json_t&>())))
    {
        return JSONSerializer<ValueType>::from_json(*this);
    }

    /*!
    @brief get special-case overload

    This overloads converts the current @ref basic_json in a different
    @ref basic_json type

    @tparam BasicJsonType == @ref basic_json

    @return a copy of *this, converted into @a BasicJsonType

    @complexity Depending on the implementation of the called `from_json()`
                method.

    @since version 3.2.0
    */
    template < typename BasicJsonType,
               detail::enable_if_t <
                   detail::is_basic_json<BasicJsonType>::value,
                   int > = 0 >
    BasicJsonType get_impl(detail::priority_tag<2> /*unused*/) const
    {
        return *this;
    }

    /*!
    @brief get special-case overload

    This overloads avoids a lot of template boilerplate, it can be seen as the
    identity method

    @tparam BasicJsonType == @ref basic_json

    @return a copy of *this

    @complexity Constant.

    @since version 2.1.0
    */
    template<typename BasicJsonType,
             detail::enable_if_t<
                 std::is_same<BasicJsonType, basic_json_t>::value,
                 int> = 0>
    basic_json get_impl(detail::priority_tag<3> /*unused*/) const
    {
        return *this;
    }

    /*!
    @brief get a pointer value (explicit)
    @copydoc get()
    */
    template<typename PointerType,
             detail::enable_if_t<
                 std::is_pointer<PointerType>::value,
                 int> = 0>
    constexpr auto get_impl(detail::priority_tag<4> /*unused*/) const noexcept
    -> decltype(std::declval<const basic_json_t&>().template get_ptr<PointerType>())
    {
        // delegate the call to get_ptr
        return get_ptr<PointerType>();
    }

  public:
    /*!
    @brief get a (pointer) value (explicit)

    Performs explicit type conversion between the JSON value and a compatible value if required.

    - If the requested type is a pointer to the internally stored JSON value that pointer is returned.
    No copies are made.

    - If the requested type is the current @ref basic_json, or a different @ref basic_json convertible
    from the current @ref basic_json.

    - Otherwise the value is converted by calling the @ref json_serializer<ValueType> `from_json()`
    method.

    @tparam ValueTypeCV the provided value type
    @tparam ValueType the returned value type

    @return copy of the JSON value, converted to @tparam ValueType if necessary

    @throw what @ref json_serializer<ValueType> `from_json()` method throws if conversion is required

    @since version 2.1.0
    */
    template < typename ValueTypeCV, typename ValueType = detail::uncvref_t<ValueTypeCV>>
#if defined(JSON_HAS_CPP_14)
    constexpr
#endif
    auto get() const noexcept(
    noexcept(std::declval<const basic_json_t&>().template get_impl<ValueType>(detail::priority_tag<4> {})))
    -> decltype(std::declval<const basic_json_t&>().template get_impl<ValueType>(detail::priority_tag<4> {}))
    {
        // we cannot static_assert on ValueTypeCV being non-const, because
        // there is support for get<const basic_json_t>(), which is why we
        // still need the uncvref
        static_assert(!std::is_reference<ValueTypeCV>::value,
                      "get() cannot be used with reference types, you might want to use get_ref()");
        return get_impl<ValueType>(detail::priority_tag<4> {});
    }

    /*!
    @brief get a pointer value (explicit)

    Explicit pointer access to the internally stored JSON value. No copies are
    made.

    @warning The pointer becomes invalid if the underlying JSON object
    changes.

    @tparam PointerType pointer type; must be a pointer to @ref array_t, @ref
    object_t, @ref string_t, @ref boolean_t, @ref number_integer_t,
    @ref number_unsigned_t, or @ref number_float_t.

    @return pointer to the internally stored JSON value if the requested
    pointer type @a PointerType fits to the JSON value; `nullptr` otherwise

    @complexity Constant.

    @liveexample{The example below shows how pointers to internal values of a
    JSON value can be requested. Note that no type conversions are made and a
    `nullptr` is returned if the value and the requested pointer type does not
    match.,get__PointerType}

    @sa see @ref get_ptr() for explicit pointer-member access

    @since version 1.0.0
    */
    template<typename PointerType, typename std::enable_if<
                 std::is_pointer<PointerType>::value, int>::type = 0>
    auto get() noexcept -> decltype(std::declval<basic_json_t&>().template get_ptr<PointerType>())
    {
        // delegate the call to get_ptr
        return get_ptr<PointerType>();
    }

    /// @brief get a value (explicit)
    /// @sa https://json.nlohmann.me/api/basic_json/get_to/
    template < typename ValueType,
               detail::enable_if_t <
                   !detail::is_basic_json<ValueType>::value&&
                   detail::has_from_json<basic_json_t, ValueType>::value,
                   int > = 0 >
    ValueType & get_to(ValueType& v) const noexcept(noexcept(
                JSONSerializer<ValueType>::from_json(std::declval<const basic_json_t&>(), v)))
    {
        JSONSerializer<ValueType>::from_json(*this, v);
        return v;
    }

    // specialization to allow calling get_to with a basic_json value
    // see https://github.com/nlohmann/json/issues/2175
    template<typename ValueType,
             detail::enable_if_t <
                 detail::is_basic_json<ValueType>::value,
                 int> = 0>
    ValueType & get_to(ValueType& v) const
    {
        v = *this;
        return v;
    }

    template <
        typename T, std::size_t N,
        typename Array = T (&)[N], // NOLINT(cppcoreguidelines-avoid-c-arrays,hicpp-avoid-c-arrays,modernize-avoid-c-arrays)
        detail::enable_if_t <
            detail::has_from_json<basic_json_t, Array>::value, int > = 0 >
    Array get_to(T (&v)[N]) const // NOLINT(cppcoreguidelines-avoid-c-arrays,hicpp-avoid-c-arrays,modernize-avoid-c-arrays)
    noexcept(noexcept(JSONSerializer<Array>::from_json(
                          std::declval<const basic_json_t&>(), v)))
    {
        JSONSerializer<Array>::from_json(*this, v);
        return v;
    }

    /// @brief get a reference value (implicit)
    /// @sa https://json.nlohmann.me/api/basic_json/get_ref/
    template<typename ReferenceType, typename std::enable_if<
                 std::is_reference<ReferenceType>::value, int>::type = 0>
    ReferenceType get_ref()
    {
        // delegate call to get_ref_impl
        return get_ref_impl<ReferenceType>(*this);
    }

    /// @brief get a reference value (implicit)
    /// @sa https://json.nlohmann.me/api/basic_json/get_ref/
    template < typename ReferenceType, typename std::enable_if <
                   std::is_reference<ReferenceType>::value&&
                   std::is_const<typename std::remove_reference<ReferenceType>::type>::value, int >::type = 0 >
    ReferenceType get_ref() const
    {
        // delegate call to get_ref_impl
        return get_ref_impl<ReferenceType>(*this);
    }

    /*!
    @brief get a value (implicit)

    Implicit type conversion between the JSON value and a compatible value.
    The call is realized by calling @ref get() const.

    @tparam ValueType non-pointer type compatible to the JSON value, for
    instance `int` for JSON integer numbers, `bool` for JSON booleans, or
    `std::vector` types for JSON arrays. The character type of @ref string_t
    as well as an initializer list of this type is excluded to avoid
    ambiguities as these types implicitly convert to `std::string`.

    @return copy of the JSON value, converted to type @a ValueType

    @throw type_error.302 in case passed type @a ValueType is incompatible
    to the JSON value type (e.g., the JSON value is of type boolean, but a
    string is requested); see example below

    @complexity Linear in the size of the JSON value.

    @liveexample{The example below shows several conversions from JSON values
    to other types. There a few things to note: (1) Floating-point numbers can
    be converted to integers\, (2) A JSON array can be converted to a standard
    `std::vector<short>`\, (3) A JSON object can be converted to C++
    associative containers such as `std::unordered_map<std::string\,
    json>`.,operator__ValueType}

    @since version 1.0.0
    */
    template < typename ValueType, typename std::enable_if <
                   detail::conjunction <
                       detail::negation<std::is_pointer<ValueType>>,
                       detail::negation<std::is_same<ValueType, std::nullptr_t>>,
                       detail::negation<std::is_same<ValueType, detail::json_ref<basic_json>>>,
                                        detail::negation<std::is_same<ValueType, typename string_t::value_type>>,
                                        detail::negation<detail::is_basic_json<ValueType>>,
                                        detail::negation<std::is_same<ValueType, std::initializer_list<typename string_t::value_type>>>,
#if defined(JSON_HAS_CPP_17) && (defined(__GNUC__) || (defined(_MSC_VER) && _MSC_VER >= 1910 && _MSC_VER <= 1914))
                                                detail::negation<std::is_same<ValueType, std::string_view>>,
#endif
#if defined(JSON_HAS_CPP_17)
                                                detail::negation<std::is_same<ValueType, std::any>>,
#endif
                                                detail::is_detected_lazy<detail::get_template_function, const basic_json_t&, ValueType>
                                                >::value, int >::type = 0 >
                                        JSON_EXPLICIT operator ValueType() const
    {
        // delegate the call to get<>() const
        return get<ValueType>();
    }

    /// @brief get a binary value
    /// @sa https://json.nlohmann.me/api/basic_json/get_binary/
    binary_t& get_binary()
    {
        if (!is_binary())
        {
            JSON_THROW(type_error::create(302, detail::concat("type must be binary, but is ", type_name()), this));
        }

        return *get_ptr<binary_t*>();
    }

    /// @brief get a binary value
    /// @sa https://json.nlohmann.me/api/basic_json/get_binary/
    const binary_t& get_binary() const
    {
        if (!is_binary())
        {
            JSON_THROW(type_error::create(302, detail::concat("type must be binary, but is ", type_name()), this));
        }

        return *get_ptr<const binary_t*>();
    }

    /// @}


    ////////////////////
    // element access //
    ////////////////////

    /// @name element access
    /// Access to the JSON value.
    /// @{

    /// @brief access specified array element with bounds checking
    /// @sa https://json.nlohmann.me/api/basic_json/at/
    reference at(size_type idx)
    {
        // at only works for arrays
        if (JSON_HEDLEY_LIKELY(is_array()))
        {
            JSON_TRY
            {
                return set_parent(m_value.array->at(idx));
            }
            JSON_CATCH (std::out_of_range&)
            {
                // create better exception explanation
                JSON_THROW(out_of_range::create(401, detail::concat("array index ", std::to_string(idx), " is out of range"), this));
            }
        }
        else
        {
            JSON_THROW(type_error::create(304, detail::concat("cannot use at() with ", type_name()), this));
        }
    }

    /// @brief access specified array element with bounds checking
    /// @sa https://json.nlohmann.me/api/basic_json/at/
    const_reference at(size_type idx) const
    {
        // at only works for arrays
        if (JSON_HEDLEY_LIKELY(is_array()))
        {
            JSON_TRY
            {
                return m_value.array->at(idx);
            }
            JSON_CATCH (std::out_of_range&)
            {
                // create better exception explanation
                JSON_THROW(out_of_range::create(401, detail::concat("array index ", std::to_string(idx), " is out of range"), this));
            }
        }
        else
        {
            JSON_THROW(type_error::create(304, detail::concat("cannot use at() with ", type_name()), this));
        }
    }

    /// @brief access specified object element with bounds checking
    /// @sa https://json.nlohmann.me/api/basic_json/at/
    reference at(const typename object_t::key_type& key)
    {
        // at only works for objects
        if (JSON_HEDLEY_UNLIKELY(!is_object()))
        {
            JSON_THROW(type_error::create(304, detail::concat("cannot use at() with ", type_name()), this));
        }

        auto it = m_value.object->find(key);
        if (it == m_value.object->end())
        {
            JSON_THROW(out_of_range::create(403, detail::concat("key '", key, "' not found"), this));
        }
        return set_parent(it->second);
    }

    /// @brief access specified object element with bounds checking
    /// @sa https://json.nlohmann.me/api/basic_json/at/
    template<class KeyType, detail::enable_if_t<
                 detail::is_usable_as_basic_json_key_type<basic_json_t, KeyType>::value, int> = 0>
    reference at(KeyType && key)
    {
        // at only works for objects
        if (JSON_HEDLEY_UNLIKELY(!is_object()))
        {
            JSON_THROW(type_error::create(304, detail::concat("cannot use at() with ", type_name()), this));
        }

        auto it = m_value.object->find(std::forward<KeyType>(key));
        if (it == m_value.object->end())
        {
            JSON_THROW(out_of_range::create(403, detail::concat("key '", string_t(std::forward<KeyType>(key)), "' not found"), this));
        }
        return set_parent(it->second);
    }

    /// @brief access specified object element with bounds checking
    /// @sa https://json.nlohmann.me/api/basic_json/at/
    const_reference at(const typename object_t::key_type& key) const
    {
        // at only works for objects
        if (JSON_HEDLEY_UNLIKELY(!is_object()))
        {
            JSON_THROW(type_error::create(304, detail::concat("cannot use at() with ", type_name()), this));
        }

        auto it = m_value.object->find(key);
        if (it == m_value.object->end())
        {
            JSON_THROW(out_of_range::create(403, detail::concat("key '", key, "' not found"), this));
        }
        return it->second;
    }

    /// @brief access specified object element with bounds checking
    /// @sa https://json.nlohmann.me/api/basic_json/at/
    template<class KeyType, detail::enable_if_t<
                 detail::is_usable_as_basic_json_key_type<basic_json_t, KeyType>::value, int> = 0>
    const_reference at(KeyType && key) const
    {
        // at only works for objects
        if (JSON_HEDLEY_UNLIKELY(!is_object()))
        {
            JSON_THROW(type_error::create(304, detail::concat("cannot use at() with ", type_name()), this));
        }

        auto it = m_value.object->find(std::forward<KeyType>(key));
        if (it == m_value.object->end())
        {
            JSON_THROW(out_of_range::create(403, detail::concat("key '", string_t(std::forward<KeyType>(key)), "' not found"), this));
        }
        return it->second;
    }

    /// @brief access specified array element
    /// @sa https://json.nlohmann.me/api/basic_json/operator%5B%5D/
    reference operator[](size_type idx)
    {
        // implicitly convert null value to an empty array
        if (is_null())
        {
            m_type = value_t::array;
            m_value.array = create<array_t>();
            assert_invariant();
        }

        // operator[] only works for arrays
        if (JSON_HEDLEY_LIKELY(is_array()))
        {
            // fill up array with null values if given idx is outside range
            if (idx >= m_value.array->size())
            {
#if JSON_DIAGNOSTICS
                // remember array size & capacity before resizing
                const auto old_size = m_value.array->size();
                const auto old_capacity = m_value.array->capacity();
#endif
                m_value.array->resize(idx + 1);

#if JSON_DIAGNOSTICS
                if (JSON_HEDLEY_UNLIKELY(m_value.array->capacity() != old_capacity))
                {
                    // capacity has changed: update all parents
                    set_parents();
                }
                else
                {
                    // set parent for values added above
                    set_parents(begin() + static_cast<typename iterator::difference_type>(old_size), static_cast<typename iterator::difference_type>(idx + 1 - old_size));
                }
#endif
                assert_invariant();
            }

            return m_value.array->operator[](idx);
        }

        JSON_THROW(type_error::create(305, detail::concat("cannot use operator[] with a numeric argument with ", type_name()), this));
    }

    /// @brief access specified array element
    /// @sa https://json.nlohmann.me/api/basic_json/operator%5B%5D/
    const_reference operator[](size_type idx) const
    {
        // const operator[] only works for arrays
        if (JSON_HEDLEY_LIKELY(is_array()))
        {
            return m_value.array->operator[](idx);
        }

        JSON_THROW(type_error::create(305, detail::concat("cannot use operator[] with a numeric argument with ", type_name()), this));
    }

    /// @brief access specified object element
    /// @sa https://json.nlohmann.me/api/basic_json/operator%5B%5D/
    reference operator[](typename object_t::key_type key)
    {
        // implicitly convert null value to an empty object
        if (is_null())
        {
            m_type = value_t::object;
            m_value.object = create<object_t>();
            assert_invariant();
        }

        // operator[] only works for objects
        if (JSON_HEDLEY_LIKELY(is_object()))
        {
            auto result = m_value.object->emplace(std::move(key), nullptr);
            return set_parent(result.first->second);
        }

        JSON_THROW(type_error::create(305, detail::concat("cannot use operator[] with a string argument with ", type_name()), this));
    }

    /// @brief access specified object element
    /// @sa https://json.nlohmann.me/api/basic_json/operator%5B%5D/
    const_reference operator[](const typename object_t::key_type& key) const
    {
        // const operator[] only works for objects
        if (JSON_HEDLEY_LIKELY(is_object()))
        {
            auto it = m_value.object->find(key);
            JSON_ASSERT(it != m_value.object->end());
            return it->second;
        }

        JSON_THROW(type_error::create(305, detail::concat("cannot use operator[] with a string argument with ", type_name()), this));
    }

    // these two functions resolve a (const) char * ambiguity affecting Clang and MSVC
    // (they seemingly cannot be constrained to resolve the ambiguity)
    template<typename T>
    reference operator[](T* key)
    {
        return operator[](typename object_t::key_type(key));
    }

    template<typename T>
    const_reference operator[](T* key) const
    {
        return operator[](typename object_t::key_type(key));
    }

    /// @brief access specified object element
    /// @sa https://json.nlohmann.me/api/basic_json/operator%5B%5D/
    template<class KeyType, detail::enable_if_t<
                 detail::is_usable_as_basic_json_key_type<basic_json_t, KeyType>::value, int > = 0 >
    reference operator[](KeyType && key)
    {
        // implicitly convert null value to an empty object
        if (is_null())
        {
            m_type = value_t::object;
            m_value.object = create<object_t>();
            assert_invariant();
        }

        // operator[] only works for objects
        if (JSON_HEDLEY_LIKELY(is_object()))
        {
            auto result = m_value.object->emplace(std::forward<KeyType>(key), nullptr);
            return set_parent(result.first->second);
        }

        JSON_THROW(type_error::create(305, detail::concat("cannot use operator[] with a string argument with ", type_name()), this));
    }

    /// @brief access specified object element
    /// @sa https://json.nlohmann.me/api/basic_json/operator%5B%5D/
    template<class KeyType, detail::enable_if_t<
                 detail::is_usable_as_basic_json_key_type<basic_json_t, KeyType>::value, int > = 0 >
    const_reference operator[](KeyType && key) const
    {
        // const operator[] only works for objects
        if (JSON_HEDLEY_LIKELY(is_object()))
        {
            auto it = m_value.object->find(std::forward<KeyType>(key));
            JSON_ASSERT(it != m_value.object->end());
            return it->second;
        }

        JSON_THROW(type_error::create(305, detail::concat("cannot use operator[] with a string argument with ", type_name()), this));
    }

  private:
    template<typename KeyType>
    using is_comparable_with_object_key = detail::is_comparable <
        object_comparator_t, const typename object_t::key_type&, KeyType >;

    template<typename ValueType>
    using value_return_type = std::conditional <
        detail::is_c_string_uncvref<ValueType>::value,
        string_t, typename std::decay<ValueType>::type >;

  public:
    /// @brief access specified object element with default value
    /// @sa https://json.nlohmann.me/api/basic_json/value/
    template < class ValueType, detail::enable_if_t <
                   !detail::is_transparent<object_comparator_t>::value
                   && detail::is_getable<basic_json_t, ValueType>::value
                   && !std::is_same<value_t, detail::uncvref_t<ValueType>>::value, int > = 0 >
    ValueType value(const typename object_t::key_type& key, const ValueType& default_value) const
    {
        // value only works for objects
        if (JSON_HEDLEY_LIKELY(is_object()))
        {
            // if key is found, return value and given default value otherwise
            const auto it = find(key);
            if (it != end())
            {
                return it->template get<ValueType>();
            }

            return default_value;
        }

        JSON_THROW(type_error::create(306, detail::concat("cannot use value() with ", type_name()), this));
    }

    /// @brief access specified object element with default value
    /// @sa https://json.nlohmann.me/api/basic_json/value/
    template < class ValueType, class ReturnType = typename value_return_type<ValueType>::type,
               detail::enable_if_t <
                   !detail::is_transparent<object_comparator_t>::value
                   && detail::is_getable<basic_json_t, ReturnType>::value
                   && !std::is_same<value_t, detail::uncvref_t<ValueType>>::value, int > = 0 >
    ReturnType value(const typename object_t::key_type& key, ValueType && default_value) const
    {
        // value only works for objects
        if (JSON_HEDLEY_LIKELY(is_object()))
        {
            // if key is found, return value and given default value otherwise
            const auto it = find(key);
            if (it != end())
            {
                return it->template get<ReturnType>();
            }

            return std::forward<ValueType>(default_value);
        }

        JSON_THROW(type_error::create(306, detail::concat("cannot use value() with ", type_name()), this));
    }

    /// @brief access specified object element with default value
    /// @sa https://json.nlohmann.me/api/basic_json/value/
    template < class ValueType, class KeyType, detail::enable_if_t <
                   detail::is_transparent<object_comparator_t>::value
                   && !detail::is_json_pointer<KeyType>::value
                   && is_comparable_with_object_key<KeyType>::value
                   && detail::is_getable<basic_json_t, ValueType>::value
                   && !std::is_same<value_t, detail::uncvref_t<ValueType>>::value, int > = 0 >
    ValueType value(KeyType && key, const ValueType& default_value) const
    {
        // value only works for objects
        if (JSON_HEDLEY_LIKELY(is_object()))
        {
            // if key is found, return value and given default value otherwise
            const auto it = find(std::forward<KeyType>(key));
            if (it != end())
            {
                return it->template get<ValueType>();
            }

            return default_value;
        }

        JSON_THROW(type_error::create(306, detail::concat("cannot use value() with ", type_name()), this));
    }

    /// @brief access specified object element via JSON Pointer with default value
    /// @sa https://json.nlohmann.me/api/basic_json/value/
    template < class ValueType, class KeyType, class ReturnType = typename value_return_type<ValueType>::type,
               detail::enable_if_t <
                   detail::is_transparent<object_comparator_t>::value
                   && !detail::is_json_pointer<KeyType>::value
                   && is_comparable_with_object_key<KeyType>::value
                   && detail::is_getable<basic_json_t, ReturnType>::value
                   && !std::is_same<value_t, detail::uncvref_t<ValueType>>::value, int > = 0 >
    ReturnType value(KeyType && key, ValueType && default_value) const
    {
        // value only works for objects
        if (JSON_HEDLEY_LIKELY(is_object()))
        {
            // if key is found, return value and given default value otherwise
            const auto it = find(std::forward<KeyType>(key));
            if (it != end())
            {
                return it->template get<ReturnType>();
            }

            return std::forward<ValueType>(default_value);
        }

        JSON_THROW(type_error::create(306, detail::concat("cannot use value() with ", type_name()), this));
    }

    /// @brief access specified object element via JSON Pointer with default value
    /// @sa https://json.nlohmann.me/api/basic_json/value/
    template < class ValueType, detail::enable_if_t <
                   detail::is_getable<basic_json_t, ValueType>::value
                   && !std::is_same<value_t, detail::uncvref_t<ValueType>>::value, int > = 0 >
    ValueType value(const json_pointer& ptr, const ValueType& default_value) const
    {
        // value only works for objects
        if (JSON_HEDLEY_LIKELY(is_object()))
        {
            // if pointer resolves a value, return it or use default value
            JSON_TRY
            {
                return ptr.get_checked(this).template get<ValueType>();
            }
            JSON_INTERNAL_CATCH (out_of_range&)
            {
                return default_value;
            }
        }

        JSON_THROW(type_error::create(306, detail::concat("cannot use value() with ", type_name()), this));
    }

    /// @brief access specified object element via JSON Pointer with default value
    /// @sa https://json.nlohmann.me/api/basic_json/value/
    template < class ValueType, class ReturnType = typename value_return_type<ValueType>::type,
               detail::enable_if_t <
                   detail::is_getable<basic_json_t, ReturnType>::value
                   && !std::is_same<value_t, detail::uncvref_t<ValueType>>::value, int > = 0 >
    ReturnType value(const json_pointer& ptr, ValueType && default_value) const
    {
        // value only works for objects
        if (JSON_HEDLEY_LIKELY(is_object()))
        {
            // if pointer resolves a value, return it or use default value
            JSON_TRY
            {
                return ptr.get_checked(this).template get<ReturnType>();
            }
            JSON_INTERNAL_CATCH (out_of_range&)
            {
                return std::forward<ValueType>(default_value);
            }
        }

        JSON_THROW(type_error::create(306, detail::concat("cannot use value() with ", type_name()), this));
    }

    template < class ValueType, class BasicJsonType, detail::enable_if_t <
                   detail::is_basic_json<BasicJsonType>::value
                   && detail::is_getable<basic_json_t, ValueType>::value
                   && !std::is_same<value_t, detail::uncvref_t<ValueType>>::value, int > = 0 >
    JSON_HEDLEY_DEPRECATED_FOR(3.11.0, basic_json::json_pointer or nlohmann::json_pointer<basic_json::string_t>) // NOLINT(readability/alt_tokens)
    ValueType value(const ::nlohmann::json_pointer<BasicJsonType>& ptr, const ValueType& default_value) const
    {
        return value(ptr.convert(), default_value);
    }

    template < class ValueType, class BasicJsonType, class ReturnType = typename value_return_type<ValueType>::type,
               detail::enable_if_t <
                   detail::is_basic_json<BasicJsonType>::value
                   && detail::is_getable<basic_json_t, ReturnType>::value
                   && !std::is_same<value_t, detail::uncvref_t<ValueType>>::value, int > = 0 >
    JSON_HEDLEY_DEPRECATED_FOR(3.11.0, basic_json::json_pointer or nlohmann::json_pointer<basic_json::string_t>) // NOLINT(readability/alt_tokens)
    ReturnType value(const ::nlohmann::json_pointer<BasicJsonType>& ptr, ValueType && default_value) const
    {
        return value(ptr.convert(), std::forward<ValueType>(default_value));
    }

    /// @brief access the first element
    /// @sa https://json.nlohmann.me/api/basic_json/front/
    reference front()
    {
        return *begin();
    }

    /// @brief access the first element
    /// @sa https://json.nlohmann.me/api/basic_json/front/
    const_reference front() const
    {
        return *cbegin();
    }

    /// @brief access the last element
    /// @sa https://json.nlohmann.me/api/basic_json/back/
    reference back()
    {
        auto tmp = end();
        --tmp;
        return *tmp;
    }

    /// @brief access the last element
    /// @sa https://json.nlohmann.me/api/basic_json/back/
    const_reference back() const
    {
        auto tmp = cend();
        --tmp;
        return *tmp;
    }

    /// @brief remove element given an iterator
    /// @sa https://json.nlohmann.me/api/basic_json/erase/
    template < class IteratorType, detail::enable_if_t <
                   std::is_same<IteratorType, typename basic_json_t::iterator>::value ||
                   std::is_same<IteratorType, typename basic_json_t::const_iterator>::value, int > = 0 >
    IteratorType erase(IteratorType pos)
    {
        // make sure iterator fits the current value
        if (JSON_HEDLEY_UNLIKELY(this != pos.m_object))
        {
            JSON_THROW(invalid_iterator::create(202, "iterator does not fit current value", this));
        }

        IteratorType result = end();

        switch (m_type)
        {
            case value_t::boolean:
            case value_t::number_float:
            case value_t::number_integer:
            case value_t::number_unsigned:
            case value_t::string:
            case value_t::binary:
            {
                if (JSON_HEDLEY_UNLIKELY(!pos.m_it.primitive_iterator.is_begin()))
                {
                    JSON_THROW(invalid_iterator::create(205, "iterator out of range", this));
                }

                if (is_string())
                {
                    AllocatorType<string_t> alloc;
                    std::allocator_traits<decltype(alloc)>::destroy(alloc, m_value.string);
                    std::allocator_traits<decltype(alloc)>::deallocate(alloc, m_value.string, 1);
                    m_value.string = nullptr;
                }
                else if (is_binary())
                {
                    AllocatorType<binary_t> alloc;
                    std::allocator_traits<decltype(alloc)>::destroy(alloc, m_value.binary);
                    std::allocator_traits<decltype(alloc)>::deallocate(alloc, m_value.binary, 1);
                    m_value.binary = nullptr;
                }

                m_type = value_t::null;
                assert_invariant();
                break;
            }

            case value_t::object:
            {
                result.m_it.object_iterator = m_value.object->erase(pos.m_it.object_iterator);
                break;
            }

            case value_t::array:
            {
                result.m_it.array_iterator = m_value.array->erase(pos.m_it.array_iterator);
                break;
            }

            case value_t::null:
            case value_t::discarded:
            default:
                JSON_THROW(type_error::create(307, detail::concat("cannot use erase() with ", type_name()), this));
        }

        return result;
    }

    /// @brief remove elements given an iterator range
    /// @sa https://json.nlohmann.me/api/basic_json/erase/
    template < class IteratorType, detail::enable_if_t <
                   std::is_same<IteratorType, typename basic_json_t::iterator>::value ||
                   std::is_same<IteratorType, typename basic_json_t::const_iterator>::value, int > = 0 >
    IteratorType erase(IteratorType first, IteratorType last)
    {
        // make sure iterator fits the current value
        if (JSON_HEDLEY_UNLIKELY(this != first.m_object || this != last.m_object))
        {
            JSON_THROW(invalid_iterator::create(203, "iterators do not fit current value", this));
        }

        IteratorType result = end();

        switch (m_type)
        {
            case value_t::boolean:
            case value_t::number_float:
            case value_t::number_integer:
            case value_t::number_unsigned:
            case value_t::string:
            case value_t::binary:
            {
                if (JSON_HEDLEY_LIKELY(!first.m_it.primitive_iterator.is_begin()
                                       || !last.m_it.primitive_iterator.is_end()))
                {
                    JSON_THROW(invalid_iterator::create(204, "iterators out of range", this));
                }

                if (is_string())
                {
                    AllocatorType<string_t> alloc;
                    std::allocator_traits<decltype(alloc)>::destroy(alloc, m_value.string);
                    std::allocator_traits<decltype(alloc)>::deallocate(alloc, m_value.string, 1);
                    m_value.string = nullptr;
                }
                else if (is_binary())
                {
                    AllocatorType<binary_t> alloc;
                    std::allocator_traits<decltype(alloc)>::destroy(alloc, m_value.binary);
                    std::allocator_traits<decltype(alloc)>::deallocate(alloc, m_value.binary, 1);
                    m_value.binary = nullptr;
                }

                m_type = value_t::null;
                assert_invariant();
                break;
            }

            case value_t::object:
            {
                result.m_it.object_iterator = m_value.object->erase(first.m_it.object_iterator,
                                              last.m_it.object_iterator);
                break;
            }

            case value_t::array:
            {
                result.m_it.array_iterator = m_value.array->erase(first.m_it.array_iterator,
                                             last.m_it.array_iterator);
                break;
            }

            case value_t::null:
            case value_t::discarded:
            default:
                JSON_THROW(type_error::create(307, detail::concat("cannot use erase() with ", type_name()), this));
        }

        return result;
    }

  private:
    template < typename KeyType, detail::enable_if_t <
                   detail::has_erase_with_key_type<basic_json_t, KeyType>::value, int > = 0 >
    size_type erase_internal(KeyType && key)
    {
        // this erase only works for objects
        if (JSON_HEDLEY_UNLIKELY(!is_object()))
        {
            JSON_THROW(type_error::create(307, detail::concat("cannot use erase() with ", type_name()), this));
        }

        return m_value.object->erase(std::forward<KeyType>(key));
    }

    template < typename KeyType, detail::enable_if_t <
                   !detail::has_erase_with_key_type<basic_json_t, KeyType>::value, int > = 0 >
    size_type erase_internal(KeyType && key)
    {
        // this erase only works for objects
        if (JSON_HEDLEY_UNLIKELY(!is_object()))
        {
            JSON_THROW(type_error::create(307, detail::concat("cannot use erase() with ", type_name()), this));
        }

        const auto it = m_value.object->find(std::forward<KeyType>(key));
        if (it != m_value.object->end())
        {
            m_value.object->erase(it);
            return 1;
        }
        return 0;
    }

  public:

    /// @brief remove element from a JSON object given a key
    /// @sa https://json.nlohmann.me/api/basic_json/erase/
    size_type erase(const typename object_t::key_type& key)
    {
        // the indirection via erase_internal() is added to avoid making this
        // function a template and thus de-rank it during overload resolution
        return erase_internal(key);
    }

    /// @brief remove element from a JSON object given a key
    /// @sa https://json.nlohmann.me/api/basic_json/erase/
    template<class KeyType, detail::enable_if_t<
                 detail::is_usable_as_basic_json_key_type<basic_json_t, KeyType>::value, int> = 0>
    size_type erase(KeyType && key)
    {
        return erase_internal(std::forward<KeyType>(key));
    }

    /// @brief remove element from a JSON array given an index
    /// @sa https://json.nlohmann.me/api/basic_json/erase/
    void erase(const size_type idx)
    {
        // this erase only works for arrays
        if (JSON_HEDLEY_LIKELY(is_array()))
        {
            if (JSON_HEDLEY_UNLIKELY(idx >= size()))
            {
                JSON_THROW(out_of_range::create(401, detail::concat("array index ", std::to_string(idx), " is out of range"), this));
            }

            m_value.array->erase(m_value.array->begin() + static_cast<difference_type>(idx));
        }
        else
        {
            JSON_THROW(type_error::create(307, detail::concat("cannot use erase() with ", type_name()), this));
        }
    }

    /// @}


    ////////////
    // lookup //
    ////////////

    /// @name lookup
    /// @{

    /// @brief find an element in a JSON object
    /// @sa https://json.nlohmann.me/api/basic_json/find/
    iterator find(const typename object_t::key_type& key)
    {
        auto result = end();

        if (is_object())
        {
            result.m_it.object_iterator = m_value.object->find(key);
        }

        return result;
    }

    /// @brief find an element in a JSON object
    /// @sa https://json.nlohmann.me/api/basic_json/find/
    const_iterator find(const typename object_t::key_type& key) const
    {
        auto result = cend();

        if (is_object())
        {
            result.m_it.object_iterator = m_value.object->find(key);
        }

        return result;
    }

    /// @brief find an element in a JSON object
    /// @sa https://json.nlohmann.me/api/basic_json/find/
    template<class KeyType, detail::enable_if_t<
                 detail::is_usable_as_basic_json_key_type<basic_json_t, KeyType>::value, int> = 0>
    iterator find(KeyType && key)
    {
        auto result = end();

        if (is_object())
        {
            result.m_it.object_iterator = m_value.object->find(std::forward<KeyType>(key));
        }

        return result;
    }

    /// @brief find an element in a JSON object
    /// @sa https://json.nlohmann.me/api/basic_json/find/
    template<class KeyType, detail::enable_if_t<
                 detail::is_usable_as_basic_json_key_type<basic_json_t, KeyType>::value, int> = 0>
    const_iterator find(KeyType && key) const
    {
        auto result = cend();

        if (is_object())
        {
            result.m_it.object_iterator = m_value.object->find(std::forward<KeyType>(key));
        }

        return result;
    }

    /// @brief returns the number of occurrences of a key in a JSON object
    /// @sa https://json.nlohmann.me/api/basic_json/count/
    size_type count(const typename object_t::key_type& key) const
    {
        // return 0 for all nonobject types
        return is_object() ? m_value.object->count(key) : 0;
    }

    /// @brief returns the number of occurrences of a key in a JSON object
    /// @sa https://json.nlohmann.me/api/basic_json/count/
    template<class KeyType, detail::enable_if_t<
                 detail::is_usable_as_basic_json_key_type<basic_json_t, KeyType>::value, int> = 0>
    size_type count(KeyType && key) const
    {
        // return 0 for all nonobject types
        return is_object() ? m_value.object->count(std::forward<KeyType>(key)) : 0;
    }

    /// @brief check the existence of an element in a JSON object
    /// @sa https://json.nlohmann.me/api/basic_json/contains/
    bool contains(const typename object_t::key_type& key) const
    {
        return is_object() && m_value.object->find(key) != m_value.object->end();
    }

    /// @brief check the existence of an element in a JSON object
    /// @sa https://json.nlohmann.me/api/basic_json/contains/
    template<class KeyType, detail::enable_if_t<
                 detail::is_usable_as_basic_json_key_type<basic_json_t, KeyType>::value, int> = 0>
    bool contains(KeyType && key) const
    {
        return is_object() && m_value.object->find(std::forward<KeyType>(key)) != m_value.object->end();
    }

    /// @brief check the existence of an element in a JSON object given a JSON pointer
    /// @sa https://json.nlohmann.me/api/basic_json/contains/
    bool contains(const json_pointer& ptr) const
    {
        return ptr.contains(this);
    }

    template<typename BasicJsonType, detail::enable_if_t<detail::is_basic_json<BasicJsonType>::value, int> = 0>
    JSON_HEDLEY_DEPRECATED_FOR(3.11.0, basic_json::json_pointer or nlohmann::json_pointer<basic_json::string_t>) // NOLINT(readability/alt_tokens)
    bool contains(const typename ::nlohmann::json_pointer<BasicJsonType>& ptr) const
    {
        return ptr.contains(this);
    }

    /// @}


    ///////////////
    // iterators //
    ///////////////

    /// @name iterators
    /// @{

    /// @brief returns an iterator to the first element
    /// @sa https://json.nlohmann.me/api/basic_json/begin/
    iterator begin() noexcept
    {
        iterator result(this);
        result.set_begin();
        return result;
    }

    /// @brief returns an iterator to the first element
    /// @sa https://json.nlohmann.me/api/basic_json/begin/
    const_iterator begin() const noexcept
    {
        return cbegin();
    }

    /// @brief returns a const iterator to the first element
    /// @sa https://json.nlohmann.me/api/basic_json/cbegin/
    const_iterator cbegin() const noexcept
    {
        const_iterator result(this);
        result.set_begin();
        return result;
    }

    /// @brief returns an iterator to one past the last element
    /// @sa https://json.nlohmann.me/api/basic_json/end/
    iterator end() noexcept
    {
        iterator result(this);
        result.set_end();
        return result;
    }

    /// @brief returns an iterator to one past the last element
    /// @sa https://json.nlohmann.me/api/basic_json/end/
    const_iterator end() const noexcept
    {
        return cend();
    }

    /// @brief returns an iterator to one past the last element
    /// @sa https://json.nlohmann.me/api/basic_json/cend/
    const_iterator cend() const noexcept
    {
        const_iterator result(this);
        result.set_end();
        return result;
    }

    /// @brief returns an iterator to the reverse-beginning
    /// @sa https://json.nlohmann.me/api/basic_json/rbegin/
    reverse_iterator rbegin() noexcept
    {
        return reverse_iterator(end());
    }

    /// @brief returns an iterator to the reverse-beginning
    /// @sa https://json.nlohmann.me/api/basic_json/rbegin/
    const_reverse_iterator rbegin() const noexcept
    {
        return crbegin();
    }

    /// @brief returns an iterator to the reverse-end
    /// @sa https://json.nlohmann.me/api/basic_json/rend/
    reverse_iterator rend() noexcept
    {
        return reverse_iterator(begin());
    }

    /// @brief returns an iterator to the reverse-end
    /// @sa https://json.nlohmann.me/api/basic_json/rend/
    const_reverse_iterator rend() const noexcept
    {
        return crend();
    }

    /// @brief returns a const reverse iterator to the last element
    /// @sa https://json.nlohmann.me/api/basic_json/crbegin/
    const_reverse_iterator crbegin() const noexcept
    {
        return const_reverse_iterator(cend());
    }

    /// @brief returns a const reverse iterator to one before the first
    /// @sa https://json.nlohmann.me/api/basic_json/crend/
    const_reverse_iterator crend() const noexcept
    {
        return const_reverse_iterator(cbegin());
    }

  public:
    /// @brief wrapper to access iterator member functions in range-based for
    /// @sa https://json.nlohmann.me/api/basic_json/items/
    /// @deprecated This function is deprecated since 3.1.0 and will be removed in
    ///             version 4.0.0 of the library. Please use @ref items() instead;
    ///             that is, replace `json::iterator_wrapper(j)` with `j.items()`.
    JSON_HEDLEY_DEPRECATED_FOR(3.1.0, items())
    static iteration_proxy<iterator> iterator_wrapper(reference ref) noexcept
    {
        return ref.items();
    }

    /// @brief wrapper to access iterator member functions in range-based for
    /// @sa https://json.nlohmann.me/api/basic_json/items/
    /// @deprecated This function is deprecated since 3.1.0 and will be removed in
    ///         version 4.0.0 of the library. Please use @ref items() instead;
    ///         that is, replace `json::iterator_wrapper(j)` with `j.items()`.
    JSON_HEDLEY_DEPRECATED_FOR(3.1.0, items())
    static iteration_proxy<const_iterator> iterator_wrapper(const_reference ref) noexcept
    {
        return ref.items();
    }

    /// @brief helper to access iterator member functions in range-based for
    /// @sa https://json.nlohmann.me/api/basic_json/items/
    iteration_proxy<iterator> items() noexcept
    {
        return iteration_proxy<iterator>(*this);
    }

    /// @brief helper to access iterator member functions in range-based for
    /// @sa https://json.nlohmann.me/api/basic_json/items/
    iteration_proxy<const_iterator> items() const noexcept
    {
        return iteration_proxy<const_iterator>(*this);
    }

    /// @}


    //////////////
    // capacity //
    //////////////

    /// @name capacity
    /// @{

    /// @brief checks whether the container is empty.
    /// @sa https://json.nlohmann.me/api/basic_json/empty/
    bool empty() const noexcept
    {
        switch (m_type)
        {
            case value_t::null:
            {
                // null values are empty
                return true;
            }

            case value_t::array:
            {
                // delegate call to array_t::empty()
                return m_value.array->empty();
            }

            case value_t::object:
            {
                // delegate call to object_t::empty()
                return m_value.object->empty();
            }

            case value_t::string:
            case value_t::boolean:
            case value_t::number_integer:
            case value_t::number_unsigned:
            case value_t::number_float:
            case value_t::binary:
            case value_t::discarded:
            default:
            {
                // all other types are nonempty
                return false;
            }
        }
    }

    /// @brief returns the number of elements
    /// @sa https://json.nlohmann.me/api/basic_json/size/
    size_type size() const noexcept
    {
        switch (m_type)
        {
            case value_t::null:
            {
                // null values are empty
                return 0;
            }

            case value_t::array:
            {
                // delegate call to array_t::size()
                return m_value.array->size();
            }

            case value_t::object:
            {
                // delegate call to object_t::size()
                return m_value.object->size();
            }

            case value_t::string:
            case value_t::boolean:
            case value_t::number_integer:
            case value_t::number_unsigned:
            case value_t::number_float:
            case value_t::binary:
            case value_t::discarded:
            default:
            {
                // all other types have size 1
                return 1;
            }
        }
    }

    /// @brief returns the maximum possible number of elements
    /// @sa https://json.nlohmann.me/api/basic_json/max_size/
    size_type max_size() const noexcept
    {
        switch (m_type)
        {
            case value_t::array:
            {
                // delegate call to array_t::max_size()
                return m_value.array->max_size();
            }

            case value_t::object:
            {
                // delegate call to object_t::max_size()
                return m_value.object->max_size();
            }

            case value_t::null:
            case value_t::string:
            case value_t::boolean:
            case value_t::number_integer:
            case value_t::number_unsigned:
            case value_t::number_float:
            case value_t::binary:
            case value_t::discarded:
            default:
            {
                // all other types have max_size() == size()
                return size();
            }
        }
    }

    /// @}


    ///////////////
    // modifiers //
    ///////////////

    /// @name modifiers
    /// @{

    /// @brief clears the contents
    /// @sa https://json.nlohmann.me/api/basic_json/clear/
    void clear() noexcept
    {
        switch (m_type)
        {
            case value_t::number_integer:
            {
                m_value.number_integer = 0;
                break;
            }

            case value_t::number_unsigned:
            {
                m_value.number_unsigned = 0;
                break;
            }

            case value_t::number_float:
            {
                m_value.number_float = 0.0;
                break;
            }

            case value_t::boolean:
            {
                m_value.boolean = false;
                break;
            }

            case value_t::string:
            {
                m_value.string->clear();
                break;
            }

            case value_t::binary:
            {
                m_value.binary->clear();
                break;
            }

            case value_t::array:
            {
                m_value.array->clear();
                break;
            }

            case value_t::object:
            {
                m_value.object->clear();
                break;
            }

            case value_t::null:
            case value_t::discarded:
            default:
                break;
        }
    }

    /// @brief add an object to an array
    /// @sa https://json.nlohmann.me/api/basic_json/push_back/
    void push_back(basic_json&& val)
    {
        // push_back only works for null objects or arrays
        if (JSON_HEDLEY_UNLIKELY(!(is_null() || is_array())))
        {
            JSON_THROW(type_error::create(308, detail::concat("cannot use push_back() with ", type_name()), this));
        }

        // transform null object into an array
        if (is_null())
        {
            m_type = value_t::array;
            m_value = value_t::array;
            assert_invariant();
        }

        // add element to array (move semantics)
        const auto old_capacity = m_value.array->capacity();
        m_value.array->push_back(std::move(val));
        set_parent(m_value.array->back(), old_capacity);
        // if val is moved from, basic_json move constructor marks it null, so we do not call the destructor
    }

    /// @brief add an object to an array
    /// @sa https://json.nlohmann.me/api/basic_json/operator+=/
    reference operator+=(basic_json&& val)
    {
        push_back(std::move(val));
        return *this;
    }

    /// @brief add an object to an array
    /// @sa https://json.nlohmann.me/api/basic_json/push_back/
    void push_back(const basic_json& val)
    {
        // push_back only works for null objects or arrays
        if (JSON_HEDLEY_UNLIKELY(!(is_null() || is_array())))
        {
            JSON_THROW(type_error::create(308, detail::concat("cannot use push_back() with ", type_name()), this));
        }

        // transform null object into an array
        if (is_null())
        {
            m_type = value_t::array;
            m_value = value_t::array;
            assert_invariant();
        }

        // add element to array
        const auto old_capacity = m_value.array->capacity();
        m_value.array->push_back(val);
        set_parent(m_value.array->back(), old_capacity);
    }

    /// @brief add an object to an array
    /// @sa https://json.nlohmann.me/api/basic_json/operator+=/
    reference operator+=(const basic_json& val)
    {
        push_back(val);
        return *this;
    }

    /// @brief add an object to an object
    /// @sa https://json.nlohmann.me/api/basic_json/push_back/
    void push_back(const typename object_t::value_type& val)
    {
        // push_back only works for null objects or objects
        if (JSON_HEDLEY_UNLIKELY(!(is_null() || is_object())))
        {
            JSON_THROW(type_error::create(308, detail::concat("cannot use push_back() with ", type_name()), this));
        }

        // transform null object into an object
        if (is_null())
        {
            m_type = value_t::object;
            m_value = value_t::object;
            assert_invariant();
        }

        // add element to object
        auto res = m_value.object->insert(val);
        set_parent(res.first->second);
    }

    /// @brief add an object to an object
    /// @sa https://json.nlohmann.me/api/basic_json/operator+=/
    reference operator+=(const typename object_t::value_type& val)
    {
        push_back(val);
        return *this;
    }

    /// @brief add an object to an object
    /// @sa https://json.nlohmann.me/api/basic_json/push_back/
    void push_back(initializer_list_t init)
    {
        if (is_object() && init.size() == 2 && (*init.begin())->is_string())
        {
            basic_json&& key = init.begin()->moved_or_copied();
            push_back(typename object_t::value_type(
                          std::move(key.get_ref<string_t&>()), (init.begin() + 1)->moved_or_copied()));
        }
        else
        {
            push_back(basic_json(init));
        }
    }

    /// @brief add an object to an object
    /// @sa https://json.nlohmann.me/api/basic_json/operator+=/
    reference operator+=(initializer_list_t init)
    {
        push_back(init);
        return *this;
    }

    /// @brief add an object to an array
    /// @sa https://json.nlohmann.me/api/basic_json/emplace_back/
    template<class... Args>
    reference emplace_back(Args&& ... args)
    {
        // emplace_back only works for null objects or arrays
        if (JSON_HEDLEY_UNLIKELY(!(is_null() || is_array())))
        {
            JSON_THROW(type_error::create(311, detail::concat("cannot use emplace_back() with ", type_name()), this));
        }

        // transform null object into an array
        if (is_null())
        {
            m_type = value_t::array;
            m_value = value_t::array;
            assert_invariant();
        }

        // add element to array (perfect forwarding)
        const auto old_capacity = m_value.array->capacity();
        m_value.array->emplace_back(std::forward<Args>(args)...);
        return set_parent(m_value.array->back(), old_capacity);
    }

    /// @brief add an object to an object if key does not exist
    /// @sa https://json.nlohmann.me/api/basic_json/emplace/
    template<class... Args>
    std::pair<iterator, bool> emplace(Args&& ... args)
    {
        // emplace only works for null objects or arrays
        if (JSON_HEDLEY_UNLIKELY(!(is_null() || is_object())))
        {
            JSON_THROW(type_error::create(311, detail::concat("cannot use emplace() with ", type_name()), this));
        }

        // transform null object into an object
        if (is_null())
        {
            m_type = value_t::object;
            m_value = value_t::object;
            assert_invariant();
        }

        // add element to array (perfect forwarding)
        auto res = m_value.object->emplace(std::forward<Args>(args)...);
        set_parent(res.first->second);

        // create result iterator and set iterator to the result of emplace
        auto it = begin();
        it.m_it.object_iterator = res.first;

        // return pair of iterator and boolean
        return {it, res.second};
    }

    /// Helper for insertion of an iterator
    /// @note: This uses std::distance to support GCC 4.8,
    ///        see https://github.com/nlohmann/json/pull/1257
    template<typename... Args>
    iterator insert_iterator(const_iterator pos, Args&& ... args)
    {
        iterator result(this);
        JSON_ASSERT(m_value.array != nullptr);

        auto insert_pos = std::distance(m_value.array->begin(), pos.m_it.array_iterator);
        m_value.array->insert(pos.m_it.array_iterator, std::forward<Args>(args)...);
        result.m_it.array_iterator = m_value.array->begin() + insert_pos;

        // This could have been written as:
        // result.m_it.array_iterator = m_value.array->insert(pos.m_it.array_iterator, cnt, val);
        // but the return value of insert is missing in GCC 4.8, so it is written this way instead.

        set_parents();
        return result;
    }

    /// @brief inserts element into array
    /// @sa https://json.nlohmann.me/api/basic_json/insert/
    iterator insert(const_iterator pos, const basic_json& val)
    {
        // insert only works for arrays
        if (JSON_HEDLEY_LIKELY(is_array()))
        {
            // check if iterator pos fits to this JSON value
            if (JSON_HEDLEY_UNLIKELY(pos.m_object != this))
            {
                JSON_THROW(invalid_iterator::create(202, "iterator does not fit current value", this));
            }

            // insert to array and return iterator
            return insert_iterator(pos, val);
        }

        JSON_THROW(type_error::create(309, detail::concat("cannot use insert() with ", type_name()), this));
    }

    /// @brief inserts element into array
    /// @sa https://json.nlohmann.me/api/basic_json/insert/
    iterator insert(const_iterator pos, basic_json&& val)
    {
        return insert(pos, val);
    }

    /// @brief inserts copies of element into array
    /// @sa https://json.nlohmann.me/api/basic_json/insert/
    iterator insert(const_iterator pos, size_type cnt, const basic_json& val)
    {
        // insert only works for arrays
        if (JSON_HEDLEY_LIKELY(is_array()))
        {
            // check if iterator pos fits to this JSON value
            if (JSON_HEDLEY_UNLIKELY(pos.m_object != this))
            {
                JSON_THROW(invalid_iterator::create(202, "iterator does not fit current value", this));
            }

            // insert to array and return iterator
            return insert_iterator(pos, cnt, val);
        }

        JSON_THROW(type_error::create(309, detail::concat("cannot use insert() with ", type_name()), this));
    }

    /// @brief inserts range of elements into array
    /// @sa https://json.nlohmann.me/api/basic_json/insert/
    iterator insert(const_iterator pos, const_iterator first, const_iterator last)
    {
        // insert only works for arrays
        if (JSON_HEDLEY_UNLIKELY(!is_array()))
        {
            JSON_THROW(type_error::create(309, detail::concat("cannot use insert() with ", type_name()), this));
        }

        // check if iterator pos fits to this JSON value
        if (JSON_HEDLEY_UNLIKELY(pos.m_object != this))
        {
            JSON_THROW(invalid_iterator::create(202, "iterator does not fit current value", this));
        }

        // check if range iterators belong to the same JSON object
        if (JSON_HEDLEY_UNLIKELY(first.m_object != last.m_object))
        {
            JSON_THROW(invalid_iterator::create(210, "iterators do not fit", this));
        }

        if (JSON_HEDLEY_UNLIKELY(first.m_object == this))
        {
            JSON_THROW(invalid_iterator::create(211, "passed iterators may not belong to container", this));
        }

        // insert to array and return iterator
        return insert_iterator(pos, first.m_it.array_iterator, last.m_it.array_iterator);
    }

    /// @brief inserts elements from initializer list into array
    /// @sa https://json.nlohmann.me/api/basic_json/insert/
    iterator insert(const_iterator pos, initializer_list_t ilist)
    {
        // insert only works for arrays
        if (JSON_HEDLEY_UNLIKELY(!is_array()))
        {
            JSON_THROW(type_error::create(309, detail::concat("cannot use insert() with ", type_name()), this));
        }

        // check if iterator pos fits to this JSON value
        if (JSON_HEDLEY_UNLIKELY(pos.m_object != this))
        {
            JSON_THROW(invalid_iterator::create(202, "iterator does not fit current value", this));
        }

        // insert to array and return iterator
        return insert_iterator(pos, ilist.begin(), ilist.end());
    }

    /// @brief inserts range of elements into object
    /// @sa https://json.nlohmann.me/api/basic_json/insert/
    void insert(const_iterator first, const_iterator last)
    {
        // insert only works for objects
        if (JSON_HEDLEY_UNLIKELY(!is_object()))
        {
            JSON_THROW(type_error::create(309, detail::concat("cannot use insert() with ", type_name()), this));
        }

        // check if range iterators belong to the same JSON object
        if (JSON_HEDLEY_UNLIKELY(first.m_object != last.m_object))
        {
            JSON_THROW(invalid_iterator::create(210, "iterators do not fit", this));
        }

        // passed iterators must belong to objects
        if (JSON_HEDLEY_UNLIKELY(!first.m_object->is_object()))
        {
            JSON_THROW(invalid_iterator::create(202, "iterators first and last must point to objects", this));
        }

        m_value.object->insert(first.m_it.object_iterator, last.m_it.object_iterator);
    }

    /// @brief updates a JSON object from another object, overwriting existing keys
    /// @sa https://json.nlohmann.me/api/basic_json/update/
    void update(const_reference j, bool merge_objects = false)
    {
        update(j.begin(), j.end(), merge_objects);
    }

    /// @brief updates a JSON object from another object, overwriting existing keys
    /// @sa https://json.nlohmann.me/api/basic_json/update/
    void update(const_iterator first, const_iterator last, bool merge_objects = false)
    {
        // implicitly convert null value to an empty object
        if (is_null())
        {
            m_type = value_t::object;
            m_value.object = create<object_t>();
            assert_invariant();
        }

        if (JSON_HEDLEY_UNLIKELY(!is_object()))
        {
            JSON_THROW(type_error::create(312, detail::concat("cannot use update() with ", type_name()), this));
        }

        // check if range iterators belong to the same JSON object
        if (JSON_HEDLEY_UNLIKELY(first.m_object != last.m_object))
        {
            JSON_THROW(invalid_iterator::create(210, "iterators do not fit", this));
        }

        // passed iterators must belong to objects
        if (JSON_HEDLEY_UNLIKELY(!first.m_object->is_object()))
        {
            JSON_THROW(type_error::create(312, detail::concat("cannot use update() with ", first.m_object->type_name()), first.m_object));
        }

        for (auto it = first; it != last; ++it)
        {
            if (merge_objects && it.value().is_object())
            {
                auto it2 = m_value.object->find(it.key());
                if (it2 != m_value.object->end())
                {
                    it2->second.update(it.value(), true);
                    continue;
                }
            }
            m_value.object->operator[](it.key()) = it.value();
#if JSON_DIAGNOSTICS
            m_value.object->operator[](it.key()).m_parent = this;
#endif
        }
    }

    /// @brief exchanges the values
    /// @sa https://json.nlohmann.me/api/basic_json/swap/
    void swap(reference other) noexcept (
        std::is_nothrow_move_constructible<value_t>::value&&
        std::is_nothrow_move_assignable<value_t>::value&&
        std::is_nothrow_move_constructible<json_value>::value&&
        std::is_nothrow_move_assignable<json_value>::value
    )
    {
        std::swap(m_type, other.m_type);
        std::swap(m_value, other.m_value);

        set_parents();
        other.set_parents();
        assert_invariant();
    }

    /// @brief exchanges the values
    /// @sa https://json.nlohmann.me/api/basic_json/swap/
    friend void swap(reference left, reference right) noexcept (
        std::is_nothrow_move_constructible<value_t>::value&&
        std::is_nothrow_move_assignable<value_t>::value&&
        std::is_nothrow_move_constructible<json_value>::value&&
        std::is_nothrow_move_assignable<json_value>::value
    )
    {
        left.swap(right);
    }

    /// @brief exchanges the values
    /// @sa https://json.nlohmann.me/api/basic_json/swap/
    void swap(array_t& other) // NOLINT(bugprone-exception-escape)
    {
        // swap only works for arrays
        if (JSON_HEDLEY_LIKELY(is_array()))
        {
            using std::swap;
            swap(*(m_value.array), other);
        }
        else
        {
            JSON_THROW(type_error::create(310, detail::concat("cannot use swap(array_t&) with ", type_name()), this));
        }
    }

    /// @brief exchanges the values
    /// @sa https://json.nlohmann.me/api/basic_json/swap/
    void swap(object_t& other) // NOLINT(bugprone-exception-escape)
    {
        // swap only works for objects
        if (JSON_HEDLEY_LIKELY(is_object()))
        {
            using std::swap;
            swap(*(m_value.object), other);
        }
        else
        {
            JSON_THROW(type_error::create(310, detail::concat("cannot use swap(object_t&) with ", type_name()), this));
        }
    }

    /// @brief exchanges the values
    /// @sa https://json.nlohmann.me/api/basic_json/swap/
    void swap(string_t& other) // NOLINT(bugprone-exception-escape)
    {
        // swap only works for strings
        if (JSON_HEDLEY_LIKELY(is_string()))
        {
            using std::swap;
            swap(*(m_value.string), other);
        }
        else
        {
            JSON_THROW(type_error::create(310, detail::concat("cannot use swap(string_t&) with ", type_name()), this));
        }
    }

    /// @brief exchanges the values
    /// @sa https://json.nlohmann.me/api/basic_json/swap/
    void swap(binary_t& other) // NOLINT(bugprone-exception-escape)
    {
        // swap only works for strings
        if (JSON_HEDLEY_LIKELY(is_binary()))
        {
            using std::swap;
            swap(*(m_value.binary), other);
        }
        else
        {
            JSON_THROW(type_error::create(310, detail::concat("cannot use swap(binary_t&) with ", type_name()), this));
        }
    }

    /// @brief exchanges the values
    /// @sa https://json.nlohmann.me/api/basic_json/swap/
    void swap(typename binary_t::container_type& other) // NOLINT(bugprone-exception-escape)
    {
        // swap only works for strings
        if (JSON_HEDLEY_LIKELY(is_binary()))
        {
            using std::swap;
            swap(*(m_value.binary), other);
        }
        else
        {
            JSON_THROW(type_error::create(310, detail::concat("cannot use swap(binary_t::container_type&) with ", type_name()), this));
        }
    }

    /// @}

    //////////////////////////////////////////
    // lexicographical comparison operators //
    //////////////////////////////////////////

    /// @name lexicographical comparison operators
    /// @{

    // note parentheses around operands are necessary; see
    // https://github.com/nlohmann/json/issues/1530
#define JSON_IMPLEMENT_OPERATOR(op, null_result, unordered_result, default_result)                       \
    const auto lhs_type = lhs.type();                                                                    \
    const auto rhs_type = rhs.type();                                                                    \
    \
    if (lhs_type == rhs_type) /* NOLINT(readability/braces) */                                           \
    {                                                                                                    \
        switch (lhs_type)                                                                                \
        {                                                                                                \
            case value_t::array:                                                                         \
                return (*lhs.m_value.array) op (*rhs.m_value.array);                                     \
                \
            case value_t::object:                                                                        \
                return (*lhs.m_value.object) op (*rhs.m_value.object);                                   \
                \
            case value_t::null:                                                                          \
                return (null_result);                                                                    \
                \
            case value_t::string:                                                                        \
                return (*lhs.m_value.string) op (*rhs.m_value.string);                                   \
                \
            case value_t::boolean:                                                                       \
                return (lhs.m_value.boolean) op (rhs.m_value.boolean);                                   \
                \
            case value_t::number_integer:                                                                \
                return (lhs.m_value.number_integer) op (rhs.m_value.number_integer);                     \
                \
            case value_t::number_unsigned:                                                               \
                return (lhs.m_value.number_unsigned) op (rhs.m_value.number_unsigned);                   \
                \
            case value_t::number_float:                                                                  \
                return (lhs.m_value.number_float) op (rhs.m_value.number_float);                         \
                \
            case value_t::binary:                                                                        \
                return (*lhs.m_value.binary) op (*rhs.m_value.binary);                                   \
                \
            case value_t::discarded:                                                                     \
            default:                                                                                     \
                return (unordered_result);                                                               \
        }                                                                                                \
    }                                                                                                    \
    else if (lhs_type == value_t::number_integer && rhs_type == value_t::number_float)                   \
    {                                                                                                    \
        return static_cast<number_float_t>(lhs.m_value.number_integer) op rhs.m_value.number_float;      \
    }                                                                                                    \
    else if (lhs_type == value_t::number_float && rhs_type == value_t::number_integer)                   \
    {                                                                                                    \
        return lhs.m_value.number_float op static_cast<number_float_t>(rhs.m_value.number_integer);      \
    }                                                                                                    \
    else if (lhs_type == value_t::number_unsigned && rhs_type == value_t::number_float)                  \
    {                                                                                                    \
        return static_cast<number_float_t>(lhs.m_value.number_unsigned) op rhs.m_value.number_float;     \
    }                                                                                                    \
    else if (lhs_type == value_t::number_float && rhs_type == value_t::number_unsigned)                  \
    {                                                                                                    \
        return lhs.m_value.number_float op static_cast<number_float_t>(rhs.m_value.number_unsigned);     \
    }                                                                                                    \
    else if (lhs_type == value_t::number_unsigned && rhs_type == value_t::number_integer)                \
    {                                                                                                    \
        return static_cast<number_integer_t>(lhs.m_value.number_unsigned) op rhs.m_value.number_integer; \
    }                                                                                                    \
    else if (lhs_type == value_t::number_integer && rhs_type == value_t::number_unsigned)                \
    {                                                                                                    \
        return lhs.m_value.number_integer op static_cast<number_integer_t>(rhs.m_value.number_unsigned); \
    }                                                                                                    \
    else if(compares_unordered(lhs, rhs))\
    {\
        return (unordered_result);\
    }\
    \
    return (default_result);

  JSON_PRIVATE_UNLESS_TESTED:
    // returns true if:
    // - any operand is NaN and the other operand is of number type
    // - any operand is discarded
    // in legacy mode, discarded values are considered ordered if
    // an operation is computed as an odd number of inverses of others
    static bool compares_unordered(const_reference lhs, const_reference rhs, bool inverse = false) noexcept
    {
        if ((lhs.is_number_float() && std::isnan(lhs.m_value.number_float) && rhs.is_number())
                || (rhs.is_number_float() && std::isnan(rhs.m_value.number_float) && lhs.is_number()))
        {
            return true;
        }
#if JSON_USE_LEGACY_DISCARDED_VALUE_COMPARISON
        return (lhs.is_discarded() || rhs.is_discarded()) && !inverse;
#else
        static_cast<void>(inverse);
        return lhs.is_discarded() || rhs.is_discarded();
#endif
    }

  private:
    bool compares_unordered(const_reference rhs, bool inverse = false) const noexcept
    {
        return compares_unordered(*this, rhs, inverse);
    }

  public:
#if JSON_HAS_THREE_WAY_COMPARISON
    /// @brief comparison: equal
    /// @sa https://json.nlohmann.me/api/basic_json/operator_eq/
    bool operator==(const_reference rhs) const noexcept
    {
#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wfloat-equal"
#endif
        const_reference lhs = *this;
        JSON_IMPLEMENT_OPERATOR( ==, true, false, false)
#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif
    }

    /// @brief comparison: equal
    /// @sa https://json.nlohmann.me/api/basic_json/operator_eq/
    template<typename ScalarType>
    requires std::is_scalar_v<ScalarType>
    bool operator==(ScalarType rhs) const noexcept
    {
        return *this == basic_json(rhs);
    }

    /// @brief comparison: not equal
    /// @sa https://json.nlohmann.me/api/basic_json/operator_ne/
    bool operator!=(const_reference rhs) const noexcept
    {
        if (compares_unordered(rhs, true))
        {
            return false;
        }
        return !operator==(rhs);
    }

    /// @brief comparison: 3-way
    /// @sa https://json.nlohmann.me/api/basic_json/operator_spaceship/
    std::partial_ordering operator<=>(const_reference rhs) const noexcept // *NOPAD*
    {
        const_reference lhs = *this;
        // default_result is used if we cannot compare values. In that case,
        // we compare types.
        JSON_IMPLEMENT_OPERATOR(<=>, // *NOPAD*
                                std::partial_ordering::equivalent,
                                std::partial_ordering::unordered,
                                lhs_type <=> rhs_type) // *NOPAD*
    }

    /// @brief comparison: 3-way
    /// @sa https://json.nlohmann.me/api/basic_json/operator_spaceship/
    template<typename ScalarType>
    requires std::is_scalar_v<ScalarType>
    std::partial_ordering operator<=>(ScalarType rhs) const noexcept // *NOPAD*
    {
        return *this <=> basic_json(rhs); // *NOPAD*
    }

#if JSON_USE_LEGACY_DISCARDED_VALUE_COMPARISON
    // all operators that are computed as an odd number of inverses of others
    // need to be overloaded to emulate the legacy comparison behavior

    /// @brief comparison: less than or equal
    /// @sa https://json.nlohmann.me/api/basic_json/operator_le/
    JSON_HEDLEY_DEPRECATED_FOR(3.11.0, undef JSON_USE_LEGACY_DISCARDED_VALUE_COMPARISON)
    bool operator<=(const_reference rhs) const noexcept
    {
        if (compares_unordered(rhs, true))
        {
            return false;
        }
        return !(rhs < *this);
    }

    /// @brief comparison: less than or equal
    /// @sa https://json.nlohmann.me/api/basic_json/operator_le/
    template<typename ScalarType>
    requires std::is_scalar_v<ScalarType>
    bool operator<=(ScalarType rhs) const noexcept
    {
        return *this <= basic_json(rhs);
    }

    /// @brief comparison: greater than or equal
    /// @sa https://json.nlohmann.me/api/basic_json/operator_ge/
    JSON_HEDLEY_DEPRECATED_FOR(3.11.0, undef JSON_USE_LEGACY_DISCARDED_VALUE_COMPARISON)
    bool operator>=(const_reference rhs) const noexcept
    {
        if (compares_unordered(rhs, true))
        {
            return false;
        }
        return !(*this < rhs);
    }

    /// @brief comparison: greater than or equal
    /// @sa https://json.nlohmann.me/api/basic_json/operator_ge/
    template<typename ScalarType>
    requires std::is_scalar_v<ScalarType>
    bool operator>=(ScalarType rhs) const noexcept
    {
        return *this >= basic_json(rhs);
    }
#endif
#else
    /// @brief comparison: equal
    /// @sa https://json.nlohmann.me/api/basic_json/operator_eq/
    friend bool operator==(const_reference lhs, const_reference rhs) noexcept
    {
#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wfloat-equal"
#endif
        JSON_IMPLEMENT_OPERATOR( ==, true, false, false)
#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif
    }

    /// @brief comparison: equal
    /// @sa https://json.nlohmann.me/api/basic_json/operator_eq/
    template<typename ScalarType, typename std::enable_if<
                 std::is_scalar<ScalarType>::value, int>::type = 0>
    friend bool operator==(const_reference lhs, ScalarType rhs) noexcept
    {
        return lhs == basic_json(rhs);
    }

    /// @brief comparison: equal
    /// @sa https://json.nlohmann.me/api/basic_json/operator_eq/
    template<typename ScalarType, typename std::enable_if<
                 std::is_scalar<ScalarType>::value, int>::type = 0>
    friend bool operator==(ScalarType lhs, const_reference rhs) noexcept
    {
        return basic_json(lhs) == rhs;
    }

    /// @brief comparison: not equal
    /// @sa https://json.nlohmann.me/api/basic_json/operator_ne/
    friend bool operator!=(const_reference lhs, const_reference rhs) noexcept
    {
        if (compares_unordered(lhs, rhs, true))
        {
            return false;
        }
        return !(lhs == rhs);
    }

    /// @brief comparison: not equal
    /// @sa https://json.nlohmann.me/api/basic_json/operator_ne/
    template<typename ScalarType, typename std::enable_if<
                 std::is_scalar<ScalarType>::value, int>::type = 0>
    friend bool operator!=(const_reference lhs, ScalarType rhs) noexcept
    {
        return lhs != basic_json(rhs);
    }

    /// @brief comparison: not equal
    /// @sa https://json.nlohmann.me/api/basic_json/operator_ne/
    template<typename ScalarType, typename std::enable_if<
                 std::is_scalar<ScalarType>::value, int>::type = 0>
    friend bool operator!=(ScalarType lhs, const_reference rhs) noexcept
    {
        return basic_json(lhs) != rhs;
    }

    /// @brief comparison: less than
    /// @sa https://json.nlohmann.me/api/basic_json/operator_lt/
    friend bool operator<(const_reference lhs, const_reference rhs) noexcept
    {
        // default_result is used if we cannot compare values. In that case,
        // we compare types. Note we have to call the operator explicitly,
        // because MSVC has problems otherwise.
        JSON_IMPLEMENT_OPERATOR( <, false, false, operator<(lhs_type, rhs_type))
    }

    /// @brief comparison: less than
    /// @sa https://json.nlohmann.me/api/basic_json/operator_lt/
    template<typename ScalarType, typename std::enable_if<
                 std::is_scalar<ScalarType>::value, int>::type = 0>
    friend bool operator<(const_reference lhs, ScalarType rhs) noexcept
    {
        return lhs < basic_json(rhs);
    }

    /// @brief comparison: less than
    /// @sa https://json.nlohmann.me/api/basic_json/operator_lt/
    template<typename ScalarType, typename std::enable_if<
                 std::is_scalar<ScalarType>::value, int>::type = 0>
    friend bool operator<(ScalarType lhs, const_reference rhs) noexcept
    {
        return basic_json(lhs) < rhs;
    }

    /// @brief comparison: less than or equal
    /// @sa https://json.nlohmann.me/api/basic_json/operator_le/
    friend bool operator<=(const_reference lhs, const_reference rhs) noexcept
    {
        if (compares_unordered(lhs, rhs, true))
        {
            return false;
        }
        return !(rhs < lhs);
    }

    /// @brief comparison: less than or equal
    /// @sa https://json.nlohmann.me/api/basic_json/operator_le/
    template<typename ScalarType, typename std::enable_if<
                 std::is_scalar<ScalarType>::value, int>::type = 0>
    friend bool operator<=(const_reference lhs, ScalarType rhs) noexcept
    {
        return lhs <= basic_json(rhs);
    }

    /// @brief comparison: less than or equal
    /// @sa https://json.nlohmann.me/api/basic_json/operator_le/
    template<typename ScalarType, typename std::enable_if<
                 std::is_scalar<ScalarType>::value, int>::type = 0>
    friend bool operator<=(ScalarType lhs, const_reference rhs) noexcept
    {
        return basic_json(lhs) <= rhs;
    }

    /// @brief comparison: greater than
    /// @sa https://json.nlohmann.me/api/basic_json/operator_gt/
    friend bool operator>(const_reference lhs, const_reference rhs) noexcept
    {
        // double inverse
        if (compares_unordered(lhs, rhs))
        {
            return false;
        }
        return !(lhs <= rhs);
    }

    /// @brief comparison: greater than
    /// @sa https://json.nlohmann.me/api/basic_json/operator_gt/
    template<typename ScalarType, typename std::enable_if<
                 std::is_scalar<ScalarType>::value, int>::type = 0>
    friend bool operator>(const_reference lhs, ScalarType rhs) noexcept
    {
        return lhs > basic_json(rhs);
    }

    /// @brief comparison: greater than
    /// @sa https://json.nlohmann.me/api/basic_json/operator_gt/
    template<typename ScalarType, typename std::enable_if<
                 std::is_scalar<ScalarType>::value, int>::type = 0>
    friend bool operator>(ScalarType lhs, const_reference rhs) noexcept
    {
        return basic_json(lhs) > rhs;
    }

    /// @brief comparison: greater than or equal
    /// @sa https://json.nlohmann.me/api/basic_json/operator_ge/
    friend bool operator>=(const_reference lhs, const_reference rhs) noexcept
    {
        if (compares_unordered(lhs, rhs, true))
        {
            return false;
        }
        return !(lhs < rhs);
    }

    /// @brief comparison: greater than or equal
    /// @sa https://json.nlohmann.me/api/basic_json/operator_ge/
    template<typename ScalarType, typename std::enable_if<
                 std::is_scalar<ScalarType>::value, int>::type = 0>
    friend bool operator>=(const_reference lhs, ScalarType rhs) noexcept
    {
        return lhs >= basic_json(rhs);
    }

    /// @brief comparison: greater than or equal
    /// @sa https://json.nlohmann.me/api/basic_json/operator_ge/
    template<typename ScalarType, typename std::enable_if<
                 std::is_scalar<ScalarType>::value, int>::type = 0>
    friend bool operator>=(ScalarType lhs, const_reference rhs) noexcept
    {
        return basic_json(lhs) >= rhs;
    }
#endif

#undef JSON_IMPLEMENT_OPERATOR

    /// @}

    ///////////////////
    // serialization //
    ///////////////////

    /// @name serialization
    /// @{
#ifndef JSON_NO_IO
    /// @brief serialize to stream
    /// @sa https://json.nlohmann.me/api/basic_json/operator_ltlt/
    friend std::ostream& operator<<(std::ostream& o, const basic_json& j)
    {
        // read width member and use it as indentation parameter if nonzero
        const bool pretty_print = o.width() > 0;
        const auto indentation = pretty_print ? o.width() : 0;

        // reset width to 0 for subsequent calls to this stream
        o.width(0);

        // do the actual serialization
        serializer s(detail::output_adapter<char>(o), o.fill());
        s.dump(j, pretty_print, false, static_cast<unsigned int>(indentation));
        return o;
    }

    /// @brief serialize to stream
    /// @sa https://json.nlohmann.me/api/basic_json/operator_ltlt/
    /// @deprecated This function is deprecated since 3.0.0 and will be removed in
    ///             version 4.0.0 of the library. Please use
    ///             operator<<(std::ostream&, const basic_json&) instead; that is,
    ///             replace calls like `j >> o;` with `o << j;`.
    JSON_HEDLEY_DEPRECATED_FOR(3.0.0, operator<<(std::ostream&, const basic_json&))
    friend std::ostream& operator>>(const basic_json& j, std::ostream& o)
    {
        return o << j;
    }
#endif  // JSON_NO_IO
    /// @}


    /////////////////////
    // deserialization //
    /////////////////////

    /// @name deserialization
    /// @{

    /// @brief deserialize from a compatible input
    /// @sa https://json.nlohmann.me/api/basic_json/parse/
    template<typename InputType>
    JSON_HEDLEY_WARN_UNUSED_RESULT
    static basic_json parse(InputType&& i,
                            const parser_callback_t cb = nullptr,
                            const bool allow_exceptions = true,
                            const bool ignore_comments = false)
    {
        basic_json result;
        parser(detail::input_adapter(std::forward<InputType>(i)), cb, allow_exceptions, ignore_comments).parse(true, result);
        return result;
    }

    /// @brief deserialize from a pair of character iterators
    /// @sa https://json.nlohmann.me/api/basic_json/parse/
    template<typename IteratorType>
    JSON_HEDLEY_WARN_UNUSED_RESULT
    static basic_json parse(IteratorType first,
                            IteratorType last,
                            const parser_callback_t cb = nullptr,
                            const bool allow_exceptions = true,
                            const bool ignore_comments = false)
    {
        basic_json result;
        parser(detail::input_adapter(std::move(first), std::move(last)), cb, allow_exceptions, ignore_comments).parse(true, result);
        return result;
    }

    JSON_HEDLEY_WARN_UNUSED_RESULT
    JSON_HEDLEY_DEPRECATED_FOR(3.8.0, parse(ptr, ptr + len))
    static basic_json parse(detail::span_input_adapter&& i,
                            const parser_callback_t cb = nullptr,
                            const bool allow_exceptions = true,
                            const bool ignore_comments = false)
    {
        basic_json result;
        parser(i.get(), cb, allow_exceptions, ignore_comments).parse(true, result);
        return result;
    }

    /// @brief check if the input is valid JSON
    /// @sa https://json.nlohmann.me/api/basic_json/accept/
    template<typename InputType>
    static bool accept(InputType&& i,
                       const bool ignore_comments = false)
    {
        return parser(detail::input_adapter(std::forward<InputType>(i)), nullptr, false, ignore_comments).accept(true);
    }

    /// @brief check if the input is valid JSON
    /// @sa https://json.nlohmann.me/api/basic_json/accept/
    template<typename IteratorType>
    static bool accept(IteratorType first, IteratorType last,
                       const bool ignore_comments = false)
    {
        return parser(detail::input_adapter(std::move(first), std::move(last)), nullptr, false, ignore_comments).accept(true);
    }

    JSON_HEDLEY_WARN_UNUSED_RESULT
    JSON_HEDLEY_DEPRECATED_FOR(3.8.0, accept(ptr, ptr + len))
    static bool accept(detail::span_input_adapter&& i,
                       const bool ignore_comments = false)
    {
        return parser(i.get(), nullptr, false, ignore_comments).accept(true);
    }

    /// @brief generate SAX events
    /// @sa https://json.nlohmann.me/api/basic_json/sax_parse/
    template <typename InputType, typename SAX>
    JSON_HEDLEY_NON_NULL(2)
    static bool sax_parse(InputType&& i, SAX* sax,
                          input_format_t format = input_format_t::json,
                          const bool strict = true,
                          const bool ignore_comments = false)
    {
        auto ia = detail::input_adapter(std::forward<InputType>(i));
        return format == input_format_t::json
               ? parser(std::move(ia), nullptr, true, ignore_comments).sax_parse(sax, strict)
               : detail::binary_reader<basic_json, decltype(ia), SAX>(std::move(ia), format).sax_parse(format, sax, strict);
    }

    /// @brief generate SAX events
    /// @sa https://json.nlohmann.me/api/basic_json/sax_parse/
    template<class IteratorType, class SAX>
    JSON_HEDLEY_NON_NULL(3)
    static bool sax_parse(IteratorType first, IteratorType last, SAX* sax,
                          input_format_t format = input_format_t::json,
                          const bool strict = true,
                          const bool ignore_comments = false)
    {
        auto ia = detail::input_adapter(std::move(first), std::move(last));
        return format == input_format_t::json
               ? parser(std::move(ia), nullptr, true, ignore_comments).sax_parse(sax, strict)
               : detail::binary_reader<basic_json, decltype(ia), SAX>(std::move(ia), format).sax_parse(format, sax, strict);
    }

    /// @brief generate SAX events
    /// @sa https://json.nlohmann.me/api/basic_json/sax_parse/
    /// @deprecated This function is deprecated since 3.8.0 and will be removed in
    ///             version 4.0.0 of the library. Please use
    ///             sax_parse(ptr, ptr + len) instead.
    template <typename SAX>
    JSON_HEDLEY_DEPRECATED_FOR(3.8.0, sax_parse(ptr, ptr + len, ...))
    JSON_HEDLEY_NON_NULL(2)
    static bool sax_parse(detail::span_input_adapter&& i, SAX* sax,
                          input_format_t format = input_format_t::json,
                          const bool strict = true,
                          const bool ignore_comments = false)
    {
        auto ia = i.get();
        return format == input_format_t::json
               // NOLINTNEXTLINE(hicpp-move-const-arg,performance-move-const-arg)
               ? parser(std::move(ia), nullptr, true, ignore_comments).sax_parse(sax, strict)
               // NOLINTNEXTLINE(hicpp-move-const-arg,performance-move-const-arg)
               : detail::binary_reader<basic_json, decltype(ia), SAX>(std::move(ia), format).sax_parse(format, sax, strict);
    }
#ifndef JSON_NO_IO
    /// @brief deserialize from stream
    /// @sa https://json.nlohmann.me/api/basic_json/operator_gtgt/
    /// @deprecated This stream operator is deprecated since 3.0.0 and will be removed in
    ///             version 4.0.0 of the library. Please use
    ///             operator>>(std::istream&, basic_json&) instead; that is,
    ///             replace calls like `j << i;` with `i >> j;`.
    JSON_HEDLEY_DEPRECATED_FOR(3.0.0, operator>>(std::istream&, basic_json&))
    friend std::istream& operator<<(basic_json& j, std::istream& i)
    {
        return operator>>(i, j);
    }

    /// @brief deserialize from stream
    /// @sa https://json.nlohmann.me/api/basic_json/operator_gtgt/
    friend std::istream& operator>>(std::istream& i, basic_json& j)
    {
        parser(detail::input_adapter(i)).parse(false, j);
        return i;
    }
#endif  // JSON_NO_IO
    /// @}

    ///////////////////////////
    // convenience functions //
    ///////////////////////////

    /// @brief return the type as string
    /// @sa https://json.nlohmann.me/api/basic_json/type_name/
    JSON_HEDLEY_RETURNS_NON_NULL
    const char* type_name() const noexcept
    {
        switch (m_type)
        {
            case value_t::null:
                return "null";
            case value_t::object:
                return "object";
            case value_t::array:
                return "array";
            case value_t::string:
                return "string";
            case value_t::boolean:
                return "boolean";
            case value_t::binary:
                return "binary";
            case value_t::discarded:
                return "discarded";
            case value_t::number_integer:
            case value_t::number_unsigned:
            case value_t::number_float:
            default:
                return "number";
        }
    }


  JSON_PRIVATE_UNLESS_TESTED:
    //////////////////////
    // member variables //
    //////////////////////

    /// the type of the current element
    value_t m_type = value_t::null;

    /// the value of the current element
    json_value m_value = {};

#if JSON_DIAGNOSTICS
    /// a pointer to a parent value (for debugging purposes)
    basic_json* m_parent = nullptr;
#endif

    //////////////////////////////////////////
    // binary serialization/deserialization //
    //////////////////////////////////////////

    /// @name binary serialization/deserialization support
    /// @{

  public:
    /// @brief create a CBOR serialization of a given JSON value
    /// @sa https://json.nlohmann.me/api/basic_json/to_cbor/
    static std::vector<std::uint8_t> to_cbor(const basic_json& j)
    {
        std::vector<std::uint8_t> result;
        to_cbor(j, result);
        return result;
    }

    /// @brief create a CBOR serialization of a given JSON value
    /// @sa https://json.nlohmann.me/api/basic_json/to_cbor/
    static void to_cbor(const basic_json& j, detail::output_adapter<std::uint8_t> o)
    {
        binary_writer<std::uint8_t>(o).write_cbor(j);
    }

    /// @brief create a CBOR serialization of a given JSON value
    /// @sa https://json.nlohmann.me/api/basic_json/to_cbor/
    static void to_cbor(const basic_json& j, detail::output_adapter<char> o)
    {
        binary_writer<char>(o).write_cbor(j);
    }

    /// @brief create a MessagePack serialization of a given JSON value
    /// @sa https://json.nlohmann.me/api/basic_json/to_msgpack/
    static std::vector<std::uint8_t> to_msgpack(const basic_json& j)
    {
        std::vector<std::uint8_t> result;
        to_msgpack(j, result);
        return result;
    }

    /// @brief create a MessagePack serialization of a given JSON value
    /// @sa https://json.nlohmann.me/api/basic_json/to_msgpack/
    static void to_msgpack(const basic_json& j, detail::output_adapter<std::uint8_t> o)
    {
        binary_writer<std::uint8_t>(o).write_msgpack(j);
    }

    /// @brief create a MessagePack serialization of a given JSON value
    /// @sa https://json.nlohmann.me/api/basic_json/to_msgpack/
    static void to_msgpack(const basic_json& j, detail::output_adapter<char> o)
    {
        binary_writer<char>(o).write_msgpack(j);
    }

    /// @brief create a UBJSON serialization of a given JSON value
    /// @sa https://json.nlohmann.me/api/basic_json/to_ubjson/
    static std::vector<std::uint8_t> to_ubjson(const basic_json& j,
            const bool use_size = false,
            const bool use_type = false)
    {
        std::vector<std::uint8_t> result;
        to_ubjson(j, result, use_size, use_type);
        return result;
    }

    /// @brief create a UBJSON serialization of a given JSON value
    /// @sa https://json.nlohmann.me/api/basic_json/to_ubjson/
    static void to_ubjson(const basic_json& j, detail::output_adapter<std::uint8_t> o,
                          const bool use_size = false, const bool use_type = false)
    {
        binary_writer<std::uint8_t>(o).write_ubjson(j, use_size, use_type);
    }

    /// @brief create a UBJSON serialization of a given JSON value
    /// @sa https://json.nlohmann.me/api/basic_json/to_ubjson/
    static void to_ubjson(const basic_json& j, detail::output_adapter<char> o,
                          const bool use_size = false, const bool use_type = false)
    {
        binary_writer<char>(o).write_ubjson(j, use_size, use_type);
    }

    /// @brief create a BJData serialization of a given JSON value
    /// @sa https://json.nlohmann.me/api/basic_json/to_bjdata/
    static std::vector<std::uint8_t> to_bjdata(const basic_json& j,
            const bool use_size = false,
            const bool use_type = false)
    {
        std::vector<std::uint8_t> result;
        to_bjdata(j, result, use_size, use_type);
        return result;
    }

    /// @brief create a BJData serialization of a given JSON value
    /// @sa https://json.nlohmann.me/api/basic_json/to_bjdata/
    static void to_bjdata(const basic_json& j, detail::output_adapter<std::uint8_t> o,
                          const bool use_size = false, const bool use_type = false)
    {
        binary_writer<std::uint8_t>(o).write_ubjson(j, use_size, use_type, true, true);
    }

    /// @brief create a BJData serialization of a given JSON value
    /// @sa https://json.nlohmann.me/api/basic_json/to_bjdata/
    static void to_bjdata(const basic_json& j, detail::output_adapter<char> o,
                          const bool use_size = false, const bool use_type = false)
    {
        binary_writer<char>(o).write_ubjson(j, use_size, use_type, true, true);
    }

    /// @brief create a BSON serialization of a given JSON value
    /// @sa https://json.nlohmann.me/api/basic_json/to_bson/
    static std::vector<std::uint8_t> to_bson(const basic_json& j)
    {
        std::vector<std::uint8_t> result;
        to_bson(j, result);
        return result;
    }

    /// @brief create a BSON serialization of a given JSON value
    /// @sa https://json.nlohmann.me/api/basic_json/to_bson/
    static void to_bson(const basic_json& j, detail::output_adapter<std::uint8_t> o)
    {
        binary_writer<std::uint8_t>(o).write_bson(j);
    }

    /// @brief create a BSON serialization of a given JSON value
    /// @sa https://json.nlohmann.me/api/basic_json/to_bson/
    static void to_bson(const basic_json& j, detail::output_adapter<char> o)
    {
        binary_writer<char>(o).write_bson(j);
    }

    /// @brief create a JSON value from an input in CBOR format
    /// @sa https://json.nlohmann.me/api/basic_json/from_cbor/
    template<typename InputType>
    JSON_HEDLEY_WARN_UNUSED_RESULT
    static basic_json from_cbor(InputType&& i,
                                const bool strict = true,
                                const bool allow_exceptions = true,
                                const cbor_tag_handler_t tag_handler = cbor_tag_handler_t::error)
    {
        basic_json result;
        detail::json_sax_dom_parser<basic_json> sdp(result, allow_exceptions);
        auto ia = detail::input_adapter(std::forward<InputType>(i));
        const bool res = binary_reader<decltype(ia)>(std::move(ia), input_format_t::cbor).sax_parse(input_format_t::cbor, &sdp, strict, tag_handler);
        return res ? result : basic_json(value_t::discarded);
    }

    /// @brief create a JSON value from an input in CBOR format
    /// @sa https://json.nlohmann.me/api/basic_json/from_cbor/
    template<typename IteratorType>
    JSON_HEDLEY_WARN_UNUSED_RESULT
    static basic_json from_cbor(IteratorType first, IteratorType last,
                                const bool strict = true,
                                const bool allow_exceptions = true,
                                const cbor_tag_handler_t tag_handler = cbor_tag_handler_t::error)
    {
        basic_json result;
        detail::json_sax_dom_parser<basic_json> sdp(result, allow_exceptions);
        auto ia = detail::input_adapter(std::move(first), std::move(last));
        const bool res = binary_reader<decltype(ia)>(std::move(ia), input_format_t::cbor).sax_parse(input_format_t::cbor, &sdp, strict, tag_handler);
        return res ? result : basic_json(value_t::discarded);
    }

    template<typename T>
    JSON_HEDLEY_WARN_UNUSED_RESULT
    JSON_HEDLEY_DEPRECATED_FOR(3.8.0, from_cbor(ptr, ptr + len))
    static basic_json from_cbor(const T* ptr, std::size_t len,
                                const bool strict = true,
                                const bool allow_exceptions = true,
                                const cbor_tag_handler_t tag_handler = cbor_tag_handler_t::error)
    {
        return from_cbor(ptr, ptr + len, strict, allow_exceptions, tag_handler);
    }


    JSON_HEDLEY_WARN_UNUSED_RESULT
    JSON_HEDLEY_DEPRECATED_FOR(3.8.0, from_cbor(ptr, ptr + len))
    static basic_json from_cbor(detail::span_input_adapter&& i,
                                const bool strict = true,
                                const bool allow_exceptions = true,
                                const cbor_tag_handler_t tag_handler = cbor_tag_handler_t::error)
    {
        basic_json result;
        detail::json_sax_dom_parser<basic_json> sdp(result, allow_exceptions);
        auto ia = i.get();
        // NOLINTNEXTLINE(hicpp-move-const-arg,performance-move-const-arg)
        const bool res = binary_reader<decltype(ia)>(std::move(ia), input_format_t::cbor).sax_parse(input_format_t::cbor, &sdp, strict, tag_handler);
        return res ? result : basic_json(value_t::discarded);
    }

    /// @brief create a JSON value from an input in MessagePack format
    /// @sa https://json.nlohmann.me/api/basic_json/from_msgpack/
    template<typename InputType>
    JSON_HEDLEY_WARN_UNUSED_RESULT
    static basic_json from_msgpack(InputType&& i,
                                   const bool strict = true,
                                   const bool allow_exceptions = true)
    {
        basic_json result;
        detail::json_sax_dom_parser<basic_json> sdp(result, allow_exceptions);
        auto ia = detail::input_adapter(std::forward<InputType>(i));
        const bool res = binary_reader<decltype(ia)>(std::move(ia), input_format_t::msgpack).sax_parse(input_format_t::msgpack, &sdp, strict);
        return res ? result : basic_json(value_t::discarded);
    }

    /// @brief create a JSON value from an input in MessagePack format
    /// @sa https://json.nlohmann.me/api/basic_json/from_msgpack/
    template<typename IteratorType>
    JSON_HEDLEY_WARN_UNUSED_RESULT
    static basic_json from_msgpack(IteratorType first, IteratorType last,
                                   const bool strict = true,
                                   const bool allow_exceptions = true)
    {
        basic_json result;
        detail::json_sax_dom_parser<basic_json> sdp(result, allow_exceptions);
        auto ia = detail::input_adapter(std::move(first), std::move(last));
        const bool res = binary_reader<decltype(ia)>(std::move(ia), input_format_t::msgpack).sax_parse(input_format_t::msgpack, &sdp, strict);
        return res ? result : basic_json(value_t::discarded);
    }

    template<typename T>
    JSON_HEDLEY_WARN_UNUSED_RESULT
    JSON_HEDLEY_DEPRECATED_FOR(3.8.0, from_msgpack(ptr, ptr + len))
    static basic_json from_msgpack(const T* ptr, std::size_t len,
                                   const bool strict = true,
                                   const bool allow_exceptions = true)
    {
        return from_msgpack(ptr, ptr + len, strict, allow_exceptions);
    }

    JSON_HEDLEY_WARN_UNUSED_RESULT
    JSON_HEDLEY_DEPRECATED_FOR(3.8.0, from_msgpack(ptr, ptr + len))
    static basic_json from_msgpack(detail::span_input_adapter&& i,
                                   const bool strict = true,
                                   const bool allow_exceptions = true)
    {
        basic_json result;
        detail::json_sax_dom_parser<basic_json> sdp(result, allow_exceptions);
        auto ia = i.get();
        // NOLINTNEXTLINE(hicpp-move-const-arg,performance-move-const-arg)
        const bool res = binary_reader<decltype(ia)>(std::move(ia), input_format_t::msgpack).sax_parse(input_format_t::msgpack, &sdp, strict);
        return res ? result : basic_json(value_t::discarded);
    }

    /// @brief create a JSON value from an input in UBJSON format
    /// @sa https://json.nlohmann.me/api/basic_json/from_ubjson/
    template<typename InputType>
    JSON_HEDLEY_WARN_UNUSED_RESULT
    static basic_json from_ubjson(InputType&& i,
                                  const bool strict = true,
                                  const bool allow_exceptions = true)
    {
        basic_json result;
        detail::json_sax_dom_parser<basic_json> sdp(result, allow_exceptions);
        auto ia = detail::input_adapter(std::forward<InputType>(i));
        const bool res = binary_reader<decltype(ia)>(std::move(ia), input_format_t::ubjson).sax_parse(input_format_t::ubjson, &sdp, strict);
        return res ? result : basic_json(value_t::discarded);
    }

    /// @brief create a JSON value from an input in UBJSON format
    /// @sa https://json.nlohmann.me/api/basic_json/from_ubjson/
    template<typename IteratorType>
    JSON_HEDLEY_WARN_UNUSED_RESULT
    static basic_json from_ubjson(IteratorType first, IteratorType last,
                                  const bool strict = true,
                                  const bool allow_exceptions = true)
    {
        basic_json result;
        detail::json_sax_dom_parser<basic_json> sdp(result, allow_exceptions);
        auto ia = detail::input_adapter(std::move(first), std::move(last));
        const bool res = binary_reader<decltype(ia)>(std::move(ia), input_format_t::ubjson).sax_parse(input_format_t::ubjson, &sdp, strict);
        return res ? result : basic_json(value_t::discarded);
    }

    template<typename T>
    JSON_HEDLEY_WARN_UNUSED_RESULT
    JSON_HEDLEY_DEPRECATED_FOR(3.8.0, from_ubjson(ptr, ptr + len))
    static basic_json from_ubjson(const T* ptr, std::size_t len,
                                  const bool strict = true,
                                  const bool allow_exceptions = true)
    {
        return from_ubjson(ptr, ptr + len, strict, allow_exceptions);
    }

    JSON_HEDLEY_WARN_UNUSED_RESULT
    JSON_HEDLEY_DEPRECATED_FOR(3.8.0, from_ubjson(ptr, ptr + len))
    static basic_json from_ubjson(detail::span_input_adapter&& i,
                                  const bool strict = true,
                                  const bool allow_exceptions = true)
    {
        basic_json result;
        detail::json_sax_dom_parser<basic_json> sdp(result, allow_exceptions);
        auto ia = i.get();
        // NOLINTNEXTLINE(hicpp-move-const-arg,performance-move-const-arg)
        const bool res = binary_reader<decltype(ia)>(std::move(ia), input_format_t::ubjson).sax_parse(input_format_t::ubjson, &sdp, strict);
        return res ? result : basic_json(value_t::discarded);
    }


    /// @brief create a JSON value from an input in BJData format
    /// @sa https://json.nlohmann.me/api/basic_json/from_bjdata/
    template<typename InputType>
    JSON_HEDLEY_WARN_UNUSED_RESULT
    static basic_json from_bjdata(InputType&& i,
                                  const bool strict = true,
                                  const bool allow_exceptions = true)
    {
        basic_json result;
        detail::json_sax_dom_parser<basic_json> sdp(result, allow_exceptions);
        auto ia = detail::input_adapter(std::forward<InputType>(i));
        const bool res = binary_reader<decltype(ia)>(std::move(ia), input_format_t::bjdata).sax_parse(input_format_t::bjdata, &sdp, strict);
        return res ? result : basic_json(value_t::discarded);
    }

    /// @brief create a JSON value from an input in BJData format
    /// @sa https://json.nlohmann.me/api/basic_json/from_bjdata/
    template<typename IteratorType>
    JSON_HEDLEY_WARN_UNUSED_RESULT
    static basic_json from_bjdata(IteratorType first, IteratorType last,
                                  const bool strict = true,
                                  const bool allow_exceptions = true)
    {
        basic_json result;
        detail::json_sax_dom_parser<basic_json> sdp(result, allow_exceptions);
        auto ia = detail::input_adapter(std::move(first), std::move(last));
        const bool res = binary_reader<decltype(ia)>(std::move(ia), input_format_t::bjdata).sax_parse(input_format_t::bjdata, &sdp, strict);
        return res ? result : basic_json(value_t::discarded);
    }

    /// @brief create a JSON value from an input in BSON format
    /// @sa https://json.nlohmann.me/api/basic_json/from_bson/
    template<typename InputType>
    JSON_HEDLEY_WARN_UNUSED_RESULT
    static basic_json from_bson(InputType&& i,
                                const bool strict = true,
                                const bool allow_exceptions = true)
    {
        basic_json result;
        detail::json_sax_dom_parser<basic_json> sdp(result, allow_exceptions);
        auto ia = detail::input_adapter(std::forward<InputType>(i));
        const bool res = binary_reader<decltype(ia)>(std::move(ia), input_format_t::bson).sax_parse(input_format_t::bson, &sdp, strict);
        return res ? result : basic_json(value_t::discarded);
    }

    /// @brief create a JSON value from an input in BSON format
    /// @sa https://json.nlohmann.me/api/basic_json/from_bson/
    template<typename IteratorType>
    JSON_HEDLEY_WARN_UNUSED_RESULT
    static basic_json from_bson(IteratorType first, IteratorType last,
                                const bool strict = true,
                                const bool allow_exceptions = true)
    {
        basic_json result;
        detail::json_sax_dom_parser<basic_json> sdp(result, allow_exceptions);
        auto ia = detail::input_adapter(std::move(first), std::move(last));
        const bool res = binary_reader<decltype(ia)>(std::move(ia), input_format_t::bson).sax_parse(input_format_t::bson, &sdp, strict);
        return res ? result : basic_json(value_t::discarded);
    }

    template<typename T>
    JSON_HEDLEY_WARN_UNUSED_RESULT
    JSON_HEDLEY_DEPRECATED_FOR(3.8.0, from_bson(ptr, ptr + len))
    static basic_json from_bson(const T* ptr, std::size_t len,
                                const bool strict = true,
                                const bool allow_exceptions = true)
    {
        return from_bson(ptr, ptr + len, strict, allow_exceptions);
    }

    JSON_HEDLEY_WARN_UNUSED_RESULT
    JSON_HEDLEY_DEPRECATED_FOR(3.8.0, from_bson(ptr, ptr + len))
    static basic_json from_bson(detail::span_input_adapter&& i,
                                const bool strict = true,
                                const bool allow_exceptions = true)
    {
        basic_json result;
        detail::json_sax_dom_parser<basic_json> sdp(result, allow_exceptions);
        auto ia = i.get();
        // NOLINTNEXTLINE(hicpp-move-const-arg,performance-move-const-arg)
        const bool res = binary_reader<decltype(ia)>(std::move(ia), input_format_t::bson).sax_parse(input_format_t::bson, &sdp, strict);
        return res ? result : basic_json(value_t::discarded);
    }
    /// @}

    //////////////////////////
    // JSON Pointer support //
    //////////////////////////

    /// @name JSON Pointer functions
    /// @{

    /// @brief access specified element via JSON Pointer
    /// @sa https://json.nlohmann.me/api/basic_json/operator%5B%5D/
    reference operator[](const json_pointer& ptr)
    {
        return ptr.get_unchecked(this);
    }

    template<typename BasicJsonType, detail::enable_if_t<detail::is_basic_json<BasicJsonType>::value, int> = 0>
    JSON_HEDLEY_DEPRECATED_FOR(3.11.0, basic_json::json_pointer or nlohmann::json_pointer<basic_json::string_t>) // NOLINT(readability/alt_tokens)
    reference operator[](const ::nlohmann::json_pointer<BasicJsonType>& ptr)
    {
        return ptr.get_unchecked(this);
    }

    /// @brief access specified element via JSON Pointer
    /// @sa https://json.nlohmann.me/api/basic_json/operator%5B%5D/
    const_reference operator[](const json_pointer& ptr) const
    {
        return ptr.get_unchecked(this);
    }

    template<typename BasicJsonType, detail::enable_if_t<detail::is_basic_json<BasicJsonType>::value, int> = 0>
    JSON_HEDLEY_DEPRECATED_FOR(3.11.0, basic_json::json_pointer or nlohmann::json_pointer<basic_json::string_t>) // NOLINT(readability/alt_tokens)
    const_reference operator[](const ::nlohmann::json_pointer<BasicJsonType>& ptr) const
    {
        return ptr.get_unchecked(this);
    }

    /// @brief access specified element via JSON Pointer
    /// @sa https://json.nlohmann.me/api/basic_json/at/
    reference at(const json_pointer& ptr)
    {
        return ptr.get_checked(this);
    }

    template<typename BasicJsonType, detail::enable_if_t<detail::is_basic_json<BasicJsonType>::value, int> = 0>
    JSON_HEDLEY_DEPRECATED_FOR(3.11.0, basic_json::json_pointer or nlohmann::json_pointer<basic_json::string_t>) // NOLINT(readability/alt_tokens)
    reference at(const ::nlohmann::json_pointer<BasicJsonType>& ptr)
    {
        return ptr.get_checked(this);
    }

    /// @brief access specified element via JSON Pointer
    /// @sa https://json.nlohmann.me/api/basic_json/at/
    const_reference at(const json_pointer& ptr) const
    {
        return ptr.get_checked(this);
    }

    template<typename BasicJsonType, detail::enable_if_t<detail::is_basic_json<BasicJsonType>::value, int> = 0>
    JSON_HEDLEY_DEPRECATED_FOR(3.11.0, basic_json::json_pointer or nlohmann::json_pointer<basic_json::string_t>) // NOLINT(readability/alt_tokens)
    const_reference at(const ::nlohmann::json_pointer<BasicJsonType>& ptr) const
    {
        return ptr.get_checked(this);
    }

    /// @brief return flattened JSON value
    /// @sa https://json.nlohmann.me/api/basic_json/flatten/
    basic_json flatten() const
    {
        basic_json result(value_t::object);
        json_pointer::flatten("", *this, result);
        return result;
    }

    /// @brief unflatten a previously flattened JSON value
    /// @sa https://json.nlohmann.me/api/basic_json/unflatten/
    basic_json unflatten() const
    {
        return json_pointer::unflatten(*this);
    }

    /// @}

    //////////////////////////
    // JSON Patch functions //
    //////////////////////////

    /// @name JSON Patch functions
    /// @{

    /// @brief applies a JSON patch in-place without copying the object
    /// @sa https://json.nlohmann.me/api/basic_json/patch/
    void patch_inplace(const basic_json& json_patch)
    {
        basic_json& result = *this;
        // the valid JSON Patch operations
        enum class patch_operations {add, remove, replace, move, copy, test, invalid};

        const auto get_op = [](const std::string & op)
        {
            if (op == "add")
            {
                return patch_operations::add;
            }
            if (op == "remove")
            {
                return patch_operations::remove;
            }
            if (op == "replace")
            {
                return patch_operations::replace;
            }
            if (op == "move")
            {
                return patch_operations::move;
            }
            if (op == "copy")
            {
                return patch_operations::copy;
            }
            if (op == "test")
            {
                return patch_operations::test;
            }

            return patch_operations::invalid;
        };

        // wrapper for "add" operation; add value at ptr
        const auto operation_add = [&result](json_pointer & ptr, basic_json val)
        {
            // adding to the root of the target document means replacing it
            if (ptr.empty())
            {
                result = val;
                return;
            }

            // make sure the top element of the pointer exists
            json_pointer top_pointer = ptr.top();
            if (top_pointer != ptr)
            {
                result.at(top_pointer);
            }

            // get reference to parent of JSON pointer ptr
            const auto last_path = ptr.back();
            ptr.pop_back();
            // parent must exist when performing patch add per RFC6902 specs
            basic_json& parent = result.at(ptr);

            switch (parent.m_type)
            {
                case value_t::null:
                case value_t::object:
                {
                    // use operator[] to add value
                    parent[last_path] = val;
                    break;
                }

                case value_t::array:
                {
                    if (last_path == "-")
                    {
                        // special case: append to back
                        parent.push_back(val);
                    }
                    else
                    {
                        const auto idx = json_pointer::template array_index<basic_json_t>(last_path);
                        if (JSON_HEDLEY_UNLIKELY(idx > parent.size()))
                        {
                            // avoid undefined behavior
                            JSON_THROW(out_of_range::create(401, detail::concat("array index ", std::to_string(idx), " is out of range"), &parent));
                        }

                        // default case: insert add offset
                        parent.insert(parent.begin() + static_cast<difference_type>(idx), val);
                    }
                    break;
                }

                // if there exists a parent it cannot be primitive
                case value_t::string: // LCOV_EXCL_LINE
                case value_t::boolean: // LCOV_EXCL_LINE
                case value_t::number_integer: // LCOV_EXCL_LINE
                case value_t::number_unsigned: // LCOV_EXCL_LINE
                case value_t::number_float: // LCOV_EXCL_LINE
                case value_t::binary: // LCOV_EXCL_LINE
                case value_t::discarded: // LCOV_EXCL_LINE
                default:            // LCOV_EXCL_LINE
                    JSON_ASSERT(false); // NOLINT(cert-dcl03-c,hicpp-static-assert,misc-static-assert) LCOV_EXCL_LINE
            }
        };

        // wrapper for "remove" operation; remove value at ptr
        const auto operation_remove = [this, &result](json_pointer & ptr)
        {
            // get reference to parent of JSON pointer ptr
            const auto last_path = ptr.back();
            ptr.pop_back();
            basic_json& parent = result.at(ptr);

            // remove child
            if (parent.is_object())
            {
                // perform range check
                auto it = parent.find(last_path);
                if (JSON_HEDLEY_LIKELY(it != parent.end()))
                {
                    parent.erase(it);
                }
                else
                {
                    JSON_THROW(out_of_range::create(403, detail::concat("key '", last_path, "' not found"), this));
                }
            }
            else if (parent.is_array())
            {
                // note erase performs range check
                parent.erase(json_pointer::template array_index<basic_json_t>(last_path));
            }
        };

        // type check: top level value must be an array
        if (JSON_HEDLEY_UNLIKELY(!json_patch.is_array()))
        {
            JSON_THROW(parse_error::create(104, 0, "JSON patch must be an array of objects", &json_patch));
        }

        // iterate and apply the operations
        for (const auto& val : json_patch)
        {
            // wrapper to get a value for an operation
            const auto get_value = [&val](const std::string & op,
                                          const std::string & member,
                                          bool string_type) -> basic_json &
            {
                // find value
                auto it = val.m_value.object->find(member);

                // context-sensitive error message
                const auto error_msg = (op == "op") ? "operation" : detail::concat("operation '", op, '\'');

                // check if desired value is present
                if (JSON_HEDLEY_UNLIKELY(it == val.m_value.object->end()))
                {
                    // NOLINTNEXTLINE(performance-inefficient-string-concatenation)
                    JSON_THROW(parse_error::create(105, 0, detail::concat(error_msg, " must have member '", member, "'"), &val));
                }

                // check if result is of type string
                if (JSON_HEDLEY_UNLIKELY(string_type && !it->second.is_string()))
                {
                    // NOLINTNEXTLINE(performance-inefficient-string-concatenation)
                    JSON_THROW(parse_error::create(105, 0, detail::concat(error_msg, " must have string member '", member, "'"), &val));
                }

                // no error: return value
                return it->second;
            };

            // type check: every element of the array must be an object
            if (JSON_HEDLEY_UNLIKELY(!val.is_object()))
            {
                JSON_THROW(parse_error::create(104, 0, "JSON patch must be an array of objects", &val));
            }

            // collect mandatory members
            const auto op = get_value("op", "op", true).template get<std::string>();
            const auto path = get_value(op, "path", true).template get<std::string>();
            json_pointer ptr(path);

            switch (get_op(op))
            {
                case patch_operations::add:
                {
                    operation_add(ptr, get_value("add", "value", false));
                    break;
                }

                case patch_operations::remove:
                {
                    operation_remove(ptr);
                    break;
                }

                case patch_operations::replace:
                {
                    // the "path" location must exist - use at()
                    result.at(ptr) = get_value("replace", "value", false);
                    break;
                }

                case patch_operations::move:
                {
                    const auto from_path = get_value("move", "from", true).template get<std::string>();
                    json_pointer from_ptr(from_path);

                    // the "from" location must exist - use at()
                    basic_json v = result.at(from_ptr);

                    // The move operation is functionally identical to a
                    // "remove" operation on the "from" location, followed
                    // immediately by an "add" operation at the target
                    // location with the value that was just removed.
                    operation_remove(from_ptr);
                    operation_add(ptr, v);
                    break;
                }

                case patch_operations::copy:
                {
                    const auto from_path = get_value("copy", "from", true).template get<std::string>();
                    const json_pointer from_ptr(from_path);

                    // the "from" location must exist - use at()
                    basic_json v = result.at(from_ptr);

                    // The copy is functionally identical to an "add"
                    // operation at the target location using the value
                    // specified in the "from" member.
                    operation_add(ptr, v);
                    break;
                }

                case patch_operations::test:
                {
                    bool success = false;
                    JSON_TRY
                    {
                        // check if "value" matches the one at "path"
                        // the "path" location must exist - use at()
                        success = (result.at(ptr) == get_value("test", "value", false));
                    }
                    JSON_INTERNAL_CATCH (out_of_range&)
                    {
                        // ignore out of range errors: success remains false
                    }

                    // throw an exception if test fails
                    if (JSON_HEDLEY_UNLIKELY(!success))
                    {
                        JSON_THROW(other_error::create(501, detail::concat("unsuccessful: ", val.dump()), &val));
                    }

                    break;
                }

                case patch_operations::invalid:
                default:
                {
                    // op must be "add", "remove", "replace", "move", "copy", or
                    // "test"
                    JSON_THROW(parse_error::create(105, 0, detail::concat("operation value '", op, "' is invalid"), &val));
                }
            }
        }
    }

    /// @brief applies a JSON patch to a copy of the current object
    /// @sa https://json.nlohmann.me/api/basic_json/patch/
    basic_json patch(const basic_json& json_patch) const
    {
        basic_json result = *this;
        result.patch_inplace(json_patch);
        return result;
    }

    /// @brief creates a diff as a JSON patch
    /// @sa https://json.nlohmann.me/api/basic_json/diff/
    JSON_HEDLEY_WARN_UNUSED_RESULT
    static basic_json diff(const basic_json& source, const basic_json& target,
                           const std::string& path = "")
    {
        // the patch
        basic_json result(value_t::array);

        // if the values are the same, return empty patch
        if (source == target)
        {
            return result;
        }

        if (source.type() != target.type())
        {
            // different types: replace value
            result.push_back(
            {
                {"op", "replace"}, {"path", path}, {"value", target}
            });
            return result;
        }

        switch (source.type())
        {
            case value_t::array:
            {
                // first pass: traverse common elements
                std::size_t i = 0;
                while (i < source.size() && i < target.size())
                {
                    // recursive call to compare array values at index i
                    auto temp_diff = diff(source[i], target[i], detail::concat(path, '/', std::to_string(i)));
                    result.insert(result.end(), temp_diff.begin(), temp_diff.end());
                    ++i;
                }

                // We now reached the end of at least one array
                // in a second pass, traverse the remaining elements

                // remove my remaining elements
                const auto end_index = static_cast<difference_type>(result.size());
                while (i < source.size())
                {
                    // add operations in reverse order to avoid invalid
                    // indices
                    result.insert(result.begin() + end_index, object(
                    {
                        {"op", "remove"},
                        {"path", detail::concat(path, '/', std::to_string(i))}
                    }));
                    ++i;
                }

                // add other remaining elements
                while (i < target.size())
                {
                    result.push_back(
                    {
                        {"op", "add"},
                        {"path", detail::concat(path, "/-")},
                        {"value", target[i]}
                    });
                    ++i;
                }

                break;
            }

            case value_t::object:
            {
                // first pass: traverse this object's elements
                for (auto it = source.cbegin(); it != source.cend(); ++it)
                {
                    // escape the key name to be used in a JSON patch
                    const auto path_key = detail::concat(path, '/', detail::escape(it.key()));

                    if (target.find(it.key()) != target.end())
                    {
                        // recursive call to compare object values at key it
                        auto temp_diff = diff(it.value(), target[it.key()], path_key);
                        result.insert(result.end(), temp_diff.begin(), temp_diff.end());
                    }
                    else
                    {
                        // found a key that is not in o -> remove it
                        result.push_back(object(
                        {
                            {"op", "remove"}, {"path", path_key}
                        }));
                    }
                }

                // second pass: traverse other object's elements
                for (auto it = target.cbegin(); it != target.cend(); ++it)
                {
                    if (source.find(it.key()) == source.end())
                    {
                        // found a key that is not in this -> add it
                        const auto path_key = detail::concat(path, '/', detail::escape(it.key()));
                        result.push_back(
                        {
                            {"op", "add"}, {"path", path_key},
                            {"value", it.value()}
                        });
                    }
                }

                break;
            }

            case value_t::null:
            case value_t::string:
            case value_t::boolean:
            case value_t::number_integer:
            case value_t::number_unsigned:
            case value_t::number_float:
            case value_t::binary:
            case value_t::discarded:
            default:
            {
                // both primitive type: replace value
                result.push_back(
                {
                    {"op", "replace"}, {"path", path}, {"value", target}
                });
                break;
            }
        }

        return result;
    }
    /// @}

    ////////////////////////////////
    // JSON Merge Patch functions //
    ////////////////////////////////

    /// @name JSON Merge Patch functions
    /// @{

    /// @brief applies a JSON Merge Patch
    /// @sa https://json.nlohmann.me/api/basic_json/merge_patch/
    void merge_patch(const basic_json& apply_patch)
    {
        if (apply_patch.is_object())
        {
            if (!is_object())
            {
                *this = object();
            }
            for (auto it = apply_patch.begin(); it != apply_patch.end(); ++it)
            {
                if (it.value().is_null())
                {
                    erase(it.key());
                }
                else
                {
                    operator[](it.key()).merge_patch(it.value());
                }
            }
        }
        else
        {
            *this = apply_patch;
        }
    }

    /// @}
};

/// @brief user-defined to_string function for JSON values
/// @sa https://json.nlohmann.me/api/basic_json/to_string/
NLOHMANN_BASIC_JSON_TPL_DECLARATION
std::string to_string(const NLOHMANN_BASIC_JSON_TPL& j)
{
    return j.dump();
}

inline namespace literals
{
inline namespace json_literals
{

/// @brief user-defined string literal for JSON values
/// @sa https://json.nlohmann.me/api/basic_json/operator_literal_json/
JSON_HEDLEY_NON_NULL(1)
inline nlohmann::json operator "" _json(const char* s, std::size_t n)
{
    return nlohmann::json::parse(s, s + n);
}

/// @brief user-defined string literal for JSON pointer
/// @sa https://json.nlohmann.me/api/basic_json/operator_literal_json_pointer/
JSON_HEDLEY_NON_NULL(1)
inline nlohmann::json::json_pointer operator "" _json_pointer(const char* s, std::size_t n)
{
    return nlohmann::json::json_pointer(std::string(s, n));
}

}  // namespace json_literals
}  // namespace literals
NLOHMANN_JSON_NAMESPACE_END

///////////////////////
// nonmember support //
///////////////////////

namespace std // NOLINT(cert-dcl58-cpp)
{

/// @brief hash value for JSON objects
/// @sa https://json.nlohmann.me/api/basic_json/std_hash/
NLOHMANN_BASIC_JSON_TPL_DECLARATION
struct hash<nlohmann::NLOHMANN_BASIC_JSON_TPL>
{
    std::size_t operator()(const nlohmann::NLOHMANN_BASIC_JSON_TPL& j) const
    {
        return nlohmann::detail::hash(j);
    }
};

// specialization for std::less<value_t>
template<>
struct less< ::nlohmann::detail::value_t> // do not remove the space after '<', see https://github.com/nlohmann/json/pull/679
{
    /*!
    @brief compare two value_t enum values
    @since version 3.0.0
    */
    bool operator()(::nlohmann::detail::value_t lhs,
                    ::nlohmann::detail::value_t rhs) const noexcept
    {
#if JSON_HAS_THREE_WAY_COMPARISON
        return std::is_lt(lhs <=> rhs); // *NOPAD*
#else
        return ::nlohmann::detail::operator<(lhs, rhs);
#endif
    }
};

// C++20 prohibit function specialization in the std namespace.
#ifndef JSON_HAS_CPP_20

/// @brief exchanges the values of two JSON objects
/// @sa https://json.nlohmann.me/api/basic_json/std_swap/
NLOHMANN_BASIC_JSON_TPL_DECLARATION
inline void swap(nlohmann::NLOHMANN_BASIC_JSON_TPL& j1, nlohmann::NLOHMANN_BASIC_JSON_TPL& j2) noexcept(  // NOLINT(readability-inconsistent-declaration-parameter-name)
    is_nothrow_move_constructible<nlohmann::NLOHMANN_BASIC_JSON_TPL>::value&&                          // NOLINT(misc-redundant-expression)
    is_nothrow_move_assignable<nlohmann::NLOHMANN_BASIC_JSON_TPL>::value)
{
    j1.swap(j2);
}

#endif

}  // namespace std

#if JSON_USE_GLOBAL_UDLS
    using nlohmann::literals::json_literals::operator "" _json; // NOLINT(misc-unused-using-decls,google-global-names-in-headers)
    using nlohmann::literals::json_literals::operator "" _json_pointer; //NOLINT(misc-unused-using-decls,google-global-names-in-headers)
#endif

// #include <nlohmann/detail/macro_unscope.hpp>
//     __ _____ _____ _____
//  __|  |   __|     |   | |  JSON for Modern C++
// |  |  |__   |  |  | | | |  version 3.11.2
// |_____|_____|_____|_|___|  https://github.com/nlohmann/json
//
// SPDX-FileCopyrightText: 2013-2022 Niels Lohmann <https://nlohmann.me>
// SPDX-License-Identifier: MIT



// restore clang diagnostic settings
#if defined(__clang__)
    #pragma clang diagnostic pop
#endif

// clean up
#undef JSON_ASSERT
#undef JSON_INTERNAL_CATCH
#undef JSON_THROW
#undef JSON_PRIVATE_UNLESS_TESTED
#undef NLOHMANN_BASIC_JSON_TPL_DECLARATION
#undef NLOHMANN_BASIC_JSON_TPL
#undef JSON_EXPLICIT
#undef NLOHMANN_CAN_CALL_STD_FUNC_IMPL
#undef JSON_INLINE_VARIABLE
#undef JSON_NO_UNIQUE_ADDRESS
#undef JSON_DISABLE_ENUM_SERIALIZATION
#undef JSON_USE_GLOBAL_UDLS

#ifndef JSON_TEST_KEEP_MACROS
    #undef JSON_CATCH
    #undef JSON_TRY
    #undef JSON_HAS_CPP_11
    #undef JSON_HAS_CPP_14
    #undef JSON_HAS_CPP_17
    #undef JSON_HAS_CPP_20
    #undef JSON_HAS_FILESYSTEM
    #undef JSON_HAS_EXPERIMENTAL_FILESYSTEM
    #undef JSON_HAS_THREE_WAY_COMPARISON
    #undef JSON_HAS_RANGES
    #undef JSON_USE_LEGACY_DISCARDED_VALUE_COMPARISON
#endif

// #include <nlohmann/thirdparty/hedley/hedley_undef.hpp>
//     __ _____ _____ _____
//  __|  |   __|     |   | |  JSON for Modern C++
// |  |  |__   |  |  | | | |  version 3.11.2
// |_____|_____|_____|_|___|  https://github.com/nlohmann/json
//
// SPDX-FileCopyrightText: 2013-2022 Niels Lohmann <https://nlohmann.me>
// SPDX-License-Identifier: MIT



#undef JSON_HEDLEY_ALWAYS_INLINE
#undef JSON_HEDLEY_ARM_VERSION
#undef JSON_HEDLEY_ARM_VERSION_CHECK
#undef JSON_HEDLEY_ARRAY_PARAM
#undef JSON_HEDLEY_ASSUME
#undef JSON_HEDLEY_BEGIN_C_DECLS
#undef JSON_HEDLEY_CLANG_HAS_ATTRIBUTE
#undef JSON_HEDLEY_CLANG_HAS_BUILTIN
#undef JSON_HEDLEY_CLANG_HAS_CPP_ATTRIBUTE
#undef JSON_HEDLEY_CLANG_HAS_DECLSPEC_DECLSPEC_ATTRIBUTE
#undef JSON_HEDLEY_CLANG_HAS_EXTENSION
#undef JSON_HEDLEY_CLANG_HAS_FEATURE
#undef JSON_HEDLEY_CLANG_HAS_WARNING
#undef JSON_HEDLEY_COMPCERT_VERSION
#undef JSON_HEDLEY_COMPCERT_VERSION_CHECK
#undef JSON_HEDLEY_CONCAT
#undef JSON_HEDLEY_CONCAT3
#undef JSON_HEDLEY_CONCAT3_EX
#undef JSON_HEDLEY_CONCAT_EX
#undef JSON_HEDLEY_CONST
#undef JSON_HEDLEY_CONSTEXPR
#undef JSON_HEDLEY_CONST_CAST
#undef JSON_HEDLEY_CPP_CAST
#undef JSON_HEDLEY_CRAY_VERSION
#undef JSON_HEDLEY_CRAY_VERSION_CHECK
#undef JSON_HEDLEY_C_DECL
#undef JSON_HEDLEY_DEPRECATED
#undef JSON_HEDLEY_DEPRECATED_FOR
#undef JSON_HEDLEY_DIAGNOSTIC_DISABLE_CAST_QUAL
#undef JSON_HEDLEY_DIAGNOSTIC_DISABLE_CPP98_COMPAT_WRAP_
#undef JSON_HEDLEY_DIAGNOSTIC_DISABLE_DEPRECATED
#undef JSON_HEDLEY_DIAGNOSTIC_DISABLE_UNKNOWN_CPP_ATTRIBUTES
#undef JSON_HEDLEY_DIAGNOSTIC_DISABLE_UNKNOWN_PRAGMAS
#undef JSON_HEDLEY_DIAGNOSTIC_DISABLE_UNUSED_FUNCTION
#undef JSON_HEDLEY_DIAGNOSTIC_POP
#undef JSON_HEDLEY_DIAGNOSTIC_PUSH
#undef JSON_HEDLEY_DMC_VERSION
#undef JSON_HEDLEY_DMC_VERSION_CHECK
#undef JSON_HEDLEY_EMPTY_BASES
#undef JSON_HEDLEY_EMSCRIPTEN_VERSION
#undef JSON_HEDLEY_EMSCRIPTEN_VERSION_CHECK
#undef JSON_HEDLEY_END_C_DECLS
#undef JSON_HEDLEY_FLAGS
#undef JSON_HEDLEY_FLAGS_CAST
#undef JSON_HEDLEY_GCC_HAS_ATTRIBUTE
#undef JSON_HEDLEY_GCC_HAS_BUILTIN
#undef JSON_HEDLEY_GCC_HAS_CPP_ATTRIBUTE
#undef JSON_HEDLEY_GCC_HAS_DECLSPEC_ATTRIBUTE
#undef JSON_HEDLEY_GCC_HAS_EXTENSION
#undef JSON_HEDLEY_GCC_HAS_FEATURE
#undef JSON_HEDLEY_GCC_HAS_WARNING
#undef JSON_HEDLEY_GCC_NOT_CLANG_VERSION_CHECK
#undef JSON_HEDLEY_GCC_VERSION
#undef JSON_HEDLEY_GCC_VERSION_CHECK
#undef JSON_HEDLEY_GNUC_HAS_ATTRIBUTE
#undef JSON_HEDLEY_GNUC_HAS_BUILTIN
#undef JSON_HEDLEY_GNUC_HAS_CPP_ATTRIBUTE
#undef JSON_HEDLEY_GNUC_HAS_DECLSPEC_ATTRIBUTE
#undef JSON_HEDLEY_GNUC_HAS_EXTENSION
#undef JSON_HEDLEY_GNUC_HAS_FEATURE
#undef JSON_HEDLEY_GNUC_HAS_WARNING
#undef JSON_HEDLEY_GNUC_VERSION
#undef JSON_HEDLEY_GNUC_VERSION_CHECK
#undef JSON_HEDLEY_HAS_ATTRIBUTE
#undef JSON_HEDLEY_HAS_BUILTIN
#undef JSON_HEDLEY_HAS_CPP_ATTRIBUTE
#undef JSON_HEDLEY_HAS_CPP_ATTRIBUTE_NS
#undef JSON_HEDLEY_HAS_DECLSPEC_ATTRIBUTE
#undef JSON_HEDLEY_HAS_EXTENSION
#undef JSON_HEDLEY_HAS_FEATURE
#undef JSON_HEDLEY_HAS_WARNING
#undef JSON_HEDLEY_IAR_VERSION
#undef JSON_HEDLEY_IAR_VERSION_CHECK
#undef JSON_HEDLEY_IBM_VERSION
#undef JSON_HEDLEY_IBM_VERSION_CHECK
#undef JSON_HEDLEY_IMPORT
#undef JSON_HEDLEY_INLINE
#undef JSON_HEDLEY_INTEL_CL_VERSION
#undef JSON_HEDLEY_INTEL_CL_VERSION_CHECK
#undef JSON_HEDLEY_INTEL_VERSION
#undef JSON_HEDLEY_INTEL_VERSION_CHECK
#undef JSON_HEDLEY_IS_CONSTANT
#undef JSON_HEDLEY_IS_CONSTEXPR_
#undef JSON_HEDLEY_LIKELY
#undef JSON_HEDLEY_MALLOC
#undef JSON_HEDLEY_MCST_LCC_VERSION
#undef JSON_HEDLEY_MCST_LCC_VERSION_CHECK
#undef JSON_HEDLEY_MESSAGE
#undef JSON_HEDLEY_MSVC_VERSION
#undef JSON_HEDLEY_MSVC_VERSION_CHECK
#undef JSON_HEDLEY_NEVER_INLINE
#undef JSON_HEDLEY_NON_NULL
#undef JSON_HEDLEY_NO_ESCAPE
#undef JSON_HEDLEY_NO_RETURN
#undef JSON_HEDLEY_NO_THROW
#undef JSON_HEDLEY_NULL
#undef JSON_HEDLEY_PELLES_VERSION
#undef JSON_HEDLEY_PELLES_VERSION_CHECK
#undef JSON_HEDLEY_PGI_VERSION
#undef JSON_HEDLEY_PGI_VERSION_CHECK
#undef JSON_HEDLEY_PREDICT
#undef JSON_HEDLEY_PRINTF_FORMAT
#undef JSON_HEDLEY_PRIVATE
#undef JSON_HEDLEY_PUBLIC
#undef JSON_HEDLEY_PURE
#undef JSON_HEDLEY_REINTERPRET_CAST
#undef JSON_HEDLEY_REQUIRE
#undef JSON_HEDLEY_REQUIRE_CONSTEXPR
#undef JSON_HEDLEY_REQUIRE_MSG
#undef JSON_HEDLEY_RESTRICT
#undef JSON_HEDLEY_RETURNS_NON_NULL
#undef JSON_HEDLEY_SENTINEL
#undef JSON_HEDLEY_STATIC_ASSERT
#undef JSON_HEDLEY_STATIC_CAST
#undef JSON_HEDLEY_STRINGIFY
#undef JSON_HEDLEY_STRINGIFY_EX
#undef JSON_HEDLEY_SUNPRO_VERSION
#undef JSON_HEDLEY_SUNPRO_VERSION_CHECK
#undef JSON_HEDLEY_TINYC_VERSION
#undef JSON_HEDLEY_TINYC_VERSION_CHECK
#undef JSON_HEDLEY_TI_ARMCL_VERSION
#undef JSON_HEDLEY_TI_ARMCL_VERSION_CHECK
#undef JSON_HEDLEY_TI_CL2000_VERSION
#undef JSON_HEDLEY_TI_CL2000_VERSION_CHECK
#undef JSON_HEDLEY_TI_CL430_VERSION
#undef JSON_HEDLEY_TI_CL430_VERSION_CHECK
#undef JSON_HEDLEY_TI_CL6X_VERSION
#undef JSON_HEDLEY_TI_CL6X_VERSION_CHECK
#undef JSON_HEDLEY_TI_CL7X_VERSION
#undef JSON_HEDLEY_TI_CL7X_VERSION_CHECK
#undef JSON_HEDLEY_TI_CLPRU_VERSION
#undef JSON_HEDLEY_TI_CLPRU_VERSION_CHECK
#undef JSON_HEDLEY_TI_VERSION
#undef JSON_HEDLEY_TI_VERSION_CHECK
#undef JSON_HEDLEY_UNAVAILABLE
#undef JSON_HEDLEY_UNLIKELY
#undef JSON_HEDLEY_UNPREDICTABLE
#undef JSON_HEDLEY_UNREACHABLE
#undef JSON_HEDLEY_UNREACHABLE_RETURN
#undef JSON_HEDLEY_VERSION
#undef JSON_HEDLEY_VERSION_DECODE_MAJOR
#undef JSON_HEDLEY_VERSION_DECODE_MINOR
#undef JSON_HEDLEY_VERSION_DECODE_REVISION
#undef JSON_HEDLEY_VERSION_ENCODE
#undef JSON_HEDLEY_WARNING
#undef JSON_HEDLEY_WARN_UNUSED_RESULT
#undef JSON_HEDLEY_WARN_UNUSED_RESULT_MSG
#undef JSON_HEDLEY_FALL_THROUGH



#endif  // INCLUDE_NLOHMANN_JSON_HPP_


================================================================================
FILE: test_json.cpp
================================================================================

#include "assets/PackageJsonParser.h"
#include "assets/PackageManager.h"
#include <iostream>

int main()
{
    std::cout << "Testing JSON Package System..." << std::endl;

    // Test the JSON parser directly
    Assets::PackageJsonParser parser;
    auto result = parser.loadPackage("assets/packages/TestPackage/package.json");

    if (result.success)
    {
        std::cout << "✅ Successfully loaded JSON package!" << std::endl;
        std::cout << "Package ID: " << result.package.metadata.id << std::endl;
        std::cout << "Package Name: " << result.package.metadata.name << std::endl;
        std::cout << "Version: " << result.package.metadata.version << std::endl;
        std::cout << "Assets count: " << result.package.assets.size() << std::endl;
        std::cout << "Scenes count: " << result.package.scenes.size() << std::endl;

        // List assets
        for (const auto &asset : result.package.assets)
        {
            std::cout << "Asset: " << asset.id << " (type: " << static_cast<int>(asset.type) << ")" << std::endl;
        }

        // List scenes
        for (const auto &scene : result.package.scenes)
        {
            std::cout << "Scene: " << scene.id << " (" << scene.name << ")" << std::endl;
            std::cout << "  Entities: " << scene.entities.size() << std::endl;
        }
    }
    else
    {
        std::cout << "❌ Failed to load JSON package!" << std::endl;
        for (const auto &error : result.errors)
        {
            std::cout << "Error: " << error << std::endl;
        }
    }

    // Test package manager
    std::cout << "\nTesting PackageManager..." << std::endl;
    Assets::PackageManager manager;
    auto discovery = manager.discoverPackages("assets/packages");

    std::cout << "Found " << discovery.packagePaths.size() << " packages:" << std::endl;
    for (const auto &path : discovery.packagePaths)
    {
        std::cout << "  " << path << std::endl;
    }

    return 0;
}
